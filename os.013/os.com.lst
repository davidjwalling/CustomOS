     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.013
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to add a "pciprobe" command that searches the
     8                                  ;                       system for PCI expansion BIOS.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKEYF...        Keyboard status flags
   164                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   165                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   166                                  ;       EMEM...         Memory Management values
   167                                  ;       EMSG...         Message identifers
   168                                  ;
   169                                  ;=======================================================================================================================
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ;
   172                                  ;       Hardware-Defined Values
   173                                  ;
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   178                                  ;
   179                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   180                                  ;       for CGA, EGA, VGA and compatible video modes.
   181                                  ;
   182                                  ;-----------------------------------------------------------------------------------------------------------------------
   183                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   184                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   185                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   186                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   190                                  ;
   191                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   195                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   196                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   197                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   198                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   199                                  ;-----------------------------------------------------------------------------------------------------------------------
   200                                  ;
   201                                  ;       8042 Keyboard Controller                                                EKEYB...
   202                                  ;
   203                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   204                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   205                                  ;
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  EKEYBPORTDATA           equ     060h                                            ;data port
   208                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   209                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   210                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   211                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   212                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   213                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   214                                                                                                                  ;---------------------------------------
   215                                                                                                                  ;       Keyboard Scan Codes
   216                                                                                                                  ;---------------------------------------
   217                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   218                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   219                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   220                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   221                                  EKEYBSLASH              equ     035h                                            ;slash
   222                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   223                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   224                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   225                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   226                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   227                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   228                                  EKEYBUP                 equ     080h                                            ;up
   229                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   230                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   231                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   232                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   233                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   234                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   235                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   236                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   237                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   238                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   239                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   240                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  ;
   243                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   244                                  ;
   245                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   246                                  ;       external devices and signals a hardware interrupt to the CPU.
   247                                  ;
   248                                  ;-----------------------------------------------------------------------------------------------------------------------
   249                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   250                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   251                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   252                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   253                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   254                                  ;-----------------------------------------------------------------------------------------------------------------------
   255                                  ;
   256                                  ;       8253 Programmable Interval Timer                                        EPIT...
   257                                  ;
   258                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   259                                  ;       approximately 18.2 times per second.
   260                                  ;
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  ;
   265                                  ;       x86 CPU Architecture                                                    ;EX86...
   266                                  ;
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   272                                  ;
   273                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  ERTCREGPORT             equ     070h                                            ;register select port
   277                                  ERTCDATAPORT            equ     071h                                            ;data port
   278                                  ERTCSECONDREG           equ     000h                                            ;second
   279                                  ERTCMINUTEREG           equ     002h                                            ;minute
   280                                  ERTCHOURREG             equ     004h                                            ;hour
   281                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   282                                  ERTCDAYREG              equ     007h                                            ;day
   283                                  ERTCMONTHREG            equ     008h                                            ;month
   284                                  ERTCYEARREG             equ     009h                                            ;year of the century
   285                                  ERTCSTATUSREG           equ     00bh                                            ;status
   286                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   287                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   288                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   289                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   290                                  ERTCCENTURYREG          equ     032h                                            ;century
   291                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;
   294                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   295                                  ;
   296                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   297                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   298                                  ;
   299                                  ;       0.......        Segment is not present in memory (triggers int 11)
   300                                  ;       1.......        Segment is present in memory
   301                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   302                                  ;       ...0....        Segment is a system segment
   303                                  ;       ...00010                Local Descriptor Table
   304                                  ;       ...00101                Task Gate
   305                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   306                                  ;       ...01100                Call Gate (386)
   307                                  ;       ...01110                Interrupt Gate (386)
   308                                  ;       ...01111                Trap Gate (386)
   309                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   310                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   311                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   312                                  ;
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   315                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   316                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   317                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   318                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   319                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   320                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   321                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;
   324                                  ;       Firmware-Defined Values
   325                                  ;
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  ;
   329                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   330                                  ;
   331                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   332                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   333                                  ;
   334                                  ;-----------------------------------------------------------------------------------------------------------------------
   335                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   336                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   337                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   338                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   339                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   340                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   341                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   342                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   343                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   344                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   345                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  ;
   348                                  ;       Standards-Based Values
   349                                  ;
   350                                  ;-----------------------------------------------------------------------------------------------------------------------
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;
   353                                  ;       ASCII                                                                   EASCII...
   354                                  ;
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   357                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   358                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   359                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   360                                  EASCIISPACE             equ     020h                                            ;space
   361                                  EASCIIPERIOD            equ     02Eh                                            ;period
   362                                  EASCIIUPPERA            equ     041h                                            ;'A'
   363                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   364                                  EASCIILOWERA            equ     061h                                            ;'a'
   365                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   366                                  EASCIITILDE             equ     07Eh                                            ;'~'
   367                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   368                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   369                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   370                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   371                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   372                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   373                                  EASCIICASE              equ     00100000b                                       ;case bit
   374                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   375                                  ;-----------------------------------------------------------------------------------------------------------------------
   376                                  ;
   377                                  ;       PCI                                                                     EPCI...
   378                                  ;
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  EPCIVENDORAPPLE         equ     106Bh                                           ;Apple
   381                                  EPCIVENDORINTEL         equ     8086h                                           ;Intel
   382                                  EPCIVENDORORACLE        equ     80EEh                                           ;Oracle
   383                                  EPCIAPPLEUSB            equ     003Fh                                           ;USB Controller
   384                                  EPCIINTELPRO1000MT      equ     100Fh                                           ;Pro/1000 MT Ethernet Adapter
   385                                  EPCIINTELPCIMEM         equ     1237h                                           ;PCI & Memory
   386                                  EPCIINTELAD1881         equ     2415h                                           ;Aureal AD1881 SOUNDMAX
   387                                  EPCIINTELPIIX3          equ     7000h                                           ;PIIX3 PCI-to-ISA Bridge (Triton II)
   388                                  EPCIINTEL82371AB        equ     7111h                                           ;82371AB/EB PCI Bus Master IDE Cntrlr
   389                                  EPCIINTELPIIX4          equ     7113h                                           ;PIIX4/4E/4M Power Mgmt Cntrlr
   390                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   391                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   392                                  ;-----------------------------------------------------------------------------------------------------------------------
   393                                  ;
   394                                  ;       Operating System Values
   395                                  ;
   396                                  ;-----------------------------------------------------------------------------------------------------------------------
   397                                  ;-----------------------------------------------------------------------------------------------------------------------
   398                                  ;
   399                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   400                                  ;
   401                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   402                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   403                                  ;
   404                                  ;-----------------------------------------------------------------------------------------------------------------------
   405                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   406                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   407                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   408                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   409                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   410                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   411                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   412                                  ;-----------------------------------------------------------------------------------------------------------------------
   413                                  ;       Console Constants                                                       ECON...
   414                                  ;-----------------------------------------------------------------------------------------------------------------------
   415                                  ECONCOLS                equ     80                                              ;columns per row
   416                                  ECONROWS                equ     24                                              ;console rows
   417                                  ECONOIAROW              equ     24                                              ;operator information area row
   418                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   419                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   420                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   421                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   422                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   423                                  ;-----------------------------------------------------------------------------------------------------------------------
   424                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   425                                  ;-----------------------------------------------------------------------------------------------------------------------
   426                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   427                                  EGDTCGA                 equ     020h                                            ;cga video selector
   428                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   429                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   430                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   431                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   432                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   433                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   434                                  ;-----------------------------------------------------------------------------------------------------------------------
   435                                  ;       Keyboard Flags                                                          EKEYF...
   436                                  ;-----------------------------------------------------------------------------------------------------------------------
   437                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   438                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   439                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   440                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   441                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   442                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   443                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   444                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   445                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   446                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   447                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   448                                  ;-----------------------------------------------------------------------------------------------------------------------
   449                                  ;       Kernel Constants                                                        EKRN...
   450                                  ;-----------------------------------------------------------------------------------------------------------------------
   451                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   452                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   453                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   454                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   455                                  EKRNHEAPSIZE            equ     80000000h                                       ;kernel heap size
   456                                  EKRNHEAPBASE            equ     10000h                                          ;kernel heap base
   457                                  ;-----------------------------------------------------------------------------------------------------------------------
   458                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   459                                  ;-----------------------------------------------------------------------------------------------------------------------
   460                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   461                                  ;-----------------------------------------------------------------------------------------------------------------------
   462                                  ;       Hardware Flags
   463                                  ;-----------------------------------------------------------------------------------------------------------------------
   464                                  EHWETHERNET             equ     80h                                             ;ethernet adapter found
   465                                  ;-----------------------------------------------------------------------------------------------------------------------
   466                                  ;       Memory Management Constants                                             EMEM...
   467                                  ;-----------------------------------------------------------------------------------------------------------------------
   468                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   469                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   470                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   471                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   472                                  ;-----------------------------------------------------------------------------------------------------------------------
   473                                  ;       Message Identifiers                                                     EMSG...
   474                                  ;-----------------------------------------------------------------------------------------------------------------------
   475                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   476                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   477                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   478                                  ;=======================================================================================================================
   479                                  ;
   480                                  ;       Structures
   481                                  ;
   482                                  ;=======================================================================================================================
   483                                  ;-----------------------------------------------------------------------------------------------------------------------
   484                                  ;
   485                                  ;       DATETIME
   486                                  ;
   487                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   488                                  ;
   489                                  ;-----------------------------------------------------------------------------------------------------------------------
   490                                  struc                   DATETIME
   491 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   492 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   493 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   494 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   495 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   496 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   497 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   498 00000007 <res 00000001>          .century                resb    1                                               ;century
   499                                  EDATETIMELEN            equ     ($-.second)
   500                                  endstruc
   501                                  ;-----------------------------------------------------------------------------------------------------------------------
   502                                  ;
   503                                  ;       MEMBLOCK
   504                                  ;
   505                                  ;       The MEMBLOCK structure defines a memory block.
   506                                  ;
   507                                  ;-----------------------------------------------------------------------------------------------------------------------
   508                                  struc                   MEMBLOCK
   509 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   510 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   511 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   512 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   513 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   514 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   515 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   516 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   517                                  EMEMBLOCKLEN            equ     ($-.signature)
   518                                  endstruc
   519                                  ;-----------------------------------------------------------------------------------------------------------------------
   520                                  ;
   521                                  ;       MEMROOT
   522                                  ;
   523                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   524                                  ;
   525                                  ;-----------------------------------------------------------------------------------------------------------------------
   526                                  struc                   MEMROOT
   527 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   528 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   529 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   530 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   531 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   532 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   533                                  EMEMROOTLEN             equ     ($-.firstcontig)
   534                                  endstruc
   535                                  ;-----------------------------------------------------------------------------------------------------------------------
   536                                  ;
   537                                  ;       MQUEUE
   538                                  ;
   539                                  ;       The MQUEUE structure maps memory used for a message queue.
   540                                  ;
   541                                  ;-----------------------------------------------------------------------------------------------------------------------
   542                                  struc                   MQUEUE
   543 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   544 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   545 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   546                                  endstruc
   547                                  ;-----------------------------------------------------------------------------------------------------------------------
   548                                  ;
   549                                  ;       OSDATA
   550                                  ;
   551                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   552                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   553                                  ;
   554                                  ;-----------------------------------------------------------------------------------------------------------------------
   555                                  struc                   OSDATA
   556 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   557 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   558 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   559 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   560 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   561 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   562 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   563 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   564 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   565 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   566 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   567 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   568 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   569 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   570 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   571 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   572 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   573 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   574 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   575 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   576 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   577 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   578 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   579 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   580 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   581 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   582 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   583 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   584 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   585 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   586 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   587 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   588 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   589 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   590 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   591 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   592 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   593 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   594 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   595 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   596 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   597 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   598 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   599 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   600 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   601 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   602 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   603 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   604 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   605 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   606 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   607 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   608 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   609 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   610 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   611 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   612 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   613 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   614 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   615 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   616 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   617 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   618 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   619 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   620 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   621 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   622 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   623 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   624 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   625 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   626 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   627 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   628 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   629 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   630 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   631 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   632 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   633 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   634 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   635 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   636 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   637 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   638 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   639 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   640 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   641 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   642 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   643 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   644 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   645 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   646 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   647 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   648 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   649 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   650 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   651 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   652 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   653 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   654 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   655 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   656 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   657                                  ;-----------------------------------------------------------------------------------------------------------------------
   658                                  ;
   659                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   660                                  ;
   661                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   662                                  ;
   663                                  ;-----------------------------------------------------------------------------------------------------------------------
   664                                  ECONDATA                equ     ($)
   665 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   666 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   667 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   668 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   669 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   670 00000814 <res 00000004>          wdConsolePCISelector    resd    1                                               ;PCI selector (bbbbbbbb dddddfff)
   671                                  wdConsolePCIData        equ     $                                               ;PCI register data value
   672 00000818 <res 00000002>          wwConsolePCIVendor      resw    1                                               ;PCI data vendor
   673 0000081A <res 00000002>          wwConsolePCIChip        resw    1                                               ;PCI data chip
   674 0000081C <res 00000004>          wdConsolePCIVendorStr   resd    1                                               ;PCI vendor name string addr
   675 00000820 <res 00000004>          wdConsolePCIChipStr     resd    1                                               ;PCI device name string addr
   676 00000824 <res 00000004>          wdConsoleEthernetDevice resd    1                                               ;PCI ethernet adapter selector
   677 00000828 <res 00000004>          wdConsoleEthernetMem    resd    1                                               ;PCI ethernet memory mapped i/o address
   678 0000082C <res 00000004>          wdConsoleEthernetPort   resd    1                                               ;PCI ethernet i/o port
   679 00000830 <res 00000004>          wdConsoleEthernetCtrl   resd    1                                               ;PCI ethernet control register value
   680 00000834 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   681 00000835 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   682 00000836 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   683 00000837 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   684 00000838 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   685 00000839 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   686 0000083A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   687 0000083B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   688 0000083C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   689 0000083D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   690 0000083E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   691 0000083F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   692 00000840 <res 00000001>          wbConsolePCIBus         resb    1                                               ;PCI bus
   693 00000841 <res 00000001>          wbConsolePCIDevice      resb    1                                               ;PCI device
   694 00000842 <res 00000001>          wbConsolePCIFunction    resb    1                                               ;PCI function
   695 00000843 <res 00000001>          wbConsoleHWFlags        resb    1                                               ;Hardware Flags
   696 00000844 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   697 00000894 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   698 000008E4 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   699 00000934 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   700 0000093F <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   701 0000094A <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   702 00000955 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   703 0000096D <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   704                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   705                                  ;-----------------------------------------------------------------------------------------------------------------------
   706                                  ;
   707                                  ;       End of OS Variables
   708                                  ;
   709                                  ;-----------------------------------------------------------------------------------------------------------------------
   710                                  endstruc
   711                                  ;-----------------------------------------------------------------------------------------------------------------------
   712                                  ;
   713                                  ;       Macros
   714                                  ;
   715                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   716                                  ;
   717                                  ;-----------------------------------------------------------------------------------------------------------------------
   718                                  %macro                  mint    1
   719                                  _%1                     equ     ($-$$) / EX86DESCLEN
   720                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   721                                  %endmacro
   722                                  %macro                  mtrap   1
   723                                  _%1                     equ     ($-$$) / EX86DESCLEN
   724                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   725                                  %endmacro
   726                                  %macro                  menter  1
   727                                  ?%1                     equ     ($-$$)
   728                                  %endmacro
   729                                  %macro                  tsvce   1
   730                                  e%1                     equ     ($-tsvc)/4
   731                                                          dd      %1
   732                                  %endmacro
   733                                  %ifdef BUILDBOOT
   734                                  ;=======================================================================================================================
   735                                  ;
   736                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   737                                  ;
   738                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   739                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   740                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   741                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   742                                  ;
   743                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   744                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   745                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   746                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   747                                  ;       immediately followed by a disk parameter table.
   748                                  ;
   749                                  ;=======================================================================================================================
   750                                                          cpu     8086                                            ;assume minimal CPU
   751                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   752                                                          bits    16                                              ;16-bit code at power-up
   753                                  %ifdef BUILDPREP
   754                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   755                                  %else
   756                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   757                                  %endif
   758                                  ;-----------------------------------------------------------------------------------------------------------------------
   759                                  ;
   760                                  ;       Disk Parameter Table
   761                                  ;
   762                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   763                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   764                                  ;
   765                                  ;-----------------------------------------------------------------------------------------------------------------------
   766                                                          db      "CustomOS"                                      ;eight-byte label
   767                                  cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   768                                  cbClusterSectors        db      1                                               ;sectors per cluster
   769                                  cwReservedSectors       dw      1                                               ;reserved sectors
   770                                  cbFatCount              db      2                                               ;file allocation table copies
   771                                  cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   772                                  cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   773                                  cbDiskType              db      0F0h                                            ;1.44MB
   774                                  cwFatSectors            dw      9                                               ;sectors per FAT copy
   775                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   776                                  cwTrackSectors          dw      18                                              ;sectors per track (as word)
   777                                  cwDiskSides             dw      2                                               ;sides per disk
   778                                  cwSpecialSectors        dw      0                                               ;special sectors
   779                                  ;
   780                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   781                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   782                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   783                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   784                                  ;       given several possible starting values for CS:IP.
   785                                  ;
   786                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   787                                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   788                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   789                                  .20                     pop     ax                                              ;AX =      7c21     c21    21
   790                                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   791                                                          mov     cl,4                                            ;shift count
   792                                                          shr     ax,cl                                           ;AX =       7c0      c0     0
   793                                                          mov     bx,cs                                           ;BX =         0     700   7c0
   794                                                          add     bx,ax                                           ;BX =       7c0     7c0   7c0
   795                                  ;
   796                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   797                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   798                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   799                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   800                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   801                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   802                                  ;
   803                                                          sub     bx,16                                           ;BX = 07b0
   804                                                          mov     ds,bx                                           ;DS = 07b0 = psp
   805                                                          mov     es,bx                                           ;ES = 07b0 = psp
   806                                                          mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   807                                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   808                                  ;
   809                                  ;       Our boot addressability is now set up according to the following diagram.
   810                                  ;
   811                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   812                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   813                                  ;                               |  256 = 100h bytes                             |
   814                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   815                                  ;                               |  Boot Sector (vstart=0100h)                   |
   816                                  ;                               |  1 sector = 512 = 200h bytes                  |
   817                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   818                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   819                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   820                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   821                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   822                                  ;                               |  2 sectors = 1024 = 400h bytes
   823                                  ;                       009400  +-----------------------------------------------+ DS:1900
   824                                  ;
   825                                  ;       On entry, DL indicates the drive being booted from.
   826                                  ;
   827                                                          mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   828                                  ;
   829                                  ;       Compute directory i/o buffer address.
   830                                  ;
   831                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   832                                                          mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   833                                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   834                                                          mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   835                                  ;
   836                                  ;       Compute segment where os.com will be loaded.
   837                                  ;
   838                                                          shr     ax,cl                                           ;AX = 0150
   839                                                          add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   840                                                          sub     ax,16                                           ;AX = 08f0
   841                                                          mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   842                                  ;
   843                                  ;       Set the video mode to 80 column, 25 row, text.
   844                                  ;
   845                                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   846                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   847                                  ;
   848                                  ;       Write a message to the console so we know we have our addressability established.
   849                                  ;
   850                                                          mov     si,czLoadMsg                                    ;loading message
   851                                                          call    BootPrint                                       ;display loader message
   852                                  ;
   853                                  ;       Initialize the number of directory sectors to search.
   854                                  ;
   855                                                          mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   856                                                          mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   857                                  ;
   858                                  ;       Compute number of directory sectors and initialize overhead count.
   859                                  ;
   860                                                          mov     cx,ax                                           ;CX = 00e0 = 224 entries
   861                                                          mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   862                                                          div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   863                                                          mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   864                                  ;
   865                                  ;       Compute directory entries per sector.
   866                                  ;
   867                                                          xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   868                                                          div     cx                                              ;AX = 0010 = entries per dir sector
   869                                                          mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   870                                  ;
   871                                  ;       Compute first logical directory sector and update overhead count.
   872                                  ;
   873                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   874                                                          mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   875                                                          add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   876                                                          add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   877                                                          mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   878                                                          add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   879                                  ;
   880                                  ;       Read directory sector.
   881                                  ;
   882                                  .30                     mov     al,1                                            ;sector count
   883                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 01
   884                                                          mov     bx,[wwDirBuffer]                                ;BX = 1500
   885                                                          call    ReadSector                                      ;read sector into es:bx
   886                                  ;
   887                                  ;       Setup variables to search this directory sector.
   888                                  ;
   889                                                          mov     ax,[wwEntriesLeft]                              ;directory entries to search
   890                                                          cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   891                                                          jna     .40                                             ;no, continue
   892                                                          mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   893                                  .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   894                                                          mov     si,cbKernelProgram                              ;program name
   895                                                          mov     di,[wwDirBuffer]                                ;DI = 1500
   896                                  ;
   897                                  ;       Loop through directory sectors searching for kernel program.
   898                                  ;
   899                                  .50                     push    si                                              ;save kernel name address
   900                                                          push    di                                              ;save dir i/o buffer address
   901                                                          mov     cx,11                                           ;length of 8+3 name
   902                                                          cld                                                     ;forward strings
   903                                                          repe    cmpsb                                           ;compare entry name
   904                                                          pop     di                                              ;restore dir i/o buffer address
   905                                                          pop     si                                              ;restore kernel name address
   906                                                          je      .60                                             ;exit loop if found
   907                                                          add     di,[cwEntryLen]                                 ;point to next dir entry
   908                                                          dec     ax                                              ;decrement remaining entries
   909                                                          jnz     .50                                             ;next entry
   910                                  ;
   911                                  ;       Repeat search if we are not at the end of the directory.
   912                                  ;
   913                                                          inc     word [wwLogicalSector]                          ;increment logical sector
   914                                                          cmp     word [wwEntriesLeft],0                          ;done with directory?
   915                                                          jne     .30                                             ;no, get next sector
   916                                                          mov     si,czNoKernel                                   ;missing kernel message
   917                                                          jmp     BootExit                                        ;display message and exit
   918                                  ;
   919                                  ;       If we find the kernel program in the directory, read the FAT.
   920                                  ;
   921                                  .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   922                                                          mov     [wwLogicalSector],ax                            ;start past boot sector
   923                                                          mov     ax,[cwFatSectors]                               ;AX = 0009
   924                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 09
   925                                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   926                                                          call    ReadSector                                      ;read FAT into buffer
   927                                  ;
   928                                  ;       Get the starting cluster of the kernel program and target address.
   929                                  ;
   930                                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   931                                                          les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   932                                  ;
   933                                  ;       Read each program cluster into RAM.
   934                                  ;
   935                                  .70                     push    ax                                              ;save cluster nbr
   936                                                          sub     ax,2                                            ;AX = cluster nbr base 0
   937                                                          mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   938                                                          mov     [wbReadCount],cl                                ;save sectors to read
   939                                                          xor     ch,ch                                           ;CX = sectors per cluster
   940                                                          mul     cx                                              ;DX:AX = logical cluster sector
   941                                                          add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   942                                                          mov     [wwLogicalSector],ax                            ;save logical sector nbr
   943                                                          call    ReadSector                                      ;read sectors into ES:BX
   944                                  ;
   945                                  ;       Update buffer pointer for next cluster.
   946                                  ;
   947                                                          mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   948                                                          xor     ah,ah                                           ;AX = sectors per cluster
   949                                                          mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   950                                                          add     bx,ax                                           ;BX = next cluster target address
   951                                                          pop     ax                                              ;AX = restore cluster nbr
   952                                  ;
   953                                  ;       Compute next cluster number.
   954                                  ;
   955                                                          mov     cx,ax                                           ;CX = cluster nbr
   956                                                          mov     di,ax                                           ;DI = cluster nbr
   957                                                          shr     ax,1                                            ;AX = cluster/2
   958                                                          mov     dx,ax                                           ;DX = cluster/2
   959                                                          add     ax,dx                                           ;AX = 2*(cluster/2)
   960                                                          add     ax,dx                                           ;AX = 3*(cluster/2)
   961                                                          and     di,1                                            ;get low bit
   962                                                          add     di,ax                                           ;add one if cluster is odd
   963                                                          add     di,EBOOTFATBASE                                 ;add FAT buffer address
   964                                                          mov     ax,[di]                                         ;get cluster bytes
   965                                  ;
   966                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   967                                  ;
   968                                                          test    cl,1                                            ;is cluster odd?
   969                                                          jz      .80                                             ;no, skip ahead
   970                                                          mov     cl,4                                            ;shift count
   971                                                          shr     ax,cl                                           ;shift nybble low
   972                                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   973                                                          cmp     ax,0FFFh                                        ;end of chain?
   974                                                          jne     .70                                             ;no, continue
   975                                  ;
   976                                  ;       Transfer control to the operating system program.
   977                                  ;
   978                                                          db      0EAh                                            ;jmp seg:offset
   979                                  wwLoadOffset            dw      0100h                                           ;kernel entry offset
   980                                  wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   981                                  ;
   982                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   983                                  ;
   984                                  ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   985                                                          mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   986                                                          mov     cx,ax                                           ;CX = sectors per cylinder
   987                                                          mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   988                                                          div     cx                                              ;AX = cylinder; DX = cyl sector
   989                                                          mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   990                                                          mov     ax,dx                                           ;AX = cyl sector
   991                                                          div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   992                                                          inc     ah                                              ;AH = sector (1,2,3,...)
   993                                                          mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   994                                  ;
   995                                  ;       Try maxtries times to read sector.
   996                                  ;
   997                                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   998                                  .10                     push    bx                                              ;save buffer address
   999                                                          push    cx                                              ;save retry count
  1000                                                          mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1001                                                          mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1002                                                          mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1003                                                          int     EBIOSINTDISKETTE                                ;read sector
  1004                                                          pop     cx                                              ;restore retry count
  1005                                                          pop     bx                                              ;restore buffer address
  1006                                                          jnc     BootReturn                                      ;skip ahead if done
  1007                                                          loop    .10                                             ;retry
  1008                                  ;
  1009                                  ;       Handle disk error: convert to ASCII and store in error string.
  1010                                  ;
  1011                                                          mov     al,ah                                           ;AL = bios error code
  1012                                                          xor     ah,ah                                           ;AX = bios error code
  1013                                                          mov     dl,16                                           ;divisor for base 16
  1014                                                          div     dl                                              ;AL = hi order, AH = lo order
  1015                                                          or      ax,03030h                                       ;apply ASCII zone bits
  1016                                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1017                                                          jb      .20                                             ;continue if numeral
  1018                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1019                                  .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1020                                                          jb      .30                                             ;continue if numeral
  1021                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1022                                  .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1023                                                          mov     si,czErrorMsg                                   ;error message address
  1024                                  BootExit                call    BootPrint                                       ;display messge to console
  1025                                  ;
  1026                                  ;       Wait for a key press.
  1027                                  ;
  1028                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1029                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1030                                                          jnz     .20                                             ;continue if key pressed
  1031                                                          sti                                                     ;enable maskable interrupts
  1032                                                          hlt                                                     ;wait for interrupt
  1033                                                          jmp     .10                                             ;repeat
  1034                                  ;
  1035                                  ;       Reset the system.
  1036                                  ;
  1037                                  .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1038                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1039                                  .30                     sti                                                     ;enable maskable interrupts
  1040                                                          hlt                                                     ;stop until reset, int, nmi
  1041                                                          jmp     .30                                             ;loop until restart kicks in
  1042                                  ;
  1043                                  ;       Display text message.
  1044                                  ;
  1045                                  BootPrint               cld                                                     ;forward strings
  1046                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1047                                                          test    al,al                                           ;end of string?
  1048                                                          jz      BootReturn                                      ;... yes, exit our loop
  1049                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1050                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1051                                                          jmp     .10                                             ;repeat until done
  1052                                  BootReturn              ret                                                     ;return
  1053                                  ;-----------------------------------------------------------------------------------------------------------------------
  1054                                  ;
  1055                                  ;       Constants
  1056                                  ;
  1057                                  ;-----------------------------------------------------------------------------------------------------------------------
  1058                                                          align   2
  1059                                  cwEntryLen              dw      32                                              ;length of directory entry
  1060                                  cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1061                                  czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1062                                  czErrorMsg              db      "Disk error "                                   ;error message
  1063                                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1064                                  czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1065                                  ;-----------------------------------------------------------------------------------------------------------------------
  1066                                  ;
  1067                                  ;       Work Areas
  1068                                  ;
  1069                                  ;-----------------------------------------------------------------------------------------------------------------------
  1070                                                          align   2
  1071                                  wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1072                                  wwEntriesLeft           dw      0                                               ;directory entries to search
  1073                                  wwOverhead              dw      0                                               ;overhead sectors
  1074                                  wwSectorEntries         dw      0                                               ;directory entries per sector
  1075                                  wwLogicalSector         dw      0                                               ;current logical sector
  1076                                  wwReadCountCommand      equ     $                                               ;read count and command
  1077                                  wbReadCount             db      0                                               ;sectors to read
  1078                                  cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1079                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1080                                  wbDrive                 db      0                                               ;drive
  1081                                  wbHead                  db      0                                               ;head
  1082                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1083                                                          db      0                                               ;sector
  1084                                  wbTrack                 db      0                                               ;track
  1085                                                          times   510-($-$$) db 0h                                ;zero fill to end of sector
  1086                                                          db      055h,0AAh                                       ;end of sector signature
  1087                                  %endif
  1088                                  %ifdef BUILDPREP
  1089                                  ;=======================================================================================================================
  1090                                  ;
  1091                                  ;       Diskette Preparation Code
  1092                                  ;
  1093                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1094                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1095                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1096                                  ;
  1097                                  ;=======================================================================================================================
  1098                                  ;
  1099                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1100                                  ;
  1101                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1102                                                          call    BootPrint                                       ;display message
  1103                                  ;
  1104                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1105                                  ;
  1106                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1107                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1108                                                          jnz     .20                                             ;continue if key pressed
  1109                                                          sti                                                     ;enable interrupts
  1110                                                          hlt                                                     ;wait for interrupt
  1111                                                          jmp     .10                                             ;repeat
  1112                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1113                                                          je      .30                                             ;yes, branch
  1114                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1115                                                          jne     .10                                             ;no, repeat
  1116                                                          jmp     .120                                            ;yes, exit program
  1117                                  ;
  1118                                  ;       Display writing-sector message and patch the JMP instruction.
  1119                                  ;
  1120                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1121                                                          call    BootPrint                                       ;display message
  1122                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1123                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1124                                                          mov     [bx],ax                                         ;update the JMP instruction
  1125                                  ;
  1126                                  ;       Try to read the boot sector.
  1127                                  ;
  1128                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1129                                  .40                     push    cx                                              ;save remaining tries
  1130                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1131                                                          mov     dx,0                                            ;head zero, drive zero
  1132                                                          mov     cx,1                                            ;track zero, sector one
  1133                                                          mov     al,1                                            ;one sector
  1134                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1135                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1136                                                          pop     cx                                              ;restore remaining retries
  1137                                                          jnc     .50                                             ;skip ahead if successful
  1138                                                          loop    .40                                             ;try again
  1139                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1140                                                          jmp     .70                                             ;branch to error routine
  1141                                  ;
  1142                                  ;       Copy diskette parms from input buffer to output buffer.
  1143                                  ;
  1144                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1145                                                          add     si,11                                           ;skip over JMP and system ID
  1146                                                          mov     di,Boot                                         ;output buffer address
  1147                                                          add     di,11                                           ;skip over JMP and system ID
  1148                                                          mov     cx,19                                           ;length of diskette parameters
  1149                                                          cld                                                     ;forward string copies
  1150                                                          rep     movsb                                           ;copy diskette parameters
  1151                                  ;
  1152                                  ;       Try to write boot sector to diskette.
  1153                                  ;
  1154                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1155                                  .60                     push    cx                                              ;save remaining tries
  1156                                                          mov     bx,Boot                                         ;output buffer address
  1157                                                          mov     dx,0                                            ;head zero, drive zero
  1158                                                          mov     cx,1                                            ;track zero, sector one
  1159                                                          mov     al,1                                            ;one sector
  1160                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1161                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1162                                                          pop     cx                                              ;restore remaining retries
  1163                                                          jnc     .100                                            ;skip ahead if successful
  1164                                                          loop    .60                                             ;try again
  1165                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1166                                  ;
  1167                                  ;       Convert the error code to ASCII and display the error message.
  1168                                  ;
  1169                                  .70                     push    ax                                              ;save error code
  1170                                                          mov     al,ah                                           ;copy error code
  1171                                                          mov     ah,0                                            ;AX = error code
  1172                                                          mov     dl,10h                                          ;hexadecimal divisor
  1173                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1174                                                          or      ax,03030h                                       ;add ASCII zone digits
  1175                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1176                                                          jb      .80                                             ;yes, continue
  1177                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1178                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1179                                                          jb      .90                                             ;yes, continue
  1180                                                          add     al,7                                            ;no, make ASCII
  1181                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1182                                                          call    BootPrint                                       ;write error message
  1183                                                          pop     ax                                              ;restore error code
  1184                                  ;
  1185                                  ;       Display the completion message.
  1186                                  ;
  1187                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1188                                                          mov     al,ah                                           ;BIOS return code
  1189                                                          cmp     al,0                                            ;success?
  1190                                                          je      .110                                            ;yes, continue
  1191                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1192                                                          cmp     al,1                                            ;disk parameter error?
  1193                                                          je      .110                                            ;yes, continue
  1194                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1195                                                          cmp     al,2                                            ;address mark not found?
  1196                                                          je      .110                                            ;yes, continue
  1197                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1198                                                          cmp     al,3                                            ;protected disk?
  1199                                                          je      .110                                            ;yes, continue
  1200                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1201                                                          cmp     al,6                                            ;diskette removed?
  1202                                                          je      .110                                            ;yes, continue
  1203                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1204                                                          cmp     al,80H                                          ;drive timed out?
  1205                                                          je      .110                                            ;yes, continue
  1206                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1207                                  .110                    call    BootPrint                                       ;display result message
  1208                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1209                                                          int     021h                                            ;terminate DOS program
  1210                                                          ret                                                     ;return (should not execute)
  1211                                  ;-----------------------------------------------------------------------------------------------------------------------
  1212                                  ;
  1213                                  ;       Diskette Preparation Messages
  1214                                  ;
  1215                                  ;-----------------------------------------------------------------------------------------------------------------------
  1216                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1217                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1218                                                          db      13,10
  1219                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1220                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1221                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1222                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1223                                                          db      13,10,0
  1224                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1225                                                          db      13,10,0
  1226                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1227                                                          db      13,10,0
  1228                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1229                                                          db      13,10,0
  1230                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1231                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1232                                                          db      13,10,0
  1233                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1234                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1235                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1236                                                          db      13,10,"and retry."
  1237                                                          db      13,10,0
  1238                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1239                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1240                                                          db      13,10,"using another diskette."
  1241                                                          db      13,10,0
  1242                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1243                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1244                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1245                                                          db      13,10,0
  1246                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1247                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1248                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1249                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1250                                                          db      13,10,"is properly inserted in the diskette drive."
  1251                                                          db      13,10,0
  1252                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1253                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1254                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1255                                                          db      13,10,0
  1256                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1257                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1258                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1259                                                          db      13,10,0
  1260                                  wcPrepInBuf             equ     $
  1261                                  %endif
  1262                                  %ifdef BUILDDISK
  1263                                  ;=======================================================================================================================
  1264                                  ;
  1265                                  ;       File Allocation Tables
  1266                                  ;
  1267                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1268                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1269                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1270                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1271                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1272                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1273                                  ;       the last cluster in the chain.
  1274                                  ;
  1275                                  ;       Every three bytes encode two FAT entries as follows:
  1276                                  ;
  1277                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1278                                  ;
  1279                                  ;=======================================================================================================================
  1280                                  ;-----------------------------------------------------------------------------------------------------------------------
  1281                                  ;
  1282                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1283                                  ;
  1284                                  ;-----------------------------------------------------------------------------------------------------------------------
  1285                                  section                 fat1                                                    ;first copy of FAT
  1286                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1287                                                          db      005h,060h,000h, 007h,080h,000h
  1288                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1289                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1290                                                          db      011h,020h,001h, 013h,040h,001h
  1291                                                          db      015h,060h,001h, 017h,080h,001h
  1292                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1293                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1294                                                          db      021h,020h,002h, 023h,040h,002h
  1295                                                          db      025h,060h,002h, 027h,080h,002h
  1296                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1297                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1298                                  ;-----------------------------------------------------------------------------------------------------------------------
  1299                                  ;
  1300                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1301                                  ;
  1302                                  ;-----------------------------------------------------------------------------------------------------------------------
  1303                                  section                 fat2                                                    ;second copy of FAT
  1304                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1305                                                          db      005h,060h,000h, 007h,080h,000h
  1306                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1307                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1308                                                          db      011h,020h,001h, 013h,040h,001h
  1309                                                          db      015h,060h,001h, 017h,080h,001h
  1310                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1311                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1312                                                          db      021h,020h,002h, 023h,040h,002h
  1313                                                          db      025h,060h,002h, 027h,080h,002h
  1314                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1315                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1316                                  ;-----------------------------------------------------------------------------------------------------------------------
  1317                                  ;
  1318                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1319                                  ;
  1320                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1321                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1322                                  ;       copy.
  1323                                  ;
  1324                                  ;-----------------------------------------------------------------------------------------------------------------------
  1325                                  section                 dir                                                     ;diskette directory
  1326                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1327                                                          db      020h                                            ;attribute (archive bit set)
  1328                                                          times   10 db 0                                         ;unused
  1329                                                          dw      0h                                              ;time
  1330                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1331                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1332                                                          dw      2                                               ;first cluster
  1333                                                          dd      05400h                                          ;file size
  1334                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1335                                  %endif
  1336                                  %ifdef BUILDCOM
  1337                                  ;=======================================================================================================================
  1338                                  ;
  1339                                  ;       OS.COM
  1340                                  ;
  1341                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1342                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1343                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1344                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1345                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1346                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1347                                  ;
  1348                                  ;       Our loader addressability is set up according to the following diagram.
  1349                                  ;
  1350                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1351                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1352                                  ;                               |  256 = 100h bytes                             |
  1353                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1354                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1355                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1356                                  ;                       007e00  +-----------------------------------------------+
  1357                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1358                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1359                                  ;                               |                                               |
  1360                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1361                                  ;                               |                                               |
  1362                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1363                                  ;                               |  Loader Code                                  |
  1364                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1365                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1366                                  ;
  1367                                  ;=======================================================================================================================
  1368                                  ;-----------------------------------------------------------------------------------------------------------------------
  1369                                  ;
  1370                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1371                                  ;
  1372                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1373                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1374                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1375                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1376                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1377                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1378                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1379                                  ;       registers.
  1380                                  ;
  1381                                  ;-----------------------------------------------------------------------------------------------------------------------
  1382                                                          cpu     8086                                            ;assume minimal CPU
  1383                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1384                                                          bits    16                                              ;this is 16-bit code
  1385 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1386 00000001 1F                                              pop     ds                                              ;...as our data segment
  1387 00000002 0E                                              push    cs                                              ;use the code segment
  1388 00000003 07                                              pop     es                                              ;...as our extra segment
  1389                                  ;
  1390                                  ;       Write a message to the console so we know we have our addressability established.
  1391                                  ;
  1392 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1393 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1394                                  ;
  1395                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1396                                  ;
  1397 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1398 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1399 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1400 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1401                                                          cpu     386                                             ;allow 80386 instructions
  1402 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1403 00000017 E89600                                          call    PutTTYString                                    ;display message
  1404                                  ;
  1405                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1406                                  ;
  1407 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1408 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1409 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1410 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1411 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1412 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1413 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1414 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1415 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1416 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1417                                  ;
  1418                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1419                                  ;
  1420 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1421 00000038 07                                              pop     es                                              ;... as target segment
  1422 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1423 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1424 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1425 00000041 FC                                              cld                                                     ;forward strings
  1426 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1427 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1428 00000047 E86600                                          call    PutTTYString                                    ;display message
  1429                                  ;
  1430                                  ;       Switch to protected mode.
  1431                                  ;
  1432 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1433 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1434 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1435 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1436 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1437 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1438 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1439 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1440 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1441 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1442 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1443                                  ;
  1444                                  ;       Enable hardware and maskable interrupts.
  1445                                  ;
  1446 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1447 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1448 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1449 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1450                                  ;
  1451                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1452                                  ;
  1453 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1454 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1455 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1456                                  ;-----------------------------------------------------------------------------------------------------------------------
  1457                                  ;
  1458                                  ;       Routine:        LoaderExit
  1459                                  ;
  1460                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1461                                  ;
  1462                                  ;       In:             DS:SI   string address
  1463                                  ;
  1464                                  ;-----------------------------------------------------------------------------------------------------------------------
  1465 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1466                                  ;
  1467                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1468                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1469                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1470                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1471                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1472                                  ;
  1473 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1474 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1475 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1476 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1477 00000085 F4                                              hlt                                                     ;wait for interrupt
  1478 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1479                                  ;
  1480                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1481                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1482                                  ;       HLT until the system resets.
  1483                                  ;
  1484 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1485 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1486 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1487 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1488 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1489                                  ;-----------------------------------------------------------------------------------------------------------------------
  1490                                  ;
  1491                                  ;       Routine:        GetCPUType
  1492                                  ;
  1493                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1494                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1495                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1496                                  ;
  1497                                  ;       Out:            AX      0 = 808x, v20, etc.
  1498                                  ;                               1 = 80186
  1499                                  ;                               2 = 80286
  1500                                  ;                               3 = 80386
  1501                                  ;
  1502                                  ;-----------------------------------------------------------------------------------------------------------------------
  1503 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1504 00000092 B120                                            mov     cl,32                                           ;shift count
  1505 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1506 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1507 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1508                                                          cpu     186
  1509 0000009A 54                                              push    sp                                              ;save stack pointer
  1510 0000009B 59                                              pop     cx                                              ;...into cx
  1511 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1512 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1513                                                          cpu     286
  1514 000000A0 40                                              inc     ax                                              ;AX = 2
  1515 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1516 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1517 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1518 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1519 000000AE 40                                              inc     ax                                              ;AX = 3
  1520 000000AF C3                      .10                     ret                                                     ;return
  1521                                  ;-----------------------------------------------------------------------------------------------------------------------
  1522                                  ;
  1523                                  ;       Routine:        PutTTYString
  1524                                  ;
  1525                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1526                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1527                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1528                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1529                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1530                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1531                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1532                                  ;                       to LODSB is not needed.
  1533                                  ;
  1534                                  ;       In:             DS:SI   address of string
  1535                                  ;
  1536                                  ;       Out:            DF      0
  1537                                  ;                       ZF      1
  1538                                  ;                       AL      0
  1539                                  ;
  1540                                  ;-----------------------------------------------------------------------------------------------------------------------
  1541 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1542 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1543 000000B2 84C0                                            test    al,al                                           ;end of string?
  1544 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1545 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1546 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1547 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1548 000000BC C3                      .20                     ret                                                     ;return
  1549                                  ;-----------------------------------------------------------------------------------------------------------------------
  1550                                  ;
  1551                                  ;       Loader Data
  1552                                  ;
  1553                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1554                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1555                                  ;
  1556                                  ;-----------------------------------------------------------------------------------------------------------------------
  1557 000000BD 90                                              align   2
  1558 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1559 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1560 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1561 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1562 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1562 000000D1 74696E672073797374-
  1562 000000DA 656D20726571756972-
  1562 000000E3 657320616E20693338-
  1562 000000EC 36206F72206C617465-
  1562 000000F5 722070726F63657373-
  1562 000000FE 6F722E0D0A         
  1563 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1563 0000010C 65737320616E79206B-
  1563 00000115 657920746F20726573-
  1563 0000011E 746172742074686520-
  1563 00000127 636F6D70757465722E-
  1563 00000130 0D0A00             
  1564 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1565 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1565 00000145 7265640D0A00       
  1566 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1566 00000154 616465640D0A00     
  1567 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1567 00000164 4F530D0A00         
  1568 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1569                                  ;=======================================================================================================================
  1570                                  ;
  1571                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1572                                  ;
  1573                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1574                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1575                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1576                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1577                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1578                                  ;
  1579                                  ;=======================================================================================================================
  1580                                  ;=======================================================================================================================
  1581                                  ;
  1582                                  ;       Kernel Tables
  1583                                  ;
  1584                                  ;=======================================================================================================================
  1585                                  ;-----------------------------------------------------------------------------------------------------------------------
  1586                                  ;
  1587                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1588                                  ;
  1589                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1590                                  ;       first descriptor must be all nulls.
  1591                                  ;
  1592                                  ;       6   5         4         3         2         1         0
  1593                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1594                                  ;       ----------------------------------------------------------------
  1595                                  ;       h......hffffmmmma......ab......................bn..............n
  1596                                  ;       00000000                        all areas have base addresses below 2^24
  1597                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1598                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1599                                  ;                   1001                present, ring-0, selector
  1600                                  ;
  1601                                  ;       h...h   hi-order base address (bits 24-31)
  1602                                  ;       ffff    flags
  1603                                  ;       mmmm    hi-order limit (bits 16-19)
  1604                                  ;       a...a   access
  1605                                  ;       b...b   lo-order base address (bits 0-23)
  1606                                  ;       n...n   lo-order limit (bits 0-15)
  1607                                  ;
  1608                                  ;-----------------------------------------------------------------------------------------------------------------------
  1609                                  section                 gdt                                                     ;global descriptor table
  1610 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1611 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1612 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1613 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1614 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1615 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1616 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1617 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1618 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1619 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1620 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1621 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1622 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1623 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1624 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1625                                  ;-----------------------------------------------------------------------------------------------------------------------
  1626                                  ;
  1627                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1628                                  ;
  1629                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1630                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1631                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1632                                  ;
  1633                                  ;       6   5         4         3         2         1         0
  1634                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1635                                  ;       ----------------------------------------------------------------
  1636                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1637                                  ;
  1638                                  ;       h...h   high-order offset (bits 16-31)
  1639                                  ;       P       present (0=unused interrupt)
  1640                                  ;       zz      descriptor privilege level
  1641                                  ;       S       storage segment (must be zero for IDT)
  1642                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1643                                  ;       S...S   handling code selector in GDT
  1644                                  ;       l...l   lo-order offset (bits 0-15)
  1645                                  ;
  1646                                  ;-----------------------------------------------------------------------------------------------------------------------
  1647                                  section                 idt                                                     ;interrupt descriptor table
  1648                                                          mint    dividebyzero                                    ;00 divide by zero
  1648                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1648 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1649                                                          mint    singlestep                                      ;01 single step
  1649                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1649 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1650                                                          mint    nmi                                             ;02 non-maskable
  1650                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1650 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1651                                                          mint    break                                           ;03 break
  1651                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1651 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1652                                                          mint    into                                            ;04 into
  1652                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1652 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1653                                                          mint    bounds                                          ;05 bounds
  1653                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1653 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1654                                                          mint    badopcode                                       ;06 bad op code
  1654                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1654 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1655                                                          mint    nocoproc                                        ;07 no coprocessor
  1655                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1655 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1656                                                          mint    doublefault                                     ;08 double-fault
  1656                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1656 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1657                                                          mint    operand                                         ;09 operand
  1657                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1657 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1658                                                          mint    badtss                                          ;0a bad TSS
  1658                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1658 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1659                                                          mint    notpresent                                      ;0b not-present
  1659                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1659 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1660                                                          mint    stacklimit                                      ;0c stack limit
  1660                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1660 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1661                                                          mint    protection                                      ;0d general protection fault
  1661                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1661 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1662                                                          mint    int14                                           ;0e (reserved)
  1662                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1662 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1663                                                          mint    int15                                           ;0f (reserved)
  1663                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1663 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1664                                                          mint    coproccalc                                      ;10 (reserved)
  1664                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1664 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1665                                                          mint    int17                                           ;11 (reserved)
  1665                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1665 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1666                                                          mint    int18                                           ;12 (reserved)
  1666                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1666 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1667                                                          mint    int19                                           ;13 (reserved)
  1667                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1667 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1668                                                          mint    int20                                           ;14 (reserved)
  1668                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1668 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1669                                                          mint    int21                                           ;15 (reserved)
  1669                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1669 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1670                                                          mint    int22                                           ;16 (reserved)
  1670                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1670 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1671                                                          mint    int23                                           ;17 (reserved)
  1671                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1671 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1672                                                          mint    int24                                           ;18 (reserved)
  1672                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1672 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1673                                                          mint    int25                                           ;19 (reserved)
  1673                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1673 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1674                                                          mint    int26                                           ;1a (reserved)
  1674                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1674 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1675                                                          mint    int27                                           ;1b (reserved)
  1675                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1675 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1676                                                          mint    int28                                           ;1c (reserved)
  1676                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1676 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1677                                                          mint    int29                                           ;1d (reserved)
  1677                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1677 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1678                                                          mint    int30                                           ;1e (reserved)
  1678                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1678 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1679                                                          mint    int31                                           ;1f (reserved)
  1679                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1679 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1680                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1680                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1680 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1681                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1681                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1681 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1682                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1682                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1682 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1683                                                          mtrap   com2                                            ;23 IRQ3 com2
  1683                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1683 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1684                                                          mtrap   com1                                            ;24 IRQ4 com1
  1684                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1684 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1685                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1685                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1685 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1686                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1686                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1686 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1687                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1687                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1687 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1688                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1688                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1688 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1689                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1689                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1689 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1690                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1690                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1690 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1691                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1691                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1691 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1692                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1692                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1692 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1693                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1693                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1693 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1694                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1694                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1694 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1695                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1695                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1695 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1696                                                          mtrap   svc                                             ;30 OS services
  1696                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1696 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1697 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1698                                  ;=======================================================================================================================
  1699                                  ;
  1700                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1701                                  ;
  1702                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1703                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1704                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1705                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1706                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1707                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1708                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1709                                  ;
  1710                                  ;=======================================================================================================================
  1711                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1712                                                          cpu     386                                             ;allow 80386 instructions
  1713                                                          bits    32                                              ;this is 32-bit code
  1714                                  ;=======================================================================================================================
  1715                                  ;
  1716                                  ;       CPU Interrupt Handlers
  1717                                  ;
  1718                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1719                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1720                                  ;
  1721                                  ;=======================================================================================================================
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                  ;
  1724                                  ;       INT0    Divide By Zero
  1725                                  ;
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                                          menter  dividebyzero                                    ;divide by zero
  1727                              <1> ?%1 equ ($-$$)
  1728 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1729 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1730 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  ;
  1733                                  ;       INT1    Single Step
  1734                                  ;
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                                          menter  singlestep                                      ;single step
  1736                              <1> ?%1 equ ($-$$)
  1737 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1738 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1739 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                  ;
  1742                                  ;       INT2    Non-Maskable Interrupt
  1743                                  ;
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                                          menter  nmi                                             ;non-maskable
  1745                              <1> ?%1 equ ($-$$)
  1746 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1747 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1748 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                  ;
  1751                                  ;       INT3    Break
  1752                                  ;
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                                          menter  break                                           ;break
  1754                              <1> ?%1 equ ($-$$)
  1755 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1756 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1757 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                  ;
  1760                                  ;       INT4    Into
  1761                                  ;
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                                          menter  into                                            ;into
  1763                              <1> ?%1 equ ($-$$)
  1764 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1765 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1766 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                  ;
  1769                                  ;       INT5    Bounds
  1770                                  ;
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                                          menter  bounds                                          ;bounds
  1772                              <1> ?%1 equ ($-$$)
  1773 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1774 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1775 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                  ;
  1778                                  ;       INT6    Bad Operation Code
  1779                                  ;
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                                          menter  badopcode                                       ;bad opcode interrupt
  1781                              <1> ?%1 equ ($-$$)
  1782 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1783 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1784 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                  ;
  1787                                  ;       INT7    No Coprocessor
  1788                                  ;
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1790                              <1> ?%1 equ ($-$$)
  1791 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1792 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1793 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                  ;
  1796                                  ;       INT8    Double Fault
  1797                                  ;
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                                          menter  doublefault                                     ;doublefault interrupt
  1799                              <1> ?%1 equ ($-$$)
  1800 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1801 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1802 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                  ;
  1805                                  ;       INT9    Operand
  1806                                  ;
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                                          menter  operand                                         ;operand interrupt
  1808                              <1> ?%1 equ ($-$$)
  1809 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1810 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1811 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                  ;
  1814                                  ;       INT10   Bad Task State Segment
  1815                                  ;
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                                          menter  badtss                                          ;bad TSS interrupt
  1817                              <1> ?%1 equ ($-$$)
  1818 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1819 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1820 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1821                                  ;-----------------------------------------------------------------------------------------------------------------------
  1822                                  ;
  1823                                  ;       INT11   Not Present
  1824                                  ;
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                                          menter  notpresent                                      ;not present interrupt
  1826                              <1> ?%1 equ ($-$$)
  1827 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1828 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1829 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                  ;
  1832                                  ;       INT12   Stack Limit
  1833                                  ;
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                                          menter  stacklimit                                      ;stack limit interrupt
  1835                              <1> ?%1 equ ($-$$)
  1836 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1837 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1838 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                  ;
  1841                                  ;       INT13   General Protection Fault
  1842                                  ;
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                                          menter  protection                                      ;protection fault interrupt
  1844                              <1> ?%1 equ ($-$$)
  1845 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1846 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1847 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                  ;
  1850                                  ;       INT14   Reserved
  1851                                  ;
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                                          menter  int14                                           ;(reserved)
  1853                              <1> ?%1 equ ($-$$)
  1854 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1855 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1856 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                  ;
  1859                                  ;       INT15   Reserved
  1860                                  ;
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                                          menter  int15                                           ;(reserved)
  1862                              <1> ?%1 equ ($-$$)
  1863 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1864 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1865 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                  ;
  1868                                  ;       INT16   Coprocessor Calculation
  1869                                  ;
  1870                                  ;-----------------------------------------------------------------------------------------------------------------------
  1871                                                          menter  coproccalc                                      ;coprocessor calculation
  1871                              <1> ?%1 equ ($-$$)
  1872 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1873 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1874 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                  ;
  1877                                  ;       INT17   Reserved
  1878                                  ;
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                                          menter  int17                                           ;(reserved)
  1880                              <1> ?%1 equ ($-$$)
  1881 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1882 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1883 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                  ;
  1886                                  ;       INT18   Reserved
  1887                                  ;
  1888                                  ;-----------------------------------------------------------------------------------------------------------------------
  1889                                                          menter  int18                                           ;(reserved)
  1889                              <1> ?%1 equ ($-$$)
  1890 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1891 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1892 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                  ;
  1895                                  ;       INT19   Reserved
  1896                                  ;
  1897                                  ;-----------------------------------------------------------------------------------------------------------------------
  1898                                                          menter  int19                                           ;(reserved)
  1898                              <1> ?%1 equ ($-$$)
  1899 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1900 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1901 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1902                                  ;-----------------------------------------------------------------------------------------------------------------------
  1903                                  ;
  1904                                  ;       INT20   Reserved
  1905                                  ;
  1906                                  ;-----------------------------------------------------------------------------------------------------------------------
  1907                                                          menter  int20                                           ;(reserved)
  1907                              <1> ?%1 equ ($-$$)
  1908 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1909 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1910 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1911                                  ;-----------------------------------------------------------------------------------------------------------------------
  1912                                  ;
  1913                                  ;       INT21   Reserved
  1914                                  ;
  1915                                  ;-----------------------------------------------------------------------------------------------------------------------
  1916                                                          menter  int21                                           ;(reserved)
  1916                              <1> ?%1 equ ($-$$)
  1917 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1918 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1919 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1920                                  ;-----------------------------------------------------------------------------------------------------------------------
  1921                                  ;
  1922                                  ;       INT22   Reserved
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------------------------------------------------
  1925                                                          menter  int22                                           ;(reserved)
  1925                              <1> ?%1 equ ($-$$)
  1926 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1927 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1928 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1929                                  ;-----------------------------------------------------------------------------------------------------------------------
  1930                                  ;
  1931                                  ;       INT23   Reserved
  1932                                  ;
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934                                                          menter  int23                                           ;(reserved)
  1934                              <1> ?%1 equ ($-$$)
  1935 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1936 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1937 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1938                                  ;-----------------------------------------------------------------------------------------------------------------------
  1939                                  ;
  1940                                  ;       INT24   Reserved
  1941                                  ;
  1942                                  ;-----------------------------------------------------------------------------------------------------------------------
  1943                                                          menter  int24                                           ;(reserved)
  1943                              <1> ?%1 equ ($-$$)
  1944 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1945 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1946 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1947                                  ;-----------------------------------------------------------------------------------------------------------------------
  1948                                  ;
  1949                                  ;       INT25   Reserved
  1950                                  ;
  1951                                  ;-----------------------------------------------------------------------------------------------------------------------
  1952                                                          menter  int25                                           ;(reserved)
  1952                              <1> ?%1 equ ($-$$)
  1953 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1954 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1955 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1956                                  ;-----------------------------------------------------------------------------------------------------------------------
  1957                                  ;
  1958                                  ;       INT26   Reserved
  1959                                  ;
  1960                                  ;-----------------------------------------------------------------------------------------------------------------------
  1961                                                          menter  int26                                           ;(reserved)
  1961                              <1> ?%1 equ ($-$$)
  1962 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1963 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1964 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1965                                  ;-----------------------------------------------------------------------------------------------------------------------
  1966                                  ;
  1967                                  ;       INT27   Reserved
  1968                                  ;
  1969                                  ;-----------------------------------------------------------------------------------------------------------------------
  1970                                                          menter  int27                                           ;(reserved)
  1970                              <1> ?%1 equ ($-$$)
  1971 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1972 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1973 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1974                                  ;-----------------------------------------------------------------------------------------------------------------------
  1975                                  ;
  1976                                  ;       INT28   Reserved
  1977                                  ;
  1978                                  ;-----------------------------------------------------------------------------------------------------------------------
  1979                                                          menter  int28                                           ;(reserved)
  1979                              <1> ?%1 equ ($-$$)
  1980 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1981 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1982 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1983                                  ;-----------------------------------------------------------------------------------------------------------------------
  1984                                  ;
  1985                                  ;       INT29   Reserved
  1986                                  ;
  1987                                  ;-----------------------------------------------------------------------------------------------------------------------
  1988                                                          menter  int29                                           ;(reserved)
  1988                              <1> ?%1 equ ($-$$)
  1989 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1990 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1991 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1992                                  ;-----------------------------------------------------------------------------------------------------------------------
  1993                                  ;
  1994                                  ;       INT30   Reserved
  1995                                  ;
  1996                                  ;-----------------------------------------------------------------------------------------------------------------------
  1997                                                          menter  int30                                           ;(reserved)
  1997                              <1> ?%1 equ ($-$$)
  1998 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1999 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2000 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  2001                                  ;-----------------------------------------------------------------------------------------------------------------------
  2002                                  ;
  2003                                  ;       INT31   Reserved
  2004                                  ;
  2005                                  ;-----------------------------------------------------------------------------------------------------------------------
  2006                                                          menter  int31                                           ;(reserved)
  2006                              <1> ?%1 equ ($-$$)
  2007 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  2008 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2009 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  2010                                  ;-----------------------------------------------------------------------------------------------------------------------
  2011                                  ;
  2012                                  ;       Routine:        ReportInterrupt
  2013                                  ;
  2014                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2015                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2016                                  ;
  2017                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  2018                                  ;                       [esp+12]        cs                                      stored by interrupt call
  2019                                  ;                       [esp+8]         eip                                     stored by interrupt call
  2020                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  2021                                  ;                       [esp+0]         error message address                   stored by push instructions
  2022                                  ;
  2023                                  ;       Out:            N/A             This routine does not exit.
  2024                                  ;
  2025                                  ;-----------------------------------------------------------------------------------------------------------------------
  2026 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2027 00000154 06                                              push    es                                              ;save ES at time of interrupt
  2028 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2029 00000156 89E5                                            mov     ebp,esp                                         ;ebp --> [EDI]
  2030                                  ;
  2031                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2032                                  ;
  2033                                  ;                       [ebp+56]        eflags
  2034                                  ;                       [ebp+52]        cs
  2035                                  ;                       [ebp+48]        eip
  2036                                  ;                       [ebp+44]        interrupt number (0-31)
  2037                                  ;                       [ebp+40]        error message address
  2038                                  ;                       [ebp+36]        ds
  2039                                  ;                       [ebp+32]        es
  2040                                  ;                       [ebp+28]        eax
  2041                                  ;                       [ebp+24]        ecx
  2042                                  ;                       [ebp+20]        edx
  2043                                  ;                       [ebp+16]        ebx
  2044                                  ;                       [ebp+12]        esp
  2045                                  ;                       [ebp+8]         ebp
  2046                                  ;                       [ebp+4]         esi
  2047                                  ;                       [ebp+0]         edi
  2048                                  ;
  2049 00000158 0E                                              push    cs                                              ;load code selector ...
  2050 00000159 1F                                              pop     ds                                              ;... into DS
  2051 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  2052 0000015C 07                                              pop     es                                              ;... into ES
  2053                                  ;
  2054                                  ;       Display the interrupt report boundary box
  2055                                  ;
  2056 0000015D B10D                                            mov     cl,13                                           ;column
  2057 0000015F B506                                            mov     ch,6                                            ;row
  2058 00000161 B232                                            mov     dl,50                                           ;width
  2059 00000163 B608                                            mov     dh,8                                            ;height
  2060 00000165 B707                                            mov     bh,07h                                          ;attribute
  2061 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  2062                                  ;
  2063                                  ;       Display the report header
  2064                                  ;
  2065 0000016C B10F                                            mov     cl,15                                           ;column
  2066 0000016E B507                                            mov     ch,7                                            ;row
  2067 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  2068 00000175 E84F110000                                      call    SetConsoleString                                ;draw text string
  2069                                  ;
  2070                                  ;       Display the interrupt description label
  2071                                  ;
  2072 0000017A B10F                                            mov     cl,15                                           ;column
  2073 0000017C B508                                            mov     ch,8                                            ;row
  2074 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  2075 00000183 E841110000                                      call    SetConsoleString                                ;draw text string
  2076                                  ;
  2077                                  ;       Display the interrupt number
  2078                                  ;
  2079 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  2080 0000018B B11A                                            mov     cl,26                                           ;column
  2081 0000018D B508                                            mov     ch,8                                            ;row
  2082 0000018F E8DE0D0000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  2083                                  ;
  2084                                  ;       Display the interrupt name
  2085                                  ;
  2086 00000194 B11D                                            mov     cl,29                                           ;column
  2087 00000196 B508                                            mov     ch,8                                            ;row
  2088 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2089 0000019B E829110000                                      call    SetConsoleString                                ;display interrupt description
  2090                                  ;
  2091                                  ;       Display the register values header
  2092                                  ;
  2093 000001A0 B10F                                            mov     cl,15                                           ;column
  2094 000001A2 B50A                                            mov     ch,10                                           ;row
  2095 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  2096 000001A9 E81B110000                                      call    SetConsoleString                                ;draw text string
  2097                                  ;
  2098                                  ;       Display the EAX register label and value
  2099                                  ;
  2100 000001AE B10F                                            mov     cl,15                                           ;column
  2101 000001B0 B50B                                            mov     ch,11                                           ;row
  2102 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  2103 000001B7 E80D110000                                      call    SetConsoleString                                ;draw label
  2104 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2105 000001BF B113                                            mov     cl,19                                           ;column
  2106 000001C1 B50B                                            mov     ch,11                                           ;row
  2107 000001C3 E8D00D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2108                                  ;
  2109                                  ;       Display the ECX register label and value
  2110                                  ;
  2111 000001C8 B10F                                            mov     cl,15                                           ;column
  2112 000001CA B50C                                            mov     ch,12                                           ;row
  2113 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2114 000001D1 E8F3100000                                      call    SetConsoleString                                ;draw label
  2115 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2116 000001D9 B113                                            mov     cl,19                                           ;column
  2117 000001DB B50C                                            mov     ch,12                                           ;row
  2118 000001DD E8B60D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2119                                  ;
  2120                                  ;       Display the EDX register label and value
  2121                                  ;
  2122 000001E2 B10F                                            mov     cl,15                                           ;column
  2123 000001E4 B50D                                            mov     ch,13                                           ;row
  2124 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2125 000001EB E8D9100000                                      call    SetConsoleString                                ;draw label
  2126 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2127 000001F3 B113                                            mov     cl,19                                           ;column
  2128 000001F5 B50D                                            mov     ch,13                                           ;row
  2129 000001F7 E89C0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2130                                  ;
  2131                                  ;       Display the EBX register label and value
  2132                                  ;
  2133 000001FC B10F                                            mov     cl,15                                           ;column
  2134 000001FE B50E                                            mov     ch,14                                           ;row
  2135 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2136 00000205 E8BF100000                                      call    SetConsoleString                                ;draw label
  2137 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2138 0000020D B113                                            mov     cl,19                                           ;column
  2139 0000020F B50E                                            mov     ch,14                                           ;row
  2140 00000211 E8820D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2141                                  ;
  2142                                  ;       Display the ESI register label and value
  2143                                  ;
  2144 00000216 B11D                                            mov     cl,29                                           ;column
  2145 00000218 B50B                                            mov     ch,11                                           ;row
  2146 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2147 0000021F E8A5100000                                      call    SetConsoleString                                ;draw label
  2148 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2149 00000227 B121                                            mov     cl,33                                           ;column
  2150 00000229 B50B                                            mov     ch,11                                           ;row
  2151 0000022B E8680D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2152                                  ;
  2153                                  ;       Display the EDI register label and value
  2154                                  ;
  2155 00000230 B11D                                            mov     cl,29                                           ;column
  2156 00000232 B50C                                            mov     ch,12                                           ;row
  2157 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2158 00000239 E88B100000                                      call    SetConsoleString                                ;draw label
  2159 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2160 00000241 B121                                            mov     cl,33                                           ;column
  2161 00000243 B50C                                            mov     ch,12                                           ;row
  2162 00000245 E84E0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2163                                  ;
  2164                                  ;       Display the EBP register label and value
  2165                                  ;
  2166 0000024A B11D                                            mov     cl,29                                           ;column
  2167 0000024C B50D                                            mov     ch,13                                           ;row
  2168 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2169 00000253 E871100000                                      call    SetConsoleString                                ;draw label
  2170 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2171 0000025B B121                                            mov     cl,33                                           ;column
  2172 0000025D B50D                                            mov     ch,13                                           ;row
  2173 0000025F E8340D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2174                                  ;
  2175                                  ;       Display the DS register label and value
  2176                                  ;
  2177 00000264 B12A                                            mov     cl,42                                           ;column
  2178 00000266 B50B                                            mov     ch,11                                           ;row
  2179 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2180 0000026D E857100000                                      call    SetConsoleString                                ;draw label
  2181 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2182 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2183 00000278 B12E                                            mov     cl,46                                           ;column
  2184 0000027A B50B                                            mov     ch,11                                           ;row
  2185 0000027C E8270D0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2186                                  ;
  2187                                  ;       Display the ES register label and value
  2188                                  ;
  2189 00000281 B12A                                            mov     cl,42                                           ;column
  2190 00000283 B50C                                            mov     ch,12                                           ;row
  2191 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2192 0000028A E83A100000                                      call    SetConsoleString                                ;draw label
  2193 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2194 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2195 00000295 B12E                                            mov     cl,46                                           ;column
  2196 00000297 B50C                                            mov     ch,12                                           ;row
  2197 00000299 E80A0D0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2198                                  ;
  2199                                  ;       Display the SS register label and value
  2200                                  ;
  2201 0000029E B12A                                            mov     cl,42                                           ;column
  2202 000002A0 B50D                                            mov     ch,13                                           ;row
  2203 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2204 000002A7 E81D100000                                      call    SetConsoleString                                ;draw label
  2205 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2206 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2207 000002B1 B12E                                            mov     cl,46                                           ;column
  2208 000002B3 B50D                                            mov     ch,13                                           ;row
  2209 000002B5 E8EE0C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2210                                  ;
  2211                                  ;       Display the CS register lable and value
  2212                                  ;
  2213 000002BA B12A                                            mov     cl,42                                           ;column
  2214 000002BC B50E                                            mov     ch,14                                           ;row
  2215 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2216 000002C3 E801100000                                      call    SetConsoleString                                ;draw label
  2217 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2218 000002CA 668B4534                                        mov     ax,[ebp+52]                                     ;CS
  2219 000002CE B12E                                            mov     cl,46                                           ;column
  2220 000002D0 B50E                                            mov     ch,14                                           ;row
  2221 000002D2 E8D10C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2222                                  ;
  2223                                  ;       Display the EFLAGS register label and value
  2224                                  ;
  2225 000002D7 B133                                            mov     cl,51                                           ;column
  2226 000002D9 B50B                                            mov     ch,11                                           ;row
  2227 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2228 000002E0 E8E40F0000                                      call    SetConsoleString                                ;draw label
  2229 000002E5 8B4538                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2230 000002E8 B137                                            mov     cl,55                                           ;column
  2231 000002EA B50B                                            mov     ch,11                                           ;row
  2232 000002EC E8A70C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2233                                  ;
  2234                                  ;       Display the ESP register label and value
  2235                                  ;
  2236 000002F1 B133                                            mov     cl,51                                           ;column
  2237 000002F3 B50D                                            mov     ch,13                                           ;row
  2238 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2239 000002FA E8CA0F0000                                      call    SetConsoleString                                ;draw label
  2240 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2241 00000302 B137                                            mov     cl,55                                           ;column
  2242 00000304 B50D                                            mov     ch,13                                           ;row
  2243 00000306 E88D0C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2244                                  ;
  2245                                  ;       Display the EIP register label and value
  2246                                  ;
  2247 0000030B B133                                            mov     cl,51                                           ;column
  2248 0000030D B50E                                            mov     ch,14                                           ;row
  2249 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2250 00000314 E8B00F0000                                      call    SetConsoleString                                ;draw label
  2251 00000319 8B4530                                          mov     eax,[ebp+48]                                    ;EIP
  2252 0000031C B137                                            mov     cl,55                                           ;column
  2253 0000031E B50E                                            mov     ch,14                                           ;row
  2254 00000320 E8730C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2255                                  ;
  2256                                  ;       Halt and loop until reset
  2257                                  ;
  2258 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2259 00000326 F4                                              hlt                                                     ;halt processor
  2260 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2261                                  ;-----------------------------------------------------------------------------------------------------------------------
  2262                                  ;
  2263                                  ;       Processor Interrupt Name Strings
  2264                                  ;
  2265                                  ;-----------------------------------------------------------------------------------------------------------------------
  2266 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2266 00000332 6279207A65726F00   
  2267 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2267 00000343 657000             
  2268 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2268 0000034F 626C6520696E746572-
  2268 00000358 7275707400         
  2269 0000035D 427265616B00            czIntBreak              db      "Break",0
  2270 00000363 496E746F00              czIntInto               db      "Into",0
  2271 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2272 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2272 00000378 74696F6E20436F6465-
  2272 00000381 00                 
  2273 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2273 0000038B 6573736F7200       
  2274 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2274 0000039A 756C7400           
  2275 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2276 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2276 000003AF 537461746520536567-
  2276 000003B8 6D656E7400         
  2277 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2277 000003C6 6E7400             
  2278 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2278 000003D2 697400             
  2279 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2279 000003DE 726F74656374696F6E-
  2279 000003E7 204661756C7400     
  2280 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2280 000003F7 6F722043616C63756C-
  2280 00000400 6174696F6E00       
  2281 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2282                                  ;-----------------------------------------------------------------------------------------------------------------------
  2283                                  ;
  2284                                  ;       Processor Interrupt Handling Strings
  2285                                  ;
  2286                                  ;-----------------------------------------------------------------------------------------------------------------------
  2287 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2287 00000418 6C65642070726F6365-
  2287 00000421 73736F7220696E7465-
  2287 0000042A 727275707420686173-
  2287 00000433 206F63637572726564-
  2287 0000043C 3A00               
  2288 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2288 00000447 202300             
  2289 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2289 00000453 206174207468652074-
  2289 0000045C 696D65206F66207468-
  2289 00000465 6520696E7465727275-
  2289 0000046E 70743A00           
  2290 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2291 00000477 4543583A00              czIntECX                db      "ECX:",0
  2292 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2293 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2294 00000486 4553493A00              czIntESI                db      "ESI:",0
  2295 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2296 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2297 00000495 4553503A00              czIntESP                db      "ESP:",0
  2298 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2299 0000049F 2045533A00              czIntES                 db      " ES:",0
  2300 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2301 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2302 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2303 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2304                                  ;-----------------------------------------------------------------------------------------------------------------------
  2305                                  ;
  2306                                  ;       Routine:        DrawTextDialogBox
  2307                                  ;
  2308                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2309                                  ;
  2310                                  ;       In:             CL      upper left column (0-79)
  2311                                  ;                       CH      upper left row (0-24)
  2312                                  ;                       DL      column width, excluding border
  2313                                  ;                       DH      row height, excluding border
  2314                                  ;                       BH      color attribute
  2315                                  ;
  2316                                  ;-----------------------------------------------------------------------------------------------------------------------
  2317 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2318 000004B9 56                                              push    esi                                             ;
  2319 000004BA 57                                              push    edi                                             ;
  2320 000004BB 06                                              push    es                                              ;
  2321 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2322 000004BE 07                                              pop     es                                              ;... into ES
  2323                                  ;
  2324                                  ;       Compute target display offset
  2325                                  ;
  2326 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2327 000004C1 88E8                                            mov     al,ch                                           ;row
  2328 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2329 000004C5 F6E4                                            mul     ah                                              ;row offset
  2330 000004C7 00C8                                            add     al,cl                                           ;add column
  2331 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2332 000004CC 00C8                                            add     al,cl                                           ;add column
  2333 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2334 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2335                                  ;
  2336                                  ;       Display top border row
  2337                                  ;
  2338 000004D3 57                                              push    edi                                             ;save target row offset
  2339 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2340 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2341 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2342 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2343 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2344 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2345 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2346 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2347 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2348 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2349 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2350                                  ;
  2351                                  ;       Display dialog box body rows
  2352                                  ;
  2353 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2354 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2355 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2356 000004F3 57                                              push    edi                                             ;save target row offset
  2357 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2358 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2359 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2360 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2361 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2362 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2363 00000500 F366AB                                          rep     stosw                                           ;display row
  2364 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2365 00000505 66AB                                            stosw                                                   ;display character and attribute
  2366 00000507 5F                                              pop     edi                                             ;restore target row offset
  2367 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2368 0000050E 59                                              pop     ecx                                             ;remaining rows
  2369 0000050F E2E1                                            loop    .10                                             ;next row
  2370                                  ;
  2371                                  ;       Display bottom border row
  2372                                  ;
  2373 00000511 57                                              push    edi                                             ;save target row offset
  2374 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2375 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2376 00000516 66AB                                            stosw                                                   ;display character and attribute
  2377 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2378 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2379 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2380 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2381 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2382 00000523 66AB                                            stosw                                                   ;display character and attribute
  2383 00000525 5F                                              pop     edi                                             ;restore target row offset
  2384 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2385                                  ;
  2386                                  ;       Restore and return
  2387                                  ;
  2388 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2389 0000052D 5F                                              pop     edi                                             ;
  2390 0000052E 5E                                              pop     esi                                             ;
  2391 0000052F 59                                              pop     ecx                                             ;
  2392 00000530 C3                                              ret                                                     ;return
  2393                                  ;=======================================================================================================================
  2394                                  ;
  2395                                  ;       Hardware Device Interupts
  2396                                  ;
  2397                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2398                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2399                                  ;       (BX=2028h).
  2400                                  ;
  2401                                  ;=======================================================================================================================
  2402                                  ;-----------------------------------------------------------------------------------------------------------------------
  2403                                  ;
  2404                                  ;       IRQ0    Clock Tick Interrupt
  2405                                  ;
  2406                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2407                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2408                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2409                                  ;
  2410                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2411                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2412                                  ;
  2413                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2414                                  ;       zero, the floppy disk motors are turned off.
  2415                                  ;
  2416                                  ;-----------------------------------------------------------------------------------------------------------------------
  2417                                                          menter  clocktick                                       ;clock tick interrupt
  2417                              <1> ?%1 equ ($-$$)
  2418 00000531 50                                              push    eax                                             ;save non-volatile regs
  2419 00000532 52                                              push    edx                                             ;
  2420 00000533 1E                                              push    ds                                              ;
  2421                                  ;
  2422                                  ;       Update the clock tick count and the elapsed days as needed.
  2423                                  ;
  2424 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2425 00000536 1F                                              pop     ds                                              ;... into data segment register
  2426 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2427 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2428 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2429 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2430 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2431 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2432 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2433                                  ;
  2434                                  ;       Decrement floppy disk motor timeout.
  2435                                  ;
  2436 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2437 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2438 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2439 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2440                                  ;
  2441                                  ;       Turn off the floppy disk motor if appropriate.
  2442                                  ;
  2443 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2444 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2445 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2446 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2447 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2448 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2449 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2450 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2451 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2452 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2453 00000577 EE                                              out     dx,al                                           ;turn motor off
  2454                                  ;
  2455                                  ;       Signal the end of the hardware interrupt.
  2456                                  ;
  2457 00000578 E8B10D0000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2458                                  ;
  2459                                  ;       Restore and return.
  2460                                  ;
  2461 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2462 0000057E 5A                                              pop     edx                                             ;
  2463 0000057F 58                                              pop     eax                                             ;
  2464 00000580 CF                                              iretd                                                   ;return
  2465                                  ;-----------------------------------------------------------------------------------------------------------------------
  2466                                  ;
  2467                                  ;       IRQ1    Keyboard Interrupt
  2468                                  ;
  2469                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2470                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2471                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2472                                  ;       ALL modified registers upon return.
  2473                                  ;
  2474                                  ;-----------------------------------------------------------------------------------------------------------------------
  2475                                                          menter  keyboard                                        ;keyboard interrrupt
  2475                              <1> ?%1 equ ($-$$)
  2476 00000581 50                                              push    eax                                             ;save non-volatile regs
  2477 00000582 53                                              push    ebx                                             ;
  2478 00000583 51                                              push    ecx                                             ;
  2479 00000584 56                                              push    esi                                             ;
  2480 00000585 1E                                              push    ds                                              ;
  2481 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2482 00000588 1F                                              pop     ds                                              ;... into data segment register
  2483 00000589 30C0                                            xor     al,al                                           ;zero
  2484 0000058B A239080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2485 00000590 A23A080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2486 00000595 A23B080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2487 0000059A A23C080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2488 0000059F A23D080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2489 000005A4 A23E080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2490 000005A9 B020                                            mov     al,' '                                          ;space
  2491 000005AB A23F080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2492 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2493 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2494 000005B4 200538080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2495 000005BA 8A1D36080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2496 000005C0 8A3D37080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2497 000005C6 E8180E0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2498 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2499 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2500 000005D3 A239080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2501 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2502 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2503 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2504 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2505 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2506 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2507 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2508 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2509 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2510 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2511 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2512 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2513 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2514 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2515 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2516 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2517 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2518 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2519 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2520 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2521 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2522 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2523 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2524 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2525 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2526 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2527 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2528 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2529 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2530 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2531 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2532 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2533 00000654 E88A0D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2534 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2535 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2536 00000661 A23A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2537 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2538 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2539 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2540 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2541 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2542 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2543 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2544 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2545 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2546 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2547 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2548 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2549 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2550 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2551 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2552 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2553 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2554 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2555 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2556 0000069C E8420D0000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2557 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2558 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2559 000006A9 A23B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2560 000006AE E8300D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2561 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2562 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2563 000006BB A23C080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2564 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2565 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2566 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2567 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2568 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2569 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2570 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2571 000006D1 E8DE0C0000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2572 000006D6 881D36080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2573 000006DC 883D37080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2574 000006E2 E829090000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2575 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2576 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2577 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2578 000006F1 E8ED0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2579 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2580 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2581 000006FE A23A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2582 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2583 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2584 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2585 0000070E E8D00C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2586 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2587 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2588 0000071B A23B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2589 00000720 E8BE0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2590 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2591 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2592 0000072D A23C080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2593 00000732 E8AC0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2594 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2595 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2596 0000073F A23D080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2597 00000744 E89A0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2598 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2599 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2600 0000074D A23E080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2601 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2602 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2603 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2604 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2605 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2606 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2607 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2608 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2609 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2610 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2611 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2612 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2613 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2614 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2615 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2616 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2617 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2618 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2619 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2620 00000787 A23F080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2621 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2622 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2623 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2624 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2625 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2626 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2627 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2628 000007A4 50                                              push    eax                                             ;save codes
  2629 000007A5 E87A0A0000                                      call    PutMessage                                      ;put message to console
  2630 000007AA 58                                              pop     eax                                             ;restore codes
  2631 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2632 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2633 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2634 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2635 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2636 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2637 000007BD E8620A0000                                      call    PutMessage                                      ;put message to console
  2638 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2639 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2640 000007C6 080538080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2641 000007CC E8E7070000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2642 000007D1 E8580B0000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2643 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2644 000007D7 5E                                              pop     esi                                             ;
  2645 000007D8 59                                              pop     ecx                                             ;
  2646 000007D9 5B                                              pop     ebx                                             ;
  2647 000007DA 58                                              pop     eax                                             ;
  2648 000007DB CF                                              iretd                                                   ;return
  2649                                  ;-----------------------------------------------------------------------------------------------------------------------
  2650                                  ;       Scan-Code to ASCII Translation Tables
  2651                                  ;-----------------------------------------------------------------------------------------------------------------------
  2652 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2653 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2654 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2655 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2656 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2657 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2658 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2659 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2660 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2661 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2662 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2663 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2664 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2665 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2666 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2667 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2668 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2669 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2670 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2671 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2672 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2673 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2674 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2675 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2676 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2677 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2678 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2679 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2680 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2681 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2682 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2683 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2684                                  ;-----------------------------------------------------------------------------------------------------------------------
  2685                                  ;
  2686                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2687                                  ;
  2688                                  ;-----------------------------------------------------------------------------------------------------------------------
  2689                                                          menter  iochannel                                       ;secondary 8259A cascade
  2689                              <1> ?%1 equ ($-$$)
  2690 000008DC 50                                              push    eax                                             ;save modified regs
  2691 000008DD EB3F                                            jmp     hwint                                           ;end interrupt and return
  2692                                  ;-----------------------------------------------------------------------------------------------------------------------
  2693                                  ;
  2694                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2695                                  ;
  2696                                  ;-----------------------------------------------------------------------------------------------------------------------
  2697                                                          menter  com2                                            ;serial port 2 interrupt
  2697                              <1> ?%1 equ ($-$$)
  2698 000008DF 50                                              push    eax                                             ;save modified regs
  2699 000008E0 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2700                                  ;-----------------------------------------------------------------------------------------------------------------------
  2701                                  ;
  2702                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2703                                  ;
  2704                                  ;-----------------------------------------------------------------------------------------------------------------------
  2705                                                          menter  com1                                            ;serial port 1 interrupt
  2705                              <1> ?%1 equ ($-$$)
  2706 000008E2 50                                              push    eax                                             ;save modified regs
  2707 000008E3 EB39                                            jmp     hwint                                           ;end interrupt and return
  2708                                  ;-----------------------------------------------------------------------------------------------------------------------
  2709                                  ;
  2710                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2711                                  ;
  2712                                  ;-----------------------------------------------------------------------------------------------------------------------
  2713                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2713                              <1> ?%1 equ ($-$$)
  2714 000008E5 50                                              push    eax                                             ;save modified regs
  2715 000008E6 EB36                                            jmp     hwint                                           ;end interrupt and return
  2716                                  ;-----------------------------------------------------------------------------------------------------------------------
  2717                                  ;
  2718                                  ;       IRQ6    Diskette Hardware Interrupt
  2719                                  ;
  2720                                  ;-----------------------------------------------------------------------------------------------------------------------
  2721                                                          menter  diskette                                        ;floppy disk interrupt
  2721                              <1> ?%1 equ ($-$$)
  2722 000008E8 50                                              push    eax                                             ;save non-volatile regs
  2723 000008E9 1E                                              push    ds                                              ;
  2724 000008EA 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2725 000008EC 1F                                              pop     ds                                              ;... into DS register
  2726 000008ED A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2727 000008F2 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2728 000008F4 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2729 000008F9 1F                                              pop     ds                                              ;restore non-volatile regs
  2730 000008FA EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2731                                  ;-----------------------------------------------------------------------------------------------------------------------
  2732                                  ;
  2733                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2734                                  ;
  2735                                  ;-----------------------------------------------------------------------------------------------------------------------
  2736                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2736                              <1> ?%1 equ ($-$$)
  2737 000008FC 50                                              push    eax                                             ;save modified regs
  2738 000008FD EB1F                                            jmp     hwint                                           ;end interrupt and return
  2739                                  ;-----------------------------------------------------------------------------------------------------------------------
  2740                                  ;
  2741                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2742                                  ;
  2743                                  ;-----------------------------------------------------------------------------------------------------------------------
  2744                                                          menter  rtclock                                         ;real-time clock interrupt
  2744                              <1> ?%1 equ ($-$$)
  2745 000008FF 50                                              push    eax                                             ;save modified regs
  2746 00000900 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2747                                  ;-----------------------------------------------------------------------------------------------------------------------
  2748                                  ;
  2749                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2750                                  ;
  2751                                  ;-----------------------------------------------------------------------------------------------------------------------
  2752                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2752                              <1> ?%1 equ ($-$$)
  2753 00000902 50                                              push    eax                                             ;save modified regs
  2754 00000903 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2755                                  ;-----------------------------------------------------------------------------------------------------------------------
  2756                                  ;
  2757                                  ;       IRQ10   Reserved Hardware Interrupt
  2758                                  ;
  2759                                  ;-----------------------------------------------------------------------------------------------------------------------
  2760                                                          menter  irq10                                           ;reserved
  2760                              <1> ?%1 equ ($-$$)
  2761 00000905 50                                              push    eax                                             ;save modified regs
  2762 00000906 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2763                                  ;-----------------------------------------------------------------------------------------------------------------------
  2764                                  ;
  2765                                  ;       IRQ11   Reserved Hardware Interrupt
  2766                                  ;
  2767                                  ;-----------------------------------------------------------------------------------------------------------------------
  2768                                                          menter  irq11                                           ;reserved
  2768                              <1> ?%1 equ ($-$$)
  2769 00000908 50                                              push    eax                                             ;save modified regs
  2770 00000909 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2771                                  ;-----------------------------------------------------------------------------------------------------------------------
  2772                                  ;
  2773                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2774                                  ;
  2775                                  ;-----------------------------------------------------------------------------------------------------------------------
  2776                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2776                              <1> ?%1 equ ($-$$)
  2777 0000090B 50                                              push    eax                                             ;save modified regs
  2778 0000090C EB09                                            jmp     hwwint                                          ;end interrupt and return
  2779                                  ;-----------------------------------------------------------------------------------------------------------------------
  2780                                  ;
  2781                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2782                                  ;
  2783                                  ;-----------------------------------------------------------------------------------------------------------------------
  2784                                                          menter  coprocessor                                     ;coprocessor interrupt
  2784                              <1> ?%1 equ ($-$$)
  2785 0000090E 50                                              push    eax                                             ;save modified regs
  2786 0000090F EB06                                            jmp     hwwint                                          ;end interrupt and return
  2787                                  ;-----------------------------------------------------------------------------------------------------------------------
  2788                                  ;
  2789                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2790                                  ;
  2791                                  ;-----------------------------------------------------------------------------------------------------------------------
  2792                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2792                              <1> ?%1 equ ($-$$)
  2793 00000911 50                                              push    eax                                             ;save modified regs
  2794 00000912 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2795                                  ;-----------------------------------------------------------------------------------------------------------------------
  2796                                  ;
  2797                                  ;       IRQ15   Reserved Hardware Interrupt
  2798                                  ;
  2799                                  ;-----------------------------------------------------------------------------------------------------------------------
  2800                                                          menter  irq15                                           ;reserved
  2800                              <1> ?%1 equ ($-$$)
  2801 00000914 50                                              push    eax                                             ;save modified regs
  2802 00000915 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2803                                  ;-----------------------------------------------------------------------------------------------------------------------
  2804                                  ;
  2805                                  ;       Exit from hardware interrupt
  2806                                  ;
  2807                                  ;-----------------------------------------------------------------------------------------------------------------------
  2808 00000917 E8180A0000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2809 0000091C EB05                                            jmp     hwint90                                         ;skip ahead
  2810 0000091E E80B0A0000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2811 00000923 58                      hwint90                 pop     eax                                             ;restore modified regs
  2812 00000924 CF                                              iretd                                                   ;return from interrupt
  2813                                  ;-----------------------------------------------------------------------------------------------------------------------
  2814                                  ;
  2815                                  ;       INT 30h Operating System Software Service Interrupt
  2816                                  ;
  2817                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2818                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2819                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2820                                  ;       the entry address of the specific function from a table.
  2821                                  ;
  2822                                  ;-----------------------------------------------------------------------------------------------------------------------
  2823                                                          menter  svc
  2823                              <1> ?%1 equ ($-$$)
  2824 00000925 3C1D                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2825 00000927 730D                                            jae     svc90                                           ;yes, skip ahead
  2826 00000929 0FB6C0                                          movzx   eax,al                                          ;function
  2827 0000092C C1E002                                          shl     eax,2                                           ;offset into table
  2828 0000092F 2EFF90[37090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2829 00000936 CF                      svc90                   iretd                                                   ;return from interrupt
  2830                                  ;-----------------------------------------------------------------------------------------------------------------------
  2831                                  ;
  2832                                  ;       Service Request Table
  2833                                  ;
  2834                                  ;
  2835                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2836                                  ;
  2837                                  ;-----------------------------------------------------------------------------------------------------------------------
  2838                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2838                              <1> tsvc :
  2838                              <1> e%1 equ ($-tsvc)/4
  2838 00000937 [D00B0000]          <1>  dd %1
  2839                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2839                              <1> e%1 equ ($-tsvc)/4
  2839 0000093B [4C120000]          <1>  dd %1
  2840                                                          tsvce   CompareMemory                                   ;compare memory
  2840                              <1> e%1 equ ($-tsvc)/4
  2840 0000093F [2B0E0000]          <1>  dd %1
  2841                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2841                              <1> e%1 equ ($-tsvc)/4
  2841 00000943 [DA100000]          <1>  dd %1
  2842                                                          tsvce   FreeMemory                                      ;free memory block
  2842                              <1> e%1 equ ($-tsvc)/4
  2842 00000947 [EE0C0000]          <1>  dd %1
  2843                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2843                              <1> e%1 equ ($-tsvc)/4
  2843 0000094B [D9120000]          <1>  dd %1
  2844                                                          tsvce   GetConsoleString                                ;get string input
  2844                              <1> e%1 equ ($-tsvc)/4
  2844 0000094F [8C0E0000]          <1>  dd %1
  2845                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2845                              <1> e%1 equ ($-tsvc)/4
  2845 00000953 [EA120000]          <1>  dd %1
  2846                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2846                              <1> e%1 equ ($-tsvc)/4
  2846 00000957 [FB120000]          <1>  dd %1
  2847                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2847                              <1> e%1 equ ($-tsvc)/4
  2847 0000095B [0D110000]          <1>  dd %1
  2848                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2848                              <1> e%1 equ ($-tsvc)/4
  2848 0000095F [B9090000]          <1>  dd %1
  2849                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2849                              <1> e%1 equ ($-tsvc)/4
  2849 00000963 [04130000]          <1>  dd %1
  2850                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2850                              <1> e%1 equ ($-tsvc)/4
  2850 00000967 [AA100000]          <1>  dd %1
  2851                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2851                              <1> e%1 equ ($-tsvc)/4
  2851 0000096B [D4090000]          <1>  dd %1
  2852                                                          tsvce   PutDayString                                    ;put DD string
  2852                              <1> e%1 equ ($-tsvc)/4
  2852 0000096F [150A0000]          <1>  dd %1
  2853                                                          tsvce   PutHourString                                   ;put hh string
  2853                              <1> e%1 equ ($-tsvc)/4
  2853 00000973 [230A0000]          <1>  dd %1
  2854                                                          tsvce   PutMinuteString                                 ;put mm string
  2854                              <1> e%1 equ ($-tsvc)/4
  2854 00000977 [310A0000]          <1>  dd %1
  2855                                                          tsvce   PutMonthString                                  ;put MM string
  2855                              <1> e%1 equ ($-tsvc)/4
  2855 0000097B [3F0A0000]          <1>  dd %1
  2856                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2856                              <1> e%1 equ ($-tsvc)/4
  2856 0000097F [4D0A0000]          <1>  dd %1
  2857                                                          tsvce   PutSecondString                                 ;put ss string
  2857                              <1> e%1 equ ($-tsvc)/4
  2857 00000983 [710A0000]          <1>  dd %1
  2858                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2858                              <1> e%1 equ ($-tsvc)/4
  2858 00000987 [7E0A0000]          <1>  dd %1
  2859                                                          tsvce   PutWeekdayString                                ;put weekday string
  2859                              <1> e%1 equ ($-tsvc)/4
  2859 0000098B [B30A0000]          <1>  dd %1
  2860                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2860                              <1> e%1 equ ($-tsvc)/4
  2860 0000098F [C10A0000]          <1>  dd %1
  2861                                                          tsvce   PutYearString                                   ;put YYYY string
  2861                              <1> e%1 equ ($-tsvc)/4
  2861 00000993 [E40A0000]          <1>  dd %1
  2862                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2862                              <1> e%1 equ ($-tsvc)/4
  2862 00000997 [3A130000]          <1>  dd %1
  2863                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2863                              <1> e%1 equ ($-tsvc)/4
  2863 0000099B [A5130000]          <1>  dd %1
  2864                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2864                              <1> e%1 equ ($-tsvc)/4
  2864 0000099F [2B110000]          <1>  dd %1
  2865                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2865                              <1> e%1 equ ($-tsvc)/4
  2865 000009A3 [CF110000]          <1>  dd %1
  2866                                                          tsvce   UpperCaseString                                 ;upper-case string
  2866                              <1> e%1 equ ($-tsvc)/4
  2866 000009A7 [480E0000]          <1>  dd %1
  2867                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2868                                  ;-----------------------------------------------------------------------------------------------------------------------
  2869                                  ;
  2870                                  ;       Service Request Macros
  2871                                  ;
  2872                                  ;       These macros provide positional parameterization of service request calls.
  2873                                  ;
  2874                                  ;-----------------------------------------------------------------------------------------------------------------------
  2875                                  %macro                  allocateMemory 1
  2876                                                          mov     ecx,%1                                          ;bytes to allocate
  2877                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2878                                                          int     _svc                                            ;invoke OS service
  2879                                  %endmacro
  2880                                  %macro                  clearConsoleScreen 0
  2881                                                          mov     al,eClearConsoleScreen                          ;function code
  2882                                                          int     _svc                                            ;invoke OS service
  2883                                  %endmacro
  2884                                  %macro                  compareMemory 0
  2885                                                          mov     al,eCompareMemory                               ;function code
  2886                                                          int     _svc                                            ;invoke OS service
  2887                                  %endmacro
  2888                                  %macro                  decimalToUnsigned 0
  2889                                                          mov     al,eDecimalToUnsigned                           ;function code
  2890                                                          int     _svc                                            ;invoke OS servie
  2891                                  %endmacro
  2892                                  %macro                  freeMemory 1
  2893                                                          mov     edx,%1                                          ;address of memory block
  2894                                                          mov     al,eFreeMemory                                  ;function code
  2895                                                          int     _svc                                            ;invoke OS service
  2896                                  %endmacro
  2897                                  %macro                  getBaseMemSize 0
  2898                                                          mov     al,eGetBaseMemSize                              ;function code
  2899                                                          int     _svc                                            ;invoke OS service
  2900                                  %endmacro
  2901                                  %macro                  getConsoleString 4
  2902                                                          mov     edx,%1                                          ;buffer address
  2903                                                          mov     ecx,%2                                          ;max characters
  2904                                                          mov     bh,%3                                           ;echo indicator
  2905                                                          mov     bl,%4                                           ;terminator
  2906                                                          mov     al,eGetConsoleString                            ;function code
  2907                                                          int     _svc                                            ;invoke OS service
  2908                                  %endmacro
  2909                                  %macro                  getExtendedMemSize 0
  2910                                                          mov     al,eGetExtendedMemSize                          ;function code
  2911                                                          int     _svc                                            ;invoke OS service
  2912                                  %endmacro
  2913                                  %macro                  getROMMemSize 0
  2914                                                          mov     al,eGetROMMemSize                               ;function code
  2915                                                          int     _svc                                            ;invoke OS service
  2916                                  %endmacro
  2917                                  %macro                  hexadecimalToUnsigned 0
  2918                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2919                                                          int     _svc                                            ;invoke OS service
  2920                                  %endmacro
  2921                                  %macro                  isLeapYear 1
  2922                                                          mov     ebx,%1                                          ;DATETIME addr
  2923                                                          mov     al,eIsLeapYear                                  ;function code
  2924                                                          int     _svc                                            ;invoke OS service
  2925                                  %endmacro
  2926                                  %macro                  placeCursor 0
  2927                                                          mov     al,ePlaceCursor                                 ;function code
  2928                                                          int     _svc                                            ;invoke OS service
  2929                                  %endmacro
  2930                                  %macro                  putConsoleString 1
  2931                                                          mov     edx,%1                                          ;string address
  2932                                                          mov     al,ePutConsoleString                            ;function code
  2933                                                          int     _svc                                            ;invoke OS service
  2934                                  %endmacro
  2935                                  %macro                  putDateString 0
  2936                                                          mov     al,ePutDateString                               ;function code
  2937                                                          int     _svc                                            ;invoke OS service
  2938                                  %endmacro
  2939                                  %macro                  putDateString 2
  2940                                                          mov     ebx,%1                                          ;DATETIME addr
  2941                                                          mov     edx,%2                                          ;output buffer addr
  2942                                                          mov     al,ePutDateString                               ;function code
  2943                                                          int     _svc                                            ;invoke OS service
  2944                                  %endmacro
  2945                                  %macro                  putDayString 2
  2946                                                          mov     ebx,%1                                          ;DATETIME addr
  2947                                                          mov     edx,%2                                          ;output buffer addr
  2948                                                          mov     al,ePutDayString                                ;function code
  2949                                                          int     _svc                                            ;invoke OS service
  2950                                  %endmacro
  2951                                  %macro                  putHourString 2
  2952                                                          mov     ebx,%1                                          ;DATETIME addr
  2953                                                          mov     edx,%2                                          ;output buffer addr
  2954                                                          mov     al,ePutHourString                               ;function code
  2955                                                          int     _svc                                            ;invoke OS service
  2956                                  %endmacro
  2957                                  %macro                  putMinuteString 2
  2958                                                          mov     ebx,%1                                          ;DATETIME addr
  2959                                                          mov     edx,%2                                          ;output buffer addr
  2960                                                          mov     al,ePutMinuteString                             ;function code
  2961                                                          int     _svc                                            ;invoke OS service
  2962                                  %endmacro
  2963                                  %macro                  putMonthString 2
  2964                                                          mov     ebx,%1                                          ;DATETIME addr
  2965                                                          mov     edx,%2                                          ;output buffer addr
  2966                                                          mov     al,ePutMonthString                              ;function code
  2967                                                          int     _svc                                            ;invoke OS service
  2968                                  %endmacro
  2969                                  %macro                  putMonthNameString 2
  2970                                                          mov     ebx,%1                                          ;DATETIME addr
  2971                                                          mov     edx,%2                                          ;output buffer addr
  2972                                                          mov     al,ePutMonthNameString                          ;function code
  2973                                                          int     _svc                                            ;invoke OS service
  2974                                  %endmacro
  2975                                  %macro                  putSecondString 2
  2976                                                          mov     ebx,%1                                          ;DATETIME addr
  2977                                                          mov     edx,%2                                          ;output buffer addr
  2978                                                          mov     al,ePutSecondString                             ;function code
  2979                                                          int     _svc                                            ;invoke OS service
  2980                                  %endmacro
  2981                                  %macro                  putTimeString 0
  2982                                                          mov     al,ePutTimeString                               ;function code
  2983                                                          int     _svc                                            ;invoke OS service
  2984                                  %endmacro
  2985                                  %macro                  putTimeString 2
  2986                                                          mov     ebx,%1                                          ;DATETIME addr
  2987                                                          mov     edx,%2                                          ;output buffer addr
  2988                                                          mov     al,ePutTimeString                               ;function code
  2989                                                          int     _svc                                            ;invoke OS service
  2990                                  %endmacro
  2991                                  %macro                  putWeekdayString 2
  2992                                                          mov     ebx,%1                                          ;DATETIME addr
  2993                                                          mov     edx,%2                                          ;output buffer addr
  2994                                                          mov     al,ePutWeekdayString                            ;function code
  2995                                                          int     _svc                                            ;invoke OS service
  2996                                  %endmacro
  2997                                  %macro                  putWeekdayNameString 2
  2998                                                          mov     ebx,%1                                          ;DATETIME addr
  2999                                                          mov     edx,%2                                          ;output buffer addr
  3000                                                          mov     al,ePutWeekdayNameString                        ;function code
  3001                                                          int     _svc                                            ;invoke OS service
  3002                                  %endmacro
  3003                                  %macro                  putYearString 2
  3004                                                          mov     ebx,%1                                          ;DATETIME addr
  3005                                                          mov     edx,%2                                          ;output buffer addr
  3006                                                          mov     al,ePutYearString                               ;function code
  3007                                                          int     _svc                                            ;invoke OS service
  3008                                  %endmacro
  3009                                  %macro                  readRealTimeClock 0
  3010                                                          mov     al,eReadRealTimeClock                           ;function code
  3011                                                          int     _svc                                            ;invoke OS service
  3012                                  %endmacro
  3013                                  %macro                  readRealTimeClock 1
  3014                                                          mov     ebx,%1                                          ;DATETIME addr
  3015                                                          mov     al,eReadRealTimeClock                           ;function code
  3016                                                          int     _svc                                            ;invoke OS service
  3017                                  %endmacro
  3018                                  %macro                  resetSystem 0
  3019                                                          mov     al,eResetSystem                                 ;function code
  3020                                                          int     _svc                                            ;invoke OS service
  3021                                  %endmacro
  3022                                  %macro                  unsignedToDecimalString 0
  3023                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3024                                                          int     _svc                                            ;invoke OS service
  3025                                  %endmacro
  3026                                  %macro                  unsignedToHexadecimal 0
  3027                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3028                                                          int     _svc                                            ;invoke OS service
  3029                                  %endmacro
  3030                                  %macro                  upperCaseString 0
  3031                                                          mov     al,eUpperCaseString                             ;function code
  3032                                                          int     _svc                                            ;invoke OS service
  3033                                  %endmacro
  3034                                  ;=======================================================================================================================
  3035                                  ;
  3036                                  ;       Kernel Function Library
  3037                                  ;
  3038                                  ;=======================================================================================================================
  3039                                  ;=======================================================================================================================
  3040                                  ;
  3041                                  ;       Date and Time Helper Routines
  3042                                  ;
  3043                                  ;       GetYear
  3044                                  ;       IsLeapYear
  3045                                  ;       PutDateString
  3046                                  ;       PutDayString
  3047                                  ;       PutHourString
  3048                                  ;       PutMinuteString
  3049                                  ;       PutMonthString
  3050                                  ;       PutMonthNameString
  3051                                  ;       PutSecondString
  3052                                  ;       PutTimeString
  3053                                  ;       PutWeekdayString
  3054                                  ;       PutWeekdayNameString
  3055                                  ;       PutYearString
  3056                                  ;
  3057                                  ;=======================================================================================================================
  3058                                  ;-----------------------------------------------------------------------------------------------------------------------
  3059                                  ;
  3060                                  ;       Routine:        GetYear
  3061                                  ;
  3062                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3063                                  ;
  3064                                  ;       In:             DS:EBX  DATETIME address
  3065                                  ;
  3066                                  ;       Out:            ECX     year
  3067                                  ;
  3068                                  ;-----------------------------------------------------------------------------------------------------------------------
  3069 000009AB 0FB64B07                GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3070 000009AF 6BC964                                          imul    ecx,100                                         ;century * 100
  3071 000009B2 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3072 000009B6 01C1                                            add     ecx,eax                                         ;year (YYYY)
  3073 000009B8 C3                                              ret                                                     ;return
  3074                                  ;-----------------------------------------------------------------------------------------------------------------------
  3075                                  ;
  3076                                  ;       Routine:        IsLeapYear
  3077                                  ;
  3078                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3079                                  ;
  3080                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3081                                  ;
  3082                                  ;       Out:            ECX     0 = not a leap year
  3083                                  ;                               1 = leap year
  3084                                  ;
  3085                                  ;-----------------------------------------------------------------------------------------------------------------------
  3086 000009B9 E8EDFFFFFF              IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3087 000009BE 89C8                                            mov     eax,ecx                                         ;EAX = YYYY
  3088 000009C0 31C9                                            xor     ecx,ecx                                         ;assume not leap year
  3089 000009C2 A803                                            test    al,00000011b                                    ;multiple of four?
  3090 000009C4 750D                                            jnz     .no                                             ;no, branch
  3091 000009C6 B264                                            mov     dl,100                                          ;divisor
  3092 000009C8 F6F2                                            div     dl                                              ;divide by 100
  3093 000009CA 84E4                                            test    ah,ah                                           ;multiple of 100?
  3094 000009CC 7504                                            jnz     .yes                                            ;yes, branch
  3095 000009CE A803                                            test    al,00000011b                                    ;multiple of 400?
  3096 000009D0 7501                                            jnz     .no                                             ;no, branch
  3097 000009D2 41                      .yes                    inc     ecx                                             ;indicate leap
  3098 000009D3 C3                      .no                     ret                                                     ;return
  3099                                  ;-----------------------------------------------------------------------------------------------------------------------
  3100                                  ;
  3101                                  ;       Routine:        PutDateString
  3102                                  ;
  3103                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3104                                  ;                       structure at ds:ebx.
  3105                                  ;
  3106                                  ;       In:             DS:EBX  DATETIME address
  3107                                  ;                       DS:EDX  output buffer address
  3108                                  ;
  3109                                  ;-----------------------------------------------------------------------------------------------------------------------
  3110 000009D4 51                      PutDateString           push    ecx                                             ;save non-volatile regs
  3111 000009D5 57                                              push    edi                                             ;
  3112 000009D6 06                                              push    es                                              ;
  3113 000009D7 1E                                              push    ds                                              ;store data selector ...
  3114 000009D8 07                                              pop     es                                              ;... in extra segment reg
  3115 000009D9 89D7                                            mov     edi,edx                                         ;output buffer address
  3116 000009DB B10A                                            mov     cl,10                                           ;divisor
  3117 000009DD BA30302F00                                      mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3118 000009E2 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3119 000009E6 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3120 000009E8 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3121 000009EA FC                                              cld                                                     ;forward strings
  3122 000009EB AB                                              stosd                                                   ;store "mm/"nul
  3123 000009EC 4F                                              dec     edi                                             ;address of terminator
  3124 000009ED 0FB64304                                        movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3125 000009F1 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3126 000009F3 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3127 000009F5 AB                                              stosd                                                   ;store "dd/"nul
  3128 000009F6 4F                                              dec     edi                                             ;address of terminator
  3129 000009F7 0FB64307                                        movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3130 000009FB F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3131 000009FD 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3132 000009FF AB                                              stosd                                                   ;store "cc/"null
  3133 00000A00 4F                                              dec     edi                                             ;address of terminator
  3134 00000A01 4F                                              dec     edi                                             ;address of delimiter
  3135 00000A02 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3136 00000A06 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3137 00000A08 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3138 00000A0A AA                                              stosb                                                   ;store quotient
  3139 00000A0B 88E0                                            mov     al,ah                                           ;remainder
  3140 00000A0D AA                                              stosb                                                   ;store remainder
  3141 00000A0E 30C0                                            xor     al,al                                           ;null terminator
  3142 00000A10 AA                                              stosb                                                   ;store terminator
  3143 00000A11 07                                              pop     es                                              ;restore non-volatile regs
  3144 00000A12 5F                                              pop     edi                                             ;
  3145 00000A13 59                                              pop     ecx                                             ;
  3146 00000A14 C3                                              ret                                                     ;return
  3147                                  ;-----------------------------------------------------------------------------------------------------------------------
  3148                                  ;
  3149                                  ;       Routine:        PutDayString
  3150                                  ;
  3151                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3152                                  ;                       structure at ds:ebx.
  3153                                  ;
  3154                                  ;       In:             DS:EBX  DATETIME address
  3155                                  ;                       DS:EDX  output buffer address
  3156                                  ;
  3157                                  ;-----------------------------------------------------------------------------------------------------------------------
  3158 00000A15 51                      PutDayString            push    ecx                                             ;save non-volatile regs
  3159 00000A16 0FB64B04                                        movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3160 00000A1A B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3161 00000A1C E80A070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3162 00000A21 59                                              pop     ecx                                             ;
  3163 00000A22 C3                                              ret                                                     ;return
  3164                                  ;-----------------------------------------------------------------------------------------------------------------------
  3165                                  ;
  3166                                  ;       Routine:        PutHourString
  3167                                  ;
  3168                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3169                                  ;                       structure at ds:ebx.
  3170                                  ;
  3171                                  ;       In:             DS:EBX  DATETIME address
  3172                                  ;                       DS:EDX  output buffer address
  3173                                  ;
  3174                                  ;-----------------------------------------------------------------------------------------------------------------------
  3175 00000A23 51                      PutHourString           push    ecx                                             ;save non-volatile regs
  3176 00000A24 0FB64B02                                        movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3177 00000A28 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3178 00000A2A E8FC060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3179 00000A2F 59                                              pop     ecx                                             ;
  3180 00000A30 C3                                              ret                                                     ;return
  3181                                  ;-----------------------------------------------------------------------------------------------------------------------
  3182                                  ;
  3183                                  ;       Routine:        PutMinuteString
  3184                                  ;
  3185                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3186                                  ;                       structure at ds:ebx.
  3187                                  ;
  3188                                  ;       In:             DS:EBX  DATETIME address
  3189                                  ;                       DS:EDX  output buffer address
  3190                                  ;
  3191                                  ;-----------------------------------------------------------------------------------------------------------------------
  3192 00000A31 51                      PutMinuteString         push    ecx                                             ;save non-volatile regs
  3193 00000A32 0FB64B01                                        movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3194 00000A36 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3195 00000A38 E8EE060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3196 00000A3D 59                                              pop     ecx                                             ;
  3197 00000A3E C3                                              ret                                                     ;return
  3198                                  ;-----------------------------------------------------------------------------------------------------------------------
  3199                                  ;
  3200                                  ;       Routine:        PutMonthString
  3201                                  ;
  3202                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3203                                  ;                       structure at ds:ebx.
  3204                                  ;
  3205                                  ;       In:             DS:EBX  DATETIME address
  3206                                  ;                       DS:EDX  output buffer address
  3207                                  ;
  3208                                  ;-----------------------------------------------------------------------------------------------------------------------
  3209 00000A3F 51                      PutMonthString          push    ecx                                             ;save non-volatile regs
  3210 00000A40 0FB64B05                                        movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3211 00000A44 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3212 00000A46 E8E0060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3213 00000A4B 59                                              pop     ecx                                             ;
  3214 00000A4C C3                                              ret                                                     ;return
  3215                                  ;-----------------------------------------------------------------------------------------------------------------------
  3216                                  ;
  3217                                  ;       Routine:        PutMonthNameString
  3218                                  ;
  3219                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3220                                  ;                       structure at ds:ebx.
  3221                                  ;
  3222                                  ;       In:             DS:EBX  DATETIME address
  3223                                  ;                       DS:EDX  output buffer address
  3224                                  ;
  3225                                  ;-----------------------------------------------------------------------------------------------------------------------
  3226 00000A4D 56                      PutMonthNameString      push    esi                                             ;save non-volatile regs
  3227 00000A4E 57                                              push    edi                                             ;
  3228 00000A4F 1E                                              push    ds                                              ;
  3229 00000A50 06                                              push    es                                              ;
  3230 00000A51 1E                                              push    ds                                              ;load data selector ...
  3231 00000A52 07                                              pop     es                                              ;... into extra segment
  3232 00000A53 89D7                                            mov     edi,edx                                         ;output buffer address
  3233 00000A55 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3234 00000A59 48                                              dec     eax                                             ;month (0-11)
  3235 00000A5A C1E002                                          shl     eax,2                                           ;offset into month name lookup table
  3236 00000A5D 0E                                              push    cs                                              ;load code selector ...
  3237 00000A5E 1F                                              pop     ds                                              ;... into data segment
  3238 00000A5F 8BB0[A00B0000]                                  mov     esi,[tMonthNames+eax]                           ;month name address
  3239 00000A65 FC                                              cld                                                     ;forward strings
  3240 00000A66 AC                      .10                     lodsb                                                   ;name character
  3241 00000A67 AA                                              stosb                                                   ;store in output buffer
  3242 00000A68 84C0                                            test    al,al                                           ;end of string?
  3243 00000A6A 75FA                                            jnz     .10                                             ;no, continue
  3244 00000A6C 07                                              pop     es                                              ;restore non-volatile regs
  3245 00000A6D 1F                                              pop     ds                                              ;
  3246 00000A6E 5F                                              pop     edi                                             ;
  3247 00000A6F 5E                                              pop     esi                                             ;
  3248 00000A70 C3                                              ret                                                     ;return
  3249                                  ;-----------------------------------------------------------------------------------------------------------------------
  3250                                  ;
  3251                                  ;       Routine:        PutSecondString
  3252                                  ;
  3253                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3254                                  ;                       structure at ds:ebx.
  3255                                  ;
  3256                                  ;       In:             DS:EBX  DATETIME address
  3257                                  ;                       DS:EDX  output buffer address
  3258                                  ;
  3259                                  ;-----------------------------------------------------------------------------------------------------------------------
  3260 00000A71 51                      PutSecondString         push    ecx                                             ;save non-volatile regs
  3261 00000A72 0FB60B                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3262 00000A75 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3263 00000A77 E8AF060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3264 00000A7C 59                                              pop     ecx                                             ;
  3265 00000A7D C3                                              ret                                                     ;return
  3266                                  ;-----------------------------------------------------------------------------------------------------------------------
  3267                                  ;
  3268                                  ;       Routine:        PutTimeString
  3269                                  ;
  3270                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3271                                  ;                       structure at ds:ebx.
  3272                                  ;
  3273                                  ;       In:             DS:EBX  DATETIME address
  3274                                  ;                       DS:EDX  output buffer address
  3275                                  ;
  3276                                  ;-----------------------------------------------------------------------------------------------------------------------
  3277 00000A7E 51                      PutTimeString           push    ecx                                             ;save non-volatile regs
  3278 00000A7F 57                                              push    edi                                             ;
  3279 00000A80 06                                              push    es                                              ;
  3280 00000A81 1E                                              push    ds                                              ;store data selector ...
  3281 00000A82 07                                              pop     es                                              ;... in extra segment reg
  3282 00000A83 89D7                                            mov     edi,edx                                         ;output buffer address
  3283 00000A85 B10A                                            mov     cl,10                                           ;divisor
  3284 00000A87 BA30303A00                                      mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3285 00000A8C 0FB64302                                        movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3286 00000A90 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3287 00000A92 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3288 00000A94 FC                                              cld                                                     ;forward strings
  3289 00000A95 AB                                              stosd                                                   ;store "mm/"nul
  3290 00000A96 4F                                              dec     edi                                             ;address of terminator
  3291 00000A97 0FB64301                                        movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3292 00000A9B F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3293 00000A9D 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3294 00000A9F AB                                              stosd                                                   ;store "dd/"nul
  3295 00000AA0 4F                                              dec     edi                                             ;address of terminator
  3296 00000AA1 0FB603                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3297 00000AA4 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3298 00000AA6 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3299 00000AA8 AA                                              stosb                                                   ;store quotient
  3300 00000AA9 88E0                                            mov     al,ah                                           ;remainder
  3301 00000AAB AA                                              stosb                                                   ;store remainder
  3302 00000AAC 30C0                                            xor     al,al                                           ;null terminator
  3303 00000AAE AA                                              stosb                                                   ;store terminator
  3304 00000AAF 07                                              pop     es                                              ;restore non-volatile regs
  3305 00000AB0 5F                                              pop     edi                                             ;
  3306 00000AB1 59                                              pop     ecx                                             ;
  3307 00000AB2 C3                                              ret                                                     ;return
  3308                                  ;-----------------------------------------------------------------------------------------------------------------------
  3309                                  ;
  3310                                  ;       Routine:        PutWeekdayString
  3311                                  ;
  3312                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3313                                  ;                       structure at ds:ebx.
  3314                                  ;
  3315                                  ;       In:             DS:EBX  DATETIME address
  3316                                  ;                       DS:EDX  output buffer address
  3317                                  ;
  3318                                  ;-----------------------------------------------------------------------------------------------------------------------
  3319 00000AB3 51                      PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3320 00000AB4 0FB64B03                                        movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3321 00000AB8 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3322 00000ABA E86C060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3323 00000ABF 59                                              pop     ecx                                             ;
  3324 00000AC0 C3                                              ret                                                     ;return
  3325                                  ;-----------------------------------------------------------------------------------------------------------------------
  3326                                  ;
  3327                                  ;       Routine:        PutWeekdayNameString
  3328                                  ;
  3329                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3330                                  ;                       structure at ds:ebx.
  3331                                  ;
  3332                                  ;       In:             DS:EBX  DATETIME address
  3333                                  ;                       DS:EDX  output buffer address
  3334                                  ;
  3335                                  ;-----------------------------------------------------------------------------------------------------------------------
  3336 00000AC1 56                      PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3337 00000AC2 57                                              push    edi                                             ;
  3338 00000AC3 1E                                              push    ds                                              ;
  3339 00000AC4 06                                              push    es                                              ;
  3340 00000AC5 1E                                              push    ds                                              ;load data selector ...
  3341 00000AC6 07                                              pop     es                                              ;... into extra segment
  3342 00000AC7 89D7                                            mov     edi,edx                                         ;output buffer address
  3343 00000AC9 0FB64303                                        movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3344 00000ACD C1E002                                          shl     eax,2                                           ;offset into day name lookup table
  3345 00000AD0 0E                                              push    cs                                              ;load code selector ...
  3346 00000AD1 1F                                              pop     ds                                              ;... into data segment
  3347 00000AD2 8BB0[840B0000]                                  mov     esi,[tDayNames+eax]                             ;day name address
  3348 00000AD8 FC                                              cld                                                     ;forward strings
  3349 00000AD9 AC                      .10                     lodsb                                                   ;name character
  3350 00000ADA AA                                              stosb                                                   ;store in output buffer
  3351 00000ADB 84C0                                            test    al,al                                           ;end of string?
  3352 00000ADD 75FA                                            jnz     .10                                             ;no, continue
  3353 00000ADF 07                                              pop     es                                              ;restore non-volatile regs
  3354 00000AE0 1F                                              pop     ds                                              ;
  3355 00000AE1 5F                                              pop     edi                                             ;
  3356 00000AE2 5E                                              pop     esi                                             ;
  3357 00000AE3 C3                                              ret                                                     ;return
  3358                                  ;-----------------------------------------------------------------------------------------------------------------------
  3359                                  ;
  3360                                  ;       Routine:        PutYearString
  3361                                  ;
  3362                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3363                                  ;                       structure at ds:ebx.
  3364                                  ;
  3365                                  ;       In:             DS:EBX  DATETIME address
  3366                                  ;                       DS:EDX  output buffer address
  3367                                  ;
  3368                                  ;-----------------------------------------------------------------------------------------------------------------------
  3369 00000AE4 51                      PutYearString           push    ecx                                             ;save non-volatile regs
  3370 00000AE5 E8C1FEFFFF                                      call    GetYear                                         ;ECX = YYYY
  3371 00000AEA B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3372 00000AEC E83A060000                                      call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3373 00000AF1 59                                              pop     ecx                                             ;restore non-volatile regs
  3374 00000AF2 C3                                              ret                                                     ;return
  3375                                  ;-----------------------------------------------------------------------------------------------------------------------
  3376                                  ;
  3377                                  ;       Day Names
  3378                                  ;
  3379                                  ;-----------------------------------------------------------------------------------------------------------------------
  3380 00000AF3 53756E64617900          czSunday                db      "Sunday",0
  3381 00000AFA 4D6F6E64617900          czMonday                db      "Monday",0
  3382 00000B01 5475657364617900        czTuesday               db      "Tuesday",0
  3383 00000B09 5765646E6573646179-     czWednesday             db      "Wednesday",0
  3383 00000B12 00                 
  3384 00000B13 546875727364617900      czThursday              db      "Thursday",0
  3385 00000B1C 46726964617900          czFriday                db      "Friday",0
  3386 00000B23 536174757264617900      czSaturday              db      "Saturday",0
  3387                                  ;-----------------------------------------------------------------------------------------------------------------------
  3388                                  ;
  3389                                  ;       Month Names
  3390                                  ;
  3391                                  ;-----------------------------------------------------------------------------------------------------------------------
  3392 00000B2C 4A616E7561727900        czJanuary               db      "January",0
  3393 00000B34 466562727561727900      czFebruary              db      "February",0
  3394 00000B3D 4D6172636800            czMarch                 db      "March",0
  3395 00000B43 417072696C00            czApril                 db      "April",0
  3396 00000B49 4D617900                czMay                   db      "May",0
  3397 00000B4D 4A756E6500              czJune                  db      "June",0
  3398 00000B52 4A756C7900              czJuly                  db      "July",0
  3399 00000B57 41756775737400          czAugust                db      "August",0
  3400 00000B5E 53657074656D626572-     czSeptember             db      "September",0
  3400 00000B67 00                 
  3401 00000B68 4F63746F62657200        czOctober               db      "October",0
  3402 00000B70 4E6F76656D62657200      czNovember              db      "November",0
  3403 00000B79 446563656D62657200      czDecember              db      "December",0
  3404                                  ;-----------------------------------------------------------------------------------------------------------------------
  3405                                  ;
  3406                                  ;       Day Names Lookup Table
  3407                                  ;
  3408                                  ;-----------------------------------------------------------------------------------------------------------------------
  3409 00000B82 90<rept>                                        align   4
  3410                                  tDayNames               equ     $
  3411 00000B84 [F30A0000]                                      dd      czSunday
  3412 00000B88 [FA0A0000]                                      dd      czMonday
  3413 00000B8C [010B0000]                                      dd      czTuesday
  3414 00000B90 [090B0000]                                      dd      czWednesday
  3415 00000B94 [130B0000]                                      dd      czThursday
  3416 00000B98 [1C0B0000]                                      dd      czFriday
  3417 00000B9C [230B0000]                                      dd      czSaturday
  3418                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3419                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3420                                  ;-----------------------------------------------------------------------------------------------------------------------
  3421                                  ;
  3422                                  ;       Month Names Lookup Table
  3423                                  ;
  3424                                  ;-----------------------------------------------------------------------------------------------------------------------
  3425                                                          align   4
  3426                                  tMonthNames             equ     $
  3427 00000BA0 [2C0B0000]                                      dd      czJanuary
  3428 00000BA4 [340B0000]                                      dd      czFebruary
  3429 00000BA8 [3D0B0000]                                      dd      czMarch
  3430 00000BAC [430B0000]                                      dd      czApril
  3431 00000BB0 [490B0000]                                      dd      czMay
  3432 00000BB4 [4D0B0000]                                      dd      czJune
  3433 00000BB8 [520B0000]                                      dd      czJuly
  3434 00000BBC [570B0000]                                      dd      czAugust
  3435 00000BC0 [5E0B0000]                                      dd      czSeptember
  3436 00000BC4 [680B0000]                                      dd      czOctober
  3437 00000BC8 [700B0000]                                      dd      czNovember
  3438 00000BCC [790B0000]                                      dd      czDecember
  3439                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3440                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3441                                  ;=======================================================================================================================
  3442                                  ;
  3443                                  ;       Memory Helper Routines
  3444                                  ;
  3445                                  ;       AllocateMemory
  3446                                  ;       FreeMemory
  3447                                  ;
  3448                                  ;=======================================================================================================================
  3449                                  ;-----------------------------------------------------------------------------------------------------------------------
  3450                                  ;
  3451                                  ;       Routine:        AllocateMemory
  3452                                  ;
  3453                                  ;       Description:    This routine allocates a memory block for the given task.
  3454                                  ;
  3455                                  ;       In:             ECX     bytes of memory to allocate
  3456                                  ;
  3457                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3458                                  ;                               0       unable to allocate memory
  3459                                  ;
  3460                                  ;-----------------------------------------------------------------------------------------------------------------------
  3461 00000BD0 53                      AllocateMemory          push    ebx                                             ;save non-volatile regs
  3462 00000BD1 51                                              push    ecx                                             ;
  3463 00000BD2 56                                              push    esi                                             ;
  3464 00000BD3 1E                                              push    ds                                              ;
  3465                                  ;
  3466                                  ;       Address kernel memory structures
  3467                                  ;
  3468 00000BD4 6A18                                            push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3469 00000BD6 1F                                              pop     ds                                              ;... into data segment reg
  3470 00000BD7 BE55090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3471                                  ;
  3472                                  ;       Set requested size to minimum block size if requested size is too small.
  3473                                  ;
  3474 00000BDC 81F900010000                                    cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3475 00000BE2 7305                                            jae     .10                                             ;no, branch
  3476 00000BE4 B900010000                                      mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3477 00000BE9 83C120                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3478                                  ;
  3479                                  ;       Find the first free memory block large enough to satisfy the request.
  3480                                  ;
  3481 00000BEC 8B4608                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3482 00000BEF 85C0                    .20                     test    eax,eax                                         ;end of free block chain?
  3483 00000BF1 0F84F2000000                                    jz      .220                                            ;yes, branch
  3484 00000BF7 3B4804                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3485 00000BFA 7605                                            jbe     .30                                             ;yes, branch
  3486 00000BFC 8B4018                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3487 00000BFF EBEE                                            jmp     .20                                             ;continue
  3488                                  ;-----------------------------------------------------------------------------------------------------------------------
  3489                                  ;
  3490                                  ;       Address the previous and next free memory blocks.
  3491                                  ;
  3492 00000C01 8B581C                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3493 00000C04 8B5018                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3494                                  ;
  3495                                  ;       Remove the free memory block from the forward free memory block chain.
  3496                                  ;
  3497 00000C07 85DB                                            test    ebx,ebx                                         ;any previous free memory block?
  3498 00000C09 7405                                            jz      .40                                             ;no, branch
  3499 00000C0B 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3500 00000C0E EB03                                            jmp     .50                                             ;continue
  3501 00000C10 895608                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3502                                  ;
  3503                                  ;       Remove the free memory block from the reverse free memory block chain.
  3504                                  ;
  3505 00000C13 85D2                    .50                     test    edx,edx                                         ;any next free memory block?
  3506 00000C15 7405                                            jz      .60                                             ;no, branch
  3507 00000C17 895A1C                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3508 00000C1A EB03                                            jmp     .70                                             ;continue
  3509 00000C1C 895E0C                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3510                                  ;-----------------------------------------------------------------------------------------------------------------------
  3511                                  ;
  3512                                  ;       Determine if the free memory block can be split.
  3513                                  ;
  3514 00000C1F 8B5804                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3515 00000C22 29CB                                            sub     ebx,ecx                                         ;subtract requested memory size
  3516 00000C24 81FB00010000                                    cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3517 00000C2A 7263                                            jb      .150                                            ;no, branch
  3518                                  ;
  3519                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3520                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3521                                  ;       of the requested memory size.
  3522                                  ;
  3523 00000C2C 894804                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3524 00000C2F 89C2                                            mov     edx,eax                                         ;memory block address
  3525 00000C31 01CA                                            add     edx,ecx                                         ;address new new next contig block
  3526 00000C33 8B4810                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3527 00000C36 895010                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3528                                  ;
  3529                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3530                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3531                                  ;
  3532 00000C39 E305                                            jecxz   .80                                             ;no next contig, branch
  3533 00000C3B 895114                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3534 00000C3E EB03                                            jmp     .90                                             ;continue
  3535 00000C40 895604                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3536                                  ;
  3537                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3538                                  ;
  3539 00000C43 895A04                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3540 00000C46 894A10                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3541 00000C49 894214                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3542 00000C4C BB46524545                                      mov     ebx,EMEMFREECODE                                ;free memory signature
  3543 00000C51 891A                                            mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3544 00000C53 31DB                                            xor     ebx,ebx                                         ;zero register
  3545 00000C55 895A0C                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3546 00000C58 895A08                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3547                                  ;
  3548                                  ;       Find the proper location in the free block chain for the new free block
  3549                                  ;
  3550 00000C5B 8B5A04                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3551 00000C5E 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3552 00000C61 E30A                    .100                    jecxz   .110                                            ;branch if at end of chain
  3553 00000C63 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3554 00000C66 7605                                            jbe     .110                                            ;yes, branch
  3555 00000C68 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3556 00000C6B EBF4                                            jmp     .100                                            ;continue
  3557                                  ;
  3558                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3559                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3560                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3561                                  ;       block of hte next block, if there is one.
  3562                                  ;
  3563 00000C6D 894A18                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3564 00000C70 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3565 00000C73 E308                                            jecxz   .120                                            ;branch if no next block
  3566 00000C75 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3567 00000C78 89511C                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3568 00000C7B EB03                                            jmp     .130                                            ;continue
  3569 00000C7D 89560C                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3570                                  ;
  3571                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3572                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3573                                  ;       last user block pointers if necessary.
  3574                                  ;
  3575 00000C80 895A1C                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3576 00000C83 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3577 00000C85 7405                                            jz      .140                                            ;no, branch
  3578 00000C87 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3579 00000C8A EB03                                            jmp     .150                                            ;continue
  3580 00000C8C 895608                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3581                                  ;
  3582                                  ;       Update the newly allocated block's owner and signature.
  3583                                  ;
  3584 00000C8F BA55534552              .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3585 00000C94 8910                                            mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3586 00000C96 31D2                                            xor     edx,edx                                         ;zero register
  3587 00000C98 660F00CA                                        str     dx                                              ;load the task state register
  3588 00000C9C 895008                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3589                                  ;
  3590                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3591                                  ;
  3592 00000C9F 8B4E10                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3593 00000CA2 E323                    .160                    jecxz   .180                                            ;branch if at end of chain
  3594 00000CA4 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3595 00000CA7 721E                                            jb      .180                                            ;branch if block belongs to next task
  3596 00000CA9 7405                                            je      .170                                            ;branch if block belongs to this task
  3597 00000CAB 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3598 00000CAE EBF2                                            jmp     .160                                            ;continue
  3599                                  ;
  3600                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3601                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3602                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3603                                  ;       place to insert the block.
  3604                                  ;
  3605 00000CB0 8B5004                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3606 00000CB3 3B5104                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3607 00000CB6 760F                                            jbe     .180                                            ;yes, branch
  3608 00000CB8 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3609 00000CBB 85C9                                            test    ecx,ecx                                         ;end of chain?
  3610 00000CBD 7408                                            jz      .180                                            ;yes, branch
  3611 00000CBF 8B5008                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3612 00000CC2 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3613 00000CC5 74E9                                            je      .170                                            ;yes, continue search
  3614                                  ;
  3615                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3616                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3617                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3618                                  ;       do have a previous-block, we update that block's next-block pointer.
  3619                                  ;
  3620 00000CC7 894818                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3621 00000CCA 8B5E14                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3622 00000CCD E308                                            jecxz   .190                                            ;branch if no next-task block
  3623 00000CCF 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3624 00000CD2 89411C                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3625 00000CD5 EB03                                            jmp     .200                                            ;continue
  3626 00000CD7 894614                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3627                                  ;
  3628                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3629                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3630                                  ;       global first and/or last user-block pointers if necessary.
  3631                                  ;
  3632 00000CDA 89581C                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3633 00000CDD 85DB                                            test    ebx,ebx                                         ;do we have a previous task block?
  3634 00000CDF 7405                                            jz      .210                                            ;no, branch
  3635 00000CE1 894318                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3636 00000CE4 EB03                                            jmp     .220                                            ;continue
  3637 00000CE6 894610                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3638                                  ;
  3639                                  ;       Restore registers and return to caller.
  3640                                  ;
  3641 00000CE9 1F                      .220                    pop     ds                                              ;restore non-volatie regs
  3642 00000CEA 5E                                              pop     esi                                             ;
  3643 00000CEB 59                                              pop     ecx                                             ;
  3644 00000CEC 5B                                              pop     ebx                                             ;
  3645 00000CED C3                                              ret                                                     ;return
  3646                                  ;-----------------------------------------------------------------------------------------------------------------------
  3647                                  ;
  3648                                  ;       Routine:        FreeMemory
  3649                                  ;
  3650                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3651                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3652                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3653                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3654                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3655                                  ;
  3656                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3657                                  ;
  3658                                  ;       Out:            EAX     -1      invalid memory block
  3659                                  ;                               0       memory block freed
  3660                                  ;
  3661                                  ;-----------------------------------------------------------------------------------------------------------------------
  3662 00000CEE 53                      FreeMemory              push    ebx                                             ;save non-volatile regs
  3663 00000CEF 51                                              push    ecx                                             ;
  3664 00000CF0 56                                              push    esi                                             ;
  3665 00000CF1 57                                              push    edi                                             ;
  3666 00000CF2 1E                                              push    ds                                              ;
  3667 00000CF3 06                                              push    es                                              ;
  3668                                  ;
  3669                                  ;       Address the root memory structure
  3670                                  ;
  3671 00000CF4 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3672 00000CF6 07                                              pop     es                                              ;... into extra segment reg
  3673 00000CF7 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3674 00000CF9 1F                                              pop     ds                                              ;... into data segment reg
  3675 00000CFA BE55090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure
  3676 00000CFF 89D7                                            mov     edi,edx                                         ;memory block address
  3677                                  ;
  3678                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3679                                  ;
  3680 00000D01 31C0                                            xor     eax,eax                                         ;indicate success
  3681 00000D03 813F46524545                                    cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3682 00000D09 0F8415010000                                    je      .240                                            ;yes, branch
  3683 00000D0F 48                                              dec     eax                                             ;indicate failure
  3684 00000D10 813F55534552                                    cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3685 00000D16 0F8508010000                                    jne     .240                                            ;no, branch
  3686                                  ;-----------------------------------------------------------------------------------------------------------------------
  3687                                  ;
  3688                                  ;       Unlink the USER memory block.
  3689                                  ;
  3690                                  ;-----------------------------------------------------------------------------------------------------------------------
  3691                                  ;
  3692                                  ;       Set the block signature. Reset owner.
  3693                                  ;
  3694 00000D1C C70746524545                                    mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3695 00000D22 31C0                                            xor     eax,eax                                         ;zero register
  3696 00000D24 894708                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3697                                  ;
  3698                                  ;       Wipe user area.
  3699                                  ;
  3700 00000D27 57                                              push    edi                                             ;save block address
  3701 00000D28 8B4F04                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3702 00000D2B 83E920                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3703 00000D2E 83C720                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3704 00000D31 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3705 00000D33 F3AA                                            rep     stosb                                           ;clear memory
  3706 00000D35 5F                                              pop     edi                                             ;restore block address
  3707                                  ;
  3708                                  ;       Address the preceding and following USER memory blocks
  3709                                  ;
  3710 00000D36 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3711 00000D39 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3712                                  ;
  3713                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3714                                  ;       pointer to point to the USER block following this block.
  3715                                  ;
  3716 00000D3C 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3717 00000D3E 7405                                            jz      .10                                             ;no, branch
  3718 00000D40 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3719 00000D43 EB03                                            jmp     .20                                             ;continue
  3720 00000D45 894E10                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3721                                  ;
  3722                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3723                                  ;       pointer to point to the USER block preceding this block.
  3724                                  ;
  3725 00000D48 E305                    .20                     jecxz   .30                                             ;branch if no next block
  3726 00000D4A 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3727 00000D4D EB03                                            jmp     .40                                             ;continue
  3728 00000D4F 895E14                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3729                                  ;-----------------------------------------------------------------------------------------------------------------------
  3730                                  ;
  3731                                  ;       Merge with a previous contiguous FREE memory block.
  3732                                  ;
  3733                                  ;-----------------------------------------------------------------------------------------------------------------------
  3734                                  ;
  3735                                  ;       Address the preceding and following contiguous memory blocks.
  3736                                  ;
  3737 00000D52 8B5F14                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3738 00000D55 8B4F10                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3739                                  ;
  3740                                  ;       Verify we have a previous contiguous FREE block.
  3741                                  ;
  3742 00000D58 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3743 00000D5A 7442                                            jz      .100                                            ;no, branch
  3744 00000D5C 813B46524545                                    cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3745 00000D62 753A                                            jne     .100                                            ;no, branch
  3746                                  ;
  3747                                  ;       Update adjacent block's contiguous pointers.
  3748                                  ;
  3749 00000D64 894B10                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3750 00000D67 E305                                            jecxz   .50                                             ;branch if no next contiguous block
  3751 00000D69 895914                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3752 00000D6C EB03                                            jmp     .60                                             ;continue
  3753 00000D6E 895E04                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3754                                  ;
  3755                                  ;       Update the size of the merged FREE block.
  3756                                  ;
  3757 00000D71 8B4704                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3758 00000D74 014304                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3759                                  ;
  3760                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3761                                  ;
  3762 00000D77 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;block header length
  3763 00000D7C B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3764 00000D7E F3AA                                            rep     stosb                                           ;clear memory header
  3765 00000D80 89DF                                            mov     edi,ebx                                         ;current block is now previous block
  3766                                  ;-----------------------------------------------------------------------------------------------------------------------
  3767                                  ;
  3768                                  ;       Unlink the previous contiguous FREE memory block
  3769                                  ;
  3770                                  ;-----------------------------------------------------------------------------------------------------------------------
  3771                                  ;
  3772                                  ;       Address the preceding and following USER memory blocks
  3773                                  ;
  3774 00000D82 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3775 00000D85 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3776                                  ;
  3777                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3778                                  ;       block pointer.
  3779                                  ;
  3780 00000D88 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3781 00000D8A 7405                                            jz      .70                                             ;no, branch
  3782 00000D8C 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3783 00000D8F EB03                                            jmp     .80                                             ;branch
  3784 00000D91 894E08                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3785                                  ;
  3786                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3787                                  ;       pointer.
  3788                                  ;
  3789 00000D94 E305                    .80                     jecxz   .90                                             ;branch if no next block
  3790 00000D96 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3791 00000D99 EB03                                            jmp     .100                                            ;continue
  3792 00000D9B 895E0C                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3793                                  ;-----------------------------------------------------------------------------------------------------------------------
  3794                                  ;
  3795                                  ;       Merge with a following contiguous FREE memory block.
  3796                                  ;
  3797                                  ;-----------------------------------------------------------------------------------------------------------------------
  3798                                  ;
  3799                                  ;       Verify we have a following contiguous FREE block.
  3800                                  ;
  3801 00000D9E 8B4F10                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3802 00000DA1 E34B                                            jecxz   .170                                            ;branch if no next contiguous block
  3803 00000DA3 813946524545                                    cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3804 00000DA9 7543                                            jne     .170                                            ;no, branch
  3805                                  ;
  3806                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3807                                  ;
  3808 00000DAB 8B4104                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3809 00000DAE 014704                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3810                                  ;
  3811                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3812                                  ;
  3813 00000DB1 8B4110                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3814 00000DB4 894710                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3815 00000DB7 85C0                                            test    eax,eax                                         ;does a block follow the next contig blk
  3816 00000DB9 7405                                            jz      .110                                            ;no, branch
  3817 00000DBB 897814                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3818 00000DBE EB03                                            jmp     .120                                            ;continue
  3819 00000DC0 897E04                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3820                                  ;-----------------------------------------------------------------------------------------------------------------------
  3821                                  ;
  3822                                  ;       Unlink the following contiguous FREE memory block
  3823                                  ;
  3824                                  ;-----------------------------------------------------------------------------------------------------------------------
  3825                                  ;
  3826                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3827                                  ;
  3828 00000DC3 57                      .120                    push    edi                                             ;save this block
  3829 00000DC4 89CF                                            mov     edi,ecx                                         ;next contiguous block
  3830 00000DC6 51                                              push    ecx                                             ;save next contiguous block
  3831                                  ;
  3832                                  ;       Address the preceding and following USER memory blocks
  3833                                  ;
  3834 00000DC7 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3835 00000DCA 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3836                                  ;
  3837                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3838                                  ;       block pointer.
  3839                                  ;
  3840 00000DCD 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3841 00000DCF 7405                                            jz      .130                                            ;no, branch
  3842 00000DD1 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3843 00000DD4 EB03                                            jmp     .140                                            ;branch
  3844 00000DD6 894E08                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3845                                  ;
  3846                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3847                                  ;       pointer.
  3848                                  ;
  3849 00000DD9 E305                    .140                    jecxz   .150                                            ;branch if no next block
  3850 00000DDB 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3851 00000DDE EB03                                            jmp     .160                                            ;continue
  3852 00000DE0 895E0C                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3853                                  ;
  3854                                  ;       Clear next contiguous block's header
  3855                                  ;
  3856 00000DE3 5F                      .160                    pop     edi                                             ;next congiguous block pointer
  3857 00000DE4 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3858 00000DE9 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3859 00000DEB F3AA                                            rep     stosb                                           ;clear memory header
  3860 00000DED 5F                                              pop     edi                                             ;this block's pointer
  3861                                  ;-----------------------------------------------------------------------------------------------------------------------
  3862                                  ;
  3863                                  ;       Insert the final FREE block back into the block chain.
  3864                                  ;
  3865                                  ;-----------------------------------------------------------------------------------------------------------------------
  3866                                  ;
  3867                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3868                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3869                                  ;       all are smaller in size.
  3870                                  ;
  3871 00000DEE 8B5F04                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3872 00000DF1 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3873 00000DF4 E30A                    .180                    jecxz   .190                                            ;exit if no ptr
  3874 00000DF6 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3875 00000DF9 7205                                            jb      .190                                            ;yes, branch
  3876 00000DFB 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3877 00000DFE EBF4                                            jmp     .180                                            ;continue
  3878                                  ;
  3879                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3880                                  ;       larger free block. Update the next block's previous block pointer.
  3881                                  ;
  3882 00000E00 894F18                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3883 00000E03 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3884 00000E06 E308                                            jecxz   .200                                            ;branch if no block found
  3885 00000E08 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3886 00000E0B 89791C                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3887 00000E0E EB03                                            jmp     .210                                            ;continue
  3888 00000E10 897E0C                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3889                                  ;
  3890                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3891                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3892                                  ;       next pointer.
  3893                                  ;
  3894 00000E13 895F1C                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3895 00000E16 85DB                                            test    ebx,ebx                                         ;do we have a previous block?
  3896 00000E18 7405                                            jz      .220                                            ;no, branch
  3897 00000E1A 897B18                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3898 00000E1D EB03                                            jmp     .230                                            ;continue
  3899 00000E1F 897E08                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3900                                  ;
  3901                                  ;       The memory free has completed.
  3902                                  ;
  3903 00000E22 31C0                    .230                    xor     eax,eax                                         ;indicate success
  3904                                  ;
  3905                                  ;       Restore and return.
  3906                                  ;
  3907 00000E24 07                      .240                    pop     es                                              ;restore non-volatile regs
  3908 00000E25 1F                                              pop     ds                                              ;
  3909 00000E26 5F                                              pop     edi                                             ;
  3910 00000E27 5E                                              pop     esi                                             ;
  3911 00000E28 59                                              pop     ecx                                             ;
  3912 00000E29 5B                                              pop     ebx                                             ;
  3913 00000E2A C3                                              ret                                                     ;return
  3914                                  ;=======================================================================================================================
  3915                                  ;
  3916                                  ;       String Helper Routines
  3917                                  ;
  3918                                  ;       CompareMemory
  3919                                  ;       UpperCaseString
  3920                                  ;
  3921                                  ;=======================================================================================================================
  3922                                  ;-----------------------------------------------------------------------------------------------------------------------
  3923                                  ;
  3924                                  ;       Routine:        CompareMemory
  3925                                  ;
  3926                                  ;       Description:    This routine compares two byte arrays.
  3927                                  ;
  3928                                  ;       In:             DS:EDX  first source address
  3929                                  ;                       DS:EBX  second source address
  3930                                  ;                       ECX     comparison length
  3931                                  ;
  3932                                  ;       Out:            EDX     first source address
  3933                                  ;                       EBX     second source address
  3934                                  ;                       ECX     0       array 1 = array 2
  3935                                  ;                               <0      array 1 < array 2
  3936                                  ;                               >0      array 1 > array 2
  3937                                  ;
  3938                                  ;-----------------------------------------------------------------------------------------------------------------------
  3939 00000E2B 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  3940 00000E2C 57                                              push    edi                                             ;
  3941 00000E2D 06                                              push    es                                              ;
  3942 00000E2E 1E                                              push    ds                                              ;copy DS
  3943 00000E2F 07                                              pop     es                                              ;... to ES
  3944 00000E30 89D6                                            mov     esi,edx                                         ;first source address
  3945 00000E32 89DF                                            mov     edi,ebx                                         ;second source address
  3946 00000E34 FC                                              cld                                                     ;forward strings
  3947 00000E35 F3A6                                            rep     cmpsb                                           ;compare bytes
  3948 00000E37 B000                                            mov     al,0                                            ;default result
  3949 00000E39 7406                                            jz      .10                                             ;branch if arrays equal
  3950 00000E3B B001                                            mov     al,1                                            ;positive result
  3951 00000E3D 7302                                            jnc     .10                                             ;branch if target > source
  3952 00000E3F B0FF                                            mov     al,-1                                           ;negative result
  3953 00000E41 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  3954 00000E44 07                                              pop     es                                              ;restore non-volatile regs
  3955 00000E45 5F                                              pop     edi                                             ;
  3956 00000E46 5E                                              pop     esi                                             ;
  3957 00000E47 C3                                              ret                                                     ;return
  3958                                  ;-----------------------------------------------------------------------------------------------------------------------
  3959                                  ;
  3960                                  ;       Routine:        UpperCaseString
  3961                                  ;
  3962                                  ;       Description:    This routine places all characters in the given string to upper case.
  3963                                  ;
  3964                                  ;       In:             DS:EDX  string address
  3965                                  ;
  3966                                  ;       Out:            EDX     string address
  3967                                  ;
  3968                                  ;-----------------------------------------------------------------------------------------------------------------------
  3969 00000E48 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  3970 00000E49 89D6                                            mov     esi,edx                                         ;string address
  3971 00000E4B FC                                              cld                                                     ;forward strings
  3972 00000E4C AC                      .10                     lodsb                                                   ;string character
  3973 00000E4D 84C0                                            test    al,al                                           ;null?
  3974 00000E4F 740F                                            jz      .20                                             ;yes, skip ahead
  3975 00000E51 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3976 00000E53 72F7                                            jb      .10                                             ;no, continue
  3977 00000E55 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3978 00000E57 77F3                                            ja      .10                                             ;no, continue
  3979 00000E59 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  3980 00000E5B 8846FF                                          mov     [esi-1],al                                      ;upper character
  3981 00000E5E EBEC                                            jmp     .10                                             ;continue
  3982 00000E60 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  3983 00000E61 C3                                              ret                                                     ;return
  3984                                  ;=======================================================================================================================
  3985                                  ;
  3986                                  ;       Console Helper Routines
  3987                                  ;
  3988                                  ;       FirstConsoleColumn
  3989                                  ;       GetConsoleChar
  3990                                  ;       GetConsoleString
  3991                                  ;       NextConsoleColumn
  3992                                  ;       NextConsoleRow
  3993                                  ;       PreviousConsoleColumn
  3994                                  ;       PutConsoleChar
  3995                                  ;       PutConsoleHexByte
  3996                                  ;       PutConsoleHexDword
  3997                                  ;       PutConsoleHexWord
  3998                                  ;       PutConsoleOIAChar
  3999                                  ;       PutConsoleOIAShift
  4000                                  ;       PutConsoleString
  4001                                  ;       Yield
  4002                                  ;
  4003                                  ;=======================================================================================================================
  4004                                  ;-----------------------------------------------------------------------------------------------------------------------
  4005                                  ;
  4006                                  ;       Routine:        FirstConsoleColumn
  4007                                  ;
  4008                                  ;       Description:    This routine resets the console column to start of the row.
  4009                                  ;
  4010                                  ;       In:             DS      OS data selector
  4011                                  ;
  4012                                  ;-----------------------------------------------------------------------------------------------------------------------
  4013 00000E62 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  4014 00000E64 A234080000                                      mov     [wbConsoleColumn],al                            ;save column
  4015 00000E69 C3                                              ret                                                     ;return
  4016                                  ;-----------------------------------------------------------------------------------------------------------------------
  4017                                  ;
  4018                                  ;       Routine:        GetConsoleChar
  4019                                  ;
  4020                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4021                                  ;
  4022                                  ;       Out:            AL      ASCII character code
  4023                                  ;                       AH      keyboard scan code
  4024                                  ;
  4025                                  ;-----------------------------------------------------------------------------------------------------------------------
  4026 00000E6A E868020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4027 00000E6F E87B030000              GetConsoleChar          call    GetMessage                                      ;get the next message
  4028 00000E74 09C0                                            or      eax,eax                                         ;do we have a message?
  4029 00000E76 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  4030 00000E78 50                                              push    eax                                             ;save key codes
  4031 00000E79 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  4032 00000E7E 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4033 00000E83 58                                              pop     eax                                             ;restore key codes
  4034 00000E84 75E9                                            jne     GetConsoleChar                                  ;no, try again
  4035 00000E86 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  4036 00000E8B C3                                              ret                                                     ;return
  4037                                  ;-----------------------------------------------------------------------------------------------------------------------
  4038                                  ;
  4039                                  ;       Routine:        GetConsoleString
  4040                                  ;
  4041                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4042                                  ;
  4043                                  ;       In:             DS:EDX  target buffer address
  4044                                  ;                       ECX     maximum number of characters to accept
  4045                                  ;                       BH      echo to terminal
  4046                                  ;                       BL      terminating character
  4047                                  ;
  4048                                  ;-----------------------------------------------------------------------------------------------------------------------
  4049 00000E8C 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  4050 00000E8D 56                                              push    esi                                             ;
  4051 00000E8E 57                                              push    edi                                             ;
  4052 00000E8F 06                                              push    es                                              ;
  4053 00000E90 1E                                              push    ds                                              ;load data segment selector ...
  4054 00000E91 07                                              pop     es                                              ;... into extra segment register
  4055 00000E92 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4056 00000E94 51                                              push    ecx                                             ;save maximum characters
  4057 00000E95 30C0                                            xor     al,al                                           ;zero register
  4058 00000E97 FC                                              cld                                                     ;forward strings
  4059 00000E98 F3AA                                            rep     stosb                                           ;zero fill buffer
  4060 00000E9A 59                                              pop     ecx                                             ;maximum characters
  4061 00000E9B 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4062 00000E9D 89D6                                            mov     esi,edx                                         ;esi = target buffer
  4063 00000E9F E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  4064 00000EA1 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  4065 00000EA6 38D8                                            cmp     al,bl                                           ;is this the terminator?
  4066 00000EA8 7445                                            je      .50                                             ;yes, exit
  4067 00000EAA 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4068 00000EAC 7521                                            jne     .30                                             ;no, skip ahead
  4069 00000EAE 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  4070 00000EB0 74EF                                            je      .20                                             ;yes, get next character
  4071 00000EB2 4F                                              dec     edi                                             ;backup target pointer
  4072 00000EB3 C60700                                          mov     byte [edi],0                                    ;zero previous character
  4073 00000EB6 41                                              inc     ecx                                             ;increment remaining chars
  4074 00000EB7 F6C701                                          test    bh,1                                            ;echo to console?
  4075 00000EBA 74E5                                            jz      .20                                             ;no, get next character
  4076 00000EBC E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  4077 00000EC1 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4078 00000EC3 E891000000                                      call    PutConsoleChar                                  ;write space to console
  4079 00000EC8 E837040000                                      call    PlaceCursor                                     ;position the cursor
  4080 00000ECD EBD2                                            jmp     .20                                             ;get next character
  4081 00000ECF 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4082 00000ED1 72CE                                            jb      .20                                             ;no, get another character
  4083 00000ED3 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4084 00000ED5 77CA                                            ja      .20                                             ;no, get another character
  4085 00000ED7 AA                                              stosb                                                   ;store character in buffer
  4086 00000ED8 F6C701                                          test    bh,1                                            ;echo to console?
  4087 00000EDB 740F                                            jz      .40                                             ;no, skip ahead
  4088 00000EDD E877000000                                      call    PutConsoleChar                                  ;write character to console
  4089 00000EE2 E810000000                                      call    NextConsoleColumn                               ;advance console position
  4090 00000EE7 E818040000                                      call    PlaceCursor                                     ;position the cursor
  4091 00000EEC 49                      .40                     dec     ecx                                             ;decrement remaining chars
  4092 00000EED EBB0                                            jmp     .10                                             ;next
  4093 00000EEF 30C0                    .50                     xor     al,al                                           ;null
  4094 00000EF1 AA                                              stosb                                                   ;terminate buffer
  4095 00000EF2 07                                              pop     es                                              ;restore non-volatile regs
  4096 00000EF3 5F                                              pop     edi                                             ;
  4097 00000EF4 5E                                              pop     esi                                             ;
  4098 00000EF5 59                                              pop     ecx                                             ;
  4099 00000EF6 C3                                              ret                                                     ;return
  4100                                  ;-----------------------------------------------------------------------------------------------------------------------
  4101                                  ;
  4102                                  ;       Routine:        NextConsoleColumn
  4103                                  ;
  4104                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4105                                  ;                       incremented if the end of the current row is reached.
  4106                                  ;
  4107                                  ;       In:             DS      OS data selector
  4108                                  ;
  4109                                  ;-----------------------------------------------------------------------------------------------------------------------
  4110 00000EF7 A034080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4111 00000EFC FEC0                                            inc     al                                              ;increment column
  4112 00000EFE A234080000                                      mov     [wbConsoleColumn],al                            ;save column
  4113 00000F03 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  4114 00000F05 720A                                            jb      .10                                             ;no, skip ahead
  4115 00000F07 E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  4116 00000F0C E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  4117 00000F11 C3                      .10                     ret                                                     ;return
  4118                                  ;-----------------------------------------------------------------------------------------------------------------------
  4119                                  ;
  4120                                  ;       Routine:        NextConsoleRow
  4121                                  ;
  4122                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4123                                  ;
  4124                                  ;       In:             DS      OS data selector
  4125                                  ;
  4126                                  ;-----------------------------------------------------------------------------------------------------------------------
  4127 00000F12 A035080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4128 00000F17 FEC0                                            inc     al                                              ;increment row
  4129 00000F19 A235080000                                      mov     [wbConsoleRow],al                               ;save row
  4130 00000F1E 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  4131 00000F20 7211                                            jb      .10                                             ;no, skip ahead
  4132 00000F22 E860030000                                      call    ScrollConsoleRow                                ;scroll up one row
  4133 00000F27 A035080000                                      mov     al,[wbConsoleRow]                               ;row
  4134 00000F2C FEC8                                            dec     al                                              ;decrement row
  4135 00000F2E A235080000                                      mov     [wbConsoleRow],al                               ;save row
  4136 00000F33 C3                      .10                     ret                                                     ;return
  4137                                  ;-----------------------------------------------------------------------------------------------------------------------
  4138                                  ;
  4139                                  ;       Routine:        PreviousConsoleColumn
  4140                                  ;
  4141                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4142                                  ;                       the column is set to the last position in the row and the row is decremented.
  4143                                  ;
  4144                                  ;       In:             DS      OS data selector
  4145                                  ;
  4146                                  ;-----------------------------------------------------------------------------------------------------------------------
  4147 00000F34 A034080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4148 00000F39 08C0                                            or      al,al                                           ;start of row?
  4149 00000F3B 7514                                            jnz     .10                                             ;no, skip ahead
  4150 00000F3D 8A2535080000                                    mov     ah,[wbConsoleRow]                               ;current row
  4151 00000F43 08E4                                            or      ah,ah                                           ;top of screen?
  4152 00000F45 7411                                            jz      .20                                             ;yes, exit with no change
  4153 00000F47 FECC                                            dec     ah                                              ;decrement row
  4154 00000F49 882535080000                                    mov     [wbConsoleRow],ah                               ;save row
  4155 00000F4F B050                                            mov     al,ECONCOLS                                     ;set maximum column
  4156 00000F51 FEC8                    .10                     dec     al                                              ;decrement column
  4157 00000F53 A234080000                                      mov     [wbConsoleColumn],al                            ;save column
  4158 00000F58 C3                      .20                     ret                                                     ;return
  4159                                  ;-----------------------------------------------------------------------------------------------------------------------
  4160                                  ;
  4161                                  ;       Routine:        PutConsoleChar
  4162                                  ;
  4163                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4164                                  ;
  4165                                  ;       In:             AL      ASCII character
  4166                                  ;                       DS      OS data selector
  4167                                  ;
  4168                                  ;-----------------------------------------------------------------------------------------------------------------------
  4169 00000F59 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4170 00000F5A 06                                              push    es                                              ;
  4171 00000F5B 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4172 00000F5D 07                                              pop     es                                              ;... into extra segment reg
  4173 00000F5E 8A0D34080000                                    mov     cl,[wbConsoleColumn]                            ;column
  4174 00000F64 8A2D35080000                                    mov     ch,[wbConsoleRow]                               ;row
  4175 00000F6A E844030000                                      call    SetConsoleChar                                  ;put character at row, column
  4176 00000F6F 07                                              pop     es                                              ;restore non-volatile regs
  4177 00000F70 59                                              pop     ecx                                             ;
  4178 00000F71 C3                                              ret                                                     ;return
  4179                                  ;-----------------------------------------------------------------------------------------------------------------------
  4180                                  ;
  4181                                  ;       Routine:        PutConsoleHexByte
  4182                                  ;
  4183                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4184                                  ;
  4185                                  ;       In:             AL      byte value
  4186                                  ;                       CL      column
  4187                                  ;                       CH      row
  4188                                  ;                       DS      OS data selector
  4189                                  ;                       ES      CGA selector
  4190                                  ;
  4191                                  ;-----------------------------------------------------------------------------------------------------------------------
  4192 00000F72 53                      PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  4193 00000F73 88C3                                            mov     bl,al                                           ;save byte value
  4194 00000F75 C0E804                                          shr     al,4                                            ;hi-order nybble
  4195 00000F78 0C30                                            or      al,030h                                         ;apply ASCII zone
  4196 00000F7A 3C3A                                            cmp     al,03ah                                         ;numeric?
  4197 00000F7C 7202                                            jb      .10                                             ;yes, skip ahead
  4198 00000F7E 0407                                            add     al,7                                            ;add ASCII offset for alpha
  4199 00000F80 E82E030000              .10                     call    SetConsoleChar                                  ;display ASCII character
  4200 00000F85 88D8                                            mov     al,bl                                           ;byte value
  4201 00000F87 240F                                            and     al,0fh                                          ;lo-order nybble
  4202 00000F89 0C30                                            or      al,30h                                          ;apply ASCII zone
  4203 00000F8B 3C3A                                            cmp     al,03ah                                         ;numeric?
  4204 00000F8D 7202                                            jb      .20                                             ;yes, skip ahead
  4205 00000F8F 0407                                            add     al,7                                            ;add ASCII offset for alpha
  4206 00000F91 E81D030000              .20                     call    SetConsoleChar                                  ;display ASCII character
  4207 00000F96 5B                                              pop     ebx                                             ;restore non-volatile regs
  4208 00000F97 C3                                              ret                                                     ;return
  4209                                  ;-----------------------------------------------------------------------------------------------------------------------
  4210                                  ;
  4211                                  ;       Routine:        PutConsoleHexDword
  4212                                  ;
  4213                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4214                                  ;
  4215                                  ;       In:             EAX     value
  4216                                  ;                       CL      column
  4217                                  ;                       CH      row
  4218                                  ;                       DS      OS data selector
  4219                                  ;                       ES      CGA selector
  4220                                  ;
  4221                                  ;-----------------------------------------------------------------------------------------------------------------------
  4222 00000F98 50                      PutConsoleHexDword      push    eax
  4223 00000F99 C1E810                                          shr     eax,16
  4224 00000F9C E807000000                                      call    PutConsoleHexWord
  4225 00000FA1 58                                              pop     eax
  4226 00000FA2 E801000000                                      call    PutConsoleHexWord
  4227 00000FA7 C3                                              ret
  4228                                  ;-----------------------------------------------------------------------------------------------------------------------
  4229                                  ;
  4230                                  ;       Routine:        PutConsoleHexWord
  4231                                  ;
  4232                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4233                                  ;
  4234                                  ;       In:             EAX     value
  4235                                  ;                       CL      column
  4236                                  ;                       CH      row
  4237                                  ;                       DS      OS data selector
  4238                                  ;                       ES      CGA selector
  4239                                  ;
  4240                                  ;-----------------------------------------------------------------------------------------------------------------------
  4241 00000FA8 50                      PutConsoleHexWord       push    eax
  4242 00000FA9 C1E808                                          shr     eax,8
  4243 00000FAC E8C1FFFFFF                                      call    PutConsoleHexByte
  4244 00000FB1 58                                              pop     eax
  4245 00000FB2 E8BBFFFFFF                                      call    PutConsoleHexByte
  4246 00000FB7 C3                                              ret
  4247                                  ;-----------------------------------------------------------------------------------------------------------------------
  4248                                  ;
  4249                                  ;       Routine:        PutConsoleOIAChar
  4250                                  ;
  4251                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4252                                  ;
  4253                                  ;       In:             DS      OS data selector
  4254                                  ;
  4255                                  ;-----------------------------------------------------------------------------------------------------------------------
  4256 00000FB8 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4257 00000FB9 51                                              push    ecx                                             ;
  4258 00000FBA 56                                              push    esi                                             ;
  4259 00000FBB 1E                                              push    ds                                              ;
  4260 00000FBC 06                                              push    es                                              ;
  4261 00000FBD 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  4262 00000FBF 1F                                              pop     ds                                              ;... into data segment register
  4263 00000FC0 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4264 00000FC2 07                                              pop     es                                              ;... into extra segment register
  4265 00000FC3 BE39080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  4266 00000FC8 B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  4267 00000FCA B300                                            mov     bl,0                                            ;starting column
  4268 00000FCC B906000000                                      mov     ecx,6                                           ;maximum scan codes
  4269 00000FD1 51                      .10                     push    ecx                                             ;save remaining count
  4270 00000FD2 89D9                                            mov     ecx,ebx                                         ;row, column
  4271 00000FD4 AC                                              lodsb                                                   ;read scan code
  4272 00000FD5 08C0                                            or      al,al                                           ;scan code present?
  4273 00000FD7 7407                                            jz      .20                                             ;no, skip ahead
  4274 00000FD9 E894FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  4275 00000FDE EB0E                                            jmp     .30                                             ;continue
  4276 00000FE0 B020                    .20                     mov     al,' '                                          ;ASCII space
  4277 00000FE2 E8CC020000                                      call    SetConsoleChar                                  ;display space
  4278 00000FE7 B020                                            mov     al,' '                                          ;ASCII space
  4279 00000FE9 E8C5020000                                      call    SetConsoleChar                                  ;display space
  4280 00000FEE 80C302                  .30                     add     bl,2                                            ;next column (+2)
  4281 00000FF1 59                                              pop     ecx                                             ;restore remaining
  4282 00000FF2 E2DD                                            loop    .10                                             ;next code
  4283 00000FF4 A03F080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  4284 00000FF9 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  4285 00000FFB 720D                                            jb      .40                                             ;no, skip ahead
  4286 00000FFD 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  4287 00000FFF 7709                                            ja      .40                                             ;no, skip ahead
  4288 00001001 88FD                                            mov     ch,bh                                           ;OIA row
  4289 00001003 B128                                            mov     cl,40                                           ;character display column
  4290 00001005 E8A9020000                                      call    SetConsoleChar                                  ;display ASCII character
  4291 0000100A 07                      .40                     pop     es                                              ;restore non-volatile regs
  4292 0000100B 1F                                              pop     ds                                              ;
  4293 0000100C 5E                                              pop     esi                                             ;
  4294 0000100D 59                                              pop     ecx                                             ;
  4295 0000100E 5B                                              pop     ebx                                             ;
  4296 0000100F C3                                              ret                                                     ;return
  4297                                  ;-----------------------------------------------------------------------------------------------------------------------
  4298                                  ;
  4299                                  ;       Routine:        PutConsoleOIAShift
  4300                                  ;
  4301                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4302                                  ;
  4303                                  ;       In:             BL      shift flags
  4304                                  ;                       BH      lock flags
  4305                                  ;                       DS      OS data selector
  4306                                  ;
  4307                                  ;-----------------------------------------------------------------------------------------------------------------------
  4308 00001010 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4309 00001011 06                                              push    es                                              ;
  4310 00001012 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4311 00001014 07                                              pop     es                                              ;... into ES register
  4312 00001015 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  4313 00001017 B020                                            mov     al,EASCIISPACE                                  ;space is default character
  4314 00001019 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4315 0000101C 7402                                            jz      .10                                             ;no, skip ahead
  4316 0000101E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4317 00001020 B10E                    .10                     mov     cl,14                                           ;indicator column
  4318 00001022 E88C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4319 00001027 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4320 00001029 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4321 0000102C 7402                                            jz      .20                                             ;no, skip ahead
  4322 0000102E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4323 00001030 B140                    .20                     mov     cl,64                                           ;indicator column
  4324 00001032 E87C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4325 00001037 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4326 00001039 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4327 0000103C 7402                                            jz      .30                                             ;no, skip ahead
  4328 0000103E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4329 00001040 B10F                    .30                     mov     cl,15                                           ;indicator column
  4330 00001042 E86C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4331 00001047 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4332 00001049 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4333 0000104C 7402                                            jz      .40                                             ;no, skip ahead
  4334 0000104E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4335 00001050 B13F                    .40                     mov     cl,63                                           ;indicator column
  4336 00001052 E85C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4337 00001057 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4338 00001059 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4339 0000105C 7402                                            jz      .50                                             ;no, skip ahead
  4340 0000105E B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4341 00001060 B110                    .50                     mov     cl,16                                           ;indicator column
  4342 00001062 E84C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4343 00001067 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4344 00001069 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4345 0000106C 7402                                            jz      .60                                             ;no, skip ahead
  4346 0000106E B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4347 00001070 B13E                    .60                     mov     cl,62                                           ;indicator column
  4348 00001072 E83C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4349 00001077 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4350 00001079 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4351 0000107C 7402                                            jz      .70                                             ;no, skip ahead
  4352 0000107E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4353 00001080 B14E                    .70                     mov     cl,78                                           ;indicator column
  4354 00001082 E82C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4355 00001087 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4356 00001089 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4357 0000108C 7402                                            jz      .80                                             ;no, skip ahead
  4358 0000108E B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  4359 00001090 B14D                    .80                     mov     cl,77                                           ;indicator column
  4360 00001092 E81C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4361 00001097 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4362 00001099 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4363 0000109C 7402                                            jz      .90                                             ;no, skip ahead
  4364 0000109E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4365 000010A0 B14C                    .90                     mov     cl,76                                           ;indicator column
  4366 000010A2 E80C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4367 000010A7 07                                              pop     es                                              ;restore non-volatile regs
  4368 000010A8 59                                              pop     ecx                                             ;
  4369 000010A9 C3                                              ret                                                     ;return
  4370                                  ;-----------------------------------------------------------------------------------------------------------------------
  4371                                  ;
  4372                                  ;       Routine:        PutConsoleString
  4373                                  ;
  4374                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4375                                  ;                       console position as needed.
  4376                                  ;
  4377                                  ;       In:             EDX     source address
  4378                                  ;                       DS      OS data selector
  4379                                  ;
  4380                                  ;-----------------------------------------------------------------------------------------------------------------------
  4381 000010AA 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  4382 000010AB 89D6                                            mov     esi,edx                                         ;source address
  4383 000010AD FC                                              cld                                                     ;forward strings
  4384 000010AE AC                      .10                     lodsb                                                   ;ASCII character
  4385 000010AF 08C0                                            or      al,al                                           ;end of string?
  4386 000010B1 7422                                            jz      .40                                             ;yes, skip ahead
  4387 000010B3 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  4388 000010B5 7507                                            jne     .20                                             ;no, skip ahead
  4389 000010B7 E8A6FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  4390 000010BC EBF0                                            jmp     .10                                             ;next character
  4391 000010BE 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4392 000010C0 7507                                            jne     .30                                             ;no, skip ahead
  4393 000010C2 E84BFEFFFF                                      call    NextConsoleRow                                  ;move to next row
  4394 000010C7 EBE5                                            jmp     .10                                             ;next character
  4395 000010C9 E88BFEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  4396 000010CE E824FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  4397 000010D3 EBD9                                            jmp     .10                                             ;next character
  4398 000010D5 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  4399 000010D6 C3                                              ret                                                     ;return
  4400                                  ;-----------------------------------------------------------------------------------------------------------------------
  4401                                  ;
  4402                                  ;       Routine:        Yield
  4403                                  ;
  4404                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4405                                  ;
  4406                                  ;-----------------------------------------------------------------------------------------------------------------------
  4407 000010D7 FB                      Yield                   sti                                                     ;enable maskagle interrupts
  4408 000010D8 F4                                              hlt                                                     ;halt until external interrupt
  4409 000010D9 C3                                              ret                                                     ;return
  4410                                  ;=======================================================================================================================
  4411                                  ;
  4412                                  ;       Data-Type Conversion Helper Routines
  4413                                  ;
  4414                                  ;       DecimalToUnsigned
  4415                                  ;       HexadecimalToUnsigned
  4416                                  ;       UnsignedToDecimalString
  4417                                  ;       UnsignedToHexadecimal
  4418                                  ;
  4419                                  ;=======================================================================================================================
  4420                                  ;-----------------------------------------------------------------------------------------------------------------------
  4421                                  ;
  4422                                  ;       Routine:        DecimalToUnsigned
  4423                                  ;
  4424                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4425                                  ;
  4426                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4427                                  ;
  4428                                  ;       Output:         EAX     unsigned integer value
  4429                                  ;
  4430                                  ;-----------------------------------------------------------------------------------------------------------------------
  4431 000010DA 56                      DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4432 000010DB 89D6                                            mov     esi,edx                                         ;source address
  4433 000010DD 31D2                                            xor     edx,edx                                         ;zero total
  4434 000010DF AC                      .10                     lodsb                                                   ;source byte
  4435 000010E0 3C2C                                            cmp     al,','                                          ;comma?
  4436 000010E2 74FB                                            je      .10                                             ;yes, ignore
  4437 000010E4 84C0                                            test    al,al                                           ;end of string?
  4438 000010E6 7421                                            jz      .30                                             ;yes, done
  4439 000010E8 3C2E                                            cmp     al,'.'                                          ;decimal point?
  4440 000010EA 741D                                            je      .30                                             ;yes, done
  4441 000010EC 3C30                                            cmp     al,'0'                                          ;numeral?
  4442 000010EE 7217                                            jb      .20                                             ;no, invalid string
  4443 000010F0 3C39                                            cmp     al,'9'                                          ;numeral?
  4444 000010F2 7713                                            ja      .20                                             ;no, invalid string
  4445 000010F4 240F                                            and     al,00Fh                                         ;mask ASCII zone
  4446 000010F6 50                                              push    eax                                             ;save numeral
  4447 000010F7 D1E2                                            shl     edx,1                                           ;total * 2
  4448 000010F9 89D0                                            mov     eax,edx                                         ;total * 2
  4449 000010FB C1E202                                          shl     edx,2                                           ;total * 8
  4450 000010FE 01C2                                            add     edx,eax                                         ;total * 10
  4451 00001100 58                                              pop     eax                                             ;restore numeral
  4452 00001101 01C2                                            add     edx,eax                                         ;accumulate decimal digit
  4453 00001103 31C0                                            xor     eax,eax                                         ;zero register
  4454 00001105 EBD8                                            jmp     .10                                             ;next
  4455 00001107 31D2                    .20                     xor     edx,edx                                         ;zero result on error
  4456 00001109 89D0                    .30                     mov     eax,edx                                         ;result
  4457 0000110B 5E                                              pop     esi                                             ;restore non-volatile regs
  4458 0000110C C3                                              ret                                                     ;return
  4459                                  ;-----------------------------------------------------------------------------------------------------------------------
  4460                                  ;
  4461                                  ;       Routine:        HexadecimalToUnsigned
  4462                                  ;
  4463                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4464                                  ;
  4465                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4466                                  ;
  4467                                  ;       Output:         EAX     unsigned integer value
  4468                                  ;
  4469                                  ;-----------------------------------------------------------------------------------------------------------------------
  4470 0000110D 56                      HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4471 0000110E 89D6                                            mov     esi,edx                                         ;source address
  4472 00001110 31D2                                            xor     edx,edx                                         ;zero register
  4473 00001112 AC                      .10                     lodsb                                                   ;source byte
  4474 00001113 84C0                                            test    al,al                                           ;end of string?
  4475 00001115 7410                                            jz      .30                                             ;yes, branch
  4476 00001117 3C39                                            cmp     al,'9'                                          ;hexadecimal?
  4477 00001119 7602                                            jna     .20                                             ;no, skip ahead
  4478 0000111B 2C37                                            sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  4479 0000111D 83E00F                  .20                     and     eax,0fh                                         ;remove ascii zone
  4480 00001120 C1E204                                          shl     edx,4                                           ;previous total x 16
  4481 00001123 01C2                                            add     edx,eax                                         ;add prior value x 16
  4482 00001125 EBEB                                            jmp     .10                                             ;next
  4483 00001127 89D0                    .30                     mov     eax,edx                                         ;result
  4484 00001129 5E                                              pop     esi                                             ;restore non-volatile regs
  4485 0000112A C3                                              ret                                                     ;return
  4486                                  ;-----------------------------------------------------------------------------------------------------------------------
  4487                                  ;
  4488                                  ;       Routine:        UnsignedToDecimalString
  4489                                  ;
  4490                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4491                                  ;
  4492                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4493                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4494                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4495                                  ;                       ECX     32-bit binary
  4496                                  ;                       DS:EDX  output buffer address
  4497                                  ;
  4498                                  ;-----------------------------------------------------------------------------------------------------------------------
  4499 0000112B 53                      UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4500 0000112C 51                                              push    ecx                                             ;
  4501 0000112D 57                                              push    edi                                             ;
  4502 0000112E 06                                              push    es                                              ;
  4503 0000112F 1E                                              push    ds                                              ;load data selector
  4504 00001130 07                                              pop     es                                              ;... into extra segment reg
  4505 00001131 89D7                                            mov     edi,edx                                         ;output buffer address
  4506 00001133 80E70F                                          and     bh,00001111b                                    ;zero internal flags
  4507 00001136 89CA                                            mov     edx,ecx                                         ;binary
  4508 00001138 B900CA9A3B                                      mov     ecx,1000000000                                  ;10^9 divisor
  4509 0000113D E871000000                                      call    .30                                             ;divide and store
  4510 00001142 B900E1F505                                      mov     ecx,100000000                                   ;10^8 divisor
  4511 00001147 E855000000                                      call    .10                                             ;divide and store
  4512 0000114C B980969800                                      mov     ecx,10000000                                    ;10^7 divisor
  4513 00001151 E85D000000                                      call    .30                                             ;divide and store
  4514 00001156 B940420F00                                      mov     ecx,1000000                                     ;10^6 divisor
  4515 0000115B E853000000                                      call    .30                                             ;divide and store
  4516 00001160 B9A0860100                                      mov     ecx,100000                                      ;10^5 divisor
  4517 00001165 E837000000                                      call    .10                                             ;divide and store
  4518 0000116A B910270000                                      mov     ecx,10000                                       ;10^4 divisor
  4519 0000116F E83F000000                                      call    .30                                             ;divide and store
  4520 00001174 B9E8030000                                      mov     ecx,1000                                        ;10^3 divisor
  4521 00001179 E835000000                                      call    .30                                             ;divide and store
  4522 0000117E B964000000                                      mov     ecx,100                                         ;10^2 divisor
  4523 00001183 E819000000                                      call    .10                                             ;divide and store
  4524 00001188 B90A000000                                      mov     ecx,10                                          ;10^2 divisor
  4525 0000118D E821000000                                      call    .30                                             ;divide and store
  4526 00001192 89D0                                            mov     eax,edx                                         ;10^1 remainder
  4527 00001194 E827000000                                      call    .40                                             ;store
  4528 00001199 30C0                                            xor     al,al                                           ;null terminator
  4529 0000119B AA                                              stosb
  4530 0000119C 07                                              pop     es                                              ;restore non-volatile regs
  4531 0000119D 5F                                              pop     edi                                             ;
  4532 0000119E 59                                              pop     ecx                                             ;
  4533 0000119F 5B                                              pop     ebx                                             ;
  4534 000011A0 C3                                              ret                                                     ;return
  4535 000011A1 F6C702                  .10                     test    bh,00000010b                                    ;comma group delims?
  4536 000011A4 740D                                            jz      .30                                             ;no, branch
  4537 000011A6 F6C701                                          test    bh,00000001b                                    ;trim leading zeros?
  4538 000011A9 7405                                            jz      .20                                             ;no, store delim
  4539 000011AB F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4540 000011AE 7403                                            jz      .30                                             ;no, branch
  4541 000011B0 B02C                    .20                     mov     al,','                                          ;delimiter
  4542 000011B2 AA                                              stosb                                                   ;store delimiter
  4543 000011B3 89D0                    .30                     mov     eax,edx                                         ;lo-orer dividend
  4544 000011B5 31D2                                            xor     edx,edx                                         ;zero hi-order
  4545 000011B7 F7F1                                            div     ecx                                             ;divide by power of 10
  4546 000011B9 84C0                                            test    al,al                                           ;zero?
  4547 000011BB 7407                                            jz      .50                                             ;yes, branch
  4548 000011BD 80CF10                                          or      bh,00010000b                                    ;non-zero found
  4549 000011C0 0C30                    .40                     or      al,30h                                          ;ASCII zone
  4550 000011C2 AA                                              stosb                                                   ;store digit
  4551 000011C3 C3                                              ret                                                     ;return
  4552 000011C4 F6C701                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4553 000011C7 74F7                                            jz      .40                                             ;no, store and continue
  4554 000011C9 F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4555 000011CC 75F2                                            jnz     .40                                             ;yes, store and continue
  4556 000011CE C3                                              ret                                                     ;return
  4557                                  ;-----------------------------------------------------------------------------------------------------------------------
  4558                                  ;
  4559                                  ;       Routine:        UnsignedToHexadecimal
  4560                                  ;
  4561                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4562                                  ;
  4563                                  ;       Input:          DS:EDX  output buffer address
  4564                                  ;                       ECX     32-bit binary
  4565                                  ;
  4566                                  ;-----------------------------------------------------------------------------------------------------------------------
  4567 000011CF 57                      UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4568 000011D0 89D7                                            mov     edi,edx                                         ;output buffer address
  4569 000011D2 89CA                                            mov     edx,ecx                                         ;32-bit unsigned
  4570 000011D4 31C9                                            xor     ecx,ecx                                         ;zero register
  4571 000011D6 B108                                            mov     cl,8                                            ;nybble count
  4572 000011D8 C1C204                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4573 000011DB 88D0                                            mov     al,dl                                           ;????bbbb
  4574 000011DD 240F                                            and     al,0fh                                          ;mask out bits 4-7
  4575 000011DF 0C30                                            or      al,30h                                          ;mask in ascii zone
  4576 000011E1 3C3A                                            cmp     al,3ah                                          ;A through F?
  4577 000011E3 7202                                            jb      .20                                             ;no, skip ahead
  4578 000011E5 0407                                            add     al,7                                            ;41h through 46h
  4579 000011E7 AA                      .20                     stosb                                                   ;store hexnum
  4580 000011E8 E2EE                                            loop    .10                                             ;next nybble
  4581 000011EA 30C0                                            xor     al,al                                           ;zero reg
  4582 000011EC AA                                              stosb                                                   ;null terminate
  4583 000011ED 5F                                              pop     edi                                             ;restore non-volatile regs
  4584 000011EE C3                                              ret                                                     ;return
  4585                                  ;=======================================================================================================================
  4586                                  ;
  4587                                  ;       Message Queue Helper Routines
  4588                                  ;
  4589                                  ;       GetMessage
  4590                                  ;       PutMessage
  4591                                  ;
  4592                                  ;=======================================================================================================================
  4593                                  ;-----------------------------------------------------------------------------------------------------------------------
  4594                                  ;
  4595                                  ;       Routine:        GetMessage
  4596                                  ;
  4597                                  ;       Description:    This routine reads and removes a message from the message queue.
  4598                                  ;
  4599                                  ;       Out:            EAX     lo-order message data
  4600                                  ;                       EDX     hi-order message data
  4601                                  ;
  4602                                  ;                       CY      0 = message read
  4603                                  ;                               1 = no message to read
  4604                                  ;
  4605                                  ;-----------------------------------------------------------------------------------------------------------------------
  4606 000011EF 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  4607 000011F0 51                                              push    ecx                                             ;
  4608 000011F1 1E                                              push    ds                                              ;
  4609 000011F2 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  4610 000011F4 1F                                              pop     ds                                              ;... into data segment register
  4611 000011F5 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  4612 000011FB 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  4613 000011FD 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4614 00001200 09D0                                            or      eax,edx                                         ;is queue empty?
  4615 00001202 F9                                              stc                                                     ;assume queue is emtpy
  4616 00001203 741B                                            jz      .20                                             ;yes, skip ahead
  4617 00001205 31C9                                            xor     ecx,ecx                                         ;store zero
  4618 00001207 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  4619 00001209 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4620 0000120C 83C308                                          add     ebx,8                                           ;next queue element
  4621 0000120F 81E3FC030000                                    and     ebx,03fch                                       ;at end of queue?
  4622 00001215 7502                                            jnz     .10                                             ;no, skip ahead
  4623 00001217 B308                                            mov     bl,8                                            ;reset to 1st entry
  4624 00001219 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4625 0000121F F8                                              clc                                                     ;indicate message read
  4626 00001220 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4627 00001221 59                                              pop     ecx                                             ;
  4628 00001222 5B                                              pop     ebx                                             ;
  4629 00001223 C3                                              ret                                                     ;return
  4630                                  ;-----------------------------------------------------------------------------------------------------------------------
  4631                                  ;
  4632                                  ;       Routine:        PutMessage
  4633                                  ;
  4634                                  ;       Description:    This routine adda a message to the message queue.
  4635                                  ;
  4636                                  ;       In:             ECX     hi-order data word
  4637                                  ;                       EDX     lo-order data word
  4638                                  ;
  4639                                  ;       Out:            CY      0 = success
  4640                                  ;                               1 = fail: queue is full
  4641                                  ;
  4642                                  ;-----------------------------------------------------------------------------------------------------------------------
  4643 00001224 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  4644 00001225 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  4645 00001227 1F                                              pop     ds                                              ;... into data segment register
  4646 00001228 A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  4647 0000122D 833800                                          cmp     dword [eax],0                                   ;is queue full?
  4648 00001230 F9                                              stc                                                     ;assume failure
  4649 00001231 7517                                            jne     .20                                             ;yes, cannot store
  4650 00001233 8910                                            mov     [eax],edx                                       ;store lo-order data
  4651 00001235 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  4652 00001238 83C008                                          add     eax,8                                           ;next queue element adr
  4653 0000123B 25FC030000                                      and     eax,03fch                                       ;at end of queue?
  4654 00001240 7502                                            jnz     .10                                             ;no, skip ahead
  4655 00001242 B008                                            mov     al,8                                            ;reset to top of queue
  4656 00001244 A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4657 00001249 F8                                              clc                                                     ;indicate success
  4658 0000124A 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4659 0000124B C3                                              ret                                                     ;return
  4660                                  ;=======================================================================================================================
  4661                                  ;
  4662                                  ;       Memory-Mapped Video Routines
  4663                                  ;
  4664                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4665                                  ;
  4666                                  ;       ClearConsoleScreen
  4667                                  ;       ScrollConsoleRow
  4668                                  ;       SetConsoleChar
  4669                                  ;       SetConsoleString
  4670                                  ;
  4671                                  ;=======================================================================================================================
  4672                                  ;-----------------------------------------------------------------------------------------------------------------------
  4673                                  ;
  4674                                  ;       Routine:        ClearConsoleScreen
  4675                                  ;
  4676                                  ;       Description:    This routine clears the console (CGA) screen.
  4677                                  ;
  4678                                  ;-----------------------------------------------------------------------------------------------------------------------
  4679 0000124C 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4680 0000124D 57                                              push    edi                                             ;
  4681 0000124E 1E                                              push    ds                                              ;
  4682 0000124F 06                                              push    es                                              ;
  4683 00001250 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  4684 00001252 1F                                              pop     ds                                              ;... into DS register
  4685 00001253 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4686 00001255 07                                              pop     es                                              ;... into ES register
  4687 00001256 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  4688 0000125B B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4689 00001260 31FF                                            xor     edi,edi                                         ;target offset
  4690 00001262 FC                                              cld                                                     ;forward strings
  4691 00001263 F3AB                                            rep     stosd                                           ;reset screen body
  4692 00001265 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4693 0000126A B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4694 0000126F F3AB                                            rep     stosd                                           ;reset OIA line
  4695 00001271 30C0                                            xor     al,al                                           ;zero register
  4696 00001273 A235080000                                      mov     [wbConsoleRow],al                               ;reset console row
  4697 00001278 A234080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  4698 0000127D E882000000                                      call    PlaceCursor                                     ;place cursor at current position
  4699 00001282 07                                              pop     es                                              ;restore non-volatile regs
  4700 00001283 1F                                              pop     ds                                              ;
  4701 00001284 5F                                              pop     edi                                             ;
  4702 00001285 59                                              pop     ecx                                             ;
  4703 00001286 C3                                              ret                                                     ;return
  4704                                  ;-----------------------------------------------------------------------------------------------------------------------
  4705                                  ;
  4706                                  ;       Routine:        ScrollConsoleRow
  4707                                  ;
  4708                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4709                                  ;
  4710                                  ;-----------------------------------------------------------------------------------------------------------------------
  4711 00001287 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4712 00001288 56                                              push    esi                                             ;
  4713 00001289 57                                              push    edi                                             ;
  4714 0000128A 1E                                              push    ds                                              ;
  4715 0000128B 06                                              push    es                                              ;
  4716 0000128C 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4717 0000128E 1F                                              pop     ds                                              ;... into DS
  4718 0000128F 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4719 00001291 07                                              pop     es                                              ;... into ES
  4720 00001292 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4721 00001297 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4722 0000129C 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  4723 0000129E FC                                              cld                                                     ;forward strings
  4724 0000129F F3A5                                            rep     movsd                                           ;move 24 lines up
  4725 000012A1 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4726 000012A6 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4727 000012AB F3AB                                            rep     stosd                                           ;clear bottom row
  4728 000012AD 07                                              pop     es                                              ;restore non-volatile regs
  4729 000012AE 1F                                              pop     ds                                              ;
  4730 000012AF 5F                                              pop     edi                                             ;
  4731 000012B0 5E                                              pop     esi                                             ;
  4732 000012B1 59                                              pop     ecx                                             ;
  4733 000012B2 C3                                              ret                                                     ;return
  4734                                  ;-----------------------------------------------------------------------------------------------------------------------
  4735                                  ;
  4736                                  ;       Routine:        SetConsoleChar
  4737                                  ;
  4738                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4739                                  ;
  4740                                  ;       In:             AL      ASCII character
  4741                                  ;                       CL      column
  4742                                  ;                       CH      row
  4743                                  ;                       ES      CGA selector
  4744                                  ;
  4745                                  ;       Out:            EAX     last target address written (ES:)
  4746                                  ;                       CL      column + 1
  4747                                  ;
  4748                                  ;-----------------------------------------------------------------------------------------------------------------------
  4749 000012B3 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  4750 000012B5 0FB6C5                                          movzx   eax,ch                                          ;row
  4751 000012B8 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  4752 000012BA F6E4                                            mul     ah                                              ;row * cols/row
  4753 000012BC 00C8                                            add     al,cl                                           ;add column
  4754 000012BE 80D400                                          adc     ah,0                                            ;handle carry
  4755 000012C1 D1E0                                            shl     eax,1                                           ;screen offset
  4756 000012C3 268810                                          mov     [es:eax],dl                                     ;store character
  4757 000012C6 FEC1                                            inc     cl                                              ;next column
  4758 000012C8 C3                                              ret                                                     ;return
  4759                                  ;-----------------------------------------------------------------------------------------------------------------------
  4760                                  ;
  4761                                  ;       Routine:        SetConsoleString
  4762                                  ;
  4763                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4764                                  ;
  4765                                  ;       In:             ESI     source offset (DS:)
  4766                                  ;                       CL      column
  4767                                  ;                       CH      row
  4768                                  ;                       ES      CGA selector
  4769                                  ;
  4770                                  ;-----------------------------------------------------------------------------------------------------------------------
  4771 000012C9 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  4772 000012CA FC                                              cld                                                     ;forward strings
  4773 000012CB AC                      .10                     lodsb                                                   ;next ASCII character
  4774 000012CC 84C0                                            test    al,al                                           ;end of string?
  4775 000012CE 7407                                            jz      .20                                             ;yes, branch
  4776 000012D0 E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  4777 000012D5 EBF4                                            jmp     .10                                             ;continue
  4778 000012D7 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4779 000012D8 C3                                              ret                                                     ;return
  4780                                  ;=======================================================================================================================
  4781                                  ;
  4782                                  ;       Input/Output Routines
  4783                                  ;
  4784                                  ;       These routines read and/or write directly to ports.
  4785                                  ;
  4786                                  ;       GetBaseMemSize
  4787                                  ;       GetExtendedMemSize
  4788                                  ;       GetROMMemSize
  4789                                  ;       PlaceCursor
  4790                                  ;       PutPrimaryEndOfInt
  4791                                  ;       PutSecondaryEndOfInt
  4792                                  ;       ReadRealTimeClock
  4793                                  ;       ResetSystem
  4794                                  ;       SetKeyboardLamps
  4795                                  ;       WaitForKeyInBuffer
  4796                                  ;       WaitForKeyOutBuffer
  4797                                  ;
  4798                                  ;=======================================================================================================================
  4799                                  ;-----------------------------------------------------------------------------------------------------------------------
  4800                                  ;
  4801                                  ;       Routine:        GetBaseMemSize
  4802                                  ;
  4803                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4804                                  ;
  4805                                  ;       Output:         EAX     base RAM size in bytes
  4806                                  ;
  4807                                  ;-----------------------------------------------------------------------------------------------------------------------
  4808 000012D9 31C0                    GetBaseMemSize          xor     eax,eax                                         ;zero register
  4809 000012DB B016                                            mov     al,ERTCBASERAMHI                                ;base RAM high register
  4810 000012DD E670                                            out     ERTCREGPORT,al                                  ;select base RAM high register
  4811 000012DF E471                                            in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4812 000012E1 88C4                                            mov     ah,al                                           ;save base RAM high
  4813 000012E3 B015                                            mov     al,ERTCBASERAMLO                                ;base RAM low register
  4814 000012E5 E670                                            out     ERTCREGPORT,al                                  ;select base RAM low register
  4815 000012E7 E471                                            in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4816 000012E9 C3                                              ret                                                     ;return to caller
  4817                                  ;-----------------------------------------------------------------------------------------------------------------------
  4818                                  ;
  4819                                  ;       Routine:        GetExtendedMemSize
  4820                                  ;
  4821                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4822                                  ;
  4823                                  ;       Output:         EAX     extended RAM size in bytes
  4824                                  ;
  4825                                  ;-----------------------------------------------------------------------------------------------------------------------
  4826 000012EA 31C0                    GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4827 000012EC B018                                            mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4828 000012EE E670                                            out     ERTCREGPORT,al                                  ;select extended RAM high register
  4829 000012F0 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4830 000012F2 88C4                                            mov     ah,al                                           ;save extended RAM high
  4831 000012F4 B017                                            mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4832 000012F6 E670                                            out     ERTCREGPORT,al                                  ;select extended RAM low register
  4833 000012F8 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4834 000012FA C3                                              ret                                                     ;return to caller
  4835                                  ;-----------------------------------------------------------------------------------------------------------------------
  4836                                  ;
  4837                                  ;       Routine:        GetROMMemSize
  4838                                  ;
  4839                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4840                                  ;
  4841                                  ;       Output:         EAX     RAM size in bytes
  4842                                  ;
  4843                                  ;-----------------------------------------------------------------------------------------------------------------------
  4844 000012FB 31C0                    GetROMMemSize           xor     eax,eax                                         ;zero register
  4845 000012FD 66A113040000                                    mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4846 00001303 C3                                              ret                                                     ;return
  4847                                  ;-----------------------------------------------------------------------------------------------------------------------
  4848                                  ;
  4849                                  ;       Routine:        PlaceCursor
  4850                                  ;
  4851                                  ;       Description:    This routine positions the cursor on the console.
  4852                                  ;
  4853                                  ;       In:             DS      OS data selector
  4854                                  ;
  4855                                  ;-----------------------------------------------------------------------------------------------------------------------
  4856 00001304 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  4857 00001305 A035080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  4858 0000130A B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  4859 0000130C F6E4                                            mul     ah                                              ;row offset
  4860 0000130E 020534080000                                    add     al,[wbConsoleColumn]                            ;add column
  4861 00001314 80D400                                          adc     ah,0                                            ;add overflow
  4862 00001317 89C1                                            mov     ecx,eax                                         ;screen offset
  4863 00001319 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4864 0000131B B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4865 0000131D B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4866 0000131F EE                                              out     dx,al                                           ;select register
  4867 00001320 42                                              inc     edx                                             ;data port
  4868 00001321 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  4869 00001323 EE                                              out     dx,al                                           ;store hi-order loc
  4870 00001324 4A                                              dec     edx                                             ;register select port
  4871 00001325 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4872 00001327 EE                                              out     dx,al                                           ;select register
  4873 00001328 42                                              inc     edx                                             ;data port
  4874 00001329 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  4875 0000132B EE                                              out     dx,al                                           ;store lo-order loc
  4876 0000132C 59                                              pop     ecx                                             ;restore non-volatile regs
  4877 0000132D C3                                              ret                                                     ;return
  4878                                  ;-----------------------------------------------------------------------------------------------------------------------
  4879                                  ;
  4880                                  ;       Routine:        PutPrimaryEndOfInt
  4881                                  ;
  4882                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4883                                  ;
  4884                                  ;-----------------------------------------------------------------------------------------------------------------------
  4885 0000132E FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4886 0000132F B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4887 00001331 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4888 00001333 C3                                              ret                                                     ;return
  4889                                  ;-----------------------------------------------------------------------------------------------------------------------
  4890                                  ;
  4891                                  ;       Routine:        PutSecondaryEndOfInt
  4892                                  ;
  4893                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4894                                  ;
  4895                                  ;-----------------------------------------------------------------------------------------------------------------------
  4896 00001334 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4897 00001335 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4898 00001337 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4899 00001339 C3                                              ret                                                     ;return
  4900                                  ;-----------------------------------------------------------------------------------------------------------------------
  4901                                  ;
  4902                                  ;       Routine:        ReadRealTimeClock
  4903                                  ;
  4904                                  ;       Description:    This routine gets current date time from the real-time clock.
  4905                                  ;
  4906                                  ;       In:             DS:EBX  DATETIME structure
  4907                                  ;
  4908                                  ;-----------------------------------------------------------------------------------------------------------------------
  4909 0000133A 56                      ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4910 0000133B 57                                              push    edi                                             ;
  4911 0000133C 06                                              push    es                                              ;
  4912 0000133D 1E                                              push    ds                                              ;store data selector ...
  4913 0000133E 07                                              pop     es                                              ;... in es register
  4914 0000133F 89DF                                            mov     edi,ebx                                         ;date-time structure
  4915 00001341 B000                                            mov     al,ERTCSECONDREG                                ;second register
  4916 00001343 E670                                            out     ERTCREGPORT,al                                  ;select second register
  4917 00001345 E471                                            in      al,ERTCDATAPORT                                 ;read second register
  4918 00001347 FC                                              cld                                                     ;forward strings
  4919 00001348 AA                                              stosb                                                   ;store second value
  4920 00001349 B002                                            mov     al,ERTCMINUTEREG                                ;minute register
  4921 0000134B E670                                            out     ERTCREGPORT,al                                  ;select minute register
  4922 0000134D E471                                            in      al,ERTCDATAPORT                                 ;read minute register
  4923 0000134F AA                                              stosb                                                   ;store minute value
  4924 00001350 B004                                            mov     al,ERTCHOURREG                                  ;hour register
  4925 00001352 E670                                            out     ERTCREGPORT,al                                  ;select hour register
  4926 00001354 E471                                            in      al,ERTCDATAPORT                                 ;read hour register
  4927 00001356 AA                                              stosb                                                   ;store hour value
  4928 00001357 B006                                            mov     al,ERTCWEEKDAYREG                               ;weekday register
  4929 00001359 E670                                            out     ERTCREGPORT,al                                  ;select weekday register
  4930 0000135B E471                                            in      al,ERTCDATAPORT                                 ;read weekday register
  4931 0000135D AA                                              stosb                                                   ;store weekday value
  4932 0000135E B007                                            mov     al,ERTCDAYREG                                   ;day register
  4933 00001360 E670                                            out     ERTCREGPORT,al                                  ;select day register
  4934 00001362 E471                                            in      al,ERTCDATAPORT                                 ;read day register
  4935 00001364 AA                                              stosb                                                   ;store day value
  4936 00001365 B008                                            mov     al,ERTCMONTHREG                                 ;month register
  4937 00001367 E670                                            out     ERTCREGPORT,al                                  ;select month register
  4938 00001369 E471                                            in      al,ERTCDATAPORT                                 ;read month register
  4939 0000136B AA                                              stosb                                                   ;store month value
  4940 0000136C B009                                            mov     al,ERTCYEARREG                                  ;year register
  4941 0000136E E670                                            out     ERTCREGPORT,al                                  ;select year register
  4942 00001370 E471                                            in      al,ERTCDATAPORT                                 ;read year register
  4943 00001372 AA                                              stosb                                                   ;store year value
  4944 00001373 B032                                            mov     al,ERTCCENTURYREG                               ;century register
  4945 00001375 E670                                            out     ERTCREGPORT,al                                  ;select century register
  4946 00001377 E471                                            in      al,ERTCDATAPORT                                 ;read century register
  4947 00001379 AA                                              stosb                                                   ;store century value
  4948 0000137A B00B                                            mov     al,ERTCSTATUSREG                                ;status register
  4949 0000137C E670                                            out     ERTCREGPORT,al                                  ;select status register
  4950 0000137E E471                                            in      al,ERTCDATAPORT                                 ;read status register
  4951 00001380 A804                                            test    al,ERTCBINARYVALS                               ;test if values are binary
  4952 00001382 751D                                            jnz     .20                                             ;skip ahead if binary values
  4953 00001384 89DE                                            mov     esi,ebx                                         ;date-time structure address
  4954 00001386 89DF                                            mov     edi,ebx                                         ;date-time structure address
  4955 00001388 B908000000                                      mov     ecx,8                                           ;loop counter
  4956 0000138D AC                      .10                     lodsb                                                   ;BCD value
  4957 0000138E 88C4                                            mov     ah,al                                           ;BCD value
  4958 00001390 240F                                            and     al,00001111b                                    ;low-order decimal zone
  4959 00001392 80E4F0                                          and     ah,11110000b                                    ;hi-order decimal zone
  4960 00001395 D0EC                                            shr     ah,1                                            ;hi-order decimal * 8
  4961 00001397 00E0                                            add     al,ah                                           ;low-order + hi-order * 8
  4962 00001399 C0EC02                                          shr     ah,2                                            ;hi-order decimal * 2
  4963 0000139C 00E0                                            add     al,ah                                           ;low-order + hi-order * 10
  4964 0000139E AA                                              stosb                                                   ;replace BCD with binary
  4965 0000139F E2EC                                            loop    .10                                             ;next value
  4966 000013A1 07                      .20                     pop     es                                              ;restore non-volatile regs
  4967 000013A2 5F                                              pop     edi                                             ;
  4968 000013A3 5E                                              pop     esi                                             ;
  4969 000013A4 C3                                              ret                                                     ;return
  4970                                  ;-----------------------------------------------------------------------------------------------------------------------
  4971                                  ;
  4972                                  ;       Routine:        ResetSystem
  4973                                  ;
  4974                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4975                                  ;
  4976                                  ;       Out:            N/A     This routine does not return.
  4977                                  ;
  4978                                  ;-----------------------------------------------------------------------------------------------------------------------
  4979 000013A5 B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4980 000013AA E2FE                                            loop    $                                               ;clear interrupts
  4981 000013AC B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4982 000013AE E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4983 000013B0 FB                      .10                     sti                                                     ;enable maskable interrupts
  4984 000013B1 F4                                              hlt                                                     ;halt until interrupt
  4985 000013B2 EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  4986                                  ;-----------------------------------------------------------------------------------------------------------------------
  4987                                  ;
  4988                                  ;       Routine:        SetKeyboardLamps
  4989                                  ;
  4990                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4991                                  ;
  4992                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4993                                  ;
  4994                                  ;-----------------------------------------------------------------------------------------------------------------------
  4995 000013B4 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4996 000013B9 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4997 000013BB E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  4998 000013BD E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4999 000013C2 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5000 000013C4 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5001 000013C9 88F8                                            mov     al,bh                                           ;set/reset lamps value
  5002 000013CB E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  5003 000013CD E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5004 000013D2 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5005 000013D4 C3                                              ret                                                     ;return
  5006                                  ;-----------------------------------------------------------------------------------------------------------------------
  5007                                  ;
  5008                                  ;       Routine:        WaitForKeyInBuffer
  5009                                  ;
  5010                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5011                                  ;
  5012                                  ;       Out:            ZF      1 = Input buffer ready
  5013                                  ;                               0 = Input buffer not ready after timeout
  5014                                  ;
  5015                                  ;-----------------------------------------------------------------------------------------------------------------------
  5016 000013D5 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5017 000013D6 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5018 000013DB E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5019 000013DD A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  5020 000013DF E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  5021 000013E1 59                                              pop     ecx                                             ;restore non-volatile regs
  5022 000013E2 C3                                              ret                                                     ;return
  5023                                  ;-----------------------------------------------------------------------------------------------------------------------
  5024                                  ;
  5025                                  ;       Routine:        WaitForKeyOutBuffer
  5026                                  ;
  5027                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5028                                  ;
  5029                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5030                                  ;                               0 = Output buffer empty after timeout
  5031                                  ;
  5032                                  ;-----------------------------------------------------------------------------------------------------------------------
  5033 000013E3 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5034 000013E4 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5035 000013E9 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5036 000013EB A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  5037 000013ED E1FA                                            loopz   .10                                             ;loop until output buffer bit
  5038 000013EF 59                                              pop     ecx                                             ;restore non-volatile regs
  5039 000013F0 C3                                              ret                                                     ;return
  5040                                  ;-----------------------------------------------------------------------------------------------------------------------
  5041                                  ;
  5042                                  ;       End of the Kernel Function Library
  5043                                  ;
  5044                                  ;-----------------------------------------------------------------------------------------------------------------------
  5045 000013F1 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  5046                                  ;=======================================================================================================================
  5047                                  ;
  5048                                  ;       Console Task
  5049                                  ;
  5050                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5051                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5052                                  ;       screen and responds to user commands.
  5053                                  ;
  5054                                  ;=======================================================================================================================
  5055                                  ;-----------------------------------------------------------------------------------------------------------------------
  5056                                  ;
  5057                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5058                                  ;
  5059                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5060                                  ;
  5061                                  ;-----------------------------------------------------------------------------------------------------------------------
  5062                                  section                 constack                                                ;console task stack
  5063 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  5064                                  ;-----------------------------------------------------------------------------------------------------------------------
  5065                                  ;
  5066                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5067                                  ;
  5068                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5069                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5070                                  ;       16 descriptors. Six are initially defined.
  5071                                  ;
  5072                                  ;-----------------------------------------------------------------------------------------------------------------------
  5073                                  section                 conldt                                                  ;console local descriptors
  5074 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  5075 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  5076 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  5077 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  5078 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  5079 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  5080 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5081                                  ;-----------------------------------------------------------------------------------------------------------------------
  5082                                  ;
  5083                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5084                                  ;
  5085                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5086                                  ;       segment. CS to console code.
  5087                                  ;
  5088                                  ;-----------------------------------------------------------------------------------------------------------------------
  5089                                  section                 contss                                                  ;console task state segment
  5090 00000000 00000000                                        dd      0                                               ;00 back-link tss
  5091 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  5092 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  5093 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  5094 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  5095 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  5096 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  5097 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  5098 00000020 00000000                                        dd      0                                               ;20 eip
  5099 00000024 00020000                                        dd      0200h                                           ;24 eflags
  5100 00000028 00000000                                        dd      0                                               ;28 eax
  5101 0000002C 00000000                                        dd      0                                               ;2c ecx
  5102 00000030 00000000                                        dd      0                                               ;30 edx
  5103 00000034 00000000                                        dd      0                                               ;34 ebx
  5104 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  5105 0000003C 00000000                                        dd      0                                               ;3c ebp
  5106 00000040 00000000                                        dd      0                                               ;40 esi
  5107 00000044 00000000                                        dd      0                                               ;44 edi
  5108 00000048 1C000000                                        dd      001Ch                                           ;48 es
  5109 0000004C 24000000                                        dd      0024h                                           ;4c cs
  5110 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  5111 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  5112 00000058 00000000                                        dd      0                                               ;58 fs
  5113 0000005C 00000000                                        dd      0                                               ;5c gs
  5114 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5115 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5116                                  ;-----------------------------------------------------------------------------------------------------------------------
  5117                                  ;
  5118                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5119                                  ;
  5120                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5121                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5122                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5123                                  ;       event.
  5124                                  ;
  5125                                  ;-----------------------------------------------------------------------------------------------------------------------
  5126                                  section                 conmque                                                 ;console message queue
  5127 00000000 08000000                                        dd      8                                               ;head pointer
  5128 00000004 08000000                                        dd      8                                               ;tail pointer
  5129 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  5130                                  ;-----------------------------------------------------------------------------------------------------------------------
  5131                                  ;
  5132                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5133                                  ;
  5134                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5135                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5136                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5137                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5138                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5139                                  ;       board input, echoing to the console screen and responding to user commands.
  5140                                  ;
  5141                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5142                                  ;
  5143                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5144                                  ;                               |  Real Mode Interrupt Vectors                  |
  5145                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5146                                  ;                               |  Reserved BIOS Memory Area                    |
  5147                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5148                                  ;                               |  Shared Kernel Memory Area                    |
  5149                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5150                                  ;                               |  Global Descriptor Table (GDT)                |
  5151                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5152                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5153                                  ;                       002000  +-----------------------------------------------+
  5154                                  ;                               |  Interrupt Handlers                           |
  5155                                  ;                               |  Kernel Function Library                      |
  5156                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5157                                  ;                               |  Console Task Stack Area                      |
  5158                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5159                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5160                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5161                                  ;                               |  Console Task Task State Segment (TSS)        |
  5162                                  ;                       004800  +-----------------------------------------------+
  5163                                  ;                               |  Console Task Message Queue                   |
  5164                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5165                                  ;                               |  Console Task Code                            |
  5166                                  ;                               |  Console Task Constants                       |
  5167                                  ;                       006000  +===============================================+
  5168                                  ;
  5169                                  ;-----------------------------------------------------------------------------------------------------------------------
  5170                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5171 00000000 E8D9000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  5172                                  
  5173                                                          clearConsoleScreen                                      ;clear the console screen
  5173 00000005 B001                <1>  mov al,eClearConsoleScreen
  5173 00000007 CD30                <1>  int _svc
  5174                                                          putConsoleString czTitle                                ;display startup message
  5174 00000009 BA[3B0A0000]        <1>  mov edx,%1
  5174 0000000E B00C                <1>  mov al,ePutConsoleString
  5174 00000010 CD30                <1>  int _svc
  5175                                                          putConsoleString czROMMem                               ;ROM memory label
  5175 00000012 BA[160A0000]        <1>  mov edx,%1
  5175 00000017 B00C                <1>  mov al,ePutConsoleString
  5175 00000019 CD30                <1>  int _svc
  5176                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5176 0000001B BA3F090000          <1>  mov edx,%1
  5176 00000020 B00C                <1>  mov al,ePutConsoleString
  5176 00000022 CD30                <1>  int _svc
  5177                                                          putConsoleString czKB                                   ;Kilobytes
  5177 00000024 BA[90090000]        <1>  mov edx,%1
  5177 00000029 B00C                <1>  mov al,ePutConsoleString
  5177 0000002B CD30                <1>  int _svc
  5178                                                          putConsoleString czNewLine                              ;new line
  5178 0000002D BA[93090000]        <1>  mov edx,%1
  5178 00000032 B00C                <1>  mov al,ePutConsoleString
  5178 00000034 CD30                <1>  int _svc
  5179                                                          putConsoleString czBaseMem                              ;base memory label
  5179 00000036 BA[51090000]        <1>  mov edx,%1
  5179 0000003B B00C                <1>  mov al,ePutConsoleString
  5179 0000003D CD30                <1>  int _svc
  5180                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5180 0000003F BA34090000          <1>  mov edx,%1
  5180 00000044 B00C                <1>  mov al,ePutConsoleString
  5180 00000046 CD30                <1>  int _svc
  5181                                                          putConsoleString czKB                                   ;Kilobytes
  5181 00000048 BA[90090000]        <1>  mov edx,%1
  5181 0000004D B00C                <1>  mov al,ePutConsoleString
  5181 0000004F CD30                <1>  int _svc
  5182                                                          putConsoleString czNewLine                              ;new line
  5182 00000051 BA[93090000]        <1>  mov edx,%1
  5182 00000056 B00C                <1>  mov al,ePutConsoleString
  5182 00000058 CD30                <1>  int _svc
  5183                                                          putConsoleString czExtendedMem                          ;extended memory label
  5183 0000005A BA[78090000]        <1>  mov edx,%1
  5183 0000005F B00C                <1>  mov al,ePutConsoleString
  5183 00000061 CD30                <1>  int _svc
  5184                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5184 00000063 BA4A090000          <1>  mov edx,%1
  5184 00000068 B00C                <1>  mov al,ePutConsoleString
  5184 0000006A CD30                <1>  int _svc
  5185                                                          putConsoleString czKB                                   ;Kilobytes
  5185 0000006C BA[90090000]        <1>  mov edx,%1
  5185 00000071 B00C                <1>  mov al,ePutConsoleString
  5185 00000073 CD30                <1>  int _svc
  5186                                                          putConsoleString czNewLine                              ;new line
  5186 00000075 BA[93090000]        <1>  mov edx,%1
  5186 0000007A B00C                <1>  mov al,ePutConsoleString
  5186 0000007C CD30                <1>  int _svc
  5187                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5187                              <1> .10 :
  5187 0000007E BA[F7090000]        <1>  mov edx,%1
  5187 00000083 B00C                <1>  mov al,ePutConsoleString
  5187 00000085 CD30                <1>  int _svc
  5188                                                          placeCursor                                             ;set CRT cursor location
  5188 00000087 B00B                <1>  mov al,ePlaceCursor
  5188 00000089 CD30                <1>  int _svc
  5189                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5189 0000008B BA44080000          <1>  mov edx,%1
  5189 00000090 B94F000000          <1>  mov ecx,%2
  5189 00000095 B701                <1>  mov bh,%3
  5189 00000097 B30D                <1>  mov bl,%4
  5189 00000099 B006                <1>  mov al,eGetConsoleString
  5189 0000009B CD30                <1>  int _svc
  5190                                                          putConsoleString czNewLine                              ;newline
  5190 0000009D BA[93090000]        <1>  mov edx,%1
  5190 000000A2 B00C                <1>  mov al,ePutConsoleString
  5190 000000A4 CD30                <1>  int _svc
  5191                                  
  5192 000000A6 BA44080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  5193 000000AB BB94080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  5194 000000B0 E8BB000000                                      call    ConTakeToken                                    ;handle console input
  5195 000000B5 BA94080000                                      mov     edx,wzConsoleToken                              ;token buffer
  5196 000000BA E8E6000000                                      call    ConDetermineCommand                             ;determine command number
  5197 000000BF 83F81A                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5198 000000C2 720B                                            jb      .20                                             ;yes, branch
  5199                                  
  5200                                                          putConsoleString czUnknownCommand                       ;display error message
  5200 000000C4 BA[590A0000]        <1>  mov edx,%1
  5200 000000C9 B00C                <1>  mov al,ePutConsoleString
  5200 000000CB CD30                <1>  int _svc
  5201                                  
  5202 000000CD EBAF                                            jmp     .10                                             ;next command
  5203 000000CF C1E002                  .20                     shl     eax,2                                           ;index into jump table
  5204 000000D2 BA[05080000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  5205 000000D7 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5206 000000DA FFD0                                            call    eax                                             ;call command handler
  5207 000000DC EBA0                                            jmp     .10                                             ;next command
  5208                                  ;-----------------------------------------------------------------------------------------------------------------------
  5209                                  ;
  5210                                  ;       Routine:        ConInitializeData
  5211                                  ;
  5212                                  ;       Description:    This routine initializes console task variables.
  5213                                  ;
  5214                                  ;-----------------------------------------------------------------------------------------------------------------------
  5215 000000DE 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  5216 000000DF 57                                              push    edi                                             ;
  5217 000000E0 06                                              push    es                                              ;
  5218                                  ;
  5219                                  ;       Initialize console work areas.
  5220                                  ;
  5221 000000E1 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  5222 000000E3 07                                              pop     es                                              ;... into extra segment register
  5223 000000E4 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  5224 000000E9 30C0                                            xor     al,al                                           ;initialization value
  5225 000000EB B975010000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  5226 000000F0 FC                                              cld                                                     ;forward strings
  5227 000000F1 F3AA                                            rep     stosb                                           ;initialize data
  5228                                  ;
  5229                                  ;       Initialize heap size
  5230                                  ;
  5231 000000F3 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5232 000000F8 A304080000                                      mov     [wdConsoleHeapSize],eax                         ;set heap size
  5233                                  ;
  5234                                  ;       Initialize MEMROOT structure
  5235                                  ;
  5236 000000FD BF55090000                                      mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5237 00000102 B800000100                                      mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5238 00000107 31C9                                            xor     ecx,ecx                                         ;zero register
  5239 00000109 B104                                            mov     cl,4                                            ;count
  5240 0000010B F3AB                                            rep     stosd                                           ;store first/last contig and free addrs
  5241 0000010D 31C0                                            xor     eax,eax                                         ;zero register
  5242 0000010F AB                                              stosd                                                   ;zero first task block
  5243 00000110 AB                                              stosd                                                   ;zero last task block
  5244                                  ;
  5245                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5246                                  ;
  5247 00000111 BF00000100                                      mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5248 00000116 B846524545                                      mov     eax,EMEMFREECODE                                ;free memory signature
  5249 0000011B AB                                              stosd                                                   ;store signature
  5250 0000011C B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5251 00000121 AB                                              stosd                                                   ;store block size
  5252 00000122 31C9                                            xor     ecx,ecx                                         ;zero register
  5253 00000124 B106                                            mov     cl,6                                            ;count
  5254 00000126 31C0                                            xor     eax,eax                                         ;zero register
  5255 00000128 F3AB                                            rep     stosd                                           ;zero owner, reserved, pointers
  5256                                  ;
  5257                                  ;       Read memory sizes from ROM
  5258                                  ;
  5259                                                          getROMMemSize                                           ;get ROM memory size
  5259 0000012A B008                <1>  mov al,eGetROMMemSize
  5259 0000012C CD30                <1>  int _svc
  5260 0000012E A310080000                                      mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5261 00000133 89C1                                            mov     ecx,eax                                         ;integer param
  5262 00000135 BA3F090000                                      mov     edx,wzROMMemSize                                ;output buffer param
  5263 0000013A B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5264                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5264 0000013C B01A                <1>  mov al,eUnsignedToDecimalString
  5264 0000013E CD30                <1>  int _svc
  5265                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5265 00000140 B005                <1>  mov al,eGetBaseMemSize
  5265 00000142 CD30                <1>  int _svc
  5266 00000144 A308080000                                      mov     [wdBaseMemSize],eax                             ;save base RAM count
  5267 00000149 89C1                                            mov     ecx,eax                                         ;integer param
  5268 0000014B BA34090000                                      mov     edx,wzBaseMemSize                               ;output buffer param
  5269 00000150 B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5270                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5270 00000152 B01A                <1>  mov al,eUnsignedToDecimalString
  5270 00000154 CD30                <1>  int _svc
  5271                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5271 00000156 B007                <1>  mov al,eGetExtendedMemSize
  5271 00000158 CD30                <1>  int _svc
  5272 0000015A A30C080000                                      mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5273 0000015F 89C1                                            mov     ecx,eax                                         ;integer param
  5274 00000161 BA4A090000                                      mov     edx,wzExtendedMemSize                           ;output buffer param
  5275 00000166 B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5276                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5276 00000168 B01A                <1>  mov al,eUnsignedToDecimalString
  5276 0000016A CD30                <1>  int _svc
  5277                                  ;
  5278                                  ;       Restore and return.
  5279                                  ;
  5280 0000016C 07                                              pop     es                                              ;restore non-volatile regs
  5281 0000016D 5F                                              pop     edi                                             ;
  5282 0000016E 59                                              pop     ecx                                             ;
  5283 0000016F C3                                              ret                                                     ;return
  5284                                  ;-----------------------------------------------------------------------------------------------------------------------
  5285                                  ;
  5286                                  ;       Routine:        ConTakeToken
  5287                                  ;
  5288                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5289                                  ;
  5290                                  ;       In:             DS:EDX  source buffer address
  5291                                  ;                       DS:EBX  target buffer address
  5292                                  ;
  5293                                  ;       Out:            DS:EDX  source buffer address
  5294                                  ;                       DS:EBX  target buffer address
  5295                                  ;
  5296                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5297                                  ;
  5298                                  ;-----------------------------------------------------------------------------------------------------------------------
  5299 00000170 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  5300 00000171 57                                              push    edi                                             ;
  5301 00000172 06                                              push    es                                              ;
  5302 00000173 1E                                              push    ds                                              ;load data segment selector ...
  5303 00000174 07                                              pop     es                                              ;... into extra segment reg
  5304 00000175 89D6                                            mov     esi,edx                                         ;source buffer address
  5305 00000177 89DF                                            mov     edi,ebx                                         ;target buffer address
  5306 00000179 C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5307 0000017C FC                                              cld                                                     ;forward strings
  5308 0000017D AC                      .10                     lodsb                                                   ;load byte
  5309 0000017E 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5310 00000180 74FB                                            je      .10                                             ;yes, continue
  5311 00000182 84C0                                            test    al,al                                           ;end of line?
  5312 00000184 7410                                            jz      .40                                             ;yes, branch
  5313 00000186 AA                      .20                     stosb                                                   ;store byte
  5314 00000187 AC                                              lodsb                                                   ;load byte
  5315 00000188 84C0                                            test    al,al                                           ;end of line?
  5316 0000018A 740A                                            jz      .40                                             ;no, continue
  5317 0000018C 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5318 0000018E 75F6                                            jne     .20                                             ;no, continue
  5319 00000190 AC                      .30                     lodsb                                                   ;load byte
  5320 00000191 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5321 00000193 74FB                                            je      .30                                             ;yes, continue
  5322 00000195 4E                                              dec     esi                                             ;pre-position
  5323 00000196 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5324 00000199 89D7                                            mov     edi,edx                                         ;source buffer address
  5325 0000019B AC                      .50                     lodsb                                                   ;remaining byte
  5326 0000019C AA                                              stosb                                                   ;move to front of buffer
  5327 0000019D 84C0                                            test    al,al                                           ;end of line?
  5328 0000019F 75FA                                            jnz     .50                                             ;no, continue
  5329 000001A1 07                                              pop     es                                              ;restore non-volatile regs
  5330 000001A2 5F                                              pop     edi                                             ;
  5331 000001A3 5E                                              pop     esi                                             ;
  5332 000001A4 C3                                              ret                                                     ;return
  5333                                  ;-----------------------------------------------------------------------------------------------------------------------
  5334                                  ;
  5335                                  ;       Routine:        ConDetermineCommand
  5336                                  ;
  5337                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5338                                  ;
  5339                                  ;       input:          DS:EDX  command address
  5340                                  ;
  5341                                  ;       output:         EAX     >=0     = command nbr
  5342                                  ;                               0       = unknown command
  5343                                  ;
  5344                                  ;-----------------------------------------------------------------------------------------------------------------------
  5345 000001A5 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5346 000001A6 51                                              push    ecx                                             ;
  5347 000001A7 56                                              push    esi                                             ;
  5348 000001A8 57                                              push    edi                                             ;
  5349                                  
  5350                                                          upperCaseString                                         ;upper-case string at EDX
  5350 000001A9 B01C                <1>  mov al,eUpperCaseString
  5350 000001AB CD30                <1>  int _svc
  5351                                  
  5352 000001AD BE[6D080000]                                    mov     esi,tConCmdTbl                                  ;commands table
  5353 000001B2 31FF                                            xor     edi,edi                                         ;intialize command number
  5354 000001B4 FC                                              cld                                                     ;forward strings
  5355 000001B5 AC                      .10                     lodsb                                                   ;command length
  5356 000001B6 0FB6C8                                          movzx   ecx,al                                          ;command length
  5357 000001B9 E30D                                            jecxz   .20                                             ;branch if end of table
  5358 000001BB 89F3                                            mov     ebx,esi                                         ;table entry address
  5359 000001BD 01CE                                            add     esi,ecx                                         ;next table entry address
  5360                                  
  5361                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5361 000001BF B002                <1>  mov al,eCompareMemory
  5361 000001C1 CD30                <1>  int _svc
  5362                                  
  5363 000001C3 E303                                            jecxz   .20                                             ;branch if equal
  5364 000001C5 47                                              inc     edi                                             ;increment command nbr
  5365 000001C6 EBED                                            jmp     .10                                             ;repeat
  5366 000001C8 89F8                    .20                     mov     eax,edi                                         ;command number
  5367 000001CA 5F                                              pop     edi                                             ;restore non-volatile regs
  5368 000001CB 5E                                              pop     esi                                             ;
  5369 000001CC 59                                              pop     ecx                                             ;
  5370 000001CD 5B                                              pop     ebx                                             ;
  5371 000001CE C3                                              ret                                                     ;return
  5372                                  ;-----------------------------------------------------------------------------------------------------------------------
  5373                                  ;
  5374                                  ;       Routine:        ConClear
  5375                                  ;
  5376                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5377                                  ;
  5378                                  ;-----------------------------------------------------------------------------------------------------------------------
  5379                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5379                              <1> ConClear :
  5379 000001CF B001                <1>  mov al,eClearConsoleScreen
  5379 000001D1 CD30                <1>  int _svc
  5380 000001D3 C3                                              ret                                                     ;return
  5381                                  ;-----------------------------------------------------------------------------------------------------------------------
  5382                                  ;
  5383                                  ;       Routine:        ConDate
  5384                                  ;
  5385                                  ;       Description:    This routine handles the DATE command.
  5386                                  ;
  5387                                  ;-----------------------------------------------------------------------------------------------------------------------
  5388                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5388                              <1> ConDate :
  5388 000001D4 BB6D090000          <1>  mov ebx,%1
  5388 000001D9 B018                <1>  mov al,eReadRealTimeClock
  5388 000001DB CD30                <1>  int _svc
  5389                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5389 000001DD BB6D090000          <1>  mov ebx,%1
  5389 000001E2 BAE4080000          <1>  mov edx,%2
  5389 000001E7 B00D                <1>  mov al,ePutDateString
  5389 000001E9 CD30                <1>  int _svc
  5390                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5390 000001EB BAE4080000          <1>  mov edx,%1
  5390 000001F0 B00C                <1>  mov al,ePutConsoleString
  5390 000001F2 CD30                <1>  int _svc
  5391                                                          putConsoleString  czNewLine                             ;write newline to console
  5391 000001F4 BA[93090000]        <1>  mov edx,%1
  5391 000001F9 B00C                <1>  mov al,ePutConsoleString
  5391 000001FB CD30                <1>  int _svc
  5392 000001FD C3                                              ret                                                     ;return
  5393                                  ;-----------------------------------------------------------------------------------------------------------------------
  5394                                  ;
  5395                                  ;       Routine:        ConDay
  5396                                  ;
  5397                                  ;       Description:    This routine handles the DAY command.
  5398                                  ;
  5399                                  ;-----------------------------------------------------------------------------------------------------------------------
  5400                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5400                              <1> ConDay :
  5400 000001FE BB6D090000          <1>  mov ebx,%1
  5400 00000203 B018                <1>  mov al,eReadRealTimeClock
  5400 00000205 CD30                <1>  int _svc
  5401                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5401 00000207 BB6D090000          <1>  mov ebx,%1
  5401 0000020C BAE4080000          <1>  mov edx,%2
  5401 00000211 B00E                <1>  mov al,ePutDayString
  5401 00000213 CD30                <1>  int _svc
  5402                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5402 00000215 BAE4080000          <1>  mov edx,%1
  5402 0000021A B00C                <1>  mov al,ePutConsoleString
  5402 0000021C CD30                <1>  int _svc
  5403                                                          putConsoleString  czNewLine                             ;write newline to console
  5403 0000021E BA[93090000]        <1>  mov edx,%1
  5403 00000223 B00C                <1>  mov al,ePutConsoleString
  5403 00000225 CD30                <1>  int _svc
  5404 00000227 C3                                              ret                                                     ;return
  5405                                  ;-----------------------------------------------------------------------------------------------------------------------
  5406                                  ;
  5407                                  ;       Routine:        ConExit
  5408                                  ;
  5409                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5410                                  ;
  5411                                  ;-----------------------------------------------------------------------------------------------------------------------
  5412                                  ConExit                 resetSystem                                             ;issue system reset
  5412                              <1> ConExit :
  5412 00000228 B019                <1>  mov al,eResetSystem
  5412 0000022A CD30                <1>  int _svc
  5413 0000022C C3                                              ret                                                     ;return
  5414                                  ;-----------------------------------------------------------------------------------------------------------------------
  5415                                  ;
  5416                                  ;       Routine:        ConFree
  5417                                  ;
  5418                                  ;       Description:    This routine handles the FREE command.
  5419                                  ;
  5420                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5421                                  ;
  5422                                  ;-----------------------------------------------------------------------------------------------------------------------
  5423 0000022D 53                      ConFree                 push    ebx                                             ;save non-volatile regs
  5424 0000022E 51                                              push    ecx                                             ;
  5425 0000022F 56                                              push    esi                                             ;
  5426 00000230 57                                              push    edi                                             ;
  5427                                  ;
  5428                                  ;       Get address parameter
  5429                                  ;
  5430 00000231 BA44080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5431 00000236 BB94080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5432 0000023B E830FFFFFF                                      call    ConTakeToken                                    ;take first param as token
  5433                                  ;
  5434                                  ;       Convert input parameter from hexadecimal string to binary
  5435                                  ;
  5436 00000240 803D9408000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5437 00000247 7421                                            je      .10                                             ;no, branch
  5438 00000249 BA94080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5439                                  
  5440                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5440 0000024E B009                <1>  mov al,eHexadecimalToUnsigned
  5440 00000250 CD30                <1>  int _svc
  5441                                  
  5442 00000252 85C0                                            test    eax,eax                                         ;valid parameter?
  5443 00000254 7414                                            jz      .10                                             ;no, branch
  5444                                  ;
  5445                                  ;       Free memory block
  5446                                  ;
  5447                                                          freeMemory eax                                          ;free memory
  5447 00000256 89C2                <1>  mov edx,%1
  5447 00000258 B004                <1>  mov al,eFreeMemory
  5447 0000025A CD30                <1>  int _svc
  5448                                  
  5449 0000025C 83F8FF                                          cmp     eax,-1                                          ;memory freed?
  5450 0000025F 7409                                            je      .10                                             ;no, branch
  5451                                  ;
  5452                                  ;       Indicate memory freed
  5453                                  ;
  5454                                                          putConsoleString czOK                                   ;indicate success
  5454 00000261 BA[96090000]        <1>  mov edx,%1
  5454 00000266 B00C                <1>  mov al,ePutConsoleString
  5454 00000268 CD30                <1>  int _svc
  5455                                  ;
  5456                                  ;       Restore and return
  5457                                  ;
  5458 0000026A 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5459 0000026B 5E                                              pop     esi                                             ;
  5460 0000026C 59                                              pop     ecx                                             ;
  5461 0000026D 5B                                              pop     ebx                                             ;
  5462 0000026E C3                                              ret                                                     ;return
  5463                                  ;-----------------------------------------------------------------------------------------------------------------------
  5464                                  ;
  5465                                  ;       Routine:        ConHour
  5466                                  ;
  5467                                  ;       Description:    This routine Handles the HOUR command.
  5468                                  ;
  5469                                  ;-----------------------------------------------------------------------------------------------------------------------
  5470                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5470                              <1> ConHour :
  5470 0000026F BB6D090000          <1>  mov ebx,%1
  5470 00000274 B018                <1>  mov al,eReadRealTimeClock
  5470 00000276 CD30                <1>  int _svc
  5471                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5471 00000278 BB6D090000          <1>  mov ebx,%1
  5471 0000027D BAE4080000          <1>  mov edx,%2
  5471 00000282 B00F                <1>  mov al,ePutHourString
  5471 00000284 CD30                <1>  int _svc
  5472                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5472 00000286 BAE4080000          <1>  mov edx,%1
  5472 0000028B B00C                <1>  mov al,ePutConsoleString
  5472 0000028D CD30                <1>  int _svc
  5473                                                          putConsoleString  czNewLine                             ;write newline to console
  5473 0000028F BA[93090000]        <1>  mov edx,%1
  5473 00000294 B00C                <1>  mov al,ePutConsoleString
  5473 00000296 CD30                <1>  int _svc
  5474 00000298 C3                                              ret                                                     ;return
  5475                                  ;-----------------------------------------------------------------------------------------------------------------------
  5476                                  ;
  5477                                  ;       Routine:        ConInt6
  5478                                  ;
  5479                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5480                                  ;
  5481                                  ;-----------------------------------------------------------------------------------------------------------------------
  5482 00000299 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  5483 0000029B C3                                              ret                                                     ;return (not executed)
  5484                                  ;-----------------------------------------------------------------------------------------------------------------------
  5485                                  ;
  5486                                  ;       Routine:        ConMalloc
  5487                                  ;
  5488                                  ;       Description:    This routine handles the MALLOC command.
  5489                                  ;
  5490                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5491                                  ;
  5492                                  ;-----------------------------------------------------------------------------------------------------------------------
  5493 0000029C 53                      ConMalloc               push    ebx                                             ;save non-volatile regs
  5494 0000029D 51                                              push    ecx                                             ;
  5495 0000029E 56                                              push    esi                                             ;
  5496 0000029F 57                                              push    edi                                             ;
  5497                                  ;
  5498                                  ;       Get size parameter
  5499                                  ;
  5500 000002A0 BA44080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5501 000002A5 BB94080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5502 000002AA E8C1FEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5503                                  ;
  5504                                  ;       Convert input parameter from decimal string to binary
  5505                                  ;
  5506 000002AF 803D9408000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5507 000002B6 7434                                            je      .10                                             ;no, branch
  5508 000002B8 BA94080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5509                                  
  5510                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5510 000002BD B003                <1>  mov al,eDecimalToUnsigned
  5510 000002BF CD30                <1>  int _svc
  5511                                  
  5512 000002C1 85C0                                            test    eax,eax                                         ;valid parameter?
  5513 000002C3 7427                                            jz      .10                                             ;no, branch
  5514                                  ;
  5515                                  ;       Allocate memory block
  5516                                  ;
  5517                                                          allocateMemory eax                                      ;allocate memory
  5517 000002C5 89C1                <1>  mov ecx,%1
  5517 000002C7 B000                <1>  mov al,eAllocateMemory
  5517 000002C9 CD30                <1>  int _svc
  5518                                  
  5519 000002CB 85C0                                            test    eax,eax                                         ;memory allocated?
  5520 000002CD 741D                                            jz      .10                                             ;no, branch
  5521                                  ;
  5522                                  ;       Report allocated memory block address
  5523                                  ;
  5524 000002CF BAE4080000                                      mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5525 000002D4 89C1                                            mov     ecx,eax                                         ;memory address
  5526                                  
  5527                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5527 000002D6 B01B                <1>  mov al,eUnsignedToHexadecimal
  5527 000002D8 CD30                <1>  int _svc
  5528                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5528 000002DA BAE4080000          <1>  mov edx,%1
  5528 000002DF B00C                <1>  mov al,ePutConsoleString
  5528 000002E1 CD30                <1>  int _svc
  5529                                                          putConsoleString czNewLine                              ;display new line
  5529 000002E3 BA[93090000]        <1>  mov edx,%1
  5529 000002E8 B00C                <1>  mov al,ePutConsoleString
  5529 000002EA CD30                <1>  int _svc
  5530                                  
  5531 000002EC 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5532 000002ED 5E                                              pop     esi                                             ;
  5533 000002EE 59                                              pop     ecx                                             ;
  5534 000002EF 5B                                              pop     ebx                                             ;
  5535 000002F0 C3                                              ret                                                     ;return
  5536                                  ;-----------------------------------------------------------------------------------------------------------------------
  5537                                  ;
  5538                                  ;       Routine:        ConMem
  5539                                  ;
  5540                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5541                                  ;
  5542                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5543                                  ;
  5544                                  ;-----------------------------------------------------------------------------------------------------------------------
  5545 000002F1 53                      ConMem                  push    ebx                                             ;save non-volatile regs
  5546 000002F2 56                                              push    esi                                             ;
  5547 000002F3 57                                              push    edi                                             ;
  5548                                  ;
  5549                                  ;                       update the source address if a parameter is given
  5550                                  ;
  5551 000002F4 BA44080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5552 000002F9 BB94080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5553 000002FE E86DFEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5554 00000303 803D9408000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5555 0000030A 740E                                            je      .10                                             ;no, branch
  5556 0000030C BA94080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5557                                  
  5558                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5558 00000311 B009                <1>  mov al,eHexadecimalToUnsigned
  5558 00000313 CD30                <1>  int _svc
  5559                                  
  5560 00000315 A300080000                                      mov     [wdConsoleMemBase],eax                          ;save console memory address
  5561                                  ;
  5562                                  ;                       setup source address and row count
  5563                                  ;
  5564 0000031A 8B3500080000            .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5565 00000320 31C9                                            xor     ecx,ecx                                         ;zero register
  5566 00000322 B110                                            mov     cl,16                                           ;row count
  5567                                  ;
  5568                                  ;                       start the row with the source address in hexadecimal
  5569                                  ;
  5570 00000324 51                      .20                     push    ecx                                             ;save remaining rows
  5571 00000325 BFE4080000                                      mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5572 0000032A 89FA                                            mov     edx,edi                                         ;output buffer address
  5573 0000032C 89F1                                            mov     ecx,esi                                         ;console memory address
  5574                                  
  5575                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5575 0000032E B01B                <1>  mov al,eUnsignedToHexadecimal
  5575 00000330 CD30                <1>  int _svc
  5576                                  
  5577 00000332 83C708                                          add     edi,8                                           ;end of memory addr hexnum
  5578 00000335 B020                                            mov     al,' '                                          ;ascii space
  5579 00000337 AA                                              stosb                                                   ;store delimiter
  5580                                  ;
  5581                                  ;                       output 16 ASCII hexadecimal byte values for the row
  5582                                  ;
  5583 00000338 31C9                                            xor     ecx,ecx                                         ;zero register
  5584 0000033A B110                                            mov     cl,16                                           ;loop count
  5585 0000033C 51                      .30                     push    ecx                                             ;save loop count
  5586 0000033D AC                                              lodsb                                                   ;memory byte
  5587 0000033E 88C4                                            mov     ah,al                                           ;memory byte
  5588 00000340 C0E804                                          shr     al,4                                            ;high-order in bits 3-0
  5589 00000343 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  5590 00000345 3C3A                                            cmp     al,3ah                                          ;numeric range?
  5591 00000347 7202                                            jb      .40                                             ;yes, skip ahead
  5592 00000349 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  5593 0000034B AA                      .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5594 0000034C 88E0                                            mov     al,ah                                           ;low-order in bits 3-0
  5595 0000034E 240F                                            and     al,0fh                                          ;mask out high-order bits
  5596 00000350 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  5597 00000352 3C3A                                            cmp     al,3ah                                          ;numeric range?
  5598 00000354 7202                                            jb      .50                                             ;yes, skip ahead
  5599 00000356 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  5600 00000358 AA                      .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5601 00000359 B020                                            mov     al,' '                                          ;ascii space
  5602 0000035B AA                                              stosb                                                   ;store ascii space delimiter
  5603 0000035C 59                                              pop     ecx                                             ;loop count
  5604 0000035D E2DD                                            loop    .30                                             ;next
  5605                                  ;
  5606                                  ;                       output printable ASCII character section for the row
  5607                                  ;
  5608 0000035F 83EE10                                          sub     esi,16                                          ;reset source pointer
  5609 00000362 B110                                            mov     cl,16                                           ;loop count
  5610 00000364 AC                      .60                     lodsb                                                   ;source byte
  5611 00000365 3C20                                            cmp     al,32                                           ;printable? (low-range test)
  5612 00000367 7204                                            jb      .70                                             ;no, skip ahead
  5613 00000369 3C80                                            cmp     al,128                                          ;printable? (high-range test)
  5614 0000036B 7202                                            jb      .80                                             ;yes, skip ahead
  5615 0000036D B020                    .70                     mov     al,' '                                          ;display space instead of printable
  5616 0000036F AA                      .80                     stosb                                                   ;store printable ascii byte
  5617 00000370 E2F2                                            loop    .60                                             ;next source byte
  5618 00000372 30C0                                            xor     al,al                                           ;nul-terminator
  5619 00000374 AA                                              stosb                                                   ;terminate output line
  5620                                  ;
  5621                                  ;                       display constructed output buffer and newline
  5622                                  ;
  5623                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5623 00000375 BAE4080000          <1>  mov edx,%1
  5623 0000037A B00C                <1>  mov al,ePutConsoleString
  5623 0000037C CD30                <1>  int _svc
  5624                                                          putConsoleString czNewLine                              ;display new line
  5624 0000037E BA[93090000]        <1>  mov edx,%1
  5624 00000383 B00C                <1>  mov al,ePutConsoleString
  5624 00000385 CD30                <1>  int _svc
  5625                                  ;
  5626                                  ;                       repeat until all lines displayed and preserve source address
  5627                                  ;
  5628 00000387 59                                              pop     ecx                                             ;remaining rows
  5629 00000388 E29A                                            loop    .20                                             ;next row
  5630 0000038A 893500080000                                    mov     [wdConsoleMemBase],esi                          ;update console memory address
  5631 00000390 5F                                              pop     edi                                             ;restore regs
  5632 00000391 5E                                              pop     esi                                             ;
  5633 00000392 5B                                              pop     ebx                                             ;
  5634 00000393 C3                                              ret                                                     ;return
  5635                                  ;-----------------------------------------------------------------------------------------------------------------------
  5636                                  ;
  5637                                  ;       Routine:        ConMinute
  5638                                  ;
  5639                                  ;       Description:    This routine Handles the MINUTE command.
  5640                                  ;
  5641                                  ;-----------------------------------------------------------------------------------------------------------------------
  5642                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5642                              <1> ConMinute :
  5642 00000394 BB6D090000          <1>  mov ebx,%1
  5642 00000399 B018                <1>  mov al,eReadRealTimeClock
  5642 0000039B CD30                <1>  int _svc
  5643                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5643 0000039D BB6D090000          <1>  mov ebx,%1
  5643 000003A2 BAE4080000          <1>  mov edx,%2
  5643 000003A7 B010                <1>  mov al,ePutMinuteString
  5643 000003A9 CD30                <1>  int _svc
  5644                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5644 000003AB BAE4080000          <1>  mov edx,%1
  5644 000003B0 B00C                <1>  mov al,ePutConsoleString
  5644 000003B2 CD30                <1>  int _svc
  5645                                                          putConsoleString  czNewLine                             ;write newline to console
  5645 000003B4 BA[93090000]        <1>  mov edx,%1
  5645 000003B9 B00C                <1>  mov al,ePutConsoleString
  5645 000003BB CD30                <1>  int _svc
  5646 000003BD C3                                              ret                                                     ;return
  5647                                  ;-----------------------------------------------------------------------------------------------------------------------
  5648                                  ;
  5649                                  ;       Routine:        ConMonth
  5650                                  ;
  5651                                  ;       Description:    This routine Handles the MONTH command.
  5652                                  ;
  5653                                  ;-----------------------------------------------------------------------------------------------------------------------
  5654                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5654                              <1> ConMonth :
  5654 000003BE BB6D090000          <1>  mov ebx,%1
  5654 000003C3 B018                <1>  mov al,eReadRealTimeClock
  5654 000003C5 CD30                <1>  int _svc
  5655                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5655 000003C7 BB6D090000          <1>  mov ebx,%1
  5655 000003CC BAE4080000          <1>  mov edx,%2
  5655 000003D1 B011                <1>  mov al,ePutMonthString
  5655 000003D3 CD30                <1>  int _svc
  5656                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5656 000003D5 BAE4080000          <1>  mov edx,%1
  5656 000003DA B00C                <1>  mov al,ePutConsoleString
  5656 000003DC CD30                <1>  int _svc
  5657                                                          putConsoleString  czNewLine                             ;write newline to console
  5657 000003DE BA[93090000]        <1>  mov edx,%1
  5657 000003E3 B00C                <1>  mov al,ePutConsoleString
  5657 000003E5 CD30                <1>  int _svc
  5658 000003E7 C3                                              ret                                                     ;return
  5659                                  ;-----------------------------------------------------------------------------------------------------------------------
  5660                                  ;
  5661                                  ;       Routine:        ConMonthName
  5662                                  ;
  5663                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5664                                  ;
  5665                                  ;-----------------------------------------------------------------------------------------------------------------------
  5666                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5666                              <1> ConMonthName :
  5666 000003E8 BB6D090000          <1>  mov ebx,%1
  5666 000003ED B018                <1>  mov al,eReadRealTimeClock
  5666 000003EF CD30                <1>  int _svc
  5667                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5667 000003F1 BB6D090000          <1>  mov ebx,%1
  5667 000003F6 BAE4080000          <1>  mov edx,%2
  5667 000003FB B012                <1>  mov al,ePutMonthNameString
  5667 000003FD CD30                <1>  int _svc
  5668                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5668 000003FF BAE4080000          <1>  mov edx,%1
  5668 00000404 B00C                <1>  mov al,ePutConsoleString
  5668 00000406 CD30                <1>  int _svc
  5669                                                          putConsoleString   czNewLine                            ;write newline to console
  5669 00000408 BA[93090000]        <1>  mov edx,%1
  5669 0000040D B00C                <1>  mov al,ePutConsoleString
  5669 0000040F CD30                <1>  int _svc
  5670 00000411 C3                                              ret                                                     ;return
  5671                                  ;-----------------------------------------------------------------------------------------------------------------------
  5672                                  ;
  5673                                  ;       Routine:        ConPCIProbe
  5674                                  ;
  5675                                  ;       Description:    This routine handles the PCIProbe command.
  5676                                  ;
  5677                                  ;-----------------------------------------------------------------------------------------------------------------------
  5678 00000412 53                      ConPCIProbe             push    ebx                                             ;save non-volatile regs
  5679                                  ;
  5680                                  ;                       initialize variables
  5681                                  ;
  5682 00000413 30C0                                            xor     al,al                                           ;zero register
  5683 00000415 A240080000                                      mov     [wbConsolePCIBus],al                            ;initialize bus
  5684 0000041A A241080000                                      mov     [wbConsolePCIDevice],al                         ;initialize device
  5685 0000041F A242080000                                      mov     [wbConsolePCIFunction],al                       ;initialize function
  5686                                  ;
  5687                                  ;                       construct PCI selector
  5688                                  ;
  5689 00000424 8A2540080000            .10                     mov     ah,[wbConsolePCIBus]                            ;AH = bbbb bbbb
  5690 0000042A 8A1541080000                                    mov     dl,[wbConsolePCIDevice]                         ;DL = ???d dddd
  5691 00000430 C0E203                                          shl     dl,3                                            ;DL = dddd d000
  5692 00000433 A042080000                                      mov     al,[wbConsolePCIFunction]                       ;AL = ???? ?fff
  5693 00000438 2407                                            and     al,007h                                         ;AL = 0000 0fff
  5694 0000043A 08D0                                            or      al,dl                                           ;AL = dddd dfff
  5695 0000043C 0FB7C0                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  5696 0000043F C1E008                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  5697 00000442 0D00000080                                      or      eax,80000000h                                   ;1000 0000 bbbb bbbb dddd dfff 0000 0000
  5698 00000447 A314080000                                      mov     [wdConsolePCISelector],eax                      ;save selector
  5699                                  ;
  5700                                  ;                       read PCI data register
  5701                                  ;
  5702 0000044C 66BAF80C                                        mov     dx,0cf8h                                        ;register port
  5703 00000450 EF                                              out     dx,eax                                          ;select device
  5704 00000451 66BAFC0C                                        mov     dx,0cfch                                        ;data port
  5705 00000455 ED                                              in      eax,dx                                          ;read register data
  5706 00000456 A318080000                                      mov     [wdConsolePCIData],eax                          ;save data
  5707                                  ;
  5708                                  ;                       interpret PCI data value and display finding
  5709                                  ;
  5710 0000045B 83F8FF                                          cmp     eax,0ffffffffh                                  ;not defined?
  5711 0000045E 7447                                            je      .20                                             ;yes, branch
  5712 00000460 BA94080000                                      mov     edx,wzConsoleToken                              ;output buffer
  5713 00000465 E83D010000                                      call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  5714                                  
  5715                                                          putConsoleString wzConsoleToken                         ;display bus as decimal
  5715 0000046A BA94080000          <1>  mov edx,%1
  5715 0000046F B00C                <1>  mov al,ePutConsoleString
  5715 00000471 CD30                <1>  int _svc
  5716                                  
  5717 00000473 E873010000                                      call    ConInterpretPCIData                             ;update flags based on data
  5718                                  
  5719                                                          putConsoleString czSpace
  5719 00000478 BA[390A0000]        <1>  mov edx,%1
  5719 0000047D B00C                <1>  mov al,ePutConsoleString
  5719 0000047F CD30                <1>  int _svc
  5720                                                          putConsoleString [wdConsolePCIVendorStr]
  5720 00000481 8B151C080000        <1>  mov edx,%1
  5720 00000487 B00C                <1>  mov al,ePutConsoleString
  5720 00000489 CD30                <1>  int _svc
  5721                                                          putConsoleString czSpace
  5721 0000048B BA[390A0000]        <1>  mov edx,%1
  5721 00000490 B00C                <1>  mov al,ePutConsoleString
  5721 00000492 CD30                <1>  int _svc
  5722                                                          putConsoleString [wdConsolePCIChipStr]
  5722 00000494 8B1520080000        <1>  mov edx,%1
  5722 0000049A B00C                <1>  mov al,ePutConsoleString
  5722 0000049C CD30                <1>  int _svc
  5723                                                          putConsoleString czNewLine                              ;display new line
  5723 0000049E BA[93090000]        <1>  mov edx,%1
  5723 000004A3 B00C                <1>  mov al,ePutConsoleString
  5723 000004A5 CD30                <1>  int _svc
  5724                                  ;
  5725                                  ;                       step to next function, device, bus
  5726                                  ;
  5727 000004A7 FE0542080000            .20                     inc     byte [wbConsolePCIFunction]                     ;next function
  5728 000004AD 803D4208000008                                  cmp     byte [wbConsolePCIFunction],8                   ;at limit?
  5729 000004B4 0F826AFFFFFF                                    jb      .10                                             ;no, continue
  5730 000004BA C6054208000000                                  mov     byte [wbConsolePCIFunction],0                   ;zero function
  5731 000004C1 FE0541080000                                    inc     byte [wbConsolePCIDevice]                       ;next device
  5732 000004C7 803D4108000020                                  cmp     byte [wbConsolePCIDevice],32                    ;at limit?
  5733 000004CE 0F8250FFFFFF                                    jb      .10                                             ;no, continue
  5734 000004D4 C6054108000000                                  mov     byte [wbConsolePCIDevice],0                     ;zero device
  5735 000004DB FE0540080000                                    inc     byte [wbConsolePCIBus]                          ;next bus
  5736 000004E1 803D4008000000                                  cmp     byte [wbConsolePCIBus],0                        ;at limit?
  5737 000004E8 0F8236FFFFFF                                    jb      .10                                             ;no, continue
  5738                                  
  5739 000004EE E9B2000000                                      jmp     .30
  5740                                  
  5741                                  ;
  5742                                  ;                       report if ethernet adapter found
  5743                                  ;
  5744 000004F3 F6054308000080                                  test    byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet h/w switch set?
  5745 000004FA 0F84A5000000                                    jz      .30                                             ;branch if no
  5746                                  
  5747                                                          putConsoleString czEthernetAdapterFound                 ;report adapter found
  5747 00000500 BA[5F090000]        <1>  mov edx,%1
  5747 00000505 B00C                <1>  mov al,ePutConsoleString
  5747 00000507 CD30                <1>  int _svc
  5748                                  ;
  5749                                  ;                       read base address register 0 at offset 10h
  5750                                  ;
  5751 00000509 A124080000                                      mov     eax,[wdConsoleEthernetDevice]                   ;adapter PCI selector
  5752 0000050E 83C810                                          or      eax,10h                                         ;set function bits
  5753 00000511 66BAF80C                                        mov     dx,0cf8h                                        ;register port
  5754 00000515 EF                                              out     dx,eax                                          ;select register
  5755 00000516 66BAFC0C                                        mov     dx,0cfch                                        ;data port
  5756 0000051A ED                                              in      eax,dx                                          ;register data
  5757 0000051B A328080000                                      mov     [wdConsoleEthernetMem],eax                      ;save ethernet memory mapped i/o addr
  5758                                  ;
  5759                                  ;                       report base address register 0 value
  5760                                  ;
  5761 00000520 89C1                                            mov     ecx,eax                                         ;unsigned integer param
  5762 00000522 BA94080000                                      mov     edx,wzConsoleToken                              ;target buffer address
  5763                                  
  5764                                                          unsignedToHexadecimal                                   ;convert unsigned to ASCII hex string
  5764 00000527 B01B                <1>  mov al,eUnsignedToHexadecimal
  5764 00000529 CD30                <1>  int _svc
  5765                                                          putConsoleString wzConsoleToken                         ;output string to console
  5765 0000052B BA94080000          <1>  mov edx,%1
  5765 00000530 B00C                <1>  mov al,ePutConsoleString
  5765 00000532 CD30                <1>  int _svc
  5766                                                          putConsoleString czNewLine                              ;output newline to console
  5766 00000534 BA[93090000]        <1>  mov edx,%1
  5766 00000539 B00C                <1>  mov al,ePutConsoleString
  5766 0000053B CD30                <1>  int _svc
  5767                                  ;
  5768                                  ;                       read base address register 2 at offset 18h
  5769                                  ;
  5770 0000053D A124080000                                      mov     eax,[wdConsoleEthernetDevice]                   ;adapter PCI selector
  5771 00000542 83C818                                          or      eax,18h                                         ;set function bits
  5772 00000545 66BAF80C                                        mov     dx,0cf8h                                        ;register port
  5773 00000549 EF                                              out     dx,eax                                          ;select register
  5774 0000054A 66BAFC0C                                        mov     dx,0cfch                                        ;data port
  5775 0000054E ED                                              in      eax,dx                                          ;register data
  5776 0000054F 24FE                                            and     al,0feh                                         ;clear bit zero
  5777 00000551 A32C080000                                      mov     [wdConsoleEthernetPort],eax                     ;save ethernet i/o port
  5778                                  ;
  5779                                  ;                       report base address register 2 value
  5780                                  ;
  5781 00000556 89C1                                            mov     ecx,eax                                         ;unsigned integer param
  5782 00000558 BA94080000                                      mov     edx,wzConsoleToken                              ;target buffer address
  5783                                  
  5784                                                          unsignedToHexadecimal                                   ;convert unsigned to ASCII hex string
  5784 0000055D B01B                <1>  mov al,eUnsignedToHexadecimal
  5784 0000055F CD30                <1>  int _svc
  5785                                                          putConsoleString wzConsoleToken                         ;output string to console
  5785 00000561 BA94080000          <1>  mov edx,%1
  5785 00000566 B00C                <1>  mov al,ePutConsoleString
  5785 00000568 CD30                <1>  int _svc
  5786                                                          putConsoleString czNewLine                              ;output newline to console
  5786 0000056A BA[93090000]        <1>  mov edx,%1
  5786 0000056F B00C                <1>  mov al,ePutConsoleString
  5786 00000571 CD30                <1>  int _svc
  5787                                  ;
  5788                                  ;                       read ethernet control register using port i/o
  5789                                  ;
  5790 00000573 A12C080000                                      mov     eax,[wdConsoleEthernetPort]                     ;ethernet i/o port
  5791 00000578 6689C2                                          mov     dx,ax                                           ;ethernet i/o port
  5792 0000057B 31C0                                            xor     eax,eax                                         ;control register (zero)
  5793 0000057D EF                                              out     dx,eax                                          ;select register
  5794 0000057E 6683C204                                        add     dx,4                                            ;data register
  5795 00000582 ED                                              in      eax,dx                                          ;read register data
  5796 00000583 A330080000                                      mov     [wdConsoleEthernetCtrl],eax                     ;save ethernet control register value
  5797                                  ;
  5798                                  ;                       report adapter control register value
  5799                                  ;
  5800 00000588 89C1                                            mov     ecx,eax                                         ;unsigned integer param
  5801 0000058A BA94080000                                      mov     edx,wzConsoleToken                              ;target buffer address
  5802                                  
  5803                                                          unsignedToHexadecimal                                   ;convert unsigned to ASCII hex string
  5803 0000058F B01B                <1>  mov al,eUnsignedToHexadecimal
  5803 00000591 CD30                <1>  int _svc
  5804                                                          putConsoleString wzConsoleToken                         ;output string to console
  5804 00000593 BA94080000          <1>  mov edx,%1
  5804 00000598 B00C                <1>  mov al,ePutConsoleString
  5804 0000059A CD30                <1>  int _svc
  5805                                                          putConsoleString czNewLine                              ;output newline to console
  5805 0000059C BA[93090000]        <1>  mov edx,%1
  5805 000005A1 B00C                <1>  mov al,ePutConsoleString
  5805 000005A3 CD30                <1>  int _svc
  5806                                  
  5807 000005A5 5B                      .30                     pop     ebx                                             ;restore non-volatile regs
  5808 000005A6 C3                                              ret                                                     ;return
  5809                                  ;-----------------------------------------------------------------------------------------------------------------------
  5810                                  ;
  5811                                  ;       Routine:        ConBuildPCIIdent
  5812                                  ;
  5813                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  5814                                  ;                       Function code values.
  5815                                  ;
  5816                                  ;       In:             DS:EDX  output buffer address
  5817                                  ;
  5818                                  ;-----------------------------------------------------------------------------------------------------------------------
  5819 000005A7 57                      ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  5820 000005A8 89D7                                            mov     edi,edx                                         ;output buffer address
  5821 000005AA A040080000                                      mov     al,[wbConsolePCIBus]                            ;current PCI bus (0-255)
  5822 000005AF 30E4                                            xor     ah,ah                                           ;zero high-order dividend
  5823 000005B1 B164                                            mov     cl,100                                          ;divisor (10^2)
  5824 000005B3 F6F1                                            div     cl                                              ;AL=100's, AH=bus MOD 100
  5825 000005B5 0C30                                            or      al,30h                                          ;apply ASCII zone
  5826 000005B7 FC                                              cld                                                     ;forward strings
  5827 000005B8 AA                                              stosb                                                   ;store 100's digit
  5828 000005B9 88E0                                            mov     al,ah                                           ;bus MOD 100
  5829 000005BB 30E4                                            xor     ah,ah                                           ;zero high-order dividend
  5830 000005BD B10A                                            mov     cl,10                                           ;divisor (10^1)
  5831 000005BF F6F1                                            div     cl                                              ;AL=10's, AH=1's
  5832 000005C1 660D3030                                        or      ax,3030h                                        ;apply ASCII zone
  5833 000005C5 66AB                                            stosw                                                   ;store 10's and 1's
  5834 000005C7 B02E                                            mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  5835 000005C9 AA                                              stosb                                                   ;store delimiter
  5836 000005CA A041080000                                      mov     al,[wbConsolePCIDevice]                         ;current PCI device (0-15)
  5837 000005CF 30E4                                            xor     ah,ah                                           ;zero high order dividend
  5838 000005D1 B10A                                            mov     cl,10                                           ;divisor (10^1)
  5839 000005D3 F6F1                                            div     cl                                              ;AL=10's, AH=1's
  5840 000005D5 660D3030                                        or      ax,3030h                                        ;apply ASCII zone
  5841 000005D9 66AB                                            stosw                                                   ;store 10's and 1's
  5842 000005DB B02E                                            mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  5843 000005DD AA                                              stosb                                                   ;store delimiter
  5844 000005DE A042080000                                      mov     al,[wbConsolePCIFunction]                       ;current PCI function (0-7)
  5845 000005E3 0C30                                            or      al,30h                                          ;apply ASCII zone
  5846 000005E5 AA                                              stosb                                                   ;store 1's
  5847 000005E6 30C0                                            xor     al,al                                           ;null terminator
  5848 000005E8 AA                                              stosb                                                   ;store terminator
  5849 000005E9 5F                                              pop     edi                                             ;restore non-volatile regs
  5850 000005EA C3                                              ret                                                     ;return
  5851                                  ;-----------------------------------------------------------------------------------------------------------------------
  5852                                  ;
  5853                                  ;       Routine:        ConInterpretPCIData
  5854                                  ;
  5855                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  5856                                  ;
  5857                                  ;-----------------------------------------------------------------------------------------------------------------------
  5858 000005EB B8[34090000]            ConInterpretPCIData     mov     eax,czApple
  5859 000005F0 66813D180800006B10                              cmp     word [wwConsolePCIVendor],EPCIVENDORAPPLE       ;Apple?
  5860 000005F9 751D                                            jne     .10                                             ;no, branch
  5861 000005FB BA[6B0A0000]                                    mov     edx,czUSBController
  5862 00000600 66833D1A0800003F                                cmp     word [wwConsolePCIChip],EPCIAPPLEUSB            ;USB?
  5863 00000608 0F84CA000000                                    je      .80                                             ;yes, branch
  5864 0000060E BA[A2090000]                                    mov     edx,czOther                                     ;other
  5865 00000613 E9C0000000                                      jmp     .80                                             ;continue
  5866 00000618 B8[8A090000]            .10                     mov     eax,czIntel                                     ;Intel
  5867 0000061D 66813D180800008680                              cmp     word [wwConsolePCIVendor],EPCIVENDORINTEL       ;Intel?
  5868 00000626 756F                                            jne     .20                                             ;no, branch
  5869 00000628 BA[F9090000]                                    mov     edx,czPro1000MT                                 ;Pro/1000 MT
  5870 0000062D 66813D1A0800000F10                              cmp     word [wwConsolePCIChip],EPCIINTELPRO1000MT      ;Pro/1000 MT?
  5871 00000636 0F849C000000                                    je      .80                                             ;yes, branch
  5872 0000063C BA[A8090000]                                    mov     edx,czPCIAndMem                                 ;PCI and Memory
  5873 00000641 66813D1A0800003712                              cmp     word [wwConsolePCIChip],EPCIINTELPCIMEM         ;PCI and Memory?
  5874 0000064A 0F8488000000                                    je      .80                                             ;yes, branch
  5875 00000650 BA[3A090000]                                    mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  5876 00000655 66813D1A0800001524                              cmp     word [wwConsolePCIChip],EPCIINTELAD1881         ;Aureal 1881 SOUNDMAX?
  5877 0000065E 7478                                            je      .80                                             ;yes, branch
  5878 00000660 BA[B7090000]                                    mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  5879 00000665 66813D1A0800000070                              cmp     word [wwConsolePCIChip],EPCIINTELPIIX3          ;PIIX3 PCI-to-IDE Bridge?
  5880 0000066E 7468                                            je      .80                                             ;yes, branch
  5881 00000670 BA[E20A0000]                                    mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  5882 00000675 66813D1A0800001171                              cmp     word [wwConsolePCIChip],EPCIINTEL82371AB        ;82371AB Bus Master?
  5883 0000067E 7458                                            je      .80                                             ;yes, branch
  5884 00000680 BA[CF090000]                                    mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  5885 00000685 66813D1A0800001371                              cmp     word [wwConsolePCIChip],EPCIINTELPIIX4          ;PIIX4/4E/4M Power Mgmt Controller?
  5886 0000068E 7448                                            je      .80                                             ;yes, branch
  5887 00000690 BA[A2090000]                                    mov     edx,czOther                                     ;other
  5888 00000695 EB41                                            jmp     .80                                             ;continue
  5889 00000697 B8[9B090000]            .20                     mov     eax,czOracle                                    ;Oracle
  5890 0000069C 66813D18080000EE80                              cmp     word [wwConsolePCIVendor],EPCIVENDORORACLE      ;Oracle?
  5891 000006A5 7527                                            jne     .30                                             ;no, branch
  5892 000006A7 BA[8C0A0000]                                    mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  5893 000006AC 66813D1A080000EFBE                              cmp     word [wwConsolePCIChip],EPCIORACLEVBOXGA        ;VirtualBox Graphics Adapter?
  5894 000006B5 7421                                            je      .80                                             ;yes, branch
  5895 000006B7 BA[7A0A0000]                                    mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  5896 000006BC 66813D1A080000FECA                              cmp     word [wwConsolePCIChip],EPCIORACLEVBOXDEVICE    ;VirtualBox Device?
  5897 000006C5 7411                                            je      .80                                             ;yes, branch
  5898 000006C7 BA[A2090000]                                    mov     edx,czOther                                     ;other
  5899 000006CC EB0A                                            jmp     .80                                             ;continue
  5900 000006CE B8[A2090000]            .30                     mov     eax,czOther                                     ;other
  5901 000006D3 BA[A2090000]                                    mov     edx,czOther                                     ;other
  5902 000006D8 A31C080000              .80                     mov     [wdConsolePCIVendorStr],eax                     ;save vendor string
  5903 000006DD 891520080000                                    mov     [wdConsolePCIChipStr],edx                       ;save chip string
  5904 000006E3 66813D1A0800000F10                              cmp     word [wwConsolePCIChip],EPCIINTELPRO1000MT      ;Pro/1000 MT Ethernet Adapter
  5905 000006EC 7511                                            jne     .90                                             ;no, branch
  5906 000006EE 800D4308000080                                  or      byte [wbConsoleHWFlags],EHWETHERNET             ;ethernet adapter found
  5907 000006F5 A114080000                                      mov     eax,[wdConsolePCISelector]                      ;PCI selector
  5908 000006FA A324080000                                      mov     [wdConsoleEthernetDevice],eax                   ;save as ethernet device selector
  5909 000006FF C3                      .90                     ret                                                     ;return
  5910                                  ;-----------------------------------------------------------------------------------------------------------------------
  5911                                  ;
  5912                                  ;       Routine:        ConSecond
  5913                                  ;
  5914                                  ;       Description:    This routine Handles the SECOND command.
  5915                                  ;
  5916                                  ;-----------------------------------------------------------------------------------------------------------------------
  5917                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5917                              <1> ConSecond :
  5917 00000700 BB6D090000          <1>  mov ebx,%1
  5917 00000705 B018                <1>  mov al,eReadRealTimeClock
  5917 00000707 CD30                <1>  int _svc
  5918                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  5918 00000709 BB6D090000          <1>  mov ebx,%1
  5918 0000070E BAE4080000          <1>  mov edx,%2
  5918 00000713 B013                <1>  mov al,ePutSecondString
  5918 00000715 CD30                <1>  int _svc
  5919                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5919 00000717 BAE4080000          <1>  mov edx,%1
  5919 0000071C B00C                <1>  mov al,ePutConsoleString
  5919 0000071E CD30                <1>  int _svc
  5920                                                          putConsoleString  czNewLine                             ;write newline to console
  5920 00000720 BA[93090000]        <1>  mov edx,%1
  5920 00000725 B00C                <1>  mov al,ePutConsoleString
  5920 00000727 CD30                <1>  int _svc
  5921 00000729 C3                                              ret                                                     ;return
  5922                                  ;-----------------------------------------------------------------------------------------------------------------------
  5923                                  ;
  5924                                  ;       Routine:        ConTime
  5925                                  ;
  5926                                  ;       Description:    This routine Handles the TIME command.
  5927                                  ;
  5928                                  ;-----------------------------------------------------------------------------------------------------------------------
  5929                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5929                              <1> ConTime :
  5929 0000072A BB6D090000          <1>  mov ebx,%1
  5929 0000072F B018                <1>  mov al,eReadRealTimeClock
  5929 00000731 CD30                <1>  int _svc
  5930                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  5930 00000733 BB6D090000          <1>  mov ebx,%1
  5930 00000738 BAE4080000          <1>  mov edx,%2
  5930 0000073D B014                <1>  mov al,ePutTimeString
  5930 0000073F CD30                <1>  int _svc
  5931                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5931 00000741 BAE4080000          <1>  mov edx,%1
  5931 00000746 B00C                <1>  mov al,ePutConsoleString
  5931 00000748 CD30                <1>  int _svc
  5932                                                          putConsoleString  czNewLine                             ;write newline to console
  5932 0000074A BA[93090000]        <1>  mov edx,%1
  5932 0000074F B00C                <1>  mov al,ePutConsoleString
  5932 00000751 CD30                <1>  int _svc
  5933 00000753 C3                                              ret                                                     ;return
  5934                                  ;-----------------------------------------------------------------------------------------------------------------------
  5935                                  ;
  5936                                  ;       Routine:        ConVersion
  5937                                  ;
  5938                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  5939                                  ;
  5940                                  ;-----------------------------------------------------------------------------------------------------------------------
  5941                                  ConVersion              putConsoleString czTitle                                ;display version message
  5941                              <1> ConVersion :
  5941 00000754 BA[3B0A0000]        <1>  mov edx,%1
  5941 00000759 B00C                <1>  mov al,ePutConsoleString
  5941 0000075B CD30                <1>  int _svc
  5942 0000075D C3                                              ret                                                     ;return
  5943                                  ;-----------------------------------------------------------------------------------------------------------------------
  5944                                  ;
  5945                                  ;       Routine:        ConWeekday
  5946                                  ;
  5947                                  ;       Description:    This routine handles the WEEKDAY command.
  5948                                  ;
  5949                                  ;-----------------------------------------------------------------------------------------------------------------------
  5950                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5950                              <1> ConWeekday :
  5950 0000075E BB6D090000          <1>  mov ebx,%1
  5950 00000763 B018                <1>  mov al,eReadRealTimeClock
  5950 00000765 CD30                <1>  int _svc
  5951                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  5951 00000767 BB6D090000          <1>  mov ebx,%1
  5951 0000076C BAE4080000          <1>  mov edx,%2
  5951 00000771 B015                <1>  mov al,ePutWeekdayString
  5951 00000773 CD30                <1>  int _svc
  5952                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5952 00000775 BAE4080000          <1>  mov edx,%1
  5952 0000077A B00C                <1>  mov al,ePutConsoleString
  5952 0000077C CD30                <1>  int _svc
  5953                                                          putConsoleString  czNewLine                             ;write newline to console
  5953 0000077E BA[93090000]        <1>  mov edx,%1
  5953 00000783 B00C                <1>  mov al,ePutConsoleString
  5953 00000785 CD30                <1>  int _svc
  5954 00000787 C3                                              ret                                                     ;return
  5955                                  ;-----------------------------------------------------------------------------------------------------------------------
  5956                                  ;
  5957                                  ;       Routine:        ConWeekdayName
  5958                                  ;
  5959                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  5960                                  ;
  5961                                  ;-----------------------------------------------------------------------------------------------------------------------
  5962                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  5962                              <1> ConWeekdayName :
  5962 00000788 BB6D090000          <1>  mov ebx,%1
  5962 0000078D B018                <1>  mov al,eReadRealTimeClock
  5962 0000078F CD30                <1>  int _svc
  5963                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  5963 00000791 BB6D090000          <1>  mov ebx,%1
  5963 00000796 BAE4080000          <1>  mov edx,%2
  5963 0000079B B016                <1>  mov al,ePutWeekdayNameString
  5963 0000079D CD30                <1>  int _svc
  5964                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  5964 0000079F BAE4080000          <1>  mov edx,%1
  5964 000007A4 B00C                <1>  mov al,ePutConsoleString
  5964 000007A6 CD30                <1>  int _svc
  5965                                                          putConsoleString     czNewLine                                  ;write newline to console
  5965 000007A8 BA[93090000]        <1>  mov edx,%1
  5965 000007AD B00C                <1>  mov al,ePutConsoleString
  5965 000007AF CD30                <1>  int _svc
  5966 000007B1 C3                                              ret                                                             ;return
  5967                                  ;-----------------------------------------------------------------------------------------------------------------------
  5968                                  ;
  5969                                  ;       Routine:        ConYear
  5970                                  ;
  5971                                  ;       Description:    This routine Handles the YEAR command.
  5972                                  ;
  5973                                  ;-----------------------------------------------------------------------------------------------------------------------
  5974                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5974                              <1> ConYear :
  5974 000007B2 BB6D090000          <1>  mov ebx,%1
  5974 000007B7 B018                <1>  mov al,eReadRealTimeClock
  5974 000007B9 CD30                <1>  int _svc
  5975                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  5975 000007BB BB6D090000          <1>  mov ebx,%1
  5975 000007C0 BAE4080000          <1>  mov edx,%2
  5975 000007C5 B017                <1>  mov al,ePutYearString
  5975 000007C7 CD30                <1>  int _svc
  5976                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5976 000007C9 BAE4080000          <1>  mov edx,%1
  5976 000007CE B00C                <1>  mov al,ePutConsoleString
  5976 000007D0 CD30                <1>  int _svc
  5977                                                          putConsoleString  czNewLine                             ;write newline to console
  5977 000007D2 BA[93090000]        <1>  mov edx,%1
  5977 000007D7 B00C                <1>  mov al,ePutConsoleString
  5977 000007D9 CD30                <1>  int _svc
  5978 000007DB C3                                              ret                                                     ;return
  5979                                  ;-----------------------------------------------------------------------------------------------------------------------
  5980                                  ;
  5981                                  ;       Routine:        ConYearIsLeap
  5982                                  ;
  5983                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  5984                                  ;
  5985                                  ;-----------------------------------------------------------------------------------------------------------------------
  5986                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5986                              <1> ConYearIsLeap :
  5986 000007DC BB6D090000          <1>  mov ebx,%1
  5986 000007E1 B018                <1>  mov al,eReadRealTimeClock
  5986 000007E3 CD30                <1>  int _svc
  5987                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  5987 000007E5 BB6D090000          <1>  mov ebx,%1
  5987 000007EA B00A                <1>  mov al,eIsLeapYear
  5987 000007EC CD30                <1>  int _svc
  5988                                  
  5989 000007EE E30B                                            jecxz   .10                                             ;branch if not leap
  5990                                  
  5991                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  5991 000007F0 BA[A80A0000]        <1>  mov edx,%1
  5991 000007F5 B00C                <1>  mov al,ePutConsoleString
  5991 000007F7 CD30                <1>  int _svc
  5992                                  
  5993 000007F9 EB09                                            jmp     .20                                             ;continue
  5994                                  
  5995                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  5995                              <1> .10 :
  5995 000007FB BA[C30A0000]        <1>  mov edx,%1
  5995 00000800 B00C                <1>  mov al,ePutConsoleString
  5995 00000802 CD30                <1>  int _svc
  5996 00000804 C3                      .20                     ret                                                     ;return
  5997                                  ;-----------------------------------------------------------------------------------------------------------------------
  5998                                  ;
  5999                                  ;       Tables
  6000                                  ;
  6001                                  ;-----------------------------------------------------------------------------------------------------------------------
  6002                                                                                                                  ;---------------------------------------
  6003                                                                                                                  ;  Command Jump Table
  6004                                                                                                                  ;---------------------------------------
  6005                                  tConJmpTbl              equ     $                                               ;command jump table
  6006 00000805 88070000                                        dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  6007 00000809 DC070000                                        dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  6008 0000080D E8030000                                        dd      ConMonthName    - ConCode                       ;month.name command routine offset
  6009 00000811 12040000                                        dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  6010 00000815 28020000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  6011 00000819 54070000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  6012 0000081D 5E070000                                        dd      ConWeekday      - ConCode                       ;weekday command routine offset
  6013 00000821 9C020000                                        dd      ConMalloc       - ConCode                       ;malloc command routine offset
  6014 00000825 F1020000                                        dd      ConMem          - ConCode                       ;memory command routine offset
  6015 00000829 94030000                                        dd      ConMinute       - ConCode                       ;minute command routine offset
  6016 0000082D 00070000                                        dd      ConSecond       - ConCode                       ;second command routine offset
  6017 00000831 CF010000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  6018 00000835 12040000                                        dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  6019 00000839 BE030000                                        dd      ConMonth        - ConCode                       ;month command routine offset
  6020 0000083D D4010000                                        dd      ConDate         - ConCode                       ;date command routine offset
  6021 00000841 28020000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  6022 00000845 2D020000                                        dd      ConFree         - ConCode                       ;free command routine offset
  6023 00000849 6F020000                                        dd      ConHour         - ConCode                       ;hour command routine offset
  6024 0000084D 99020000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  6025 00000851 28020000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  6026 00000855 2A070000                                        dd      ConTime         - ConCode                       ;time command routine offset
  6027 00000859 B2070000                                        dd      ConYear         - ConCode                       ;year command routine offset
  6028 0000085D CF010000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  6029 00000861 FE010000                                        dd      ConDay          - ConCode                       ;day command routine offset
  6030 00000865 F1020000                                        dd      ConMem          - ConCode                       ;mem command routine offset
  6031 00000869 54070000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  6032                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  6033                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  6034                                                                                                                  ;---------------------------------------
  6035                                                                                                                  ;  Command Name Table
  6036                                                                                                                  ;---------------------------------------
  6037                                  tConCmdTbl              equ     $                                               ;command name table
  6038 0000086D 0D5745454B4441592E-                             db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  6038 00000876 4E414D4500         
  6039 0000087B 0C594541522E49534C-                             db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  6039 00000884 45415000           
  6040 00000888 0B4D4F4E54482E4E41-                             db      11,"MONTH.NAME",0                               ;month.name command
  6040 00000891 4D4500             
  6041 00000894 0950434950524F4245-                             db      9,"PCIPROBE",0                                  ;pciprobe command
  6041 0000089D 00                 
  6042 0000089E 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  6042 000008A7 00                 
  6043 000008A8 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  6044 000008B1 085745454B44415900                              db      8,"WEEKDAY",0                                   ;weekday command
  6045 000008BA 074D414C4C4F4300                                db      7,"MALLOC",0                                    ;malloc command
  6046 000008C2 074D454D4F525900                                db      7,"MEMORY",0                                    ;memory command
  6047 000008CA 074D494E55544500                                db      7,"MINUTE",0                                    ;minute command
  6048 000008D2 075345434F4E4400                                db      7,"SECOND",0                                    ;second command
  6049 000008DA 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  6050 000008E1 064C5350434900                                  db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  6051 000008E8 064D4F4E544800                                  db      6,"MONTH",0                                     ;month command
  6052 000008EF 054441544500                                    db      5,"DATE",0                                      ;date command
  6053 000008F5 054558495400                                    db      5,"EXIT",0                                      ;exit command
  6054 000008FB 054652454500                                    db      5,"FREE",0                                      ;free command
  6055 00000901 05484F555200                                    db      5,"HOUR",0                                      ;hour command
  6056 00000907 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  6057 0000090D 055155495400                                    db      5,"QUIT",0                                      ;quit command
  6058 00000913 0554494D4500                                    db      5,"TIME",0                                      ;time command
  6059 00000919 055945415200                                    db      5,"YEAR",0                                      ;year command
  6060 0000091F 04434C5300                                      db      4,"CLS",0                                       ;cls command
  6061 00000924 0444415900                                      db      4,"DAY",0                                       ;day command
  6062 00000929 044D454D00                                      db      4,"MEM",0                                       ;mem command
  6063 0000092E 0456455200                                      db      4,"VER",0                                       ;ver command
  6064 00000933 00                                              db      0                                               ;end of table
  6065                                  ;-----------------------------------------------------------------------------------------------------------------------
  6066                                  ;
  6067                                  ;       Constants
  6068                                  ;
  6069                                  ;-----------------------------------------------------------------------------------------------------------------------
  6070 00000934 4170706C6500            czApple                 db      "Apple",0                                       ;vendor name string
  6071 0000093A 41757265616C204144-     czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  6071 00000943 3138383120534F554E-
  6071 0000094C 444D415800         
  6072 00000951 42617365206D656D6F-     czBaseMem               db      "Base memory: ",0                               ;base memory from BIOS
  6072 0000095A 72793A2000         
  6073 0000095F 45746865726E657420-     czEthernetAdapterFound  db      "Ethernet adapter found",13,10,0                ;adapter found message
  6073 00000968 616461707465722066-
  6073 00000971 6F756E640D0A00     
  6074 00000978 457874656E64656420-     czExtendedMem           db      "Extended memory: ",0                           ;extended memory from BIOS
  6074 00000981 6D656D6F72793A2000 
  6075 0000098A 496E74656C00            czIntel                 db      "Intel",0                                       ;vendor name string
  6076 00000990 4B4200                  czKB                    db      "KB",0                                          ;Kilobytes
  6077 00000993 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  6078 00000996 6F6B0D0A00              czOK                    db      "ok",13,10,0                                    ;ok string
  6079 0000099B 4F7261636C6500          czOracle                db      "Oracle",0                                      ;vendor name string
  6080 000009A2 4F7468657200            czOther                 db      "Other",0                                       ;default name string
  6081 000009A8 5043492026204D656D-     czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  6081 000009B1 6F727900           
  6082 000009B5 2E00                    czPeriod                db      ".",0                                           ;period delimiter
  6083 000009B7 504949583320504349-     czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  6083 000009C0 2D746F2D4953412042-
  6083 000009C9 726964676500       
  6084 000009CF 50494958342F34452F-     czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  6084 000009D8 344D20506F77657220-
  6084 000009E1 4D616E6167656D656E-
  6084 000009EA 7420436F6E74726F6C-
  6084 000009F3 6C657200           
  6085 000009F7 3A00                    czPrompt                db      ":",0                                           ;prompt string
  6086 000009F9 50726F2F3130303020-     czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  6086 00000A02 4D542045746865726E-
  6086 00000A0B 657420416461707465-
  6086 00000A14 7200               
  6087 00000A16 42617365206D656D6F-     czROMMem                db      "Base memory below EBDA (Int 12h): ",0          ;memory reported by ROM
  6087 00000A1F 72792062656C6F7720-
  6087 00000A28 454244412028496E74-
  6087 00000A31 20313268293A2000   
  6088 00000A39 2000                    czSpace                 db      " ",0                                           ;space delimiter
  6089 00000A3B 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  6089 00000A44 65726174696E672053-
  6089 00000A4D 797374656D20312E30-
  6089 00000A56 0D0A00             
  6090 00000A59 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  6090 00000A62 6F6D6D616E640D0A00 
  6091 00000A6B 55534220436F6E7472-     czUSBController         db      "USB Controller",0                              ;USB controller string
  6091 00000A74 6F6C6C657200       
  6092 00000A7A 5669727475616C426F-     czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  6092 00000A83 782044657669636500 
  6093 00000A8C 5669727475616C426F-     czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  6093 00000A95 782047726170686963-
  6093 00000A9E 732041646170746572-
  6093 00000AA7 00                 
  6094 00000AA8 546865207965617220-     czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  6094 00000AB1 69732061206C656170-
  6094 00000ABA 20796561722E0D0A00 
  6095 00000AC3 546865207965617220-     czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  6095 00000ACC 6973206E6F74206120-
  6095 00000AD5 6C6561702079656172-
  6095 00000ADE 2E0D0A00           
  6096 00000AE2 383233373141422F45-     cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  6096 00000AEB 422050434920427573-
  6096 00000AF4 204D61737465722049-
  6096 00000AFD 444520436F6E74726F-
  6096 00000B06 6C6C657200         
  6097 00000B0B 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  6098                                  %endif
  6099                                  %ifdef BUILDDISK
  6100                                  ;-----------------------------------------------------------------------------------------------------------------------
  6101                                  ;
  6102                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  6103                                  ;
  6104                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  6105                                  ;
  6106                                  ;-----------------------------------------------------------------------------------------------------------------------
  6107                                  section                 unused                                                  ;unused disk space
  6108                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  6109                                  %endif
  6110                                  ;=======================================================================================================================
  6111                                  ;
  6112                                  ;       End of Program Code
  6113                                  ;
  6114                                  ;=======================================================================================================================
