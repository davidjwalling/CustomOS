     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.013
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to add a "pciprobe" command that searches the
     8                                  ;                       system for PCI expansion BIOS.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;       EPCI...         Peripheral Component Interconnect (PCI) values
   162                                  ;
   163                                  ;       Operating System Values
   164                                  ;
   165                                  ;       EBOOT...        Boot sector and loader values
   166                                  ;       ECON...         Console values (dimensions and attributes)
   167                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   168                                  ;       EKEYF...        Keyboard status flags
   169                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   170                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   171                                  ;       EMEM...         Memory Management values
   172                                  ;       EMSG...         Message identifers
   173                                  ;
   174                                  ;=======================================================================================================================
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;       Hardware-Defined Values
   178                                  ;
   179                                  ;-----------------------------------------------------------------------------------------------------------------------
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ;
   182                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   183                                  ;
   184                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   185                                  ;       for CGA, EGA, VGA and compatible video modes.
   186                                  ;
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   189                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   190                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   191                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  ;
   194                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   195                                  ;
   196                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   197                                  ;
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   200                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   201                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   202                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   203                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   204                                  ;-----------------------------------------------------------------------------------------------------------------------
   205                                  ;
   206                                  ;       8042 Keyboard Controller                                                EKEYB...
   207                                  ;
   208                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   209                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   210                                  ;
   211                                  ;-----------------------------------------------------------------------------------------------------------------------
   212                                  EKEYBPORTDATA           equ     060h                                            ;data port
   213                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   214                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   215                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   216                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   217                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   218                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   219                                                                                                                  ;---------------------------------------
   220                                                                                                                  ;       Keyboard Scan Codes
   221                                                                                                                  ;---------------------------------------
   222                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   223                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   224                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   225                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   226                                  EKEYBSLASH              equ     035h                                            ;slash
   227                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   228                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   229                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   230                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   231                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   232                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   233                                  EKEYBUP                 equ     080h                                            ;up
   234                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   235                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   236                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   237                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   238                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   239                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   240                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   241                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   242                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   243                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   244                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   245                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   246                                  ;-----------------------------------------------------------------------------------------------------------------------
   247                                  ;
   248                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   249                                  ;
   250                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   251                                  ;       external devices and signals a hardware interrupt to the CPU.
   252                                  ;
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   255                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   256                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   257                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   258                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   259                                  ;-----------------------------------------------------------------------------------------------------------------------
   260                                  ;
   261                                  ;       8253 Programmable Interval Timer                                        EPIT...
   262                                  ;
   263                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   264                                  ;       approximately 18.2 times per second.
   265                                  ;
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   271                                  ;
   272                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   273                                  ;
   274                                  ;-----------------------------------------------------------------------------------------------------------------------
   275                                  ERTCREGPORT             equ     070h                                            ;register select port
   276                                  ERTCDATAPORT            equ     071h                                            ;data port
   277                                  ERTCSECONDREG           equ     000h                                            ;second
   278                                  ERTCMINUTEREG           equ     002h                                            ;minute
   279                                  ERTCHOURREG             equ     004h                                            ;hour
   280                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   281                                  ERTCDAYREG              equ     007h                                            ;day
   282                                  ERTCMONTHREG            equ     008h                                            ;month
   283                                  ERTCYEARREG             equ     009h                                            ;year of the century
   284                                  ERTCSTATUSREG           equ     00bh                                            ;status
   285                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   286                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   287                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   288                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   289                                  ERTCCENTURYREG          equ     032h                                            ;century
   290                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  ;
   293                                  ;       x86 CPU Architecture                                                    ;EX86...
   294                                  ;
   295                                  ;-----------------------------------------------------------------------------------------------------------------------
   296                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  ;
   299                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   300                                  ;
   301                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   302                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   303                                  ;
   304                                  ;       0.......        Segment is not present in memory (triggers int 11)
   305                                  ;       1.......        Segment is present in memory
   306                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   307                                  ;       ...0....        Segment is a system segment
   308                                  ;       ...00010                Local Descriptor Table
   309                                  ;       ...00101                Task Gate
   310                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   311                                  ;       ...01100                Call Gate (386)
   312                                  ;       ...01110                Interrupt Gate (386)
   313                                  ;       ...01111                Trap Gate (386)
   314                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   315                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   316                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   317                                  ;
   318                                  ;-----------------------------------------------------------------------------------------------------------------------
   319                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   320                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   321                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   322                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   323                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   324                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   325                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   326                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  ;
   329                                  ;       Firmware-Defined Values
   330                                  ;
   331                                  ;-----------------------------------------------------------------------------------------------------------------------
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  ;
   334                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   335                                  ;
   336                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   337                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   338                                  ;
   339                                  ;-----------------------------------------------------------------------------------------------------------------------
   340                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   341                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   342                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   343                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   344                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   345                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   346                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   347                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   348                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   349                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   350                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;
   353                                  ;       Standards-Based Values
   354                                  ;
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ;
   358                                  ;       ASCII                                                                   EASCII...
   359                                  ;
   360                                  ;-----------------------------------------------------------------------------------------------------------------------
   361                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   362                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   363                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   364                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   365                                  EASCIISPACE             equ     020h                                            ;space
   366                                  EASCIIPERIOD            equ     02Eh                                            ;period
   367                                  EASCIIUPPERA            equ     041h                                            ;'A'
   368                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   369                                  EASCIILOWERA            equ     061h                                            ;'a'
   370                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   371                                  EASCIITILDE             equ     07Eh                                            ;'~'
   372                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   373                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   374                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   375                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   376                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   377                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   378                                  EASCIICASE              equ     00100000b                                       ;case bit
   379                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   380                                  ;-----------------------------------------------------------------------------------------------------------------------
   381                                  ;
   382                                  ;       Peripheral Component Interconnect (PCI)                                 EPCI...
   383                                  ;
   384                                  ;-----------------------------------------------------------------------------------------------------------------------
   385                                  EPCIPORTCONFIGADDR      equ     0CF8h                                           ;PCI Configuration Address Port
   386                                  EPCIPORTCONFIGDATA      equ     0CFCh                                           ;PCI Configuration Data Port
   387                                  EPCIVENDORAPPLE         equ     106Bh                                           ;Apple
   388                                  EPCIVENDORINTEL         equ     8086h                                           ;Intel
   389                                  EPCIVENDORORACLE        equ     80EEh                                           ;Oracle
   390                                  EPCIAPPLEUSB            equ     003Fh                                           ;USB Controller
   391                                  EPCIINTELPRO1000MT      equ     100Fh                                           ;Pro/1000 MT Ethernet Adapter
   392                                  EPCIINTELPCIMEM         equ     1237h                                           ;PCI & Memory
   393                                  EPCIINTELAD1881         equ     2415h                                           ;Aureal AD1881 SOUNDMAX
   394                                  EPCIINTELPIIX3          equ     7000h                                           ;PIIX3 PCI-to-ISA Bridge (Triton II)
   395                                  EPCIINTEL82371AB        equ     7111h                                           ;82371AB/EB PCI Bus Master IDE Cntrlr
   396                                  EPCIINTELPIIX4          equ     7113h                                           ;PIIX4/4E/4M Power Mgmt Cntrlr
   397                                  EPCIORACLEVBOXGA        equ     0BEEFh                                          ;VirtualBox Graphics Adapter
   398                                  EPCIORACLEVBOXDEVICE    equ     0CAFEh                                          ;VirtualBox Device
   399                                  ;-----------------------------------------------------------------------------------------------------------------------
   400                                  ;
   401                                  ;       Operating System Values
   402                                  ;
   403                                  ;-----------------------------------------------------------------------------------------------------------------------
   404                                  ;-----------------------------------------------------------------------------------------------------------------------
   405                                  ;
   406                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   407                                  ;
   408                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   409                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   410                                  ;
   411                                  ;-----------------------------------------------------------------------------------------------------------------------
   412                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   413                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   414                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   415                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   416                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   417                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   418                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   419                                  ;-----------------------------------------------------------------------------------------------------------------------
   420                                  ;       Console Constants                                                       ECON...
   421                                  ;-----------------------------------------------------------------------------------------------------------------------
   422                                  ECONCOLS                equ     80                                              ;columns per row
   423                                  ECONROWS                equ     24                                              ;console rows
   424                                  ECONOIAROW              equ     24                                              ;operator information area row
   425                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   426                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   427                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   428                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   429                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   430                                  ;-----------------------------------------------------------------------------------------------------------------------
   431                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   432                                  ;-----------------------------------------------------------------------------------------------------------------------
   433                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   434                                  EGDTCGA                 equ     020h                                            ;cga video selector
   435                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   436                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   437                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   438                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   439                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   440                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   441                                  ;-----------------------------------------------------------------------------------------------------------------------
   442                                  ;       Keyboard Flags                                                          EKEYF...
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   445                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   446                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   447                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   448                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   449                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   450                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   451                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   452                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   453                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   454                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   455                                  ;-----------------------------------------------------------------------------------------------------------------------
   456                                  ;       Kernel Constants                                                        EKRN...
   457                                  ;-----------------------------------------------------------------------------------------------------------------------
   458                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   459                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   460                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   461                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   462                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   463                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   464                                  ;-----------------------------------------------------------------------------------------------------------------------
   465                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   466                                  ;-----------------------------------------------------------------------------------------------------------------------
   467                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   468                                  ;-----------------------------------------------------------------------------------------------------------------------
   469                                  ;       Memory Management Constants                                             EMEM...
   470                                  ;-----------------------------------------------------------------------------------------------------------------------
   471                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   472                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   473                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   474                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   475                                  ;-----------------------------------------------------------------------------------------------------------------------
   476                                  ;       Message Identifiers                                                     EMSG...
   477                                  ;-----------------------------------------------------------------------------------------------------------------------
   478                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   479                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   480                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   481                                  ;=======================================================================================================================
   482                                  ;
   483                                  ;       Structures
   484                                  ;
   485                                  ;=======================================================================================================================
   486                                  ;-----------------------------------------------------------------------------------------------------------------------
   487                                  ;
   488                                  ;       DATETIME
   489                                  ;
   490                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   491                                  ;
   492                                  ;-----------------------------------------------------------------------------------------------------------------------
   493                                  struc                   DATETIME
   494 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   495 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   496 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   497 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   498 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   499 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   500 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   501 00000007 <res 00000001>          .century                resb    1                                               ;century
   502                                  EDATETIMELEN            equ     ($-.second)
   503                                  endstruc
   504                                  ;-----------------------------------------------------------------------------------------------------------------------
   505                                  ;
   506                                  ;       MEMBLOCK
   507                                  ;
   508                                  ;       The MEMBLOCK structure defines a memory block.
   509                                  ;
   510                                  ;-----------------------------------------------------------------------------------------------------------------------
   511                                  struc                   MEMBLOCK
   512 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   513 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   514 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   515 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   516 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   517 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   518 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   519 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   520                                  EMEMBLOCKLEN            equ     ($-.signature)
   521                                  endstruc
   522                                  ;-----------------------------------------------------------------------------------------------------------------------
   523                                  ;
   524                                  ;       MEMROOT
   525                                  ;
   526                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   527                                  ;
   528                                  ;-----------------------------------------------------------------------------------------------------------------------
   529                                  struc                   MEMROOT
   530 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   531 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   532 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   533 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   534 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   535 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   536                                  EMEMROOTLEN             equ     ($-.firstcontig)
   537                                  endstruc
   538                                  ;-----------------------------------------------------------------------------------------------------------------------
   539                                  ;
   540                                  ;       MQUEUE
   541                                  ;
   542                                  ;       The MQUEUE structure maps memory used for a message queue.
   543                                  ;
   544                                  ;-----------------------------------------------------------------------------------------------------------------------
   545                                  struc                   MQUEUE
   546 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   547 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   548 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   549                                  endstruc
   550                                  ;-----------------------------------------------------------------------------------------------------------------------
   551                                  ;
   552                                  ;       PCI
   553                                  ;
   554                                  ;       The PCI structure defines a PCI bus, device and function context.
   555                                  ;
   556                                  ;-----------------------------------------------------------------------------------------------------------------------
   557                                  struc                   PCI
   558                                  .configdata             equ     $                                               ;data read from port 0CFCh
   559 00000000 <res 00000002>          .configdata_lo          resw    1                                               ;low-order data
   560 00000002 <res 00000002>          .configdata_hi          resw    1                                               ;high-order data
   561 00000004 <res 00000004>          .selector               resd    1                                               ;1000 0000 bbbb bbbb dddd dfff 0000 0000
   562 00000008 <res 00000001>          .bus                    resb    1                                               ;bus identifier (00-FF)
   563 00000009 <res 00000001>          .device                 resb    1                                               ;device identifier (00-1F)
   564 0000000A <res 00000001>          .function               resb    1                                               ;function identifer (0-7)
   565 0000000B <res 00000001>          .register               resb    1                                               ;register identifier (00-FF)
   566 0000000C <res 00000004>          .bar0                   resd    1                                               ;base address register 0
   567 00000010 <res 00000004>          .bar1                   resd    1                                               ;base address register 1
   568 00000014 <res 00000004>          .bar2                   resd    1                                               ;base address register 2
   569 00000018 <res 00000004>          .bar3                   resd    1                                               ;base address register 3
   570 0000001C <res 00000004>          .bar4                   resd    1                                               ;base address register 4
   571 00000020 <res 00000004>          .bar5                   resd    1                                               ;base address register 5
   572                                  EPCILEN                 equ     ($-.configdata)
   573                                  endstruc
   574                                  ;-----------------------------------------------------------------------------------------------------------------------
   575                                  ;
   576                                  ;       OSDATA
   577                                  ;
   578                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   579                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   580                                  ;
   581                                  ;-----------------------------------------------------------------------------------------------------------------------
   582                                  struc                   OSDATA
   583 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   584 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   585 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   586 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   587 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   588 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   589 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   590 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   591 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   592 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   593 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   594 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   595 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   596 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   597 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   598 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   599 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   600 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   601 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   602 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   603 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   604 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   605 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   606 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   607 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   608 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   609 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   610 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   611 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   612 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   613 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   614 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   615 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   616 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   617 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   618 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   619 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   620 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   621 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   622 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   623 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   624 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   625 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   626 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   627 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   628 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   629 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   630 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   631 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   632 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   633 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   634 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   635 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   636 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   637 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   638 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   639 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   640 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   641 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   642 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   643 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   644 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   645 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   646 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   647 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   648 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   649 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   650 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   651 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   652 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   653 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   654 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   655 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   656 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   657 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   658 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   659 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   660 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   661 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   662 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   663 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   664 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   665 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   666 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   667 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   668 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   669 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   670 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   671 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   672 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   673 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   674 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   675 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   676 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   677 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   678 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   679 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   680 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   681 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   682 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   683 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   684                                  ;-----------------------------------------------------------------------------------------------------------------------
   685                                  ;
   686                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   687                                  ;
   688                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   689                                  ;
   690                                  ;-----------------------------------------------------------------------------------------------------------------------
   691                                  ECONDATA                equ     ($)
   692 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   693 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   694 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   695 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   696 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   697 00000814 <res 00000004>          wdConsolePCIVendorStr   resd    1                                               ;PCI vendor name string addr
   698 00000818 <res 00000004>          wdConsolePCIChipStr     resd    1                                               ;PCI device name string addr
   699 0000081C <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   700 0000081D <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   701 0000081E <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   702 0000081F <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   703 00000820 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   704 00000821 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   705 00000822 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   706 00000823 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   707 00000824 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   708 00000825 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   709 00000826 <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   710 00000827 <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   711 00000828 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   712 00000878 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   713 000008C8 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   714 00000918 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   715 00000923 <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   716 0000092E <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   717 00000939 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   718 00000951 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   719 00000959 <res 00000024>          wsConsolePCI            resb    EPCILEN                                         ;PCI context
   720                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   721                                  ;-----------------------------------------------------------------------------------------------------------------------
   722                                  ;
   723                                  ;       End of OS Variables
   724                                  ;
   725                                  ;-----------------------------------------------------------------------------------------------------------------------
   726                                  endstruc
   727                                  ;-----------------------------------------------------------------------------------------------------------------------
   728                                  ;
   729                                  ;       Macros
   730                                  ;
   731                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   732                                  ;
   733                                  ;-----------------------------------------------------------------------------------------------------------------------
   734                                  %macro                  mint    1
   735                                  _%1                     equ     ($-$$) / EX86DESCLEN
   736                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   737                                  %endmacro
   738                                  %macro                  mtrap   1
   739                                  _%1                     equ     ($-$$) / EX86DESCLEN
   740                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   741                                  %endmacro
   742                                  %macro                  menter  1
   743                                  ?%1                     equ     ($-$$)
   744                                  %endmacro
   745                                  %macro                  tsvce   1
   746                                  e%1                     equ     ($-tsvc)/4
   747                                                          dd      %1
   748                                  %endmacro
   749                                  %ifdef BUILDBOOT
   750                                  ;=======================================================================================================================
   751                                  ;
   752                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   753                                  ;
   754                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   755                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   756                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   757                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   758                                  ;
   759                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   760                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   761                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   762                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   763                                  ;       immediately followed by a disk parameter table.
   764                                  ;
   765                                  ;=======================================================================================================================
   766                                                          cpu     8086                                            ;assume minimal CPU
   767                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   768                                                          bits    16                                              ;16-bit code at power-up
   769                                  %ifdef BUILDPREP
   770                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   771                                  %else
   772                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   773                                  %endif
   774                                  ;-----------------------------------------------------------------------------------------------------------------------
   775                                  ;
   776                                  ;       Disk Parameter Table
   777                                  ;
   778                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   779                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   780                                  ;
   781                                  ;-----------------------------------------------------------------------------------------------------------------------
   782                                                          db      "CustomOS"                                      ;eight-byte label
   783                                  cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   784                                  cbClusterSectors        db      1                                               ;sectors per cluster
   785                                  cwReservedSectors       dw      1                                               ;reserved sectors
   786                                  cbFatCount              db      2                                               ;file allocation table copies
   787                                  cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   788                                  cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   789                                  cbDiskType              db      0F0h                                            ;1.44MB
   790                                  cwFatSectors            dw      9                                               ;sectors per FAT copy
   791                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   792                                  cwTrackSectors          dw      18                                              ;sectors per track (as word)
   793                                  cwDiskSides             dw      2                                               ;sides per disk
   794                                  cwSpecialSectors        dw      0                                               ;special sectors
   795                                  ;
   796                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   797                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   798                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   799                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   800                                  ;       given several possible starting values for CS:IP.
   801                                  ;
   802                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   803                                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   804                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   805                                  .20                     pop     ax                                              ;AX =      7c21     c21    21
   806                                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   807                                                          mov     cl,4                                            ;shift count
   808                                                          shr     ax,cl                                           ;AX =       7c0      c0     0
   809                                                          mov     bx,cs                                           ;BX =         0     700   7c0
   810                                                          add     bx,ax                                           ;BX =       7c0     7c0   7c0
   811                                  ;
   812                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   813                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   814                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   815                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   816                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   817                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   818                                  ;
   819                                                          sub     bx,16                                           ;BX = 07b0
   820                                                          mov     ds,bx                                           ;DS = 07b0 = psp
   821                                                          mov     es,bx                                           ;ES = 07b0 = psp
   822                                                          mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   823                                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   824                                  ;
   825                                  ;       Our boot addressability is now set up according to the following diagram.
   826                                  ;
   827                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   828                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   829                                  ;                               |  256 = 100h bytes                             |
   830                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   831                                  ;                               |  Boot Sector (vstart=0100h)                   |
   832                                  ;                               |  1 sector = 512 = 200h bytes                  |
   833                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   834                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   835                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   836                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   837                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   838                                  ;                               |  2 sectors = 1024 = 400h bytes
   839                                  ;                       009400  +-----------------------------------------------+ DS:1900
   840                                  ;
   841                                  ;       On entry, DL indicates the drive being booted from.
   842                                  ;
   843                                                          mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   844                                  ;
   845                                  ;       Compute directory i/o buffer address.
   846                                  ;
   847                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   848                                                          mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   849                                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   850                                                          mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   851                                  ;
   852                                  ;       Compute segment where os.com will be loaded.
   853                                  ;
   854                                                          shr     ax,cl                                           ;AX = 0150
   855                                                          add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   856                                                          sub     ax,16                                           ;AX = 08f0
   857                                                          mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   858                                  ;
   859                                  ;       Set the video mode to 80 column, 25 row, text.
   860                                  ;
   861                                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   862                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   863                                  ;
   864                                  ;       Write a message to the console so we know we have our addressability established.
   865                                  ;
   866                                                          mov     si,czLoadMsg                                    ;loading message
   867                                                          call    BootPrint                                       ;display loader message
   868                                  ;
   869                                  ;       Initialize the number of directory sectors to search.
   870                                  ;
   871                                                          mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   872                                                          mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   873                                  ;
   874                                  ;       Compute number of directory sectors and initialize overhead count.
   875                                  ;
   876                                                          mov     cx,ax                                           ;CX = 00e0 = 224 entries
   877                                                          mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   878                                                          div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   879                                                          mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   880                                  ;
   881                                  ;       Compute directory entries per sector.
   882                                  ;
   883                                                          xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   884                                                          div     cx                                              ;AX = 0010 = entries per dir sector
   885                                                          mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   886                                  ;
   887                                  ;       Compute first logical directory sector and update overhead count.
   888                                  ;
   889                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   890                                                          mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   891                                                          add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   892                                                          add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   893                                                          mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   894                                                          add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   895                                  ;
   896                                  ;       Read directory sector.
   897                                  ;
   898                                  .30                     mov     al,1                                            ;sector count
   899                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 01
   900                                                          mov     bx,[wwDirBuffer]                                ;BX = 1500
   901                                                          call    ReadSector                                      ;read sector into es:bx
   902                                  ;
   903                                  ;       Setup variables to search this directory sector.
   904                                  ;
   905                                                          mov     ax,[wwEntriesLeft]                              ;directory entries to search
   906                                                          cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   907                                                          jna     .40                                             ;no, continue
   908                                                          mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   909                                  .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   910                                                          mov     si,cbKernelProgram                              ;program name
   911                                                          mov     di,[wwDirBuffer]                                ;DI = 1500
   912                                  ;
   913                                  ;       Loop through directory sectors searching for kernel program.
   914                                  ;
   915                                  .50                     push    si                                              ;save kernel name address
   916                                                          push    di                                              ;save dir i/o buffer address
   917                                                          mov     cx,11                                           ;length of 8+3 name
   918                                                          cld                                                     ;forward strings
   919                                                          repe    cmpsb                                           ;compare entry name
   920                                                          pop     di                                              ;restore dir i/o buffer address
   921                                                          pop     si                                              ;restore kernel name address
   922                                                          je      .60                                             ;exit loop if found
   923                                                          add     di,[cwEntryLen]                                 ;point to next dir entry
   924                                                          dec     ax                                              ;decrement remaining entries
   925                                                          jnz     .50                                             ;next entry
   926                                  ;
   927                                  ;       Repeat search if we are not at the end of the directory.
   928                                  ;
   929                                                          inc     word [wwLogicalSector]                          ;increment logical sector
   930                                                          cmp     word [wwEntriesLeft],0                          ;done with directory?
   931                                                          jne     .30                                             ;no, get next sector
   932                                                          mov     si,czNoKernel                                   ;missing kernel message
   933                                                          jmp     BootExit                                        ;display message and exit
   934                                  ;
   935                                  ;       If we find the kernel program in the directory, read the FAT.
   936                                  ;
   937                                  .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   938                                                          mov     [wwLogicalSector],ax                            ;start past boot sector
   939                                                          mov     ax,[cwFatSectors]                               ;AX = 0009
   940                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 09
   941                                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   942                                                          call    ReadSector                                      ;read FAT into buffer
   943                                  ;
   944                                  ;       Get the starting cluster of the kernel program and target address.
   945                                  ;
   946                                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   947                                                          les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   948                                  ;
   949                                  ;       Read each program cluster into RAM.
   950                                  ;
   951                                  .70                     push    ax                                              ;save cluster nbr
   952                                                          sub     ax,2                                            ;AX = cluster nbr base 0
   953                                                          mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   954                                                          mov     [wbReadCount],cl                                ;save sectors to read
   955                                                          xor     ch,ch                                           ;CX = sectors per cluster
   956                                                          mul     cx                                              ;DX:AX = logical cluster sector
   957                                                          add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   958                                                          mov     [wwLogicalSector],ax                            ;save logical sector nbr
   959                                                          call    ReadSector                                      ;read sectors into ES:BX
   960                                  ;
   961                                  ;       Update buffer pointer for next cluster.
   962                                  ;
   963                                                          mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   964                                                          xor     ah,ah                                           ;AX = sectors per cluster
   965                                                          mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   966                                                          add     bx,ax                                           ;BX = next cluster target address
   967                                                          pop     ax                                              ;AX = restore cluster nbr
   968                                  ;
   969                                  ;       Compute next cluster number.
   970                                  ;
   971                                                          mov     cx,ax                                           ;CX = cluster nbr
   972                                                          mov     di,ax                                           ;DI = cluster nbr
   973                                                          shr     ax,1                                            ;AX = cluster/2
   974                                                          mov     dx,ax                                           ;DX = cluster/2
   975                                                          add     ax,dx                                           ;AX = 2*(cluster/2)
   976                                                          add     ax,dx                                           ;AX = 3*(cluster/2)
   977                                                          and     di,1                                            ;get low bit
   978                                                          add     di,ax                                           ;add one if cluster is odd
   979                                                          add     di,EBOOTFATBASE                                 ;add FAT buffer address
   980                                                          mov     ax,[di]                                         ;get cluster bytes
   981                                  ;
   982                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   983                                  ;
   984                                                          test    cl,1                                            ;is cluster odd?
   985                                                          jz      .80                                             ;no, skip ahead
   986                                                          mov     cl,4                                            ;shift count
   987                                                          shr     ax,cl                                           ;shift nybble low
   988                                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   989                                                          cmp     ax,0FFFh                                        ;end of chain?
   990                                                          jne     .70                                             ;no, continue
   991                                  ;
   992                                  ;       Transfer control to the operating system program.
   993                                  ;
   994                                                          db      0EAh                                            ;jmp seg:offset
   995                                  wwLoadOffset            dw      0100h                                           ;kernel entry offset
   996                                  wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   997                                  ;
   998                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   999                                  ;
  1000                                  ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
  1001                                                          mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
  1002                                                          mov     cx,ax                                           ;CX = sectors per cylinder
  1003                                                          mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
  1004                                                          div     cx                                              ;AX = cylinder; DX = cyl sector
  1005                                                          mov     [wbTrack],al                                    ;[wbTrack] = cylinder
  1006                                                          mov     ax,dx                                           ;AX = cyl sector
  1007                                                          div     byte [cbTrackSectors]                           ;AH = sector, AL = head
  1008                                                          inc     ah                                              ;AH = sector (1,2,3,...)
  1009                                                          mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
  1010                                  ;
  1011                                  ;       Try maxtries times to read sector.
  1012                                  ;
  1013                                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
  1014                                  .10                     push    bx                                              ;save buffer address
  1015                                                          push    cx                                              ;save retry count
  1016                                                          mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
  1017                                                          mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
  1018                                                          mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
  1019                                                          int     EBIOSINTDISKETTE                                ;read sector
  1020                                                          pop     cx                                              ;restore retry count
  1021                                                          pop     bx                                              ;restore buffer address
  1022                                                          jnc     BootReturn                                      ;skip ahead if done
  1023                                                          loop    .10                                             ;retry
  1024                                  ;
  1025                                  ;       Handle disk error: convert to ASCII and store in error string.
  1026                                  ;
  1027                                                          mov     al,ah                                           ;AL = bios error code
  1028                                                          xor     ah,ah                                           ;AX = bios error code
  1029                                                          mov     dl,16                                           ;divisor for base 16
  1030                                                          div     dl                                              ;AL = hi order, AH = lo order
  1031                                                          or      ax,03030h                                       ;apply ASCII zone bits
  1032                                                          cmp     ah,03Ah                                         ;range test ASCII numeral
  1033                                                          jb      .20                                             ;continue if numeral
  1034                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1035                                  .20                     cmp     al,03Ah                                         ;range test ASCII numeral
  1036                                                          jb      .30                                             ;continue if numeral
  1037                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
  1038                                  .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
  1039                                                          mov     si,czErrorMsg                                   ;error message address
  1040                                  BootExit                call    BootPrint                                       ;display messge to console
  1041                                  ;
  1042                                  ;       Wait for a key press.
  1043                                  ;
  1044                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1045                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1046                                                          jnz     .20                                             ;continue if key pressed
  1047                                                          sti                                                     ;enable maskable interrupts
  1048                                                          hlt                                                     ;wait for interrupt
  1049                                                          jmp     .10                                             ;repeat
  1050                                  ;
  1051                                  ;       Reset the system.
  1052                                  ;
  1053                                  .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1054                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1055                                  .30                     sti                                                     ;enable maskable interrupts
  1056                                                          hlt                                                     ;stop until reset, int, nmi
  1057                                                          jmp     .30                                             ;loop until restart kicks in
  1058                                  ;
  1059                                  ;       Display text message.
  1060                                  ;
  1061                                  BootPrint               cld                                                     ;forward strings
  1062                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1063                                                          test    al,al                                           ;end of string?
  1064                                                          jz      BootReturn                                      ;... yes, exit our loop
  1065                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1066                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1067                                                          jmp     .10                                             ;repeat until done
  1068                                  BootReturn              ret                                                     ;return
  1069                                  ;-----------------------------------------------------------------------------------------------------------------------
  1070                                  ;
  1071                                  ;       Constants
  1072                                  ;
  1073                                  ;-----------------------------------------------------------------------------------------------------------------------
  1074                                                          align   2
  1075                                  cwEntryLen              dw      32                                              ;length of directory entry
  1076                                  cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1077                                  czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1078                                  czErrorMsg              db      "Disk error "                                   ;error message
  1079                                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1080                                  czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1081                                  ;-----------------------------------------------------------------------------------------------------------------------
  1082                                  ;
  1083                                  ;       Work Areas
  1084                                  ;
  1085                                  ;-----------------------------------------------------------------------------------------------------------------------
  1086                                                          align   2
  1087                                  wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1088                                  wwEntriesLeft           dw      0                                               ;directory entries to search
  1089                                  wwOverhead              dw      0                                               ;overhead sectors
  1090                                  wwSectorEntries         dw      0                                               ;directory entries per sector
  1091                                  wwLogicalSector         dw      0                                               ;current logical sector
  1092                                  wwReadCountCommand      equ     $                                               ;read count and command
  1093                                  wbReadCount             db      0                                               ;sectors to read
  1094                                  cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1095                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1096                                  wbDrive                 db      0                                               ;drive
  1097                                  wbHead                  db      0                                               ;head
  1098                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1099                                                          db      0                                               ;sector
  1100                                  wbTrack                 db      0                                               ;track
  1101                                                          times   510-($-$$) db 0h                                ;zero fill to end of sector
  1102                                                          db      055h,0AAh                                       ;end of sector signature
  1103                                  %endif
  1104                                  %ifdef BUILDPREP
  1105                                  ;=======================================================================================================================
  1106                                  ;
  1107                                  ;       Diskette Preparation Code
  1108                                  ;
  1109                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1110                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1111                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1112                                  ;
  1113                                  ;=======================================================================================================================
  1114                                  ;
  1115                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1116                                  ;
  1117                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1118                                                          call    BootPrint                                       ;display message
  1119                                  ;
  1120                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1121                                  ;
  1122                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1123                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1124                                                          jnz     .20                                             ;continue if key pressed
  1125                                                          sti                                                     ;enable interrupts
  1126                                                          hlt                                                     ;wait for interrupt
  1127                                                          jmp     .10                                             ;repeat
  1128                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1129                                                          je      .30                                             ;yes, branch
  1130                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1131                                                          jne     .10                                             ;no, repeat
  1132                                                          jmp     .120                                            ;yes, exit program
  1133                                  ;
  1134                                  ;       Display writing-sector message and patch the JMP instruction.
  1135                                  ;
  1136                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1137                                                          call    BootPrint                                       ;display message
  1138                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1139                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1140                                                          mov     [bx],ax                                         ;update the JMP instruction
  1141                                  ;
  1142                                  ;       Try to read the boot sector.
  1143                                  ;
  1144                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1145                                  .40                     push    cx                                              ;save remaining tries
  1146                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1147                                                          mov     dx,0                                            ;head zero, drive zero
  1148                                                          mov     cx,1                                            ;track zero, sector one
  1149                                                          mov     al,1                                            ;one sector
  1150                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1151                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1152                                                          pop     cx                                              ;restore remaining retries
  1153                                                          jnc     .50                                             ;skip ahead if successful
  1154                                                          loop    .40                                             ;try again
  1155                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1156                                                          jmp     .70                                             ;branch to error routine
  1157                                  ;
  1158                                  ;       Copy diskette parms from input buffer to output buffer.
  1159                                  ;
  1160                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1161                                                          add     si,11                                           ;skip over JMP and system ID
  1162                                                          mov     di,Boot                                         ;output buffer address
  1163                                                          add     di,11                                           ;skip over JMP and system ID
  1164                                                          mov     cx,19                                           ;length of diskette parameters
  1165                                                          cld                                                     ;forward string copies
  1166                                                          rep     movsb                                           ;copy diskette parameters
  1167                                  ;
  1168                                  ;       Try to write boot sector to diskette.
  1169                                  ;
  1170                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1171                                  .60                     push    cx                                              ;save remaining tries
  1172                                                          mov     bx,Boot                                         ;output buffer address
  1173                                                          mov     dx,0                                            ;head zero, drive zero
  1174                                                          mov     cx,1                                            ;track zero, sector one
  1175                                                          mov     al,1                                            ;one sector
  1176                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1177                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1178                                                          pop     cx                                              ;restore remaining retries
  1179                                                          jnc     .100                                            ;skip ahead if successful
  1180                                                          loop    .60                                             ;try again
  1181                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1182                                  ;
  1183                                  ;       Convert the error code to ASCII and display the error message.
  1184                                  ;
  1185                                  .70                     push    ax                                              ;save error code
  1186                                                          mov     al,ah                                           ;copy error code
  1187                                                          mov     ah,0                                            ;AX = error code
  1188                                                          mov     dl,10h                                          ;hexadecimal divisor
  1189                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1190                                                          or      ax,03030h                                       ;add ASCII zone digits
  1191                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1192                                                          jb      .80                                             ;yes, continue
  1193                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1194                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1195                                                          jb      .90                                             ;yes, continue
  1196                                                          add     al,7                                            ;no, make ASCII
  1197                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1198                                                          call    BootPrint                                       ;write error message
  1199                                                          pop     ax                                              ;restore error code
  1200                                  ;
  1201                                  ;       Display the completion message.
  1202                                  ;
  1203                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1204                                                          mov     al,ah                                           ;BIOS return code
  1205                                                          cmp     al,0                                            ;success?
  1206                                                          je      .110                                            ;yes, continue
  1207                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1208                                                          cmp     al,1                                            ;disk parameter error?
  1209                                                          je      .110                                            ;yes, continue
  1210                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1211                                                          cmp     al,2                                            ;address mark not found?
  1212                                                          je      .110                                            ;yes, continue
  1213                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1214                                                          cmp     al,3                                            ;protected disk?
  1215                                                          je      .110                                            ;yes, continue
  1216                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1217                                                          cmp     al,6                                            ;diskette removed?
  1218                                                          je      .110                                            ;yes, continue
  1219                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1220                                                          cmp     al,80H                                          ;drive timed out?
  1221                                                          je      .110                                            ;yes, continue
  1222                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1223                                  .110                    call    BootPrint                                       ;display result message
  1224                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1225                                                          int     021h                                            ;terminate DOS program
  1226                                                          ret                                                     ;return (should not execute)
  1227                                  ;-----------------------------------------------------------------------------------------------------------------------
  1228                                  ;
  1229                                  ;       Diskette Preparation Messages
  1230                                  ;
  1231                                  ;-----------------------------------------------------------------------------------------------------------------------
  1232                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1233                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1234                                                          db      13,10
  1235                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1236                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1237                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1238                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1239                                                          db      13,10,0
  1240                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1241                                                          db      13,10,0
  1242                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1243                                                          db      13,10,0
  1244                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1245                                                          db      13,10,0
  1246                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1247                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1248                                                          db      13,10,0
  1249                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1250                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1251                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1252                                                          db      13,10,"and retry."
  1253                                                          db      13,10,0
  1254                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1255                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1256                                                          db      13,10,"using another diskette."
  1257                                                          db      13,10,0
  1258                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1259                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1260                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1261                                                          db      13,10,0
  1262                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1263                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1264                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1265                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1266                                                          db      13,10,"is properly inserted in the diskette drive."
  1267                                                          db      13,10,0
  1268                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1269                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1270                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1271                                                          db      13,10,0
  1272                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1273                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1274                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1275                                                          db      13,10,0
  1276                                  wcPrepInBuf             equ     $
  1277                                  %endif
  1278                                  %ifdef BUILDDISK
  1279                                  ;=======================================================================================================================
  1280                                  ;
  1281                                  ;       File Allocation Tables
  1282                                  ;
  1283                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1284                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1285                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1286                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1287                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1288                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1289                                  ;       the last cluster in the chain.
  1290                                  ;
  1291                                  ;       Every three bytes encode two FAT entries as follows:
  1292                                  ;
  1293                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1294                                  ;
  1295                                  ;=======================================================================================================================
  1296                                  ;-----------------------------------------------------------------------------------------------------------------------
  1297                                  ;
  1298                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1299                                  ;
  1300                                  ;-----------------------------------------------------------------------------------------------------------------------
  1301                                  section                 fat1                                                    ;first copy of FAT
  1302                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1303                                                          db      005h,060h,000h, 007h,080h,000h
  1304                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1305                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1306                                                          db      011h,020h,001h, 013h,040h,001h
  1307                                                          db      015h,060h,001h, 017h,080h,001h
  1308                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1309                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1310                                                          db      021h,020h,002h, 023h,040h,002h
  1311                                                          db      025h,060h,002h, 027h,080h,002h
  1312                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1313                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1314                                  ;-----------------------------------------------------------------------------------------------------------------------
  1315                                  ;
  1316                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1317                                  ;
  1318                                  ;-----------------------------------------------------------------------------------------------------------------------
  1319                                  section                 fat2                                                    ;second copy of FAT
  1320                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1321                                                          db      005h,060h,000h, 007h,080h,000h
  1322                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1323                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1324                                                          db      011h,020h,001h, 013h,040h,001h
  1325                                                          db      015h,060h,001h, 017h,080h,001h
  1326                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1327                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1328                                                          db      021h,020h,002h, 023h,040h,002h
  1329                                                          db      025h,060h,002h, 027h,080h,002h
  1330                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1331                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1332                                  ;-----------------------------------------------------------------------------------------------------------------------
  1333                                  ;
  1334                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1335                                  ;
  1336                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1337                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1338                                  ;       copy.
  1339                                  ;
  1340                                  ;-----------------------------------------------------------------------------------------------------------------------
  1341                                  section                 dir                                                     ;diskette directory
  1342                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1343                                                          db      020h                                            ;attribute (archive bit set)
  1344                                                          times   10 db 0                                         ;unused
  1345                                                          dw      0h                                              ;time
  1346                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1347                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1348                                                          dw      2                                               ;first cluster
  1349                                                          dd      05400h                                          ;file size
  1350                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1351                                  %endif
  1352                                  %ifdef BUILDCOM
  1353                                  ;=======================================================================================================================
  1354                                  ;
  1355                                  ;       OS.COM
  1356                                  ;
  1357                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1358                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1359                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1360                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1361                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1362                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1363                                  ;
  1364                                  ;       Our loader addressability is set up according to the following diagram.
  1365                                  ;
  1366                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1367                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1368                                  ;                               |  256 = 100h bytes                             |
  1369                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1370                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1371                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1372                                  ;                       007e00  +-----------------------------------------------+
  1373                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1374                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1375                                  ;                               |                                               |
  1376                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1377                                  ;                               |                                               |
  1378                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1379                                  ;                               |  Loader Code                                  |
  1380                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1381                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1382                                  ;
  1383                                  ;=======================================================================================================================
  1384                                  ;-----------------------------------------------------------------------------------------------------------------------
  1385                                  ;
  1386                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1387                                  ;
  1388                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1389                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1390                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1391                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1392                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1393                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1394                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1395                                  ;       registers.
  1396                                  ;
  1397                                  ;-----------------------------------------------------------------------------------------------------------------------
  1398                                                          cpu     8086                                            ;assume minimal CPU
  1399                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1400                                                          bits    16                                              ;this is 16-bit code
  1401 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1402 00000001 1F                                              pop     ds                                              ;...as our data segment
  1403 00000002 0E                                              push    cs                                              ;use the code segment
  1404 00000003 07                                              pop     es                                              ;...as our extra segment
  1405                                  ;
  1406                                  ;       Write a message to the console so we know we have our addressability established.
  1407                                  ;
  1408 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1409 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1410                                  ;
  1411                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1412                                  ;
  1413 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1414 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1415 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1416 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1417                                                          cpu     386                                             ;allow 80386 instructions
  1418 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1419 00000017 E89600                                          call    PutTTYString                                    ;display message
  1420                                  ;
  1421                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1422                                  ;
  1423 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1424 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1425 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1426 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1427 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1428 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1429 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1430 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1431 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1432 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1433                                  ;
  1434                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1435                                  ;
  1436 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1437 00000038 07                                              pop     es                                              ;... as target segment
  1438 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1439 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1440 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1441 00000041 FC                                              cld                                                     ;forward strings
  1442 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1443 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1444 00000047 E86600                                          call    PutTTYString                                    ;display message
  1445                                  ;
  1446                                  ;       Switch to protected mode.
  1447                                  ;
  1448 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1449 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1450 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1451 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1452 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1453 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1454 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1455 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1456 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1457 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1458 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1459                                  ;
  1460                                  ;       Enable hardware and maskable interrupts.
  1461                                  ;
  1462 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1463 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1464 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1465 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1466                                  ;
  1467                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1468                                  ;
  1469 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1470 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1471 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1472                                  ;-----------------------------------------------------------------------------------------------------------------------
  1473                                  ;
  1474                                  ;       Routine:        LoaderExit
  1475                                  ;
  1476                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1477                                  ;
  1478                                  ;       In:             DS:SI   string address
  1479                                  ;
  1480                                  ;-----------------------------------------------------------------------------------------------------------------------
  1481 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1482                                  ;
  1483                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1484                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1485                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1486                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1487                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1488                                  ;
  1489 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1490 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1491 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1492 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1493 00000085 F4                                              hlt                                                     ;wait for interrupt
  1494 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1495                                  ;
  1496                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1497                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1498                                  ;       HLT until the system resets.
  1499                                  ;
  1500 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1501 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1502 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1503 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1504 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1505                                  ;-----------------------------------------------------------------------------------------------------------------------
  1506                                  ;
  1507                                  ;       Routine:        GetCPUType
  1508                                  ;
  1509                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1510                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1511                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1512                                  ;
  1513                                  ;       Out:            AX      0 = 808x, v20, etc.
  1514                                  ;                               1 = 80186
  1515                                  ;                               2 = 80286
  1516                                  ;                               3 = 80386
  1517                                  ;
  1518                                  ;-----------------------------------------------------------------------------------------------------------------------
  1519 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1520 00000092 B120                                            mov     cl,32                                           ;shift count
  1521 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1522 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1523 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1524                                                          cpu     186
  1525 0000009A 54                                              push    sp                                              ;save stack pointer
  1526 0000009B 59                                              pop     cx                                              ;...into cx
  1527 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1528 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1529                                                          cpu     286
  1530 000000A0 40                                              inc     ax                                              ;AX = 2
  1531 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1532 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1533 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1534 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1535 000000AE 40                                              inc     ax                                              ;AX = 3
  1536 000000AF C3                      .10                     ret                                                     ;return
  1537                                  ;-----------------------------------------------------------------------------------------------------------------------
  1538                                  ;
  1539                                  ;       Routine:        PutTTYString
  1540                                  ;
  1541                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1542                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1543                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1544                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1545                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1546                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1547                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1548                                  ;                       to LODSB is not needed.
  1549                                  ;
  1550                                  ;       In:             DS:SI   address of string
  1551                                  ;
  1552                                  ;       Out:            DF      0
  1553                                  ;                       ZF      1
  1554                                  ;                       AL      0
  1555                                  ;
  1556                                  ;-----------------------------------------------------------------------------------------------------------------------
  1557 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1558 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1559 000000B2 84C0                                            test    al,al                                           ;end of string?
  1560 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1561 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1562 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1563 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1564 000000BC C3                      .20                     ret                                                     ;return
  1565                                  ;-----------------------------------------------------------------------------------------------------------------------
  1566                                  ;
  1567                                  ;       Loader Data
  1568                                  ;
  1569                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1570                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1571                                  ;
  1572                                  ;-----------------------------------------------------------------------------------------------------------------------
  1573 000000BD 90                                              align   2
  1574 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1575 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1576 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1577 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1578 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1578 000000D1 74696E672073797374-
  1578 000000DA 656D20726571756972-
  1578 000000E3 657320616E20693338-
  1578 000000EC 36206F72206C617465-
  1578 000000F5 722070726F63657373-
  1578 000000FE 6F722E0D0A         
  1579 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1579 0000010C 65737320616E79206B-
  1579 00000115 657920746F20726573-
  1579 0000011E 746172742074686520-
  1579 00000127 636F6D70757465722E-
  1579 00000130 0D0A00             
  1580 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1581 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1581 00000145 7265640D0A00       
  1582 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1582 00000154 616465640D0A00     
  1583 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1583 00000164 4F530D0A00         
  1584 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1585                                  ;=======================================================================================================================
  1586                                  ;
  1587                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1588                                  ;
  1589                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1590                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1591                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1592                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1593                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1594                                  ;
  1595                                  ;=======================================================================================================================
  1596                                  ;=======================================================================================================================
  1597                                  ;
  1598                                  ;       Kernel Tables
  1599                                  ;
  1600                                  ;=======================================================================================================================
  1601                                  ;-----------------------------------------------------------------------------------------------------------------------
  1602                                  ;
  1603                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1604                                  ;
  1605                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1606                                  ;       first descriptor must be all nulls.
  1607                                  ;
  1608                                  ;       6   5         4         3         2         1         0
  1609                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1610                                  ;       ----------------------------------------------------------------
  1611                                  ;       h......hffffmmmma......ab......................bn..............n
  1612                                  ;
  1613                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1614                                  ;               ffff                                                            flags
  1615                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1616                                  ;                       a......a                                                access
  1617                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1618                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1619                                  ;
  1620                                  ;       00000000                                                                all areas have base addresses below 2^24
  1621                                  ;               0...                                                            single-byte size granularity
  1622                                  ;               1...                                                            4-kilobyte size granularity
  1623                                  ;               .0..                                                            16-bit default for code segments
  1624                                  ;               .1..                                                            32-bit default for code segments
  1625                                  ;               ..0.                                                            intel-reserved; should be zero
  1626                                  ;               ...0                                                            available for operating system use
  1627                                  ;                   0000                                                        segment is less than 2^16 in size
  1628                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1629                                  ;                       1.......                                                segment is present in memory
  1630                                  ;                       .00.....                                                segment is of privilege level 0
  1631                                  ;                       ...0....                                                segment is of system or gate type
  1632                                  ;                       ...00010                                                local decriptor table (LDT)
  1633                                  ;                       ...01001                                                task state segment (TSS) available
  1634                                  ;                       ...01011                                                task state segment (TSS) busy
  1635                                  ;                       ...10...                                                data segment
  1636                                  ;                       ...10011                                                writable data (accessed)
  1637                                  ;                       ...11...                                                code segment
  1638                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1639                                  ;
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                  section                 gdt                                                     ;global descriptor table
  1642 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1643 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1644 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1645 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1646 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1647 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1648 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1649 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1650 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1651 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1652 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1653 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1654 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1655 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1656 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1657                                  ;-----------------------------------------------------------------------------------------------------------------------
  1658                                  ;
  1659                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1660                                  ;
  1661                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1662                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1663                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1664                                  ;
  1665                                  ;       6   5         4         3         2         1         0
  1666                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1667                                  ;       ----------------------------------------------------------------
  1668                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1669                                  ;
  1670                                  ;       h...h   high-order offset (bits 16-31)
  1671                                  ;       P       present (0=unused interrupt)
  1672                                  ;       zz      descriptor privilege level
  1673                                  ;       S       storage segment (must be zero for IDT)
  1674                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1675                                  ;       S...S   handling code selector in GDT
  1676                                  ;       l...l   lo-order offset (bits 0-15)
  1677                                  ;
  1678                                  ;-----------------------------------------------------------------------------------------------------------------------
  1679                                  section                 idt                                                     ;interrupt descriptor table
  1680                                                          mint    dividebyzero                                    ;00 divide by zero
  1680                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1680 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1681                                                          mint    singlestep                                      ;01 single step
  1681                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1681 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1682                                                          mint    nmi                                             ;02 non-maskable
  1682                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1682 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1683                                                          mint    break                                           ;03 break
  1683                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1683 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1684                                                          mint    into                                            ;04 into
  1684                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1684 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1685                                                          mint    bounds                                          ;05 bounds
  1685                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1685 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1686                                                          mint    badopcode                                       ;06 bad op code
  1686                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1686 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1687                                                          mint    nocoproc                                        ;07 no coprocessor
  1687                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1687 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1688                                                          mint    doublefault                                     ;08 double-fault
  1688                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1688 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1689                                                          mint    operand                                         ;09 operand
  1689                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1689 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1690                                                          mint    badtss                                          ;0a bad TSS
  1690                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1690 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1691                                                          mint    notpresent                                      ;0b not-present
  1691                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1691 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1692                                                          mint    stacklimit                                      ;0c stack limit
  1692                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1692 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1693                                                          mint    protection                                      ;0d general protection fault
  1693                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1693 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1694                                                          mint    int14                                           ;0e (reserved)
  1694                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1694 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1695                                                          mint    int15                                           ;0f (reserved)
  1695                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1695 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1696                                                          mint    coproccalc                                      ;10 (reserved)
  1696                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1696 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1697                                                          mint    int17                                           ;11 (reserved)
  1697                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1697 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1698                                                          mint    int18                                           ;12 (reserved)
  1698                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1698 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1699                                                          mint    int19                                           ;13 (reserved)
  1699                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1699 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1700                                                          mint    int20                                           ;14 (reserved)
  1700                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1700 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1701                                                          mint    int21                                           ;15 (reserved)
  1701                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1701 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1702                                                          mint    int22                                           ;16 (reserved)
  1702                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1702 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1703                                                          mint    int23                                           ;17 (reserved)
  1703                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1703 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1704                                                          mint    int24                                           ;18 (reserved)
  1704                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1704 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1705                                                          mint    int25                                           ;19 (reserved)
  1705                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1705 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1706                                                          mint    int26                                           ;1a (reserved)
  1706                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1706 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1707                                                          mint    int27                                           ;1b (reserved)
  1707                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1707 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1708                                                          mint    int28                                           ;1c (reserved)
  1708                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1708 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1709                                                          mint    int29                                           ;1d (reserved)
  1709                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1709 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1710                                                          mint    int30                                           ;1e (reserved)
  1710                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1710 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1711                                                          mint    int31                                           ;1f (reserved)
  1711                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1711 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1712                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1712                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1712 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1713                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1713                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1713 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1714                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1714                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1714 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1715                                                          mtrap   com2                                            ;23 IRQ3 com2
  1715                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1715 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1716                                                          mtrap   com1                                            ;24 IRQ4 com1
  1716                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1716 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1717                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1717                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1717 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1718                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1718                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1718 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1719                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1719                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1719 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1720                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1720                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1720 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1721                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1721                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1721 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1722                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1722                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1722 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1723                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1723                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1723 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1724                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1724                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1724 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1725                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1725                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1725 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1726                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1726                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1726 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1727                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1727                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1727 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1728                                                          mtrap   svc                                             ;30 OS services
  1728                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1728 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1729 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1730                                  ;=======================================================================================================================
  1731                                  ;
  1732                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1733                                  ;
  1734                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1735                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1736                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1737                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1738                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1739                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1740                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1741                                  ;
  1742                                  ;=======================================================================================================================
  1743                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1744                                                          cpu     386                                             ;allow 80386 instructions
  1745                                                          bits    32                                              ;this is 32-bit code
  1746                                  ;=======================================================================================================================
  1747                                  ;
  1748                                  ;       CPU Interrupt Handlers
  1749                                  ;
  1750                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1751                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1752                                  ;
  1753                                  ;=======================================================================================================================
  1754                                  ;-----------------------------------------------------------------------------------------------------------------------
  1755                                  ;
  1756                                  ;       INT0    Divide By Zero
  1757                                  ;
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                                          menter  dividebyzero                                    ;divide by zero
  1759                              <1> ?%1 equ ($-$$)
  1760 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1761 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1762 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1763                                  ;-----------------------------------------------------------------------------------------------------------------------
  1764                                  ;
  1765                                  ;       INT1    Single Step
  1766                                  ;
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                                          menter  singlestep                                      ;single step
  1768                              <1> ?%1 equ ($-$$)
  1769 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1770 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1771 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1772                                  ;-----------------------------------------------------------------------------------------------------------------------
  1773                                  ;
  1774                                  ;       INT2    Non-Maskable Interrupt
  1775                                  ;
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                                          menter  nmi                                             ;non-maskable
  1777                              <1> ?%1 equ ($-$$)
  1778 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1779 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1780 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1781                                  ;-----------------------------------------------------------------------------------------------------------------------
  1782                                  ;
  1783                                  ;       INT3    Break
  1784                                  ;
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                                          menter  break                                           ;break
  1786                              <1> ?%1 equ ($-$$)
  1787 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1788 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1789 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1790                                  ;-----------------------------------------------------------------------------------------------------------------------
  1791                                  ;
  1792                                  ;       INT4    Into
  1793                                  ;
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                                          menter  into                                            ;into
  1795                              <1> ?%1 equ ($-$$)
  1796 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1797 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1798 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1799                                  ;-----------------------------------------------------------------------------------------------------------------------
  1800                                  ;
  1801                                  ;       INT5    Bounds
  1802                                  ;
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                                          menter  bounds                                          ;bounds
  1804                              <1> ?%1 equ ($-$$)
  1805 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1806 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1807 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1808                                  ;-----------------------------------------------------------------------------------------------------------------------
  1809                                  ;
  1810                                  ;       INT6    Bad Operation Code
  1811                                  ;
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                                          menter  badopcode                                       ;bad opcode interrupt
  1813                              <1> ?%1 equ ($-$$)
  1814 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1815 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1816 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1817                                  ;-----------------------------------------------------------------------------------------------------------------------
  1818                                  ;
  1819                                  ;       INT7    No Coprocessor
  1820                                  ;
  1821                                  ;-----------------------------------------------------------------------------------------------------------------------
  1822                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1822                              <1> ?%1 equ ($-$$)
  1823 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1824 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1825 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1826                                  ;-----------------------------------------------------------------------------------------------------------------------
  1827                                  ;
  1828                                  ;       INT8    Double Fault
  1829                                  ;
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                                          menter  doublefault                                     ;doublefault interrupt
  1831                              <1> ?%1 equ ($-$$)
  1832 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1833 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1834 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                  ;
  1837                                  ;       INT9    Operand
  1838                                  ;
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                                          menter  operand                                         ;operand interrupt
  1840                              <1> ?%1 equ ($-$$)
  1841 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1842 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1843 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1844                                  ;-----------------------------------------------------------------------------------------------------------------------
  1845                                  ;
  1846                                  ;       INT10   Bad Task State Segment
  1847                                  ;
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                                          menter  badtss                                          ;bad TSS interrupt
  1849                              <1> ?%1 equ ($-$$)
  1850 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1851 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1852 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1853                                  ;-----------------------------------------------------------------------------------------------------------------------
  1854                                  ;
  1855                                  ;       INT11   Not Present
  1856                                  ;
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                                          menter  notpresent                                      ;not present interrupt
  1858                              <1> ?%1 equ ($-$$)
  1859 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1860 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1861 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1862                                  ;-----------------------------------------------------------------------------------------------------------------------
  1863                                  ;
  1864                                  ;       INT12   Stack Limit
  1865                                  ;
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                                          menter  stacklimit                                      ;stack limit interrupt
  1867                              <1> ?%1 equ ($-$$)
  1868 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1869 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1870 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1871                                  ;-----------------------------------------------------------------------------------------------------------------------
  1872                                  ;
  1873                                  ;       INT13   General Protection Fault
  1874                                  ;
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                                          menter  protection                                      ;protection fault interrupt
  1876                              <1> ?%1 equ ($-$$)
  1877 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1878 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1879 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                  ;
  1882                                  ;       INT14   Reserved
  1883                                  ;
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                                          menter  int14                                           ;(reserved)
  1885                              <1> ?%1 equ ($-$$)
  1886 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1887 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1888 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                  ;
  1891                                  ;       INT15   Reserved
  1892                                  ;
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                                          menter  int15                                           ;(reserved)
  1894                              <1> ?%1 equ ($-$$)
  1895 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1896 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1897 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                  ;
  1900                                  ;       INT16   Coprocessor Calculation
  1901                                  ;
  1902                                  ;-----------------------------------------------------------------------------------------------------------------------
  1903                                                          menter  coproccalc                                      ;coprocessor calculation
  1903                              <1> ?%1 equ ($-$$)
  1904 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1905 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1906 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1907                                  ;-----------------------------------------------------------------------------------------------------------------------
  1908                                  ;
  1909                                  ;       INT17   Reserved
  1910                                  ;
  1911                                  ;-----------------------------------------------------------------------------------------------------------------------
  1912                                                          menter  int17                                           ;(reserved)
  1912                              <1> ?%1 equ ($-$$)
  1913 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1914 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1915 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1916                                  ;-----------------------------------------------------------------------------------------------------------------------
  1917                                  ;
  1918                                  ;       INT18   Reserved
  1919                                  ;
  1920                                  ;-----------------------------------------------------------------------------------------------------------------------
  1921                                                          menter  int18                                           ;(reserved)
  1921                              <1> ?%1 equ ($-$$)
  1922 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1923 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1924 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1925                                  ;-----------------------------------------------------------------------------------------------------------------------
  1926                                  ;
  1927                                  ;       INT19   Reserved
  1928                                  ;
  1929                                  ;-----------------------------------------------------------------------------------------------------------------------
  1930                                                          menter  int19                                           ;(reserved)
  1930                              <1> ?%1 equ ($-$$)
  1931 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1932 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1933 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1934                                  ;-----------------------------------------------------------------------------------------------------------------------
  1935                                  ;
  1936                                  ;       INT20   Reserved
  1937                                  ;
  1938                                  ;-----------------------------------------------------------------------------------------------------------------------
  1939                                                          menter  int20                                           ;(reserved)
  1939                              <1> ?%1 equ ($-$$)
  1940 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1941 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1942 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1943                                  ;-----------------------------------------------------------------------------------------------------------------------
  1944                                  ;
  1945                                  ;       INT21   Reserved
  1946                                  ;
  1947                                  ;-----------------------------------------------------------------------------------------------------------------------
  1948                                                          menter  int21                                           ;(reserved)
  1948                              <1> ?%1 equ ($-$$)
  1949 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1950 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1951 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1952                                  ;-----------------------------------------------------------------------------------------------------------------------
  1953                                  ;
  1954                                  ;       INT22   Reserved
  1955                                  ;
  1956                                  ;-----------------------------------------------------------------------------------------------------------------------
  1957                                                          menter  int22                                           ;(reserved)
  1957                              <1> ?%1 equ ($-$$)
  1958 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1959 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1960 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1961                                  ;-----------------------------------------------------------------------------------------------------------------------
  1962                                  ;
  1963                                  ;       INT23   Reserved
  1964                                  ;
  1965                                  ;-----------------------------------------------------------------------------------------------------------------------
  1966                                                          menter  int23                                           ;(reserved)
  1966                              <1> ?%1 equ ($-$$)
  1967 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1968 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1969 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1970                                  ;-----------------------------------------------------------------------------------------------------------------------
  1971                                  ;
  1972                                  ;       INT24   Reserved
  1973                                  ;
  1974                                  ;-----------------------------------------------------------------------------------------------------------------------
  1975                                                          menter  int24                                           ;(reserved)
  1975                              <1> ?%1 equ ($-$$)
  1976 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1977 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1978 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1979                                  ;-----------------------------------------------------------------------------------------------------------------------
  1980                                  ;
  1981                                  ;       INT25   Reserved
  1982                                  ;
  1983                                  ;-----------------------------------------------------------------------------------------------------------------------
  1984                                                          menter  int25                                           ;(reserved)
  1984                              <1> ?%1 equ ($-$$)
  1985 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1986 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1987 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1988                                  ;-----------------------------------------------------------------------------------------------------------------------
  1989                                  ;
  1990                                  ;       INT26   Reserved
  1991                                  ;
  1992                                  ;-----------------------------------------------------------------------------------------------------------------------
  1993                                                          menter  int26                                           ;(reserved)
  1993                              <1> ?%1 equ ($-$$)
  1994 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1995 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1996 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1997                                  ;-----------------------------------------------------------------------------------------------------------------------
  1998                                  ;
  1999                                  ;       INT27   Reserved
  2000                                  ;
  2001                                  ;-----------------------------------------------------------------------------------------------------------------------
  2002                                                          menter  int27                                           ;(reserved)
  2002                              <1> ?%1 equ ($-$$)
  2003 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  2004 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2005 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  2006                                  ;-----------------------------------------------------------------------------------------------------------------------
  2007                                  ;
  2008                                  ;       INT28   Reserved
  2009                                  ;
  2010                                  ;-----------------------------------------------------------------------------------------------------------------------
  2011                                                          menter  int28                                           ;(reserved)
  2011                              <1> ?%1 equ ($-$$)
  2012 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  2013 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2014 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  2015                                  ;-----------------------------------------------------------------------------------------------------------------------
  2016                                  ;
  2017                                  ;       INT29   Reserved
  2018                                  ;
  2019                                  ;-----------------------------------------------------------------------------------------------------------------------
  2020                                                          menter  int29                                           ;(reserved)
  2020                              <1> ?%1 equ ($-$$)
  2021 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  2022 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2023 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  2024                                  ;-----------------------------------------------------------------------------------------------------------------------
  2025                                  ;
  2026                                  ;       INT30   Reserved
  2027                                  ;
  2028                                  ;-----------------------------------------------------------------------------------------------------------------------
  2029                                                          menter  int30                                           ;(reserved)
  2029                              <1> ?%1 equ ($-$$)
  2030 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  2031 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2032 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  2033                                  ;-----------------------------------------------------------------------------------------------------------------------
  2034                                  ;
  2035                                  ;       INT31   Reserved
  2036                                  ;
  2037                                  ;-----------------------------------------------------------------------------------------------------------------------
  2038                                                          menter  int31                                           ;(reserved)
  2038                              <1> ?%1 equ ($-$$)
  2039 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  2040 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  2041 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  2042                                  ;-----------------------------------------------------------------------------------------------------------------------
  2043                                  ;
  2044                                  ;       Routine:        ReportInterrupt
  2045                                  ;
  2046                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  2047                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2048                                  ;
  2049                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  2050                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  2051                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  2052                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  2053                                  ;                       [ESP+0]         error message address                   stored by push instructions
  2054                                  ;
  2055                                  ;       Out:            N/A             This routine does not exit.
  2056                                  ;
  2057                                  ;-----------------------------------------------------------------------------------------------------------------------
  2058 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2059 00000154 06                                              push    es                                              ;save ES at time of interrupt
  2060 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2061 00000156 89E5                                            mov     ebp,esp                                         ;EBP --> [EDI]
  2062                                  ;
  2063                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2064                                  ;
  2065                                  ;                       [EBP+56]        EFLAGS
  2066                                  ;                       [EBP+52]        CS
  2067                                  ;                       [EBP+48]        EIP
  2068                                  ;                       [EBP+44]        interrupt number (0-31)
  2069                                  ;                       [EBP+40]        error message address
  2070                                  ;                       [EBP+36]        DS
  2071                                  ;                       [EBP+32]        ES
  2072                                  ;                       [EBP+28]        EAX
  2073                                  ;                       [EBP+24]        ECX
  2074                                  ;                       [EBP+20]        EDX
  2075                                  ;                       [EBP+16]        EBX
  2076                                  ;                       [EBP+12]        ESP
  2077                                  ;                       [EBP+8]         EBP
  2078                                  ;                       [EBP+4]         ESI
  2079                                  ;                       [EBP+0]         EDI
  2080                                  ;
  2081 00000158 0E                                              push    cs                                              ;load code selector ...
  2082 00000159 1F                                              pop     ds                                              ;... into DS
  2083 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  2084 0000015C 07                                              pop     es                                              ;... into ES
  2085                                  ;
  2086                                  ;       Display the interrupt report boundary box
  2087                                  ;
  2088 0000015D B10D                                            mov     cl,13                                           ;column
  2089 0000015F B506                                            mov     ch,6                                            ;row
  2090 00000161 B232                                            mov     dl,50                                           ;width
  2091 00000163 B608                                            mov     dh,8                                            ;height
  2092 00000165 B707                                            mov     bh,07h                                          ;attribute
  2093 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  2094                                  ;
  2095                                  ;       Display the report header
  2096                                  ;
  2097 0000016C B10F                                            mov     cl,15                                           ;column
  2098 0000016E B507                                            mov     ch,7                                            ;row
  2099 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  2100 00000175 E84F110000                                      call    SetConsoleString                                ;draw text string
  2101                                  ;
  2102                                  ;       Display the interrupt description label
  2103                                  ;
  2104 0000017A B10F                                            mov     cl,15                                           ;column
  2105 0000017C B508                                            mov     ch,8                                            ;row
  2106 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  2107 00000183 E841110000                                      call    SetConsoleString                                ;draw text string
  2108                                  ;
  2109                                  ;       Display the interrupt number
  2110                                  ;
  2111 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  2112 0000018B B11A                                            mov     cl,26                                           ;column
  2113 0000018D B508                                            mov     ch,8                                            ;row
  2114 0000018F E8DE0D0000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  2115                                  ;
  2116                                  ;       Display the interrupt name
  2117                                  ;
  2118 00000194 B11D                                            mov     cl,29                                           ;column
  2119 00000196 B508                                            mov     ch,8                                            ;row
  2120 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2121 0000019B E829110000                                      call    SetConsoleString                                ;display interrupt description
  2122                                  ;
  2123                                  ;       Display the register values header
  2124                                  ;
  2125 000001A0 B10F                                            mov     cl,15                                           ;column
  2126 000001A2 B50A                                            mov     ch,10                                           ;row
  2127 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  2128 000001A9 E81B110000                                      call    SetConsoleString                                ;draw text string
  2129                                  ;
  2130                                  ;       Display the EAX register label and value
  2131                                  ;
  2132 000001AE B10F                                            mov     cl,15                                           ;column
  2133 000001B0 B50B                                            mov     ch,11                                           ;row
  2134 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  2135 000001B7 E80D110000                                      call    SetConsoleString                                ;draw label
  2136 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2137 000001BF B113                                            mov     cl,19                                           ;column
  2138 000001C1 B50B                                            mov     ch,11                                           ;row
  2139 000001C3 E8D00D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2140                                  ;
  2141                                  ;       Display the ECX register label and value
  2142                                  ;
  2143 000001C8 B10F                                            mov     cl,15                                           ;column
  2144 000001CA B50C                                            mov     ch,12                                           ;row
  2145 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2146 000001D1 E8F3100000                                      call    SetConsoleString                                ;draw label
  2147 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2148 000001D9 B113                                            mov     cl,19                                           ;column
  2149 000001DB B50C                                            mov     ch,12                                           ;row
  2150 000001DD E8B60D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2151                                  ;
  2152                                  ;       Display the EDX register label and value
  2153                                  ;
  2154 000001E2 B10F                                            mov     cl,15                                           ;column
  2155 000001E4 B50D                                            mov     ch,13                                           ;row
  2156 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2157 000001EB E8D9100000                                      call    SetConsoleString                                ;draw label
  2158 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2159 000001F3 B113                                            mov     cl,19                                           ;column
  2160 000001F5 B50D                                            mov     ch,13                                           ;row
  2161 000001F7 E89C0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2162                                  ;
  2163                                  ;       Display the EBX register label and value
  2164                                  ;
  2165 000001FC B10F                                            mov     cl,15                                           ;column
  2166 000001FE B50E                                            mov     ch,14                                           ;row
  2167 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2168 00000205 E8BF100000                                      call    SetConsoleString                                ;draw label
  2169 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2170 0000020D B113                                            mov     cl,19                                           ;column
  2171 0000020F B50E                                            mov     ch,14                                           ;row
  2172 00000211 E8820D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2173                                  ;
  2174                                  ;       Display the ESI register label and value
  2175                                  ;
  2176 00000216 B11D                                            mov     cl,29                                           ;column
  2177 00000218 B50B                                            mov     ch,11                                           ;row
  2178 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2179 0000021F E8A5100000                                      call    SetConsoleString                                ;draw label
  2180 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2181 00000227 B121                                            mov     cl,33                                           ;column
  2182 00000229 B50B                                            mov     ch,11                                           ;row
  2183 0000022B E8680D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2184                                  ;
  2185                                  ;       Display the EDI register label and value
  2186                                  ;
  2187 00000230 B11D                                            mov     cl,29                                           ;column
  2188 00000232 B50C                                            mov     ch,12                                           ;row
  2189 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2190 00000239 E88B100000                                      call    SetConsoleString                                ;draw label
  2191 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2192 00000241 B121                                            mov     cl,33                                           ;column
  2193 00000243 B50C                                            mov     ch,12                                           ;row
  2194 00000245 E84E0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2195                                  ;
  2196                                  ;       Display the EBP register label and value
  2197                                  ;
  2198 0000024A B11D                                            mov     cl,29                                           ;column
  2199 0000024C B50D                                            mov     ch,13                                           ;row
  2200 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2201 00000253 E871100000                                      call    SetConsoleString                                ;draw label
  2202 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2203 0000025B B121                                            mov     cl,33                                           ;column
  2204 0000025D B50D                                            mov     ch,13                                           ;row
  2205 0000025F E8340D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2206                                  ;
  2207                                  ;       Display the DS register label and value
  2208                                  ;
  2209 00000264 B12A                                            mov     cl,42                                           ;column
  2210 00000266 B50B                                            mov     ch,11                                           ;row
  2211 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2212 0000026D E857100000                                      call    SetConsoleString                                ;draw label
  2213 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2214 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2215 00000278 B12E                                            mov     cl,46                                           ;column
  2216 0000027A B50B                                            mov     ch,11                                           ;row
  2217 0000027C E8270D0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2218                                  ;
  2219                                  ;       Display the ES register label and value
  2220                                  ;
  2221 00000281 B12A                                            mov     cl,42                                           ;column
  2222 00000283 B50C                                            mov     ch,12                                           ;row
  2223 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2224 0000028A E83A100000                                      call    SetConsoleString                                ;draw label
  2225 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2226 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2227 00000295 B12E                                            mov     cl,46                                           ;column
  2228 00000297 B50C                                            mov     ch,12                                           ;row
  2229 00000299 E80A0D0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2230                                  ;
  2231                                  ;       Display the SS register label and value
  2232                                  ;
  2233 0000029E B12A                                            mov     cl,42                                           ;column
  2234 000002A0 B50D                                            mov     ch,13                                           ;row
  2235 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2236 000002A7 E81D100000                                      call    SetConsoleString                                ;draw label
  2237 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2238 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2239 000002B1 B12E                                            mov     cl,46                                           ;column
  2240 000002B3 B50D                                            mov     ch,13                                           ;row
  2241 000002B5 E8EE0C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2242                                  ;
  2243                                  ;       Display the CS register lable and value
  2244                                  ;
  2245 000002BA B12A                                            mov     cl,42                                           ;column
  2246 000002BC B50E                                            mov     ch,14                                           ;row
  2247 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2248 000002C3 E801100000                                      call    SetConsoleString                                ;draw label
  2249 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2250 000002CA 668B4534                                        mov     ax,[ebp+52]                                     ;CS
  2251 000002CE B12E                                            mov     cl,46                                           ;column
  2252 000002D0 B50E                                            mov     ch,14                                           ;row
  2253 000002D2 E8D10C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2254                                  ;
  2255                                  ;       Display the EFLAGS register label and value
  2256                                  ;
  2257 000002D7 B133                                            mov     cl,51                                           ;column
  2258 000002D9 B50B                                            mov     ch,11                                           ;row
  2259 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2260 000002E0 E8E40F0000                                      call    SetConsoleString                                ;draw label
  2261 000002E5 8B4538                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2262 000002E8 B137                                            mov     cl,55                                           ;column
  2263 000002EA B50B                                            mov     ch,11                                           ;row
  2264 000002EC E8A70C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2265                                  ;
  2266                                  ;       Display the ESP register label and value
  2267                                  ;
  2268 000002F1 B133                                            mov     cl,51                                           ;column
  2269 000002F3 B50D                                            mov     ch,13                                           ;row
  2270 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2271 000002FA E8CA0F0000                                      call    SetConsoleString                                ;draw label
  2272 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2273 00000302 B137                                            mov     cl,55                                           ;column
  2274 00000304 B50D                                            mov     ch,13                                           ;row
  2275 00000306 E88D0C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2276                                  ;
  2277                                  ;       Display the EIP register label and value
  2278                                  ;
  2279 0000030B B133                                            mov     cl,51                                           ;column
  2280 0000030D B50E                                            mov     ch,14                                           ;row
  2281 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2282 00000314 E8B00F0000                                      call    SetConsoleString                                ;draw label
  2283 00000319 8B4530                                          mov     eax,[ebp+48]                                    ;EIP
  2284 0000031C B137                                            mov     cl,55                                           ;column
  2285 0000031E B50E                                            mov     ch,14                                           ;row
  2286 00000320 E8730C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2287                                  ;
  2288                                  ;       Halt and loop until reset
  2289                                  ;
  2290 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2291 00000326 F4                                              hlt                                                     ;halt processor
  2292 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2293                                  ;-----------------------------------------------------------------------------------------------------------------------
  2294                                  ;
  2295                                  ;       Processor Interrupt Name Strings
  2296                                  ;
  2297                                  ;-----------------------------------------------------------------------------------------------------------------------
  2298 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2298 00000332 6279207A65726F00   
  2299 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2299 00000343 657000             
  2300 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2300 0000034F 626C6520696E746572-
  2300 00000358 7275707400         
  2301 0000035D 427265616B00            czIntBreak              db      "Break",0
  2302 00000363 496E746F00              czIntInto               db      "Into",0
  2303 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2304 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2304 00000378 74696F6E20436F6465-
  2304 00000381 00                 
  2305 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2305 0000038B 6573736F7200       
  2306 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2306 0000039A 756C7400           
  2307 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2308 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2308 000003AF 537461746520536567-
  2308 000003B8 6D656E7400         
  2309 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2309 000003C6 6E7400             
  2310 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2310 000003D2 697400             
  2311 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2311 000003DE 726F74656374696F6E-
  2311 000003E7 204661756C7400     
  2312 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2312 000003F7 6F722043616C63756C-
  2312 00000400 6174696F6E00       
  2313 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2314                                  ;-----------------------------------------------------------------------------------------------------------------------
  2315                                  ;
  2316                                  ;       Processor Interrupt Handling Strings
  2317                                  ;
  2318                                  ;-----------------------------------------------------------------------------------------------------------------------
  2319 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2319 00000418 6C65642070726F6365-
  2319 00000421 73736F7220696E7465-
  2319 0000042A 727275707420686173-
  2319 00000433 206F63637572726564-
  2319 0000043C 3A00               
  2320 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2320 00000447 202300             
  2321 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2321 00000453 206174207468652074-
  2321 0000045C 696D65206F66207468-
  2321 00000465 6520696E7465727275-
  2321 0000046E 70743A00           
  2322 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2323 00000477 4543583A00              czIntECX                db      "ECX:",0
  2324 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2325 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2326 00000486 4553493A00              czIntESI                db      "ESI:",0
  2327 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2328 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2329 00000495 4553503A00              czIntESP                db      "ESP:",0
  2330 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2331 0000049F 2045533A00              czIntES                 db      " ES:",0
  2332 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2333 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2334 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2335 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2336                                  ;-----------------------------------------------------------------------------------------------------------------------
  2337                                  ;
  2338                                  ;       Routine:        DrawTextDialogBox
  2339                                  ;
  2340                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2341                                  ;
  2342                                  ;       In:             CL      upper left column (0-79)
  2343                                  ;                       CH      upper left row (0-24)
  2344                                  ;                       DL      column width, excluding border
  2345                                  ;                       DH      row height, excluding border
  2346                                  ;                       BH      color attribute
  2347                                  ;
  2348                                  ;-----------------------------------------------------------------------------------------------------------------------
  2349 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2350 000004B9 56                                              push    esi                                             ;
  2351 000004BA 57                                              push    edi                                             ;
  2352 000004BB 06                                              push    es                                              ;
  2353 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2354 000004BE 07                                              pop     es                                              ;... into ES
  2355                                  ;
  2356                                  ;       Compute target display offset
  2357                                  ;
  2358 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2359 000004C1 88E8                                            mov     al,ch                                           ;row
  2360 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2361 000004C5 F6E4                                            mul     ah                                              ;row offset
  2362 000004C7 00C8                                            add     al,cl                                           ;add column
  2363 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2364 000004CC 00C8                                            add     al,cl                                           ;add column
  2365 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2366 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2367                                  ;
  2368                                  ;       Display top border row
  2369                                  ;
  2370 000004D3 57                                              push    edi                                             ;save target row offset
  2371 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2372 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2373 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2374 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2375 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2376 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2377 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2378 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2379 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2380 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2381 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2382                                  ;
  2383                                  ;       Display dialog box body rows
  2384                                  ;
  2385 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2386 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2387 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2388 000004F3 57                                              push    edi                                             ;save target row offset
  2389 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2390 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2391 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2392 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2393 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2394 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2395 00000500 F366AB                                          rep     stosw                                           ;display row
  2396 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2397 00000505 66AB                                            stosw                                                   ;display character and attribute
  2398 00000507 5F                                              pop     edi                                             ;restore target row offset
  2399 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2400 0000050E 59                                              pop     ecx                                             ;remaining rows
  2401 0000050F E2E1                                            loop    .10                                             ;next row
  2402                                  ;
  2403                                  ;       Display bottom border row
  2404                                  ;
  2405 00000511 57                                              push    edi                                             ;save target row offset
  2406 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2407 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2408 00000516 66AB                                            stosw                                                   ;display character and attribute
  2409 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2410 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2411 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2412 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2413 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2414 00000523 66AB                                            stosw                                                   ;display character and attribute
  2415 00000525 5F                                              pop     edi                                             ;restore target row offset
  2416 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2417                                  ;
  2418                                  ;       Restore and return
  2419                                  ;
  2420 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2421 0000052D 5F                                              pop     edi                                             ;
  2422 0000052E 5E                                              pop     esi                                             ;
  2423 0000052F 59                                              pop     ecx                                             ;
  2424 00000530 C3                                              ret                                                     ;return
  2425                                  ;=======================================================================================================================
  2426                                  ;
  2427                                  ;       Hardware Device Interupts
  2428                                  ;
  2429                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2430                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2431                                  ;       (BX=2028h).
  2432                                  ;
  2433                                  ;=======================================================================================================================
  2434                                  ;-----------------------------------------------------------------------------------------------------------------------
  2435                                  ;
  2436                                  ;       IRQ0    Clock Tick Interrupt
  2437                                  ;
  2438                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2439                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2440                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2441                                  ;
  2442                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2443                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2444                                  ;
  2445                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2446                                  ;       zero, the floppy disk motors are turned off.
  2447                                  ;
  2448                                  ;-----------------------------------------------------------------------------------------------------------------------
  2449                                                          menter  clocktick                                       ;clock tick interrupt
  2449                              <1> ?%1 equ ($-$$)
  2450 00000531 50                                              push    eax                                             ;save non-volatile regs
  2451 00000532 52                                              push    edx                                             ;
  2452 00000533 1E                                              push    ds                                              ;
  2453                                  ;
  2454                                  ;       Update the clock tick count and the elapsed days as needed.
  2455                                  ;
  2456 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2457 00000536 1F                                              pop     ds                                              ;... into data segment register
  2458 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2459 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2460 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2461 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2462 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2463 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2464 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2465                                  ;
  2466                                  ;       Decrement floppy disk motor timeout.
  2467                                  ;
  2468 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2469 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2470 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2471 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2472                                  ;
  2473                                  ;       Turn off the floppy disk motor if appropriate.
  2474                                  ;
  2475 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2476 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2477 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2478 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2479 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2480 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2481 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2482 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2483 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2484 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2485 00000577 EE                                              out     dx,al                                           ;turn motor off
  2486                                  ;
  2487                                  ;       Signal the end of the hardware interrupt.
  2488                                  ;
  2489 00000578 E8B10D0000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2490                                  ;
  2491                                  ;       Restore and return.
  2492                                  ;
  2493 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2494 0000057E 5A                                              pop     edx                                             ;
  2495 0000057F 58                                              pop     eax                                             ;
  2496 00000580 CF                                              iretd                                                   ;return
  2497                                  ;-----------------------------------------------------------------------------------------------------------------------
  2498                                  ;
  2499                                  ;       IRQ1    Keyboard Interrupt
  2500                                  ;
  2501                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2502                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2503                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2504                                  ;       ALL modified registers upon return.
  2505                                  ;
  2506                                  ;-----------------------------------------------------------------------------------------------------------------------
  2507                                                          menter  keyboard                                        ;keyboard interrrupt
  2507                              <1> ?%1 equ ($-$$)
  2508 00000581 50                                              push    eax                                             ;save non-volatile regs
  2509 00000582 53                                              push    ebx                                             ;
  2510 00000583 51                                              push    ecx                                             ;
  2511 00000584 56                                              push    esi                                             ;
  2512 00000585 1E                                              push    ds                                              ;
  2513 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2514 00000588 1F                                              pop     ds                                              ;... into data segment register
  2515 00000589 30C0                                            xor     al,al                                           ;zero
  2516 0000058B A221080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2517 00000590 A222080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2518 00000595 A223080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2519 0000059A A224080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2520 0000059F A225080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2521 000005A4 A226080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2522 000005A9 B020                                            mov     al,' '                                          ;space
  2523 000005AB A227080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2524 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2525 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2526 000005B4 200520080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2527 000005BA 8A1D1E080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2528 000005C0 8A3D1F080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2529 000005C6 E8180E0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2530 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2531 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2532 000005D3 A221080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2533 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2534 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2535 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2536 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2537 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2538 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2539 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2540 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2541 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2542 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2543 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2544 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2545 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2546 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2547 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2548 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2549 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2550 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2551 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2552 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2553 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2554 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2555 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2556 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2557 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2558 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2559 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2560 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2561 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2562 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2563 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2564 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2565 00000654 E88A0D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2566 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2567 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2568 00000661 A222080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2569 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2570 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2571 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2572 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2573 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2574 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2575 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2576 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2577 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2578 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2579 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2580 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2581 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2582 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2583 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2584 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2585 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2586 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2587 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2588 0000069C E8420D0000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2589 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2590 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2591 000006A9 A223080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2592 000006AE E8300D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2593 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2594 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2595 000006BB A224080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2596 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2597 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2598 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2599 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2600 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2601 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2602 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2603 000006D1 E8DE0C0000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2604 000006D6 881D1E080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2605 000006DC 883D1F080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2606 000006E2 E829090000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2607 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2608 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2609 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2610 000006F1 E8ED0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2611 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2612 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2613 000006FE A222080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2614 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2615 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2616 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2617 0000070E E8D00C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2618 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2619 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2620 0000071B A223080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2621 00000720 E8BE0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2622 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2623 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2624 0000072D A224080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2625 00000732 E8AC0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2626 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2627 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2628 0000073F A225080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2629 00000744 E89A0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2630 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2631 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2632 0000074D A226080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2633 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2634 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2635 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2636 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2637 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2638 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2639 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2640 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2641 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2642 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2643 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2644 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2645 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2646 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2647 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2648 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2649 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2650 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2651 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2652 00000787 A227080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2653 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2654 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2655 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2656 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2657 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2658 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2659 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2660 000007A4 50                                              push    eax                                             ;save codes
  2661 000007A5 E87A0A0000                                      call    PutMessage                                      ;put message to console
  2662 000007AA 58                                              pop     eax                                             ;restore codes
  2663 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2664 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2665 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2666 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2667 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2668 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2669 000007BD E8620A0000                                      call    PutMessage                                      ;put message to console
  2670 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2671 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2672 000007C6 080520080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2673 000007CC E8E7070000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2674 000007D1 E8580B0000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2675 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2676 000007D7 5E                                              pop     esi                                             ;
  2677 000007D8 59                                              pop     ecx                                             ;
  2678 000007D9 5B                                              pop     ebx                                             ;
  2679 000007DA 58                                              pop     eax                                             ;
  2680 000007DB CF                                              iretd                                                   ;return
  2681                                  ;-----------------------------------------------------------------------------------------------------------------------
  2682                                  ;       Scan-Code to ASCII Translation Tables
  2683                                  ;-----------------------------------------------------------------------------------------------------------------------
  2684 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2685 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2686 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2687 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2688 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2689 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2690 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2691 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2692 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2693 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2694 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2695 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2696 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2697 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2698 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2699 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2700 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2701 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2702 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2703 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2704 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2705 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2706 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2707 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2708 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2709 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2710 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2711 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2712 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2713 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2714 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2715 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2716                                  ;-----------------------------------------------------------------------------------------------------------------------
  2717                                  ;
  2718                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2719                                  ;
  2720                                  ;-----------------------------------------------------------------------------------------------------------------------
  2721                                                          menter  iochannel                                       ;secondary 8259A cascade
  2721                              <1> ?%1 equ ($-$$)
  2722 000008DC 50                                              push    eax                                             ;save modified regs
  2723 000008DD EB3F                                            jmp     hwint                                           ;end interrupt and return
  2724                                  ;-----------------------------------------------------------------------------------------------------------------------
  2725                                  ;
  2726                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2727                                  ;
  2728                                  ;-----------------------------------------------------------------------------------------------------------------------
  2729                                                          menter  com2                                            ;serial port 2 interrupt
  2729                              <1> ?%1 equ ($-$$)
  2730 000008DF 50                                              push    eax                                             ;save modified regs
  2731 000008E0 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2732                                  ;-----------------------------------------------------------------------------------------------------------------------
  2733                                  ;
  2734                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2735                                  ;
  2736                                  ;-----------------------------------------------------------------------------------------------------------------------
  2737                                                          menter  com1                                            ;serial port 1 interrupt
  2737                              <1> ?%1 equ ($-$$)
  2738 000008E2 50                                              push    eax                                             ;save modified regs
  2739 000008E3 EB39                                            jmp     hwint                                           ;end interrupt and return
  2740                                  ;-----------------------------------------------------------------------------------------------------------------------
  2741                                  ;
  2742                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2743                                  ;
  2744                                  ;-----------------------------------------------------------------------------------------------------------------------
  2745                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2745                              <1> ?%1 equ ($-$$)
  2746 000008E5 50                                              push    eax                                             ;save modified regs
  2747 000008E6 EB36                                            jmp     hwint                                           ;end interrupt and return
  2748                                  ;-----------------------------------------------------------------------------------------------------------------------
  2749                                  ;
  2750                                  ;       IRQ6    Diskette Hardware Interrupt
  2751                                  ;
  2752                                  ;-----------------------------------------------------------------------------------------------------------------------
  2753                                                          menter  diskette                                        ;floppy disk interrupt
  2753                              <1> ?%1 equ ($-$$)
  2754 000008E8 50                                              push    eax                                             ;save non-volatile regs
  2755 000008E9 1E                                              push    ds                                              ;
  2756 000008EA 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2757 000008EC 1F                                              pop     ds                                              ;... into DS register
  2758 000008ED A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2759 000008F2 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2760 000008F4 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2761 000008F9 1F                                              pop     ds                                              ;restore non-volatile regs
  2762 000008FA EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2763                                  ;-----------------------------------------------------------------------------------------------------------------------
  2764                                  ;
  2765                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2766                                  ;
  2767                                  ;-----------------------------------------------------------------------------------------------------------------------
  2768                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2768                              <1> ?%1 equ ($-$$)
  2769 000008FC 50                                              push    eax                                             ;save modified regs
  2770 000008FD EB1F                                            jmp     hwint                                           ;end interrupt and return
  2771                                  ;-----------------------------------------------------------------------------------------------------------------------
  2772                                  ;
  2773                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2774                                  ;
  2775                                  ;-----------------------------------------------------------------------------------------------------------------------
  2776                                                          menter  rtclock                                         ;real-time clock interrupt
  2776                              <1> ?%1 equ ($-$$)
  2777 000008FF 50                                              push    eax                                             ;save modified regs
  2778 00000900 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2779                                  ;-----------------------------------------------------------------------------------------------------------------------
  2780                                  ;
  2781                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2782                                  ;
  2783                                  ;-----------------------------------------------------------------------------------------------------------------------
  2784                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2784                              <1> ?%1 equ ($-$$)
  2785 00000902 50                                              push    eax                                             ;save modified regs
  2786 00000903 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2787                                  ;-----------------------------------------------------------------------------------------------------------------------
  2788                                  ;
  2789                                  ;       IRQ10   Reserved Hardware Interrupt
  2790                                  ;
  2791                                  ;-----------------------------------------------------------------------------------------------------------------------
  2792                                                          menter  irq10                                           ;reserved
  2792                              <1> ?%1 equ ($-$$)
  2793 00000905 50                                              push    eax                                             ;save modified regs
  2794 00000906 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2795                                  ;-----------------------------------------------------------------------------------------------------------------------
  2796                                  ;
  2797                                  ;       IRQ11   Reserved Hardware Interrupt
  2798                                  ;
  2799                                  ;-----------------------------------------------------------------------------------------------------------------------
  2800                                                          menter  irq11                                           ;reserved
  2800                              <1> ?%1 equ ($-$$)
  2801 00000908 50                                              push    eax                                             ;save modified regs
  2802 00000909 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2803                                  ;-----------------------------------------------------------------------------------------------------------------------
  2804                                  ;
  2805                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2806                                  ;
  2807                                  ;-----------------------------------------------------------------------------------------------------------------------
  2808                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2808                              <1> ?%1 equ ($-$$)
  2809 0000090B 50                                              push    eax                                             ;save modified regs
  2810 0000090C EB09                                            jmp     hwwint                                          ;end interrupt and return
  2811                                  ;-----------------------------------------------------------------------------------------------------------------------
  2812                                  ;
  2813                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2814                                  ;
  2815                                  ;-----------------------------------------------------------------------------------------------------------------------
  2816                                                          menter  coprocessor                                     ;coprocessor interrupt
  2816                              <1> ?%1 equ ($-$$)
  2817 0000090E 50                                              push    eax                                             ;save modified regs
  2818 0000090F EB06                                            jmp     hwwint                                          ;end interrupt and return
  2819                                  ;-----------------------------------------------------------------------------------------------------------------------
  2820                                  ;
  2821                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2822                                  ;
  2823                                  ;-----------------------------------------------------------------------------------------------------------------------
  2824                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2824                              <1> ?%1 equ ($-$$)
  2825 00000911 50                                              push    eax                                             ;save modified regs
  2826 00000912 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2827                                  ;-----------------------------------------------------------------------------------------------------------------------
  2828                                  ;
  2829                                  ;       IRQ15   Reserved Hardware Interrupt
  2830                                  ;
  2831                                  ;-----------------------------------------------------------------------------------------------------------------------
  2832                                                          menter  irq15                                           ;reserved
  2832                              <1> ?%1 equ ($-$$)
  2833 00000914 50                                              push    eax                                             ;save modified regs
  2834 00000915 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2835                                  ;-----------------------------------------------------------------------------------------------------------------------
  2836                                  ;
  2837                                  ;       Exit from hardware interrupt
  2838                                  ;
  2839                                  ;-----------------------------------------------------------------------------------------------------------------------
  2840 00000917 E8180A0000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2841 0000091C EB05                                            jmp     hwint90                                         ;skip ahead
  2842 0000091E E80B0A0000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2843 00000923 58                      hwint90                 pop     eax                                             ;restore modified regs
  2844 00000924 CF                                              iretd                                                   ;return from interrupt
  2845                                  ;-----------------------------------------------------------------------------------------------------------------------
  2846                                  ;
  2847                                  ;       INT 30h Operating System Software Service Interrupt
  2848                                  ;
  2849                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2850                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2851                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2852                                  ;       the entry address of the specific function from a table.
  2853                                  ;
  2854                                  ;-----------------------------------------------------------------------------------------------------------------------
  2855                                                          menter  svc
  2855                              <1> ?%1 equ ($-$$)
  2856 00000925 3C1D                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2857 00000927 730D                                            jae     svc90                                           ;yes, skip ahead
  2858 00000929 0FB6C0                                          movzx   eax,al                                          ;function
  2859 0000092C C1E002                                          shl     eax,2                                           ;offset into table
  2860 0000092F 2EFF90[37090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2861 00000936 CF                      svc90                   iretd                                                   ;return from interrupt
  2862                                  ;-----------------------------------------------------------------------------------------------------------------------
  2863                                  ;
  2864                                  ;       Service Request Table
  2865                                  ;
  2866                                  ;
  2867                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2868                                  ;
  2869                                  ;-----------------------------------------------------------------------------------------------------------------------
  2870                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2870                              <1> tsvc :
  2870                              <1> e%1 equ ($-tsvc)/4
  2870 00000937 [D00B0000]          <1>  dd %1
  2871                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2871                              <1> e%1 equ ($-tsvc)/4
  2871 0000093B [4C120000]          <1>  dd %1
  2872                                                          tsvce   CompareMemory                                   ;compare memory
  2872                              <1> e%1 equ ($-tsvc)/4
  2872 0000093F [2B0E0000]          <1>  dd %1
  2873                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2873                              <1> e%1 equ ($-tsvc)/4
  2873 00000943 [DA100000]          <1>  dd %1
  2874                                                          tsvce   FreeMemory                                      ;free memory block
  2874                              <1> e%1 equ ($-tsvc)/4
  2874 00000947 [EE0C0000]          <1>  dd %1
  2875                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2875                              <1> e%1 equ ($-tsvc)/4
  2875 0000094B [D9120000]          <1>  dd %1
  2876                                                          tsvce   GetConsoleString                                ;get string input
  2876                              <1> e%1 equ ($-tsvc)/4
  2876 0000094F [8C0E0000]          <1>  dd %1
  2877                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2877                              <1> e%1 equ ($-tsvc)/4
  2877 00000953 [EA120000]          <1>  dd %1
  2878                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2878                              <1> e%1 equ ($-tsvc)/4
  2878 00000957 [FB120000]          <1>  dd %1
  2879                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2879                              <1> e%1 equ ($-tsvc)/4
  2879 0000095B [0D110000]          <1>  dd %1
  2880                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2880                              <1> e%1 equ ($-tsvc)/4
  2880 0000095F [B9090000]          <1>  dd %1
  2881                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2881                              <1> e%1 equ ($-tsvc)/4
  2881 00000963 [04130000]          <1>  dd %1
  2882                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2882                              <1> e%1 equ ($-tsvc)/4
  2882 00000967 [AA100000]          <1>  dd %1
  2883                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2883                              <1> e%1 equ ($-tsvc)/4
  2883 0000096B [D4090000]          <1>  dd %1
  2884                                                          tsvce   PutDayString                                    ;put DD string
  2884                              <1> e%1 equ ($-tsvc)/4
  2884 0000096F [150A0000]          <1>  dd %1
  2885                                                          tsvce   PutHourString                                   ;put hh string
  2885                              <1> e%1 equ ($-tsvc)/4
  2885 00000973 [230A0000]          <1>  dd %1
  2886                                                          tsvce   PutMinuteString                                 ;put mm string
  2886                              <1> e%1 equ ($-tsvc)/4
  2886 00000977 [310A0000]          <1>  dd %1
  2887                                                          tsvce   PutMonthString                                  ;put MM string
  2887                              <1> e%1 equ ($-tsvc)/4
  2887 0000097B [3F0A0000]          <1>  dd %1
  2888                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2888                              <1> e%1 equ ($-tsvc)/4
  2888 0000097F [4D0A0000]          <1>  dd %1
  2889                                                          tsvce   PutSecondString                                 ;put ss string
  2889                              <1> e%1 equ ($-tsvc)/4
  2889 00000983 [710A0000]          <1>  dd %1
  2890                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2890                              <1> e%1 equ ($-tsvc)/4
  2890 00000987 [7E0A0000]          <1>  dd %1
  2891                                                          tsvce   PutWeekdayString                                ;put weekday string
  2891                              <1> e%1 equ ($-tsvc)/4
  2891 0000098B [B30A0000]          <1>  dd %1
  2892                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2892                              <1> e%1 equ ($-tsvc)/4
  2892 0000098F [C10A0000]          <1>  dd %1
  2893                                                          tsvce   PutYearString                                   ;put YYYY string
  2893                              <1> e%1 equ ($-tsvc)/4
  2893 00000993 [E40A0000]          <1>  dd %1
  2894                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2894                              <1> e%1 equ ($-tsvc)/4
  2894 00000997 [3A130000]          <1>  dd %1
  2895                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2895                              <1> e%1 equ ($-tsvc)/4
  2895 0000099B [A5130000]          <1>  dd %1
  2896                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2896                              <1> e%1 equ ($-tsvc)/4
  2896 0000099F [2B110000]          <1>  dd %1
  2897                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2897                              <1> e%1 equ ($-tsvc)/4
  2897 000009A3 [CF110000]          <1>  dd %1
  2898                                                          tsvce   UpperCaseString                                 ;upper-case string
  2898                              <1> e%1 equ ($-tsvc)/4
  2898 000009A7 [480E0000]          <1>  dd %1
  2899                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2900                                  ;-----------------------------------------------------------------------------------------------------------------------
  2901                                  ;
  2902                                  ;       Service Request Macros
  2903                                  ;
  2904                                  ;       These macros provide positional parameterization of service request calls.
  2905                                  ;
  2906                                  ;-----------------------------------------------------------------------------------------------------------------------
  2907                                  %macro                  allocateMemory 1
  2908                                                          mov     ecx,%1                                          ;bytes to allocate
  2909                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2910                                                          int     _svc                                            ;invoke OS service
  2911                                  %endmacro
  2912                                  %macro                  clearConsoleScreen 0
  2913                                                          mov     al,eClearConsoleScreen                          ;function code
  2914                                                          int     _svc                                            ;invoke OS service
  2915                                  %endmacro
  2916                                  %macro                  compareMemory 0
  2917                                                          mov     al,eCompareMemory                               ;function code
  2918                                                          int     _svc                                            ;invoke OS service
  2919                                  %endmacro
  2920                                  %macro                  decimalToUnsigned 0
  2921                                                          mov     al,eDecimalToUnsigned                           ;function code
  2922                                                          int     _svc                                            ;invoke OS servie
  2923                                  %endmacro
  2924                                  %macro                  freeMemory 1
  2925                                                          mov     edx,%1                                          ;address of memory block
  2926                                                          mov     al,eFreeMemory                                  ;function code
  2927                                                          int     _svc                                            ;invoke OS service
  2928                                  %endmacro
  2929                                  %macro                  getBaseMemSize 0
  2930                                                          mov     al,eGetBaseMemSize                              ;function code
  2931                                                          int     _svc                                            ;invoke OS service
  2932                                  %endmacro
  2933                                  %macro                  getConsoleString 4
  2934                                                          mov     edx,%1                                          ;buffer address
  2935                                                          mov     ecx,%2                                          ;max characters
  2936                                                          mov     bh,%3                                           ;echo indicator
  2937                                                          mov     bl,%4                                           ;terminator
  2938                                                          mov     al,eGetConsoleString                            ;function code
  2939                                                          int     _svc                                            ;invoke OS service
  2940                                  %endmacro
  2941                                  %macro                  getExtendedMemSize 0
  2942                                                          mov     al,eGetExtendedMemSize                          ;function code
  2943                                                          int     _svc                                            ;invoke OS service
  2944                                  %endmacro
  2945                                  %macro                  getROMMemSize 0
  2946                                                          mov     al,eGetROMMemSize                               ;function code
  2947                                                          int     _svc                                            ;invoke OS service
  2948                                  %endmacro
  2949                                  %macro                  hexadecimalToUnsigned 0
  2950                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2951                                                          int     _svc                                            ;invoke OS service
  2952                                  %endmacro
  2953                                  %macro                  isLeapYear 1
  2954                                                          mov     ebx,%1                                          ;DATETIME addr
  2955                                                          mov     al,eIsLeapYear                                  ;function code
  2956                                                          int     _svc                                            ;invoke OS service
  2957                                  %endmacro
  2958                                  %macro                  placeCursor 0
  2959                                                          mov     al,ePlaceCursor                                 ;function code
  2960                                                          int     _svc                                            ;invoke OS service
  2961                                  %endmacro
  2962                                  %macro                  putConsoleString 1
  2963                                                          mov     edx,%1                                          ;string address
  2964                                                          mov     al,ePutConsoleString                            ;function code
  2965                                                          int     _svc                                            ;invoke OS service
  2966                                  %endmacro
  2967                                  %macro                  putDateString 0
  2968                                                          mov     al,ePutDateString                               ;function code
  2969                                                          int     _svc                                            ;invoke OS service
  2970                                  %endmacro
  2971                                  %macro                  putDateString 2
  2972                                                          mov     ebx,%1                                          ;DATETIME addr
  2973                                                          mov     edx,%2                                          ;output buffer addr
  2974                                                          mov     al,ePutDateString                               ;function code
  2975                                                          int     _svc                                            ;invoke OS service
  2976                                  %endmacro
  2977                                  %macro                  putDayString 2
  2978                                                          mov     ebx,%1                                          ;DATETIME addr
  2979                                                          mov     edx,%2                                          ;output buffer addr
  2980                                                          mov     al,ePutDayString                                ;function code
  2981                                                          int     _svc                                            ;invoke OS service
  2982                                  %endmacro
  2983                                  %macro                  putHourString 2
  2984                                                          mov     ebx,%1                                          ;DATETIME addr
  2985                                                          mov     edx,%2                                          ;output buffer addr
  2986                                                          mov     al,ePutHourString                               ;function code
  2987                                                          int     _svc                                            ;invoke OS service
  2988                                  %endmacro
  2989                                  %macro                  putMinuteString 2
  2990                                                          mov     ebx,%1                                          ;DATETIME addr
  2991                                                          mov     edx,%2                                          ;output buffer addr
  2992                                                          mov     al,ePutMinuteString                             ;function code
  2993                                                          int     _svc                                            ;invoke OS service
  2994                                  %endmacro
  2995                                  %macro                  putMonthString 2
  2996                                                          mov     ebx,%1                                          ;DATETIME addr
  2997                                                          mov     edx,%2                                          ;output buffer addr
  2998                                                          mov     al,ePutMonthString                              ;function code
  2999                                                          int     _svc                                            ;invoke OS service
  3000                                  %endmacro
  3001                                  %macro                  putMonthNameString 2
  3002                                                          mov     ebx,%1                                          ;DATETIME addr
  3003                                                          mov     edx,%2                                          ;output buffer addr
  3004                                                          mov     al,ePutMonthNameString                          ;function code
  3005                                                          int     _svc                                            ;invoke OS service
  3006                                  %endmacro
  3007                                  %macro                  putSecondString 2
  3008                                                          mov     ebx,%1                                          ;DATETIME addr
  3009                                                          mov     edx,%2                                          ;output buffer addr
  3010                                                          mov     al,ePutSecondString                             ;function code
  3011                                                          int     _svc                                            ;invoke OS service
  3012                                  %endmacro
  3013                                  %macro                  putTimeString 0
  3014                                                          mov     al,ePutTimeString                               ;function code
  3015                                                          int     _svc                                            ;invoke OS service
  3016                                  %endmacro
  3017                                  %macro                  putTimeString 2
  3018                                                          mov     ebx,%1                                          ;DATETIME addr
  3019                                                          mov     edx,%2                                          ;output buffer addr
  3020                                                          mov     al,ePutTimeString                               ;function code
  3021                                                          int     _svc                                            ;invoke OS service
  3022                                  %endmacro
  3023                                  %macro                  putWeekdayString 2
  3024                                                          mov     ebx,%1                                          ;DATETIME addr
  3025                                                          mov     edx,%2                                          ;output buffer addr
  3026                                                          mov     al,ePutWeekdayString                            ;function code
  3027                                                          int     _svc                                            ;invoke OS service
  3028                                  %endmacro
  3029                                  %macro                  putWeekdayNameString 2
  3030                                                          mov     ebx,%1                                          ;DATETIME addr
  3031                                                          mov     edx,%2                                          ;output buffer addr
  3032                                                          mov     al,ePutWeekdayNameString                        ;function code
  3033                                                          int     _svc                                            ;invoke OS service
  3034                                  %endmacro
  3035                                  %macro                  putYearString 2
  3036                                                          mov     ebx,%1                                          ;DATETIME addr
  3037                                                          mov     edx,%2                                          ;output buffer addr
  3038                                                          mov     al,ePutYearString                               ;function code
  3039                                                          int     _svc                                            ;invoke OS service
  3040                                  %endmacro
  3041                                  %macro                  readRealTimeClock 0
  3042                                                          mov     al,eReadRealTimeClock                           ;function code
  3043                                                          int     _svc                                            ;invoke OS service
  3044                                  %endmacro
  3045                                  %macro                  readRealTimeClock 1
  3046                                                          mov     ebx,%1                                          ;DATETIME addr
  3047                                                          mov     al,eReadRealTimeClock                           ;function code
  3048                                                          int     _svc                                            ;invoke OS service
  3049                                  %endmacro
  3050                                  %macro                  resetSystem 0
  3051                                                          mov     al,eResetSystem                                 ;function code
  3052                                                          int     _svc                                            ;invoke OS service
  3053                                  %endmacro
  3054                                  %macro                  unsignedToDecimalString 0
  3055                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3056                                                          int     _svc                                            ;invoke OS service
  3057                                  %endmacro
  3058                                  %macro                  unsignedToHexadecimal 0
  3059                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3060                                                          int     _svc                                            ;invoke OS service
  3061                                  %endmacro
  3062                                  %macro                  upperCaseString 0
  3063                                                          mov     al,eUpperCaseString                             ;function code
  3064                                                          int     _svc                                            ;invoke OS service
  3065                                  %endmacro
  3066                                  ;=======================================================================================================================
  3067                                  ;
  3068                                  ;       Kernel Function Library
  3069                                  ;
  3070                                  ;=======================================================================================================================
  3071                                  ;=======================================================================================================================
  3072                                  ;
  3073                                  ;       Date and Time Helper Routines
  3074                                  ;
  3075                                  ;       GetYear
  3076                                  ;       IsLeapYear
  3077                                  ;       PutDateString
  3078                                  ;       PutDayString
  3079                                  ;       PutHourString
  3080                                  ;       PutMinuteString
  3081                                  ;       PutMonthString
  3082                                  ;       PutMonthNameString
  3083                                  ;       PutSecondString
  3084                                  ;       PutTimeString
  3085                                  ;       PutWeekdayString
  3086                                  ;       PutWeekdayNameString
  3087                                  ;       PutYearString
  3088                                  ;
  3089                                  ;=======================================================================================================================
  3090                                  ;-----------------------------------------------------------------------------------------------------------------------
  3091                                  ;
  3092                                  ;       Routine:        GetYear
  3093                                  ;
  3094                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3095                                  ;
  3096                                  ;       In:             DS:EBX  DATETIME address
  3097                                  ;
  3098                                  ;       Out:            ECX     year
  3099                                  ;
  3100                                  ;-----------------------------------------------------------------------------------------------------------------------
  3101 000009AB 0FB64B07                GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3102 000009AF 6BC964                                          imul    ecx,100                                         ;century * 100
  3103 000009B2 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3104 000009B6 01C1                                            add     ecx,eax                                         ;year (YYYY)
  3105 000009B8 C3                                              ret                                                     ;return
  3106                                  ;-----------------------------------------------------------------------------------------------------------------------
  3107                                  ;
  3108                                  ;       Routine:        IsLeapYear
  3109                                  ;
  3110                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3111                                  ;
  3112                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3113                                  ;
  3114                                  ;       Out:            ECX     0 = not a leap year
  3115                                  ;                               1 = leap year
  3116                                  ;
  3117                                  ;-----------------------------------------------------------------------------------------------------------------------
  3118 000009B9 E8EDFFFFFF              IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3119 000009BE 89C8                                            mov     eax,ecx                                         ;EAX = YYYY
  3120 000009C0 31C9                                            xor     ecx,ecx                                         ;assume not leap year
  3121 000009C2 A803                                            test    al,00000011b                                    ;multiple of four?
  3122 000009C4 750D                                            jnz     .no                                             ;no, branch
  3123 000009C6 B264                                            mov     dl,100                                          ;divisor
  3124 000009C8 F6F2                                            div     dl                                              ;divide by 100
  3125 000009CA 84E4                                            test    ah,ah                                           ;multiple of 100?
  3126 000009CC 7504                                            jnz     .yes                                            ;yes, branch
  3127 000009CE A803                                            test    al,00000011b                                    ;multiple of 400?
  3128 000009D0 7501                                            jnz     .no                                             ;no, branch
  3129 000009D2 41                      .yes                    inc     ecx                                             ;indicate leap
  3130 000009D3 C3                      .no                     ret                                                     ;return
  3131                                  ;-----------------------------------------------------------------------------------------------------------------------
  3132                                  ;
  3133                                  ;       Routine:        PutDateString
  3134                                  ;
  3135                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3136                                  ;                       structure at ds:ebx.
  3137                                  ;
  3138                                  ;       In:             DS:EBX  DATETIME address
  3139                                  ;                       DS:EDX  output buffer address
  3140                                  ;
  3141                                  ;-----------------------------------------------------------------------------------------------------------------------
  3142 000009D4 51                      PutDateString           push    ecx                                             ;save non-volatile regs
  3143 000009D5 57                                              push    edi                                             ;
  3144 000009D6 06                                              push    es                                              ;
  3145 000009D7 1E                                              push    ds                                              ;store data selector ...
  3146 000009D8 07                                              pop     es                                              ;... in extra segment reg
  3147 000009D9 89D7                                            mov     edi,edx                                         ;output buffer address
  3148 000009DB B10A                                            mov     cl,10                                           ;divisor
  3149 000009DD BA30302F00                                      mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3150 000009E2 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3151 000009E6 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3152 000009E8 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3153 000009EA FC                                              cld                                                     ;forward strings
  3154 000009EB AB                                              stosd                                                   ;store "mm/"nul
  3155 000009EC 4F                                              dec     edi                                             ;address of terminator
  3156 000009ED 0FB64304                                        movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3157 000009F1 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3158 000009F3 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3159 000009F5 AB                                              stosd                                                   ;store "dd/"nul
  3160 000009F6 4F                                              dec     edi                                             ;address of terminator
  3161 000009F7 0FB64307                                        movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3162 000009FB F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3163 000009FD 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3164 000009FF AB                                              stosd                                                   ;store "cc/"null
  3165 00000A00 4F                                              dec     edi                                             ;address of terminator
  3166 00000A01 4F                                              dec     edi                                             ;address of delimiter
  3167 00000A02 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3168 00000A06 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3169 00000A08 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3170 00000A0A AA                                              stosb                                                   ;store quotient
  3171 00000A0B 88E0                                            mov     al,ah                                           ;remainder
  3172 00000A0D AA                                              stosb                                                   ;store remainder
  3173 00000A0E 30C0                                            xor     al,al                                           ;null terminator
  3174 00000A10 AA                                              stosb                                                   ;store terminator
  3175 00000A11 07                                              pop     es                                              ;restore non-volatile regs
  3176 00000A12 5F                                              pop     edi                                             ;
  3177 00000A13 59                                              pop     ecx                                             ;
  3178 00000A14 C3                                              ret                                                     ;return
  3179                                  ;-----------------------------------------------------------------------------------------------------------------------
  3180                                  ;
  3181                                  ;       Routine:        PutDayString
  3182                                  ;
  3183                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3184                                  ;                       structure at ds:ebx.
  3185                                  ;
  3186                                  ;       In:             DS:EBX  DATETIME address
  3187                                  ;                       DS:EDX  output buffer address
  3188                                  ;
  3189                                  ;-----------------------------------------------------------------------------------------------------------------------
  3190 00000A15 51                      PutDayString            push    ecx                                             ;save non-volatile regs
  3191 00000A16 0FB64B04                                        movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3192 00000A1A B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3193 00000A1C E80A070000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3194 00000A21 59                                              pop     ecx                                             ;
  3195 00000A22 C3                                              ret                                                     ;return
  3196                                  ;-----------------------------------------------------------------------------------------------------------------------
  3197                                  ;
  3198                                  ;       Routine:        PutHourString
  3199                                  ;
  3200                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3201                                  ;                       structure at ds:ebx.
  3202                                  ;
  3203                                  ;       In:             DS:EBX  DATETIME address
  3204                                  ;                       DS:EDX  output buffer address
  3205                                  ;
  3206                                  ;-----------------------------------------------------------------------------------------------------------------------
  3207 00000A23 51                      PutHourString           push    ecx                                             ;save non-volatile regs
  3208 00000A24 0FB64B02                                        movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3209 00000A28 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3210 00000A2A E8FC060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3211 00000A2F 59                                              pop     ecx                                             ;
  3212 00000A30 C3                                              ret                                                     ;return
  3213                                  ;-----------------------------------------------------------------------------------------------------------------------
  3214                                  ;
  3215                                  ;       Routine:        PutMinuteString
  3216                                  ;
  3217                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3218                                  ;                       structure at ds:ebx.
  3219                                  ;
  3220                                  ;       In:             DS:EBX  DATETIME address
  3221                                  ;                       DS:EDX  output buffer address
  3222                                  ;
  3223                                  ;-----------------------------------------------------------------------------------------------------------------------
  3224 00000A31 51                      PutMinuteString         push    ecx                                             ;save non-volatile regs
  3225 00000A32 0FB64B01                                        movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3226 00000A36 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3227 00000A38 E8EE060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3228 00000A3D 59                                              pop     ecx                                             ;
  3229 00000A3E C3                                              ret                                                     ;return
  3230                                  ;-----------------------------------------------------------------------------------------------------------------------
  3231                                  ;
  3232                                  ;       Routine:        PutMonthString
  3233                                  ;
  3234                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3235                                  ;                       structure at ds:ebx.
  3236                                  ;
  3237                                  ;       In:             DS:EBX  DATETIME address
  3238                                  ;                       DS:EDX  output buffer address
  3239                                  ;
  3240                                  ;-----------------------------------------------------------------------------------------------------------------------
  3241 00000A3F 51                      PutMonthString          push    ecx                                             ;save non-volatile regs
  3242 00000A40 0FB64B05                                        movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3243 00000A44 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3244 00000A46 E8E0060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3245 00000A4B 59                                              pop     ecx                                             ;
  3246 00000A4C C3                                              ret                                                     ;return
  3247                                  ;-----------------------------------------------------------------------------------------------------------------------
  3248                                  ;
  3249                                  ;       Routine:        PutMonthNameString
  3250                                  ;
  3251                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3252                                  ;                       structure at ds:ebx.
  3253                                  ;
  3254                                  ;       In:             DS:EBX  DATETIME address
  3255                                  ;                       DS:EDX  output buffer address
  3256                                  ;
  3257                                  ;-----------------------------------------------------------------------------------------------------------------------
  3258 00000A4D 56                      PutMonthNameString      push    esi                                             ;save non-volatile regs
  3259 00000A4E 57                                              push    edi                                             ;
  3260 00000A4F 1E                                              push    ds                                              ;
  3261 00000A50 06                                              push    es                                              ;
  3262 00000A51 1E                                              push    ds                                              ;load data selector ...
  3263 00000A52 07                                              pop     es                                              ;... into extra segment
  3264 00000A53 89D7                                            mov     edi,edx                                         ;output buffer address
  3265 00000A55 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3266 00000A59 48                                              dec     eax                                             ;month (0-11)
  3267 00000A5A C1E002                                          shl     eax,2                                           ;offset into month name lookup table
  3268 00000A5D 0E                                              push    cs                                              ;load code selector ...
  3269 00000A5E 1F                                              pop     ds                                              ;... into data segment
  3270 00000A5F 8BB0[A00B0000]                                  mov     esi,[tMonthNames+eax]                           ;month name address
  3271 00000A65 FC                                              cld                                                     ;forward strings
  3272 00000A66 AC                      .10                     lodsb                                                   ;name character
  3273 00000A67 AA                                              stosb                                                   ;store in output buffer
  3274 00000A68 84C0                                            test    al,al                                           ;end of string?
  3275 00000A6A 75FA                                            jnz     .10                                             ;no, continue
  3276 00000A6C 07                                              pop     es                                              ;restore non-volatile regs
  3277 00000A6D 1F                                              pop     ds                                              ;
  3278 00000A6E 5F                                              pop     edi                                             ;
  3279 00000A6F 5E                                              pop     esi                                             ;
  3280 00000A70 C3                                              ret                                                     ;return
  3281                                  ;-----------------------------------------------------------------------------------------------------------------------
  3282                                  ;
  3283                                  ;       Routine:        PutSecondString
  3284                                  ;
  3285                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3286                                  ;                       structure at ds:ebx.
  3287                                  ;
  3288                                  ;       In:             DS:EBX  DATETIME address
  3289                                  ;                       DS:EDX  output buffer address
  3290                                  ;
  3291                                  ;-----------------------------------------------------------------------------------------------------------------------
  3292 00000A71 51                      PutSecondString         push    ecx                                             ;save non-volatile regs
  3293 00000A72 0FB60B                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3294 00000A75 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3295 00000A77 E8AF060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3296 00000A7C 59                                              pop     ecx                                             ;
  3297 00000A7D C3                                              ret                                                     ;return
  3298                                  ;-----------------------------------------------------------------------------------------------------------------------
  3299                                  ;
  3300                                  ;       Routine:        PutTimeString
  3301                                  ;
  3302                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3303                                  ;                       structure at ds:ebx.
  3304                                  ;
  3305                                  ;       In:             DS:EBX  DATETIME address
  3306                                  ;                       DS:EDX  output buffer address
  3307                                  ;
  3308                                  ;-----------------------------------------------------------------------------------------------------------------------
  3309 00000A7E 51                      PutTimeString           push    ecx                                             ;save non-volatile regs
  3310 00000A7F 57                                              push    edi                                             ;
  3311 00000A80 06                                              push    es                                              ;
  3312 00000A81 1E                                              push    ds                                              ;store data selector ...
  3313 00000A82 07                                              pop     es                                              ;... in extra segment reg
  3314 00000A83 89D7                                            mov     edi,edx                                         ;output buffer address
  3315 00000A85 B10A                                            mov     cl,10                                           ;divisor
  3316 00000A87 BA30303A00                                      mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3317 00000A8C 0FB64302                                        movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3318 00000A90 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3319 00000A92 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3320 00000A94 FC                                              cld                                                     ;forward strings
  3321 00000A95 AB                                              stosd                                                   ;store "mm/"nul
  3322 00000A96 4F                                              dec     edi                                             ;address of terminator
  3323 00000A97 0FB64301                                        movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3324 00000A9B F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3325 00000A9D 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3326 00000A9F AB                                              stosd                                                   ;store "dd/"nul
  3327 00000AA0 4F                                              dec     edi                                             ;address of terminator
  3328 00000AA1 0FB603                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3329 00000AA4 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3330 00000AA6 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3331 00000AA8 AA                                              stosb                                                   ;store quotient
  3332 00000AA9 88E0                                            mov     al,ah                                           ;remainder
  3333 00000AAB AA                                              stosb                                                   ;store remainder
  3334 00000AAC 30C0                                            xor     al,al                                           ;null terminator
  3335 00000AAE AA                                              stosb                                                   ;store terminator
  3336 00000AAF 07                                              pop     es                                              ;restore non-volatile regs
  3337 00000AB0 5F                                              pop     edi                                             ;
  3338 00000AB1 59                                              pop     ecx                                             ;
  3339 00000AB2 C3                                              ret                                                     ;return
  3340                                  ;-----------------------------------------------------------------------------------------------------------------------
  3341                                  ;
  3342                                  ;       Routine:        PutWeekdayString
  3343                                  ;
  3344                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3345                                  ;                       structure at ds:ebx.
  3346                                  ;
  3347                                  ;       In:             DS:EBX  DATETIME address
  3348                                  ;                       DS:EDX  output buffer address
  3349                                  ;
  3350                                  ;-----------------------------------------------------------------------------------------------------------------------
  3351 00000AB3 51                      PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3352 00000AB4 0FB64B03                                        movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3353 00000AB8 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3354 00000ABA E86C060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3355 00000ABF 59                                              pop     ecx                                             ;
  3356 00000AC0 C3                                              ret                                                     ;return
  3357                                  ;-----------------------------------------------------------------------------------------------------------------------
  3358                                  ;
  3359                                  ;       Routine:        PutWeekdayNameString
  3360                                  ;
  3361                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3362                                  ;                       structure at ds:ebx.
  3363                                  ;
  3364                                  ;       In:             DS:EBX  DATETIME address
  3365                                  ;                       DS:EDX  output buffer address
  3366                                  ;
  3367                                  ;-----------------------------------------------------------------------------------------------------------------------
  3368 00000AC1 56                      PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3369 00000AC2 57                                              push    edi                                             ;
  3370 00000AC3 1E                                              push    ds                                              ;
  3371 00000AC4 06                                              push    es                                              ;
  3372 00000AC5 1E                                              push    ds                                              ;load data selector ...
  3373 00000AC6 07                                              pop     es                                              ;... into extra segment
  3374 00000AC7 89D7                                            mov     edi,edx                                         ;output buffer address
  3375 00000AC9 0FB64303                                        movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3376 00000ACD C1E002                                          shl     eax,2                                           ;offset into day name lookup table
  3377 00000AD0 0E                                              push    cs                                              ;load code selector ...
  3378 00000AD1 1F                                              pop     ds                                              ;... into data segment
  3379 00000AD2 8BB0[840B0000]                                  mov     esi,[tDayNames+eax]                             ;day name address
  3380 00000AD8 FC                                              cld                                                     ;forward strings
  3381 00000AD9 AC                      .10                     lodsb                                                   ;name character
  3382 00000ADA AA                                              stosb                                                   ;store in output buffer
  3383 00000ADB 84C0                                            test    al,al                                           ;end of string?
  3384 00000ADD 75FA                                            jnz     .10                                             ;no, continue
  3385 00000ADF 07                                              pop     es                                              ;restore non-volatile regs
  3386 00000AE0 1F                                              pop     ds                                              ;
  3387 00000AE1 5F                                              pop     edi                                             ;
  3388 00000AE2 5E                                              pop     esi                                             ;
  3389 00000AE3 C3                                              ret                                                     ;return
  3390                                  ;-----------------------------------------------------------------------------------------------------------------------
  3391                                  ;
  3392                                  ;       Routine:        PutYearString
  3393                                  ;
  3394                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3395                                  ;                       structure at ds:ebx.
  3396                                  ;
  3397                                  ;       In:             DS:EBX  DATETIME address
  3398                                  ;                       DS:EDX  output buffer address
  3399                                  ;
  3400                                  ;-----------------------------------------------------------------------------------------------------------------------
  3401 00000AE4 51                      PutYearString           push    ecx                                             ;save non-volatile regs
  3402 00000AE5 E8C1FEFFFF                                      call    GetYear                                         ;ECX = YYYY
  3403 00000AEA B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3404 00000AEC E83A060000                                      call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3405 00000AF1 59                                              pop     ecx                                             ;restore non-volatile regs
  3406 00000AF2 C3                                              ret                                                     ;return
  3407                                  ;-----------------------------------------------------------------------------------------------------------------------
  3408                                  ;
  3409                                  ;       Day Names
  3410                                  ;
  3411                                  ;-----------------------------------------------------------------------------------------------------------------------
  3412 00000AF3 53756E64617900          czSunday                db      "Sunday",0
  3413 00000AFA 4D6F6E64617900          czMonday                db      "Monday",0
  3414 00000B01 5475657364617900        czTuesday               db      "Tuesday",0
  3415 00000B09 5765646E6573646179-     czWednesday             db      "Wednesday",0
  3415 00000B12 00                 
  3416 00000B13 546875727364617900      czThursday              db      "Thursday",0
  3417 00000B1C 46726964617900          czFriday                db      "Friday",0
  3418 00000B23 536174757264617900      czSaturday              db      "Saturday",0
  3419                                  ;-----------------------------------------------------------------------------------------------------------------------
  3420                                  ;
  3421                                  ;       Month Names
  3422                                  ;
  3423                                  ;-----------------------------------------------------------------------------------------------------------------------
  3424 00000B2C 4A616E7561727900        czJanuary               db      "January",0
  3425 00000B34 466562727561727900      czFebruary              db      "February",0
  3426 00000B3D 4D6172636800            czMarch                 db      "March",0
  3427 00000B43 417072696C00            czApril                 db      "April",0
  3428 00000B49 4D617900                czMay                   db      "May",0
  3429 00000B4D 4A756E6500              czJune                  db      "June",0
  3430 00000B52 4A756C7900              czJuly                  db      "July",0
  3431 00000B57 41756775737400          czAugust                db      "August",0
  3432 00000B5E 53657074656D626572-     czSeptember             db      "September",0
  3432 00000B67 00                 
  3433 00000B68 4F63746F62657200        czOctober               db      "October",0
  3434 00000B70 4E6F76656D62657200      czNovember              db      "November",0
  3435 00000B79 446563656D62657200      czDecember              db      "December",0
  3436                                  ;-----------------------------------------------------------------------------------------------------------------------
  3437                                  ;
  3438                                  ;       Day Names Lookup Table
  3439                                  ;
  3440                                  ;-----------------------------------------------------------------------------------------------------------------------
  3441 00000B82 90<rept>                                        align   4
  3442                                  tDayNames               equ     $
  3443 00000B84 [F30A0000]                                      dd      czSunday
  3444 00000B88 [FA0A0000]                                      dd      czMonday
  3445 00000B8C [010B0000]                                      dd      czTuesday
  3446 00000B90 [090B0000]                                      dd      czWednesday
  3447 00000B94 [130B0000]                                      dd      czThursday
  3448 00000B98 [1C0B0000]                                      dd      czFriday
  3449 00000B9C [230B0000]                                      dd      czSaturday
  3450                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3451                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3452                                  ;-----------------------------------------------------------------------------------------------------------------------
  3453                                  ;
  3454                                  ;       Month Names Lookup Table
  3455                                  ;
  3456                                  ;-----------------------------------------------------------------------------------------------------------------------
  3457                                                          align   4
  3458                                  tMonthNames             equ     $
  3459 00000BA0 [2C0B0000]                                      dd      czJanuary
  3460 00000BA4 [340B0000]                                      dd      czFebruary
  3461 00000BA8 [3D0B0000]                                      dd      czMarch
  3462 00000BAC [430B0000]                                      dd      czApril
  3463 00000BB0 [490B0000]                                      dd      czMay
  3464 00000BB4 [4D0B0000]                                      dd      czJune
  3465 00000BB8 [520B0000]                                      dd      czJuly
  3466 00000BBC [570B0000]                                      dd      czAugust
  3467 00000BC0 [5E0B0000]                                      dd      czSeptember
  3468 00000BC4 [680B0000]                                      dd      czOctober
  3469 00000BC8 [700B0000]                                      dd      czNovember
  3470 00000BCC [790B0000]                                      dd      czDecember
  3471                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3472                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3473                                  ;=======================================================================================================================
  3474                                  ;
  3475                                  ;       Memory Helper Routines
  3476                                  ;
  3477                                  ;       AllocateMemory
  3478                                  ;       FreeMemory
  3479                                  ;
  3480                                  ;=======================================================================================================================
  3481                                  ;-----------------------------------------------------------------------------------------------------------------------
  3482                                  ;
  3483                                  ;       Routine:        AllocateMemory
  3484                                  ;
  3485                                  ;       Description:    This routine allocates a memory block for the given task.
  3486                                  ;
  3487                                  ;       In:             ECX     bytes of memory to allocate
  3488                                  ;
  3489                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3490                                  ;                               0       unable to allocate memory
  3491                                  ;
  3492                                  ;-----------------------------------------------------------------------------------------------------------------------
  3493 00000BD0 53                      AllocateMemory          push    ebx                                             ;save non-volatile regs
  3494 00000BD1 51                                              push    ecx                                             ;
  3495 00000BD2 56                                              push    esi                                             ;
  3496 00000BD3 1E                                              push    ds                                              ;
  3497                                  ;
  3498                                  ;       Address kernel memory structures
  3499                                  ;
  3500 00000BD4 6A18                                            push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3501 00000BD6 1F                                              pop     ds                                              ;... into data segment reg
  3502 00000BD7 BE39090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3503                                  ;
  3504                                  ;       Set requested size to minimum block size if requested size is too small.
  3505                                  ;
  3506 00000BDC 81F900010000                                    cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3507 00000BE2 7305                                            jae     .10                                             ;no, branch
  3508 00000BE4 B900010000                                      mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3509 00000BE9 83C120                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3510                                  ;
  3511                                  ;       Find the first free memory block large enough to satisfy the request.
  3512                                  ;
  3513 00000BEC 8B4608                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3514 00000BEF 85C0                    .20                     test    eax,eax                                         ;end of free block chain?
  3515 00000BF1 0F84F2000000                                    jz      .220                                            ;yes, branch
  3516 00000BF7 3B4804                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3517 00000BFA 7605                                            jbe     .30                                             ;yes, branch
  3518 00000BFC 8B4018                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3519 00000BFF EBEE                                            jmp     .20                                             ;continue
  3520                                  ;-----------------------------------------------------------------------------------------------------------------------
  3521                                  ;
  3522                                  ;       Address the previous and next free memory blocks.
  3523                                  ;
  3524 00000C01 8B581C                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3525 00000C04 8B5018                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3526                                  ;
  3527                                  ;       Remove the free memory block from the forward free memory block chain.
  3528                                  ;
  3529 00000C07 85DB                                            test    ebx,ebx                                         ;any previous free memory block?
  3530 00000C09 7405                                            jz      .40                                             ;no, branch
  3531 00000C0B 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3532 00000C0E EB03                                            jmp     .50                                             ;continue
  3533 00000C10 895608                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3534                                  ;
  3535                                  ;       Remove the free memory block from the reverse free memory block chain.
  3536                                  ;
  3537 00000C13 85D2                    .50                     test    edx,edx                                         ;any next free memory block?
  3538 00000C15 7405                                            jz      .60                                             ;no, branch
  3539 00000C17 895A1C                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3540 00000C1A EB03                                            jmp     .70                                             ;continue
  3541 00000C1C 895E0C                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3542                                  ;-----------------------------------------------------------------------------------------------------------------------
  3543                                  ;
  3544                                  ;       Determine if the free memory block can be split.
  3545                                  ;
  3546 00000C1F 8B5804                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3547 00000C22 29CB                                            sub     ebx,ecx                                         ;subtract requested memory size
  3548 00000C24 81FB00010000                                    cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3549 00000C2A 7263                                            jb      .150                                            ;no, branch
  3550                                  ;
  3551                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3552                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3553                                  ;       of the requested memory size.
  3554                                  ;
  3555 00000C2C 894804                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3556 00000C2F 89C2                                            mov     edx,eax                                         ;memory block address
  3557 00000C31 01CA                                            add     edx,ecx                                         ;address new new next contig block
  3558 00000C33 8B4810                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3559 00000C36 895010                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3560                                  ;
  3561                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3562                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3563                                  ;
  3564 00000C39 E305                                            jecxz   .80                                             ;no next contig, branch
  3565 00000C3B 895114                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3566 00000C3E EB03                                            jmp     .90                                             ;continue
  3567 00000C40 895604                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3568                                  ;
  3569                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3570                                  ;
  3571 00000C43 895A04                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3572 00000C46 894A10                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3573 00000C49 894214                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3574 00000C4C BB46524545                                      mov     ebx,EMEMFREECODE                                ;free memory signature
  3575 00000C51 891A                                            mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3576 00000C53 31DB                                            xor     ebx,ebx                                         ;zero register
  3577 00000C55 895A0C                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3578 00000C58 895A08                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3579                                  ;
  3580                                  ;       Find the proper location in the free block chain for the new free block
  3581                                  ;
  3582 00000C5B 8B5A04                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3583 00000C5E 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3584 00000C61 E30A                    .100                    jecxz   .110                                            ;branch if at end of chain
  3585 00000C63 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3586 00000C66 7605                                            jbe     .110                                            ;yes, branch
  3587 00000C68 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3588 00000C6B EBF4                                            jmp     .100                                            ;continue
  3589                                  ;
  3590                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3591                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3592                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3593                                  ;       block of hte next block, if there is one.
  3594                                  ;
  3595 00000C6D 894A18                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3596 00000C70 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3597 00000C73 E308                                            jecxz   .120                                            ;branch if no next block
  3598 00000C75 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3599 00000C78 89511C                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3600 00000C7B EB03                                            jmp     .130                                            ;continue
  3601 00000C7D 89560C                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3602                                  ;
  3603                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3604                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3605                                  ;       last user block pointers if necessary.
  3606                                  ;
  3607 00000C80 895A1C                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3608 00000C83 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3609 00000C85 7405                                            jz      .140                                            ;no, branch
  3610 00000C87 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3611 00000C8A EB03                                            jmp     .150                                            ;continue
  3612 00000C8C 895608                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3613                                  ;
  3614                                  ;       Update the newly allocated block's owner and signature.
  3615                                  ;
  3616 00000C8F BA55534552              .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3617 00000C94 8910                                            mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3618 00000C96 31D2                                            xor     edx,edx                                         ;zero register
  3619 00000C98 660F00CA                                        str     dx                                              ;load the task state register
  3620 00000C9C 895008                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3621                                  ;
  3622                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3623                                  ;
  3624 00000C9F 8B4E10                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3625 00000CA2 E323                    .160                    jecxz   .180                                            ;branch if at end of chain
  3626 00000CA4 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3627 00000CA7 721E                                            jb      .180                                            ;branch if block belongs to next task
  3628 00000CA9 7405                                            je      .170                                            ;branch if block belongs to this task
  3629 00000CAB 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3630 00000CAE EBF2                                            jmp     .160                                            ;continue
  3631                                  ;
  3632                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3633                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3634                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3635                                  ;       place to insert the block.
  3636                                  ;
  3637 00000CB0 8B5004                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3638 00000CB3 3B5104                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3639 00000CB6 760F                                            jbe     .180                                            ;yes, branch
  3640 00000CB8 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3641 00000CBB 85C9                                            test    ecx,ecx                                         ;end of chain?
  3642 00000CBD 7408                                            jz      .180                                            ;yes, branch
  3643 00000CBF 8B5008                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3644 00000CC2 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3645 00000CC5 74E9                                            je      .170                                            ;yes, continue search
  3646                                  ;
  3647                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3648                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3649                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3650                                  ;       do have a previous-block, we update that block's next-block pointer.
  3651                                  ;
  3652 00000CC7 894818                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3653 00000CCA 8B5E14                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3654 00000CCD E308                                            jecxz   .190                                            ;branch if no next-task block
  3655 00000CCF 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3656 00000CD2 89411C                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3657 00000CD5 EB03                                            jmp     .200                                            ;continue
  3658 00000CD7 894614                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3659                                  ;
  3660                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3661                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3662                                  ;       global first and/or last user-block pointers if necessary.
  3663                                  ;
  3664 00000CDA 89581C                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3665 00000CDD 85DB                                            test    ebx,ebx                                         ;do we have a previous task block?
  3666 00000CDF 7405                                            jz      .210                                            ;no, branch
  3667 00000CE1 894318                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3668 00000CE4 EB03                                            jmp     .220                                            ;continue
  3669 00000CE6 894610                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3670                                  ;
  3671                                  ;       Restore registers and return to caller.
  3672                                  ;
  3673 00000CE9 1F                      .220                    pop     ds                                              ;restore non-volatie regs
  3674 00000CEA 5E                                              pop     esi                                             ;
  3675 00000CEB 59                                              pop     ecx                                             ;
  3676 00000CEC 5B                                              pop     ebx                                             ;
  3677 00000CED C3                                              ret                                                     ;return
  3678                                  ;-----------------------------------------------------------------------------------------------------------------------
  3679                                  ;
  3680                                  ;       Routine:        FreeMemory
  3681                                  ;
  3682                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3683                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3684                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3685                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3686                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3687                                  ;
  3688                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3689                                  ;
  3690                                  ;       Out:            EAX     -1      invalid memory block
  3691                                  ;                               0       memory block freed
  3692                                  ;
  3693                                  ;-----------------------------------------------------------------------------------------------------------------------
  3694 00000CEE 53                      FreeMemory              push    ebx                                             ;save non-volatile regs
  3695 00000CEF 51                                              push    ecx                                             ;
  3696 00000CF0 56                                              push    esi                                             ;
  3697 00000CF1 57                                              push    edi                                             ;
  3698 00000CF2 1E                                              push    ds                                              ;
  3699 00000CF3 06                                              push    es                                              ;
  3700                                  ;
  3701                                  ;       Address the root memory structure
  3702                                  ;
  3703 00000CF4 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3704 00000CF6 07                                              pop     es                                              ;... into extra segment reg
  3705 00000CF7 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3706 00000CF9 1F                                              pop     ds                                              ;... into data segment reg
  3707 00000CFA BE39090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure
  3708 00000CFF 89D7                                            mov     edi,edx                                         ;memory block address
  3709                                  ;
  3710                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3711                                  ;
  3712 00000D01 31C0                                            xor     eax,eax                                         ;indicate success
  3713 00000D03 813F46524545                                    cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3714 00000D09 0F8415010000                                    je      .240                                            ;yes, branch
  3715 00000D0F 48                                              dec     eax                                             ;indicate failure
  3716 00000D10 813F55534552                                    cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3717 00000D16 0F8508010000                                    jne     .240                                            ;no, branch
  3718                                  ;-----------------------------------------------------------------------------------------------------------------------
  3719                                  ;
  3720                                  ;       Unlink the USER memory block.
  3721                                  ;
  3722                                  ;-----------------------------------------------------------------------------------------------------------------------
  3723                                  ;
  3724                                  ;       Set the block signature. Reset owner.
  3725                                  ;
  3726 00000D1C C70746524545                                    mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3727 00000D22 31C0                                            xor     eax,eax                                         ;zero register
  3728 00000D24 894708                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3729                                  ;
  3730                                  ;       Wipe user area.
  3731                                  ;
  3732 00000D27 57                                              push    edi                                             ;save block address
  3733 00000D28 8B4F04                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3734 00000D2B 83E920                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3735 00000D2E 83C720                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3736 00000D31 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3737 00000D33 F3AA                                            rep     stosb                                           ;clear memory
  3738 00000D35 5F                                              pop     edi                                             ;restore block address
  3739                                  ;
  3740                                  ;       Address the preceding and following USER memory blocks
  3741                                  ;
  3742 00000D36 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3743 00000D39 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3744                                  ;
  3745                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3746                                  ;       pointer to point to the USER block following this block.
  3747                                  ;
  3748 00000D3C 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3749 00000D3E 7405                                            jz      .10                                             ;no, branch
  3750 00000D40 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3751 00000D43 EB03                                            jmp     .20                                             ;continue
  3752 00000D45 894E10                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3753                                  ;
  3754                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3755                                  ;       pointer to point to the USER block preceding this block.
  3756                                  ;
  3757 00000D48 E305                    .20                     jecxz   .30                                             ;branch if no next block
  3758 00000D4A 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3759 00000D4D EB03                                            jmp     .40                                             ;continue
  3760 00000D4F 895E14                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3761                                  ;-----------------------------------------------------------------------------------------------------------------------
  3762                                  ;
  3763                                  ;       Merge with a previous contiguous FREE memory block.
  3764                                  ;
  3765                                  ;-----------------------------------------------------------------------------------------------------------------------
  3766                                  ;
  3767                                  ;       Address the preceding and following contiguous memory blocks.
  3768                                  ;
  3769 00000D52 8B5F14                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3770 00000D55 8B4F10                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3771                                  ;
  3772                                  ;       Verify we have a previous contiguous FREE block.
  3773                                  ;
  3774 00000D58 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3775 00000D5A 7442                                            jz      .100                                            ;no, branch
  3776 00000D5C 813B46524545                                    cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3777 00000D62 753A                                            jne     .100                                            ;no, branch
  3778                                  ;
  3779                                  ;       Update adjacent block's contiguous pointers.
  3780                                  ;
  3781 00000D64 894B10                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3782 00000D67 E305                                            jecxz   .50                                             ;branch if no next contiguous block
  3783 00000D69 895914                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3784 00000D6C EB03                                            jmp     .60                                             ;continue
  3785 00000D6E 895E04                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3786                                  ;
  3787                                  ;       Update the size of the merged FREE block.
  3788                                  ;
  3789 00000D71 8B4704                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3790 00000D74 014304                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3791                                  ;
  3792                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3793                                  ;
  3794 00000D77 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;block header length
  3795 00000D7C B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3796 00000D7E F3AA                                            rep     stosb                                           ;clear memory header
  3797 00000D80 89DF                                            mov     edi,ebx                                         ;current block is now previous block
  3798                                  ;-----------------------------------------------------------------------------------------------------------------------
  3799                                  ;
  3800                                  ;       Unlink the previous contiguous FREE memory block
  3801                                  ;
  3802                                  ;-----------------------------------------------------------------------------------------------------------------------
  3803                                  ;
  3804                                  ;       Address the preceding and following USER memory blocks
  3805                                  ;
  3806 00000D82 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3807 00000D85 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3808                                  ;
  3809                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3810                                  ;       block pointer.
  3811                                  ;
  3812 00000D88 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3813 00000D8A 7405                                            jz      .70                                             ;no, branch
  3814 00000D8C 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3815 00000D8F EB03                                            jmp     .80                                             ;branch
  3816 00000D91 894E08                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3817                                  ;
  3818                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3819                                  ;       pointer.
  3820                                  ;
  3821 00000D94 E305                    .80                     jecxz   .90                                             ;branch if no next block
  3822 00000D96 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3823 00000D99 EB03                                            jmp     .100                                            ;continue
  3824 00000D9B 895E0C                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3825                                  ;-----------------------------------------------------------------------------------------------------------------------
  3826                                  ;
  3827                                  ;       Merge with a following contiguous FREE memory block.
  3828                                  ;
  3829                                  ;-----------------------------------------------------------------------------------------------------------------------
  3830                                  ;
  3831                                  ;       Verify we have a following contiguous FREE block.
  3832                                  ;
  3833 00000D9E 8B4F10                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3834 00000DA1 E34B                                            jecxz   .170                                            ;branch if no next contiguous block
  3835 00000DA3 813946524545                                    cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3836 00000DA9 7543                                            jne     .170                                            ;no, branch
  3837                                  ;
  3838                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3839                                  ;
  3840 00000DAB 8B4104                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3841 00000DAE 014704                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3842                                  ;
  3843                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3844                                  ;
  3845 00000DB1 8B4110                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3846 00000DB4 894710                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3847 00000DB7 85C0                                            test    eax,eax                                         ;does a block follow the next contig blk
  3848 00000DB9 7405                                            jz      .110                                            ;no, branch
  3849 00000DBB 897814                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3850 00000DBE EB03                                            jmp     .120                                            ;continue
  3851 00000DC0 897E04                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3852                                  ;-----------------------------------------------------------------------------------------------------------------------
  3853                                  ;
  3854                                  ;       Unlink the following contiguous FREE memory block
  3855                                  ;
  3856                                  ;-----------------------------------------------------------------------------------------------------------------------
  3857                                  ;
  3858                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3859                                  ;
  3860 00000DC3 57                      .120                    push    edi                                             ;save this block
  3861 00000DC4 89CF                                            mov     edi,ecx                                         ;next contiguous block
  3862 00000DC6 51                                              push    ecx                                             ;save next contiguous block
  3863                                  ;
  3864                                  ;       Address the preceding and following USER memory blocks
  3865                                  ;
  3866 00000DC7 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3867 00000DCA 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3868                                  ;
  3869                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3870                                  ;       block pointer.
  3871                                  ;
  3872 00000DCD 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3873 00000DCF 7405                                            jz      .130                                            ;no, branch
  3874 00000DD1 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3875 00000DD4 EB03                                            jmp     .140                                            ;branch
  3876 00000DD6 894E08                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3877                                  ;
  3878                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3879                                  ;       pointer.
  3880                                  ;
  3881 00000DD9 E305                    .140                    jecxz   .150                                            ;branch if no next block
  3882 00000DDB 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3883 00000DDE EB03                                            jmp     .160                                            ;continue
  3884 00000DE0 895E0C                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3885                                  ;
  3886                                  ;       Clear next contiguous block's header
  3887                                  ;
  3888 00000DE3 5F                      .160                    pop     edi                                             ;next congiguous block pointer
  3889 00000DE4 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3890 00000DE9 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3891 00000DEB F3AA                                            rep     stosb                                           ;clear memory header
  3892 00000DED 5F                                              pop     edi                                             ;this block's pointer
  3893                                  ;-----------------------------------------------------------------------------------------------------------------------
  3894                                  ;
  3895                                  ;       Insert the final FREE block back into the block chain.
  3896                                  ;
  3897                                  ;-----------------------------------------------------------------------------------------------------------------------
  3898                                  ;
  3899                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3900                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3901                                  ;       all are smaller in size.
  3902                                  ;
  3903 00000DEE 8B5F04                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3904 00000DF1 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3905 00000DF4 E30A                    .180                    jecxz   .190                                            ;exit if no ptr
  3906 00000DF6 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3907 00000DF9 7205                                            jb      .190                                            ;yes, branch
  3908 00000DFB 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3909 00000DFE EBF4                                            jmp     .180                                            ;continue
  3910                                  ;
  3911                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3912                                  ;       larger free block. Update the next block's previous block pointer.
  3913                                  ;
  3914 00000E00 894F18                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3915 00000E03 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3916 00000E06 E308                                            jecxz   .200                                            ;branch if no block found
  3917 00000E08 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3918 00000E0B 89791C                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3919 00000E0E EB03                                            jmp     .210                                            ;continue
  3920 00000E10 897E0C                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3921                                  ;
  3922                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3923                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3924                                  ;       next pointer.
  3925                                  ;
  3926 00000E13 895F1C                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3927 00000E16 85DB                                            test    ebx,ebx                                         ;do we have a previous block?
  3928 00000E18 7405                                            jz      .220                                            ;no, branch
  3929 00000E1A 897B18                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3930 00000E1D EB03                                            jmp     .230                                            ;continue
  3931 00000E1F 897E08                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3932                                  ;
  3933                                  ;       The memory free has completed.
  3934                                  ;
  3935 00000E22 31C0                    .230                    xor     eax,eax                                         ;indicate success
  3936                                  ;
  3937                                  ;       Restore and return.
  3938                                  ;
  3939 00000E24 07                      .240                    pop     es                                              ;restore non-volatile regs
  3940 00000E25 1F                                              pop     ds                                              ;
  3941 00000E26 5F                                              pop     edi                                             ;
  3942 00000E27 5E                                              pop     esi                                             ;
  3943 00000E28 59                                              pop     ecx                                             ;
  3944 00000E29 5B                                              pop     ebx                                             ;
  3945 00000E2A C3                                              ret                                                     ;return
  3946                                  ;=======================================================================================================================
  3947                                  ;
  3948                                  ;       String Helper Routines
  3949                                  ;
  3950                                  ;       CompareMemory
  3951                                  ;       UpperCaseString
  3952                                  ;
  3953                                  ;=======================================================================================================================
  3954                                  ;-----------------------------------------------------------------------------------------------------------------------
  3955                                  ;
  3956                                  ;       Routine:        CompareMemory
  3957                                  ;
  3958                                  ;       Description:    This routine compares two byte arrays.
  3959                                  ;
  3960                                  ;       In:             DS:EDX  first source address
  3961                                  ;                       DS:EBX  second source address
  3962                                  ;                       ECX     comparison length
  3963                                  ;
  3964                                  ;       Out:            EDX     first source address
  3965                                  ;                       EBX     second source address
  3966                                  ;                       ECX     0       array 1 = array 2
  3967                                  ;                               <0      array 1 < array 2
  3968                                  ;                               >0      array 1 > array 2
  3969                                  ;
  3970                                  ;-----------------------------------------------------------------------------------------------------------------------
  3971 00000E2B 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  3972 00000E2C 57                                              push    edi                                             ;
  3973 00000E2D 06                                              push    es                                              ;
  3974 00000E2E 1E                                              push    ds                                              ;copy DS
  3975 00000E2F 07                                              pop     es                                              ;... to ES
  3976 00000E30 89D6                                            mov     esi,edx                                         ;first source address
  3977 00000E32 89DF                                            mov     edi,ebx                                         ;second source address
  3978 00000E34 FC                                              cld                                                     ;forward strings
  3979 00000E35 F3A6                                            rep     cmpsb                                           ;compare bytes
  3980 00000E37 B000                                            mov     al,0                                            ;default result
  3981 00000E39 7406                                            jz      .10                                             ;branch if arrays equal
  3982 00000E3B B001                                            mov     al,1                                            ;positive result
  3983 00000E3D 7302                                            jnc     .10                                             ;branch if target > source
  3984 00000E3F B0FF                                            mov     al,-1                                           ;negative result
  3985 00000E41 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  3986 00000E44 07                                              pop     es                                              ;restore non-volatile regs
  3987 00000E45 5F                                              pop     edi                                             ;
  3988 00000E46 5E                                              pop     esi                                             ;
  3989 00000E47 C3                                              ret                                                     ;return
  3990                                  ;-----------------------------------------------------------------------------------------------------------------------
  3991                                  ;
  3992                                  ;       Routine:        UpperCaseString
  3993                                  ;
  3994                                  ;       Description:    This routine places all characters in the given string to upper case.
  3995                                  ;
  3996                                  ;       In:             DS:EDX  string address
  3997                                  ;
  3998                                  ;       Out:            EDX     string address
  3999                                  ;
  4000                                  ;-----------------------------------------------------------------------------------------------------------------------
  4001 00000E48 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  4002 00000E49 89D6                                            mov     esi,edx                                         ;string address
  4003 00000E4B FC                                              cld                                                     ;forward strings
  4004 00000E4C AC                      .10                     lodsb                                                   ;string character
  4005 00000E4D 84C0                                            test    al,al                                           ;null?
  4006 00000E4F 740F                                            jz      .20                                             ;yes, skip ahead
  4007 00000E51 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  4008 00000E53 72F7                                            jb      .10                                             ;no, continue
  4009 00000E55 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  4010 00000E57 77F3                                            ja      .10                                             ;no, continue
  4011 00000E59 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  4012 00000E5B 8846FF                                          mov     [esi-1],al                                      ;upper character
  4013 00000E5E EBEC                                            jmp     .10                                             ;continue
  4014 00000E60 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4015 00000E61 C3                                              ret                                                     ;return
  4016                                  ;=======================================================================================================================
  4017                                  ;
  4018                                  ;       Console Helper Routines
  4019                                  ;
  4020                                  ;       FirstConsoleColumn
  4021                                  ;       GetConsoleChar
  4022                                  ;       GetConsoleString
  4023                                  ;       NextConsoleColumn
  4024                                  ;       NextConsoleRow
  4025                                  ;       PreviousConsoleColumn
  4026                                  ;       PutConsoleChar
  4027                                  ;       PutConsoleHexByte
  4028                                  ;       PutConsoleHexDword
  4029                                  ;       PutConsoleHexWord
  4030                                  ;       PutConsoleOIAChar
  4031                                  ;       PutConsoleOIAShift
  4032                                  ;       PutConsoleString
  4033                                  ;       Yield
  4034                                  ;
  4035                                  ;=======================================================================================================================
  4036                                  ;-----------------------------------------------------------------------------------------------------------------------
  4037                                  ;
  4038                                  ;       Routine:        FirstConsoleColumn
  4039                                  ;
  4040                                  ;       Description:    This routine resets the console column to start of the row.
  4041                                  ;
  4042                                  ;       In:             DS      OS data selector
  4043                                  ;
  4044                                  ;-----------------------------------------------------------------------------------------------------------------------
  4045 00000E62 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  4046 00000E64 A21C080000                                      mov     [wbConsoleColumn],al                            ;save column
  4047 00000E69 C3                                              ret                                                     ;return
  4048                                  ;-----------------------------------------------------------------------------------------------------------------------
  4049                                  ;
  4050                                  ;       Routine:        GetConsoleChar
  4051                                  ;
  4052                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4053                                  ;
  4054                                  ;       Out:            AL      ASCII character code
  4055                                  ;                       AH      keyboard scan code
  4056                                  ;
  4057                                  ;-----------------------------------------------------------------------------------------------------------------------
  4058 00000E6A E868020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4059 00000E6F E87B030000              GetConsoleChar          call    GetMessage                                      ;get the next message
  4060 00000E74 09C0                                            or      eax,eax                                         ;do we have a message?
  4061 00000E76 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  4062 00000E78 50                                              push    eax                                             ;save key codes
  4063 00000E79 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  4064 00000E7E 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4065 00000E83 58                                              pop     eax                                             ;restore key codes
  4066 00000E84 75E9                                            jne     GetConsoleChar                                  ;no, try again
  4067 00000E86 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  4068 00000E8B C3                                              ret                                                     ;return
  4069                                  ;-----------------------------------------------------------------------------------------------------------------------
  4070                                  ;
  4071                                  ;       Routine:        GetConsoleString
  4072                                  ;
  4073                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4074                                  ;
  4075                                  ;       In:             DS:EDX  target buffer address
  4076                                  ;                       ECX     maximum number of characters to accept
  4077                                  ;                       BH      echo to terminal
  4078                                  ;                       BL      terminating character
  4079                                  ;
  4080                                  ;-----------------------------------------------------------------------------------------------------------------------
  4081 00000E8C 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  4082 00000E8D 56                                              push    esi                                             ;
  4083 00000E8E 57                                              push    edi                                             ;
  4084 00000E8F 06                                              push    es                                              ;
  4085 00000E90 1E                                              push    ds                                              ;load data segment selector ...
  4086 00000E91 07                                              pop     es                                              ;... into extra segment register
  4087 00000E92 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4088 00000E94 51                                              push    ecx                                             ;save maximum characters
  4089 00000E95 30C0                                            xor     al,al                                           ;zero register
  4090 00000E97 FC                                              cld                                                     ;forward strings
  4091 00000E98 F3AA                                            rep     stosb                                           ;zero fill buffer
  4092 00000E9A 59                                              pop     ecx                                             ;maximum characters
  4093 00000E9B 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4094 00000E9D 89D6                                            mov     esi,edx                                         ;esi = target buffer
  4095 00000E9F E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  4096 00000EA1 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  4097 00000EA6 38D8                                            cmp     al,bl                                           ;is this the terminator?
  4098 00000EA8 7445                                            je      .50                                             ;yes, exit
  4099 00000EAA 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4100 00000EAC 7521                                            jne     .30                                             ;no, skip ahead
  4101 00000EAE 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  4102 00000EB0 74EF                                            je      .20                                             ;yes, get next character
  4103 00000EB2 4F                                              dec     edi                                             ;backup target pointer
  4104 00000EB3 C60700                                          mov     byte [edi],0                                    ;zero previous character
  4105 00000EB6 41                                              inc     ecx                                             ;increment remaining chars
  4106 00000EB7 F6C701                                          test    bh,1                                            ;echo to console?
  4107 00000EBA 74E5                                            jz      .20                                             ;no, get next character
  4108 00000EBC E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  4109 00000EC1 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4110 00000EC3 E891000000                                      call    PutConsoleChar                                  ;write space to console
  4111 00000EC8 E837040000                                      call    PlaceCursor                                     ;position the cursor
  4112 00000ECD EBD2                                            jmp     .20                                             ;get next character
  4113 00000ECF 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4114 00000ED1 72CE                                            jb      .20                                             ;no, get another character
  4115 00000ED3 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4116 00000ED5 77CA                                            ja      .20                                             ;no, get another character
  4117 00000ED7 AA                                              stosb                                                   ;store character in buffer
  4118 00000ED8 F6C701                                          test    bh,1                                            ;echo to console?
  4119 00000EDB 740F                                            jz      .40                                             ;no, skip ahead
  4120 00000EDD E877000000                                      call    PutConsoleChar                                  ;write character to console
  4121 00000EE2 E810000000                                      call    NextConsoleColumn                               ;advance console position
  4122 00000EE7 E818040000                                      call    PlaceCursor                                     ;position the cursor
  4123 00000EEC 49                      .40                     dec     ecx                                             ;decrement remaining chars
  4124 00000EED EBB0                                            jmp     .10                                             ;next
  4125 00000EEF 30C0                    .50                     xor     al,al                                           ;null
  4126 00000EF1 AA                                              stosb                                                   ;terminate buffer
  4127 00000EF2 07                                              pop     es                                              ;restore non-volatile regs
  4128 00000EF3 5F                                              pop     edi                                             ;
  4129 00000EF4 5E                                              pop     esi                                             ;
  4130 00000EF5 59                                              pop     ecx                                             ;
  4131 00000EF6 C3                                              ret                                                     ;return
  4132                                  ;-----------------------------------------------------------------------------------------------------------------------
  4133                                  ;
  4134                                  ;       Routine:        NextConsoleColumn
  4135                                  ;
  4136                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4137                                  ;                       incremented if the end of the current row is reached.
  4138                                  ;
  4139                                  ;       In:             DS      OS data selector
  4140                                  ;
  4141                                  ;-----------------------------------------------------------------------------------------------------------------------
  4142 00000EF7 A01C080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4143 00000EFC FEC0                                            inc     al                                              ;increment column
  4144 00000EFE A21C080000                                      mov     [wbConsoleColumn],al                            ;save column
  4145 00000F03 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  4146 00000F05 720A                                            jb      .10                                             ;no, skip ahead
  4147 00000F07 E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  4148 00000F0C E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  4149 00000F11 C3                      .10                     ret                                                     ;return
  4150                                  ;-----------------------------------------------------------------------------------------------------------------------
  4151                                  ;
  4152                                  ;       Routine:        NextConsoleRow
  4153                                  ;
  4154                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4155                                  ;
  4156                                  ;       In:             DS      OS data selector
  4157                                  ;
  4158                                  ;-----------------------------------------------------------------------------------------------------------------------
  4159 00000F12 A01D080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4160 00000F17 FEC0                                            inc     al                                              ;increment row
  4161 00000F19 A21D080000                                      mov     [wbConsoleRow],al                               ;save row
  4162 00000F1E 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  4163 00000F20 7211                                            jb      .10                                             ;no, skip ahead
  4164 00000F22 E860030000                                      call    ScrollConsoleRow                                ;scroll up one row
  4165 00000F27 A01D080000                                      mov     al,[wbConsoleRow]                               ;row
  4166 00000F2C FEC8                                            dec     al                                              ;decrement row
  4167 00000F2E A21D080000                                      mov     [wbConsoleRow],al                               ;save row
  4168 00000F33 C3                      .10                     ret                                                     ;return
  4169                                  ;-----------------------------------------------------------------------------------------------------------------------
  4170                                  ;
  4171                                  ;       Routine:        PreviousConsoleColumn
  4172                                  ;
  4173                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4174                                  ;                       the column is set to the last position in the row and the row is decremented.
  4175                                  ;
  4176                                  ;       In:             DS      OS data selector
  4177                                  ;
  4178                                  ;-----------------------------------------------------------------------------------------------------------------------
  4179 00000F34 A01C080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4180 00000F39 08C0                                            or      al,al                                           ;start of row?
  4181 00000F3B 7514                                            jnz     .10                                             ;no, skip ahead
  4182 00000F3D 8A251D080000                                    mov     ah,[wbConsoleRow]                               ;current row
  4183 00000F43 08E4                                            or      ah,ah                                           ;top of screen?
  4184 00000F45 7411                                            jz      .20                                             ;yes, exit with no change
  4185 00000F47 FECC                                            dec     ah                                              ;decrement row
  4186 00000F49 88251D080000                                    mov     [wbConsoleRow],ah                               ;save row
  4187 00000F4F B050                                            mov     al,ECONCOLS                                     ;set maximum column
  4188 00000F51 FEC8                    .10                     dec     al                                              ;decrement column
  4189 00000F53 A21C080000                                      mov     [wbConsoleColumn],al                            ;save column
  4190 00000F58 C3                      .20                     ret                                                     ;return
  4191                                  ;-----------------------------------------------------------------------------------------------------------------------
  4192                                  ;
  4193                                  ;       Routine:        PutConsoleChar
  4194                                  ;
  4195                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4196                                  ;
  4197                                  ;       In:             AL      ASCII character
  4198                                  ;                       DS      OS data selector
  4199                                  ;
  4200                                  ;-----------------------------------------------------------------------------------------------------------------------
  4201 00000F59 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4202 00000F5A 06                                              push    es                                              ;
  4203 00000F5B 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4204 00000F5D 07                                              pop     es                                              ;... into extra segment reg
  4205 00000F5E 8A0D1C080000                                    mov     cl,[wbConsoleColumn]                            ;column
  4206 00000F64 8A2D1D080000                                    mov     ch,[wbConsoleRow]                               ;row
  4207 00000F6A E844030000                                      call    SetConsoleChar                                  ;put character at row, column
  4208 00000F6F 07                                              pop     es                                              ;restore non-volatile regs
  4209 00000F70 59                                              pop     ecx                                             ;
  4210 00000F71 C3                                              ret                                                     ;return
  4211                                  ;-----------------------------------------------------------------------------------------------------------------------
  4212                                  ;
  4213                                  ;       Routine:        PutConsoleHexByte
  4214                                  ;
  4215                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4216                                  ;
  4217                                  ;       In:             AL      byte value
  4218                                  ;                       CL      column
  4219                                  ;                       CH      row
  4220                                  ;                       DS      OS data selector
  4221                                  ;                       ES      CGA selector
  4222                                  ;
  4223                                  ;-----------------------------------------------------------------------------------------------------------------------
  4224 00000F72 53                      PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  4225 00000F73 88C3                                            mov     bl,al                                           ;save byte value
  4226 00000F75 C0E804                                          shr     al,4                                            ;hi-order nybble
  4227 00000F78 0C30                                            or      al,030h                                         ;apply ASCII zone
  4228 00000F7A 3C3A                                            cmp     al,03ah                                         ;numeric?
  4229 00000F7C 7202                                            jb      .10                                             ;yes, skip ahead
  4230 00000F7E 0407                                            add     al,7                                            ;add ASCII offset for alpha
  4231 00000F80 E82E030000              .10                     call    SetConsoleChar                                  ;display ASCII character
  4232 00000F85 88D8                                            mov     al,bl                                           ;byte value
  4233 00000F87 240F                                            and     al,0fh                                          ;lo-order nybble
  4234 00000F89 0C30                                            or      al,30h                                          ;apply ASCII zone
  4235 00000F8B 3C3A                                            cmp     al,03ah                                         ;numeric?
  4236 00000F8D 7202                                            jb      .20                                             ;yes, skip ahead
  4237 00000F8F 0407                                            add     al,7                                            ;add ASCII offset for alpha
  4238 00000F91 E81D030000              .20                     call    SetConsoleChar                                  ;display ASCII character
  4239 00000F96 5B                                              pop     ebx                                             ;restore non-volatile regs
  4240 00000F97 C3                                              ret                                                     ;return
  4241                                  ;-----------------------------------------------------------------------------------------------------------------------
  4242                                  ;
  4243                                  ;       Routine:        PutConsoleHexDword
  4244                                  ;
  4245                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4246                                  ;
  4247                                  ;       In:             EAX     value
  4248                                  ;                       CL      column
  4249                                  ;                       CH      row
  4250                                  ;                       DS      OS data selector
  4251                                  ;                       ES      CGA selector
  4252                                  ;
  4253                                  ;-----------------------------------------------------------------------------------------------------------------------
  4254 00000F98 50                      PutConsoleHexDword      push    eax
  4255 00000F99 C1E810                                          shr     eax,16
  4256 00000F9C E807000000                                      call    PutConsoleHexWord
  4257 00000FA1 58                                              pop     eax
  4258 00000FA2 E801000000                                      call    PutConsoleHexWord
  4259 00000FA7 C3                                              ret
  4260                                  ;-----------------------------------------------------------------------------------------------------------------------
  4261                                  ;
  4262                                  ;       Routine:        PutConsoleHexWord
  4263                                  ;
  4264                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4265                                  ;
  4266                                  ;       In:             EAX     value
  4267                                  ;                       CL      column
  4268                                  ;                       CH      row
  4269                                  ;                       DS      OS data selector
  4270                                  ;                       ES      CGA selector
  4271                                  ;
  4272                                  ;-----------------------------------------------------------------------------------------------------------------------
  4273 00000FA8 50                      PutConsoleHexWord       push    eax
  4274 00000FA9 C1E808                                          shr     eax,8
  4275 00000FAC E8C1FFFFFF                                      call    PutConsoleHexByte
  4276 00000FB1 58                                              pop     eax
  4277 00000FB2 E8BBFFFFFF                                      call    PutConsoleHexByte
  4278 00000FB7 C3                                              ret
  4279                                  ;-----------------------------------------------------------------------------------------------------------------------
  4280                                  ;
  4281                                  ;       Routine:        PutConsoleOIAChar
  4282                                  ;
  4283                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4284                                  ;
  4285                                  ;       In:             DS      OS data selector
  4286                                  ;
  4287                                  ;-----------------------------------------------------------------------------------------------------------------------
  4288 00000FB8 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4289 00000FB9 51                                              push    ecx                                             ;
  4290 00000FBA 56                                              push    esi                                             ;
  4291 00000FBB 1E                                              push    ds                                              ;
  4292 00000FBC 06                                              push    es                                              ;
  4293 00000FBD 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  4294 00000FBF 1F                                              pop     ds                                              ;... into data segment register
  4295 00000FC0 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4296 00000FC2 07                                              pop     es                                              ;... into extra segment register
  4297 00000FC3 BE21080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  4298 00000FC8 B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  4299 00000FCA B300                                            mov     bl,0                                            ;starting column
  4300 00000FCC B906000000                                      mov     ecx,6                                           ;maximum scan codes
  4301 00000FD1 51                      .10                     push    ecx                                             ;save remaining count
  4302 00000FD2 89D9                                            mov     ecx,ebx                                         ;row, column
  4303 00000FD4 AC                                              lodsb                                                   ;read scan code
  4304 00000FD5 08C0                                            or      al,al                                           ;scan code present?
  4305 00000FD7 7407                                            jz      .20                                             ;no, skip ahead
  4306 00000FD9 E894FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  4307 00000FDE EB0E                                            jmp     .30                                             ;continue
  4308 00000FE0 B020                    .20                     mov     al,' '                                          ;ASCII space
  4309 00000FE2 E8CC020000                                      call    SetConsoleChar                                  ;display space
  4310 00000FE7 B020                                            mov     al,' '                                          ;ASCII space
  4311 00000FE9 E8C5020000                                      call    SetConsoleChar                                  ;display space
  4312 00000FEE 80C302                  .30                     add     bl,2                                            ;next column (+2)
  4313 00000FF1 59                                              pop     ecx                                             ;restore remaining
  4314 00000FF2 E2DD                                            loop    .10                                             ;next code
  4315 00000FF4 A027080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  4316 00000FF9 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  4317 00000FFB 720D                                            jb      .40                                             ;no, skip ahead
  4318 00000FFD 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  4319 00000FFF 7709                                            ja      .40                                             ;no, skip ahead
  4320 00001001 88FD                                            mov     ch,bh                                           ;OIA row
  4321 00001003 B128                                            mov     cl,40                                           ;character display column
  4322 00001005 E8A9020000                                      call    SetConsoleChar                                  ;display ASCII character
  4323 0000100A 07                      .40                     pop     es                                              ;restore non-volatile regs
  4324 0000100B 1F                                              pop     ds                                              ;
  4325 0000100C 5E                                              pop     esi                                             ;
  4326 0000100D 59                                              pop     ecx                                             ;
  4327 0000100E 5B                                              pop     ebx                                             ;
  4328 0000100F C3                                              ret                                                     ;return
  4329                                  ;-----------------------------------------------------------------------------------------------------------------------
  4330                                  ;
  4331                                  ;       Routine:        PutConsoleOIAShift
  4332                                  ;
  4333                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4334                                  ;
  4335                                  ;       In:             BL      shift flags
  4336                                  ;                       BH      lock flags
  4337                                  ;                       DS      OS data selector
  4338                                  ;
  4339                                  ;-----------------------------------------------------------------------------------------------------------------------
  4340 00001010 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4341 00001011 06                                              push    es                                              ;
  4342 00001012 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4343 00001014 07                                              pop     es                                              ;... into ES register
  4344 00001015 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  4345 00001017 B020                                            mov     al,EASCIISPACE                                  ;space is default character
  4346 00001019 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4347 0000101C 7402                                            jz      .10                                             ;no, skip ahead
  4348 0000101E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4349 00001020 B10E                    .10                     mov     cl,14                                           ;indicator column
  4350 00001022 E88C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4351 00001027 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4352 00001029 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4353 0000102C 7402                                            jz      .20                                             ;no, skip ahead
  4354 0000102E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4355 00001030 B140                    .20                     mov     cl,64                                           ;indicator column
  4356 00001032 E87C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4357 00001037 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4358 00001039 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4359 0000103C 7402                                            jz      .30                                             ;no, skip ahead
  4360 0000103E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4361 00001040 B10F                    .30                     mov     cl,15                                           ;indicator column
  4362 00001042 E86C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4363 00001047 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4364 00001049 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4365 0000104C 7402                                            jz      .40                                             ;no, skip ahead
  4366 0000104E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4367 00001050 B13F                    .40                     mov     cl,63                                           ;indicator column
  4368 00001052 E85C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4369 00001057 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4370 00001059 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4371 0000105C 7402                                            jz      .50                                             ;no, skip ahead
  4372 0000105E B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4373 00001060 B110                    .50                     mov     cl,16                                           ;indicator column
  4374 00001062 E84C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4375 00001067 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4376 00001069 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4377 0000106C 7402                                            jz      .60                                             ;no, skip ahead
  4378 0000106E B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4379 00001070 B13E                    .60                     mov     cl,62                                           ;indicator column
  4380 00001072 E83C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4381 00001077 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4382 00001079 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4383 0000107C 7402                                            jz      .70                                             ;no, skip ahead
  4384 0000107E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4385 00001080 B14E                    .70                     mov     cl,78                                           ;indicator column
  4386 00001082 E82C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4387 00001087 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4388 00001089 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4389 0000108C 7402                                            jz      .80                                             ;no, skip ahead
  4390 0000108E B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  4391 00001090 B14D                    .80                     mov     cl,77                                           ;indicator column
  4392 00001092 E81C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4393 00001097 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4394 00001099 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4395 0000109C 7402                                            jz      .90                                             ;no, skip ahead
  4396 0000109E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4397 000010A0 B14C                    .90                     mov     cl,76                                           ;indicator column
  4398 000010A2 E80C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4399 000010A7 07                                              pop     es                                              ;restore non-volatile regs
  4400 000010A8 59                                              pop     ecx                                             ;
  4401 000010A9 C3                                              ret                                                     ;return
  4402                                  ;-----------------------------------------------------------------------------------------------------------------------
  4403                                  ;
  4404                                  ;       Routine:        PutConsoleString
  4405                                  ;
  4406                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4407                                  ;                       console position as needed.
  4408                                  ;
  4409                                  ;       In:             EDX     source address
  4410                                  ;                       DS      OS data selector
  4411                                  ;
  4412                                  ;-----------------------------------------------------------------------------------------------------------------------
  4413 000010AA 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  4414 000010AB 89D6                                            mov     esi,edx                                         ;source address
  4415 000010AD FC                                              cld                                                     ;forward strings
  4416 000010AE AC                      .10                     lodsb                                                   ;ASCII character
  4417 000010AF 08C0                                            or      al,al                                           ;end of string?
  4418 000010B1 7422                                            jz      .40                                             ;yes, skip ahead
  4419 000010B3 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  4420 000010B5 7507                                            jne     .20                                             ;no, skip ahead
  4421 000010B7 E8A6FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  4422 000010BC EBF0                                            jmp     .10                                             ;next character
  4423 000010BE 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4424 000010C0 7507                                            jne     .30                                             ;no, skip ahead
  4425 000010C2 E84BFEFFFF                                      call    NextConsoleRow                                  ;move to next row
  4426 000010C7 EBE5                                            jmp     .10                                             ;next character
  4427 000010C9 E88BFEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  4428 000010CE E824FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  4429 000010D3 EBD9                                            jmp     .10                                             ;next character
  4430 000010D5 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  4431 000010D6 C3                                              ret                                                     ;return
  4432                                  ;-----------------------------------------------------------------------------------------------------------------------
  4433                                  ;
  4434                                  ;       Routine:        Yield
  4435                                  ;
  4436                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4437                                  ;
  4438                                  ;-----------------------------------------------------------------------------------------------------------------------
  4439 000010D7 FB                      Yield                   sti                                                     ;enable maskagle interrupts
  4440 000010D8 F4                                              hlt                                                     ;halt until external interrupt
  4441 000010D9 C3                                              ret                                                     ;return
  4442                                  ;=======================================================================================================================
  4443                                  ;
  4444                                  ;       Data-Type Conversion Helper Routines
  4445                                  ;
  4446                                  ;       DecimalToUnsigned
  4447                                  ;       HexadecimalToUnsigned
  4448                                  ;       UnsignedToDecimalString
  4449                                  ;       UnsignedToHexadecimal
  4450                                  ;
  4451                                  ;=======================================================================================================================
  4452                                  ;-----------------------------------------------------------------------------------------------------------------------
  4453                                  ;
  4454                                  ;       Routine:        DecimalToUnsigned
  4455                                  ;
  4456                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4457                                  ;
  4458                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4459                                  ;
  4460                                  ;       Output:         EAX     unsigned integer value
  4461                                  ;
  4462                                  ;-----------------------------------------------------------------------------------------------------------------------
  4463 000010DA 56                      DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4464 000010DB 89D6                                            mov     esi,edx                                         ;source address
  4465 000010DD 31D2                                            xor     edx,edx                                         ;zero total
  4466 000010DF AC                      .10                     lodsb                                                   ;source byte
  4467 000010E0 3C2C                                            cmp     al,','                                          ;comma?
  4468 000010E2 74FB                                            je      .10                                             ;yes, ignore
  4469 000010E4 84C0                                            test    al,al                                           ;end of string?
  4470 000010E6 7421                                            jz      .30                                             ;yes, done
  4471 000010E8 3C2E                                            cmp     al,'.'                                          ;decimal point?
  4472 000010EA 741D                                            je      .30                                             ;yes, done
  4473 000010EC 3C30                                            cmp     al,'0'                                          ;numeral?
  4474 000010EE 7217                                            jb      .20                                             ;no, invalid string
  4475 000010F0 3C39                                            cmp     al,'9'                                          ;numeral?
  4476 000010F2 7713                                            ja      .20                                             ;no, invalid string
  4477 000010F4 240F                                            and     al,00Fh                                         ;mask ASCII zone
  4478 000010F6 50                                              push    eax                                             ;save numeral
  4479 000010F7 D1E2                                            shl     edx,1                                           ;total * 2
  4480 000010F9 89D0                                            mov     eax,edx                                         ;total * 2
  4481 000010FB C1E202                                          shl     edx,2                                           ;total * 8
  4482 000010FE 01C2                                            add     edx,eax                                         ;total * 10
  4483 00001100 58                                              pop     eax                                             ;restore numeral
  4484 00001101 01C2                                            add     edx,eax                                         ;accumulate decimal digit
  4485 00001103 31C0                                            xor     eax,eax                                         ;zero register
  4486 00001105 EBD8                                            jmp     .10                                             ;next
  4487 00001107 31D2                    .20                     xor     edx,edx                                         ;zero result on error
  4488 00001109 89D0                    .30                     mov     eax,edx                                         ;result
  4489 0000110B 5E                                              pop     esi                                             ;restore non-volatile regs
  4490 0000110C C3                                              ret                                                     ;return
  4491                                  ;-----------------------------------------------------------------------------------------------------------------------
  4492                                  ;
  4493                                  ;       Routine:        HexadecimalToUnsigned
  4494                                  ;
  4495                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4496                                  ;
  4497                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4498                                  ;
  4499                                  ;       Output:         EAX     unsigned integer value
  4500                                  ;
  4501                                  ;-----------------------------------------------------------------------------------------------------------------------
  4502 0000110D 56                      HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4503 0000110E 89D6                                            mov     esi,edx                                         ;source address
  4504 00001110 31D2                                            xor     edx,edx                                         ;zero register
  4505 00001112 AC                      .10                     lodsb                                                   ;source byte
  4506 00001113 84C0                                            test    al,al                                           ;end of string?
  4507 00001115 7410                                            jz      .30                                             ;yes, branch
  4508 00001117 3C39                                            cmp     al,'9'                                          ;hexadecimal?
  4509 00001119 7602                                            jna     .20                                             ;no, skip ahead
  4510 0000111B 2C37                                            sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  4511 0000111D 83E00F                  .20                     and     eax,0fh                                         ;remove ascii zone
  4512 00001120 C1E204                                          shl     edx,4                                           ;previous total x 16
  4513 00001123 01C2                                            add     edx,eax                                         ;add prior value x 16
  4514 00001125 EBEB                                            jmp     .10                                             ;next
  4515 00001127 89D0                    .30                     mov     eax,edx                                         ;result
  4516 00001129 5E                                              pop     esi                                             ;restore non-volatile regs
  4517 0000112A C3                                              ret                                                     ;return
  4518                                  ;-----------------------------------------------------------------------------------------------------------------------
  4519                                  ;
  4520                                  ;       Routine:        UnsignedToDecimalString
  4521                                  ;
  4522                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4523                                  ;
  4524                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4525                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4526                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4527                                  ;                       ECX     32-bit binary
  4528                                  ;                       DS:EDX  output buffer address
  4529                                  ;
  4530                                  ;-----------------------------------------------------------------------------------------------------------------------
  4531 0000112B 53                      UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4532 0000112C 51                                              push    ecx                                             ;
  4533 0000112D 57                                              push    edi                                             ;
  4534 0000112E 06                                              push    es                                              ;
  4535 0000112F 1E                                              push    ds                                              ;load data selector
  4536 00001130 07                                              pop     es                                              ;... into extra segment reg
  4537 00001131 89D7                                            mov     edi,edx                                         ;output buffer address
  4538 00001133 80E70F                                          and     bh,00001111b                                    ;zero internal flags
  4539 00001136 89CA                                            mov     edx,ecx                                         ;binary
  4540 00001138 B900CA9A3B                                      mov     ecx,1000000000                                  ;10^9 divisor
  4541 0000113D E871000000                                      call    .30                                             ;divide and store
  4542 00001142 B900E1F505                                      mov     ecx,100000000                                   ;10^8 divisor
  4543 00001147 E855000000                                      call    .10                                             ;divide and store
  4544 0000114C B980969800                                      mov     ecx,10000000                                    ;10^7 divisor
  4545 00001151 E85D000000                                      call    .30                                             ;divide and store
  4546 00001156 B940420F00                                      mov     ecx,1000000                                     ;10^6 divisor
  4547 0000115B E853000000                                      call    .30                                             ;divide and store
  4548 00001160 B9A0860100                                      mov     ecx,100000                                      ;10^5 divisor
  4549 00001165 E837000000                                      call    .10                                             ;divide and store
  4550 0000116A B910270000                                      mov     ecx,10000                                       ;10^4 divisor
  4551 0000116F E83F000000                                      call    .30                                             ;divide and store
  4552 00001174 B9E8030000                                      mov     ecx,1000                                        ;10^3 divisor
  4553 00001179 E835000000                                      call    .30                                             ;divide and store
  4554 0000117E B964000000                                      mov     ecx,100                                         ;10^2 divisor
  4555 00001183 E819000000                                      call    .10                                             ;divide and store
  4556 00001188 B90A000000                                      mov     ecx,10                                          ;10^2 divisor
  4557 0000118D E821000000                                      call    .30                                             ;divide and store
  4558 00001192 89D0                                            mov     eax,edx                                         ;10^1 remainder
  4559 00001194 E827000000                                      call    .40                                             ;store
  4560 00001199 30C0                                            xor     al,al                                           ;null terminator
  4561 0000119B AA                                              stosb
  4562 0000119C 07                                              pop     es                                              ;restore non-volatile regs
  4563 0000119D 5F                                              pop     edi                                             ;
  4564 0000119E 59                                              pop     ecx                                             ;
  4565 0000119F 5B                                              pop     ebx                                             ;
  4566 000011A0 C3                                              ret                                                     ;return
  4567 000011A1 F6C702                  .10                     test    bh,00000010b                                    ;comma group delims?
  4568 000011A4 740D                                            jz      .30                                             ;no, branch
  4569 000011A6 F6C701                                          test    bh,00000001b                                    ;trim leading zeros?
  4570 000011A9 7405                                            jz      .20                                             ;no, store delim
  4571 000011AB F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4572 000011AE 7403                                            jz      .30                                             ;no, branch
  4573 000011B0 B02C                    .20                     mov     al,','                                          ;delimiter
  4574 000011B2 AA                                              stosb                                                   ;store delimiter
  4575 000011B3 89D0                    .30                     mov     eax,edx                                         ;lo-orer dividend
  4576 000011B5 31D2                                            xor     edx,edx                                         ;zero hi-order
  4577 000011B7 F7F1                                            div     ecx                                             ;divide by power of 10
  4578 000011B9 84C0                                            test    al,al                                           ;zero?
  4579 000011BB 7407                                            jz      .50                                             ;yes, branch
  4580 000011BD 80CF10                                          or      bh,00010000b                                    ;non-zero found
  4581 000011C0 0C30                    .40                     or      al,30h                                          ;ASCII zone
  4582 000011C2 AA                                              stosb                                                   ;store digit
  4583 000011C3 C3                                              ret                                                     ;return
  4584 000011C4 F6C701                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4585 000011C7 74F7                                            jz      .40                                             ;no, store and continue
  4586 000011C9 F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4587 000011CC 75F2                                            jnz     .40                                             ;yes, store and continue
  4588 000011CE C3                                              ret                                                     ;return
  4589                                  ;-----------------------------------------------------------------------------------------------------------------------
  4590                                  ;
  4591                                  ;       Routine:        UnsignedToHexadecimal
  4592                                  ;
  4593                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4594                                  ;
  4595                                  ;       Input:          DS:EDX  output buffer address
  4596                                  ;                       ECX     32-bit binary
  4597                                  ;
  4598                                  ;-----------------------------------------------------------------------------------------------------------------------
  4599 000011CF 57                      UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4600 000011D0 89D7                                            mov     edi,edx                                         ;output buffer address
  4601 000011D2 89CA                                            mov     edx,ecx                                         ;32-bit unsigned
  4602 000011D4 31C9                                            xor     ecx,ecx                                         ;zero register
  4603 000011D6 B108                                            mov     cl,8                                            ;nybble count
  4604 000011D8 C1C204                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4605 000011DB 88D0                                            mov     al,dl                                           ;????bbbb
  4606 000011DD 240F                                            and     al,0fh                                          ;mask out bits 4-7
  4607 000011DF 0C30                                            or      al,30h                                          ;mask in ascii zone
  4608 000011E1 3C3A                                            cmp     al,3ah                                          ;A through F?
  4609 000011E3 7202                                            jb      .20                                             ;no, skip ahead
  4610 000011E5 0407                                            add     al,7                                            ;41h through 46h
  4611 000011E7 AA                      .20                     stosb                                                   ;store hexnum
  4612 000011E8 E2EE                                            loop    .10                                             ;next nybble
  4613 000011EA 30C0                                            xor     al,al                                           ;zero reg
  4614 000011EC AA                                              stosb                                                   ;null terminate
  4615 000011ED 5F                                              pop     edi                                             ;restore non-volatile regs
  4616 000011EE C3                                              ret                                                     ;return
  4617                                  ;=======================================================================================================================
  4618                                  ;
  4619                                  ;       Message Queue Helper Routines
  4620                                  ;
  4621                                  ;       GetMessage
  4622                                  ;       PutMessage
  4623                                  ;
  4624                                  ;=======================================================================================================================
  4625                                  ;-----------------------------------------------------------------------------------------------------------------------
  4626                                  ;
  4627                                  ;       Routine:        GetMessage
  4628                                  ;
  4629                                  ;       Description:    This routine reads and removes a message from the message queue.
  4630                                  ;
  4631                                  ;       Out:            EAX     lo-order message data
  4632                                  ;                       EDX     hi-order message data
  4633                                  ;
  4634                                  ;                       CY      0 = message read
  4635                                  ;                               1 = no message to read
  4636                                  ;
  4637                                  ;-----------------------------------------------------------------------------------------------------------------------
  4638 000011EF 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  4639 000011F0 51                                              push    ecx                                             ;
  4640 000011F1 1E                                              push    ds                                              ;
  4641 000011F2 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  4642 000011F4 1F                                              pop     ds                                              ;... into data segment register
  4643 000011F5 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  4644 000011FB 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  4645 000011FD 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4646 00001200 09D0                                            or      eax,edx                                         ;is queue empty?
  4647 00001202 F9                                              stc                                                     ;assume queue is emtpy
  4648 00001203 741B                                            jz      .20                                             ;yes, skip ahead
  4649 00001205 31C9                                            xor     ecx,ecx                                         ;store zero
  4650 00001207 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  4651 00001209 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4652 0000120C 83C308                                          add     ebx,8                                           ;next queue element
  4653 0000120F 81E3FC030000                                    and     ebx,03fch                                       ;at end of queue?
  4654 00001215 7502                                            jnz     .10                                             ;no, skip ahead
  4655 00001217 B308                                            mov     bl,8                                            ;reset to 1st entry
  4656 00001219 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4657 0000121F F8                                              clc                                                     ;indicate message read
  4658 00001220 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4659 00001221 59                                              pop     ecx                                             ;
  4660 00001222 5B                                              pop     ebx                                             ;
  4661 00001223 C3                                              ret                                                     ;return
  4662                                  ;-----------------------------------------------------------------------------------------------------------------------
  4663                                  ;
  4664                                  ;       Routine:        PutMessage
  4665                                  ;
  4666                                  ;       Description:    This routine adda a message to the message queue.
  4667                                  ;
  4668                                  ;       In:             ECX     hi-order data word
  4669                                  ;                       EDX     lo-order data word
  4670                                  ;
  4671                                  ;       Out:            CY      0 = success
  4672                                  ;                               1 = fail: queue is full
  4673                                  ;
  4674                                  ;-----------------------------------------------------------------------------------------------------------------------
  4675 00001224 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  4676 00001225 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  4677 00001227 1F                                              pop     ds                                              ;... into data segment register
  4678 00001228 A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  4679 0000122D 833800                                          cmp     dword [eax],0                                   ;is queue full?
  4680 00001230 F9                                              stc                                                     ;assume failure
  4681 00001231 7517                                            jne     .20                                             ;yes, cannot store
  4682 00001233 8910                                            mov     [eax],edx                                       ;store lo-order data
  4683 00001235 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  4684 00001238 83C008                                          add     eax,8                                           ;next queue element adr
  4685 0000123B 25FC030000                                      and     eax,03fch                                       ;at end of queue?
  4686 00001240 7502                                            jnz     .10                                             ;no, skip ahead
  4687 00001242 B008                                            mov     al,8                                            ;reset to top of queue
  4688 00001244 A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4689 00001249 F8                                              clc                                                     ;indicate success
  4690 0000124A 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4691 0000124B C3                                              ret                                                     ;return
  4692                                  ;=======================================================================================================================
  4693                                  ;
  4694                                  ;       Memory-Mapped Video Routines
  4695                                  ;
  4696                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4697                                  ;
  4698                                  ;       ClearConsoleScreen
  4699                                  ;       ScrollConsoleRow
  4700                                  ;       SetConsoleChar
  4701                                  ;       SetConsoleString
  4702                                  ;
  4703                                  ;=======================================================================================================================
  4704                                  ;-----------------------------------------------------------------------------------------------------------------------
  4705                                  ;
  4706                                  ;       Routine:        ClearConsoleScreen
  4707                                  ;
  4708                                  ;       Description:    This routine clears the console (CGA) screen.
  4709                                  ;
  4710                                  ;-----------------------------------------------------------------------------------------------------------------------
  4711 0000124C 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4712 0000124D 57                                              push    edi                                             ;
  4713 0000124E 1E                                              push    ds                                              ;
  4714 0000124F 06                                              push    es                                              ;
  4715 00001250 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  4716 00001252 1F                                              pop     ds                                              ;... into DS register
  4717 00001253 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4718 00001255 07                                              pop     es                                              ;... into ES register
  4719 00001256 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  4720 0000125B B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4721 00001260 31FF                                            xor     edi,edi                                         ;target offset
  4722 00001262 FC                                              cld                                                     ;forward strings
  4723 00001263 F3AB                                            rep     stosd                                           ;reset screen body
  4724 00001265 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4725 0000126A B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4726 0000126F F3AB                                            rep     stosd                                           ;reset OIA line
  4727 00001271 30C0                                            xor     al,al                                           ;zero register
  4728 00001273 A21D080000                                      mov     [wbConsoleRow],al                               ;reset console row
  4729 00001278 A21C080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  4730 0000127D E882000000                                      call    PlaceCursor                                     ;place cursor at current position
  4731 00001282 07                                              pop     es                                              ;restore non-volatile regs
  4732 00001283 1F                                              pop     ds                                              ;
  4733 00001284 5F                                              pop     edi                                             ;
  4734 00001285 59                                              pop     ecx                                             ;
  4735 00001286 C3                                              ret                                                     ;return
  4736                                  ;-----------------------------------------------------------------------------------------------------------------------
  4737                                  ;
  4738                                  ;       Routine:        ScrollConsoleRow
  4739                                  ;
  4740                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4741                                  ;
  4742                                  ;-----------------------------------------------------------------------------------------------------------------------
  4743 00001287 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4744 00001288 56                                              push    esi                                             ;
  4745 00001289 57                                              push    edi                                             ;
  4746 0000128A 1E                                              push    ds                                              ;
  4747 0000128B 06                                              push    es                                              ;
  4748 0000128C 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4749 0000128E 1F                                              pop     ds                                              ;... into DS
  4750 0000128F 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4751 00001291 07                                              pop     es                                              ;... into ES
  4752 00001292 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4753 00001297 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4754 0000129C 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  4755 0000129E FC                                              cld                                                     ;forward strings
  4756 0000129F F3A5                                            rep     movsd                                           ;move 24 lines up
  4757 000012A1 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4758 000012A6 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4759 000012AB F3AB                                            rep     stosd                                           ;clear bottom row
  4760 000012AD 07                                              pop     es                                              ;restore non-volatile regs
  4761 000012AE 1F                                              pop     ds                                              ;
  4762 000012AF 5F                                              pop     edi                                             ;
  4763 000012B0 5E                                              pop     esi                                             ;
  4764 000012B1 59                                              pop     ecx                                             ;
  4765 000012B2 C3                                              ret                                                     ;return
  4766                                  ;-----------------------------------------------------------------------------------------------------------------------
  4767                                  ;
  4768                                  ;       Routine:        SetConsoleChar
  4769                                  ;
  4770                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4771                                  ;
  4772                                  ;       In:             AL      ASCII character
  4773                                  ;                       CL      column
  4774                                  ;                       CH      row
  4775                                  ;                       ES      CGA selector
  4776                                  ;
  4777                                  ;       Out:            EAX     last target address written (ES:)
  4778                                  ;                       CL      column + 1
  4779                                  ;
  4780                                  ;-----------------------------------------------------------------------------------------------------------------------
  4781 000012B3 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  4782 000012B5 0FB6C5                                          movzx   eax,ch                                          ;row
  4783 000012B8 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  4784 000012BA F6E4                                            mul     ah                                              ;row * cols/row
  4785 000012BC 00C8                                            add     al,cl                                           ;add column
  4786 000012BE 80D400                                          adc     ah,0                                            ;handle carry
  4787 000012C1 D1E0                                            shl     eax,1                                           ;screen offset
  4788 000012C3 268810                                          mov     [es:eax],dl                                     ;store character
  4789 000012C6 FEC1                                            inc     cl                                              ;next column
  4790 000012C8 C3                                              ret                                                     ;return
  4791                                  ;-----------------------------------------------------------------------------------------------------------------------
  4792                                  ;
  4793                                  ;       Routine:        SetConsoleString
  4794                                  ;
  4795                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4796                                  ;
  4797                                  ;       In:             ESI     source offset (DS:)
  4798                                  ;                       CL      column
  4799                                  ;                       CH      row
  4800                                  ;                       ES      CGA selector
  4801                                  ;
  4802                                  ;-----------------------------------------------------------------------------------------------------------------------
  4803 000012C9 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  4804 000012CA FC                                              cld                                                     ;forward strings
  4805 000012CB AC                      .10                     lodsb                                                   ;next ASCII character
  4806 000012CC 84C0                                            test    al,al                                           ;end of string?
  4807 000012CE 7407                                            jz      .20                                             ;yes, branch
  4808 000012D0 E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  4809 000012D5 EBF4                                            jmp     .10                                             ;continue
  4810 000012D7 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4811 000012D8 C3                                              ret                                                     ;return
  4812                                  ;=======================================================================================================================
  4813                                  ;
  4814                                  ;       Input/Output Routines
  4815                                  ;
  4816                                  ;       These routines read and/or write directly to ports.
  4817                                  ;
  4818                                  ;       GetBaseMemSize
  4819                                  ;       GetExtendedMemSize
  4820                                  ;       GetROMMemSize
  4821                                  ;       PlaceCursor
  4822                                  ;       PutPrimaryEndOfInt
  4823                                  ;       PutSecondaryEndOfInt
  4824                                  ;       ReadRealTimeClock
  4825                                  ;       ResetSystem
  4826                                  ;       SetKeyboardLamps
  4827                                  ;       WaitForKeyInBuffer
  4828                                  ;       WaitForKeyOutBuffer
  4829                                  ;
  4830                                  ;=======================================================================================================================
  4831                                  ;-----------------------------------------------------------------------------------------------------------------------
  4832                                  ;
  4833                                  ;       Routine:        GetBaseMemSize
  4834                                  ;
  4835                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4836                                  ;
  4837                                  ;       Output:         EAX     base RAM size in bytes
  4838                                  ;
  4839                                  ;-----------------------------------------------------------------------------------------------------------------------
  4840 000012D9 31C0                    GetBaseMemSize          xor     eax,eax                                         ;zero register
  4841 000012DB B016                                            mov     al,ERTCBASERAMHI                                ;base RAM high register
  4842 000012DD E670                                            out     ERTCREGPORT,al                                  ;select base RAM high register
  4843 000012DF E471                                            in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4844 000012E1 88C4                                            mov     ah,al                                           ;save base RAM high
  4845 000012E3 B015                                            mov     al,ERTCBASERAMLO                                ;base RAM low register
  4846 000012E5 E670                                            out     ERTCREGPORT,al                                  ;select base RAM low register
  4847 000012E7 E471                                            in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4848 000012E9 C3                                              ret                                                     ;return to caller
  4849                                  ;-----------------------------------------------------------------------------------------------------------------------
  4850                                  ;
  4851                                  ;       Routine:        GetExtendedMemSize
  4852                                  ;
  4853                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4854                                  ;
  4855                                  ;       Output:         EAX     extended RAM size in bytes
  4856                                  ;
  4857                                  ;-----------------------------------------------------------------------------------------------------------------------
  4858 000012EA 31C0                    GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4859 000012EC B018                                            mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4860 000012EE E670                                            out     ERTCREGPORT,al                                  ;select extended RAM high register
  4861 000012F0 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4862 000012F2 88C4                                            mov     ah,al                                           ;save extended RAM high
  4863 000012F4 B017                                            mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4864 000012F6 E670                                            out     ERTCREGPORT,al                                  ;select extended RAM low register
  4865 000012F8 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4866 000012FA C3                                              ret                                                     ;return to caller
  4867                                  ;-----------------------------------------------------------------------------------------------------------------------
  4868                                  ;
  4869                                  ;       Routine:        GetROMMemSize
  4870                                  ;
  4871                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4872                                  ;
  4873                                  ;       Output:         EAX     RAM size in bytes
  4874                                  ;
  4875                                  ;-----------------------------------------------------------------------------------------------------------------------
  4876 000012FB 31C0                    GetROMMemSize           xor     eax,eax                                         ;zero register
  4877 000012FD 66A113040000                                    mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4878 00001303 C3                                              ret                                                     ;return
  4879                                  ;-----------------------------------------------------------------------------------------------------------------------
  4880                                  ;
  4881                                  ;       Routine:        PlaceCursor
  4882                                  ;
  4883                                  ;       Description:    This routine positions the cursor on the console.
  4884                                  ;
  4885                                  ;       In:             DS      OS data selector
  4886                                  ;
  4887                                  ;-----------------------------------------------------------------------------------------------------------------------
  4888 00001304 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  4889 00001305 A01D080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  4890 0000130A B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  4891 0000130C F6E4                                            mul     ah                                              ;row offset
  4892 0000130E 02051C080000                                    add     al,[wbConsoleColumn]                            ;add column
  4893 00001314 80D400                                          adc     ah,0                                            ;add overflow
  4894 00001317 89C1                                            mov     ecx,eax                                         ;screen offset
  4895 00001319 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4896 0000131B B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4897 0000131D B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4898 0000131F EE                                              out     dx,al                                           ;select register
  4899 00001320 42                                              inc     edx                                             ;data port
  4900 00001321 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  4901 00001323 EE                                              out     dx,al                                           ;store hi-order loc
  4902 00001324 4A                                              dec     edx                                             ;register select port
  4903 00001325 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4904 00001327 EE                                              out     dx,al                                           ;select register
  4905 00001328 42                                              inc     edx                                             ;data port
  4906 00001329 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  4907 0000132B EE                                              out     dx,al                                           ;store lo-order loc
  4908 0000132C 59                                              pop     ecx                                             ;restore non-volatile regs
  4909 0000132D C3                                              ret                                                     ;return
  4910                                  ;-----------------------------------------------------------------------------------------------------------------------
  4911                                  ;
  4912                                  ;       Routine:        PutPrimaryEndOfInt
  4913                                  ;
  4914                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4915                                  ;
  4916                                  ;-----------------------------------------------------------------------------------------------------------------------
  4917 0000132E FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4918 0000132F B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4919 00001331 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4920 00001333 C3                                              ret                                                     ;return
  4921                                  ;-----------------------------------------------------------------------------------------------------------------------
  4922                                  ;
  4923                                  ;       Routine:        PutSecondaryEndOfInt
  4924                                  ;
  4925                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4926                                  ;
  4927                                  ;-----------------------------------------------------------------------------------------------------------------------
  4928 00001334 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4929 00001335 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4930 00001337 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4931 00001339 C3                                              ret                                                     ;return
  4932                                  ;-----------------------------------------------------------------------------------------------------------------------
  4933                                  ;
  4934                                  ;       Routine:        ReadRealTimeClock
  4935                                  ;
  4936                                  ;       Description:    This routine gets current date time from the real-time clock.
  4937                                  ;
  4938                                  ;       In:             DS:EBX  DATETIME structure
  4939                                  ;
  4940                                  ;-----------------------------------------------------------------------------------------------------------------------
  4941 0000133A 56                      ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4942 0000133B 57                                              push    edi                                             ;
  4943 0000133C 06                                              push    es                                              ;
  4944 0000133D 1E                                              push    ds                                              ;store data selector ...
  4945 0000133E 07                                              pop     es                                              ;... in es register
  4946 0000133F 89DF                                            mov     edi,ebx                                         ;date-time structure
  4947 00001341 B000                                            mov     al,ERTCSECONDREG                                ;second register
  4948 00001343 E670                                            out     ERTCREGPORT,al                                  ;select second register
  4949 00001345 E471                                            in      al,ERTCDATAPORT                                 ;read second register
  4950 00001347 FC                                              cld                                                     ;forward strings
  4951 00001348 AA                                              stosb                                                   ;store second value
  4952 00001349 B002                                            mov     al,ERTCMINUTEREG                                ;minute register
  4953 0000134B E670                                            out     ERTCREGPORT,al                                  ;select minute register
  4954 0000134D E471                                            in      al,ERTCDATAPORT                                 ;read minute register
  4955 0000134F AA                                              stosb                                                   ;store minute value
  4956 00001350 B004                                            mov     al,ERTCHOURREG                                  ;hour register
  4957 00001352 E670                                            out     ERTCREGPORT,al                                  ;select hour register
  4958 00001354 E471                                            in      al,ERTCDATAPORT                                 ;read hour register
  4959 00001356 AA                                              stosb                                                   ;store hour value
  4960 00001357 B006                                            mov     al,ERTCWEEKDAYREG                               ;weekday register
  4961 00001359 E670                                            out     ERTCREGPORT,al                                  ;select weekday register
  4962 0000135B E471                                            in      al,ERTCDATAPORT                                 ;read weekday register
  4963 0000135D AA                                              stosb                                                   ;store weekday value
  4964 0000135E B007                                            mov     al,ERTCDAYREG                                   ;day register
  4965 00001360 E670                                            out     ERTCREGPORT,al                                  ;select day register
  4966 00001362 E471                                            in      al,ERTCDATAPORT                                 ;read day register
  4967 00001364 AA                                              stosb                                                   ;store day value
  4968 00001365 B008                                            mov     al,ERTCMONTHREG                                 ;month register
  4969 00001367 E670                                            out     ERTCREGPORT,al                                  ;select month register
  4970 00001369 E471                                            in      al,ERTCDATAPORT                                 ;read month register
  4971 0000136B AA                                              stosb                                                   ;store month value
  4972 0000136C B009                                            mov     al,ERTCYEARREG                                  ;year register
  4973 0000136E E670                                            out     ERTCREGPORT,al                                  ;select year register
  4974 00001370 E471                                            in      al,ERTCDATAPORT                                 ;read year register
  4975 00001372 AA                                              stosb                                                   ;store year value
  4976 00001373 B032                                            mov     al,ERTCCENTURYREG                               ;century register
  4977 00001375 E670                                            out     ERTCREGPORT,al                                  ;select century register
  4978 00001377 E471                                            in      al,ERTCDATAPORT                                 ;read century register
  4979 00001379 AA                                              stosb                                                   ;store century value
  4980 0000137A B00B                                            mov     al,ERTCSTATUSREG                                ;status register
  4981 0000137C E670                                            out     ERTCREGPORT,al                                  ;select status register
  4982 0000137E E471                                            in      al,ERTCDATAPORT                                 ;read status register
  4983 00001380 A804                                            test    al,ERTCBINARYVALS                               ;test if values are binary
  4984 00001382 751D                                            jnz     .20                                             ;skip ahead if binary values
  4985 00001384 89DE                                            mov     esi,ebx                                         ;date-time structure address
  4986 00001386 89DF                                            mov     edi,ebx                                         ;date-time structure address
  4987 00001388 B908000000                                      mov     ecx,8                                           ;loop counter
  4988 0000138D AC                      .10                     lodsb                                                   ;BCD value
  4989 0000138E 88C4                                            mov     ah,al                                           ;BCD value
  4990 00001390 240F                                            and     al,00001111b                                    ;low-order decimal zone
  4991 00001392 80E4F0                                          and     ah,11110000b                                    ;hi-order decimal zone
  4992 00001395 D0EC                                            shr     ah,1                                            ;hi-order decimal * 8
  4993 00001397 00E0                                            add     al,ah                                           ;low-order + hi-order * 8
  4994 00001399 C0EC02                                          shr     ah,2                                            ;hi-order decimal * 2
  4995 0000139C 00E0                                            add     al,ah                                           ;low-order + hi-order * 10
  4996 0000139E AA                                              stosb                                                   ;replace BCD with binary
  4997 0000139F E2EC                                            loop    .10                                             ;next value
  4998 000013A1 07                      .20                     pop     es                                              ;restore non-volatile regs
  4999 000013A2 5F                                              pop     edi                                             ;
  5000 000013A3 5E                                              pop     esi                                             ;
  5001 000013A4 C3                                              ret                                                     ;return
  5002                                  ;-----------------------------------------------------------------------------------------------------------------------
  5003                                  ;
  5004                                  ;       Routine:        ResetSystem
  5005                                  ;
  5006                                  ;       Description:    This routine restarts the system using the 8042 controller.
  5007                                  ;
  5008                                  ;       Out:            N/A     This routine does not return.
  5009                                  ;
  5010                                  ;-----------------------------------------------------------------------------------------------------------------------
  5011 000013A5 B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  5012 000013AA E2FE                                            loop    $                                               ;clear interrupts
  5013 000013AC B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  5014 000013AE E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  5015 000013B0 FB                      .10                     sti                                                     ;enable maskable interrupts
  5016 000013B1 F4                                              hlt                                                     ;halt until interrupt
  5017 000013B2 EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  5018                                  ;-----------------------------------------------------------------------------------------------------------------------
  5019                                  ;
  5020                                  ;       Routine:        SetKeyboardLamps
  5021                                  ;
  5022                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  5023                                  ;
  5024                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  5025                                  ;
  5026                                  ;-----------------------------------------------------------------------------------------------------------------------
  5027 000013B4 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5028 000013B9 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  5029 000013BB E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  5030 000013BD E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5031 000013C2 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5032 000013C4 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  5033 000013C9 88F8                                            mov     al,bh                                           ;set/reset lamps value
  5034 000013CB E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  5035 000013CD E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  5036 000013D2 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  5037 000013D4 C3                                              ret                                                     ;return
  5038                                  ;-----------------------------------------------------------------------------------------------------------------------
  5039                                  ;
  5040                                  ;       Routine:        WaitForKeyInBuffer
  5041                                  ;
  5042                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  5043                                  ;
  5044                                  ;       Out:            ZF      1 = Input buffer ready
  5045                                  ;                               0 = Input buffer not ready after timeout
  5046                                  ;
  5047                                  ;-----------------------------------------------------------------------------------------------------------------------
  5048 000013D5 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  5049 000013D6 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5050 000013DB E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5051 000013DD A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  5052 000013DF E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  5053 000013E1 59                                              pop     ecx                                             ;restore non-volatile regs
  5054 000013E2 C3                                              ret                                                     ;return
  5055                                  ;-----------------------------------------------------------------------------------------------------------------------
  5056                                  ;
  5057                                  ;       Routine:        WaitForKeyOutBuffer
  5058                                  ;
  5059                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5060                                  ;
  5061                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5062                                  ;                               0 = Output buffer empty after timeout
  5063                                  ;
  5064                                  ;-----------------------------------------------------------------------------------------------------------------------
  5065 000013E3 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5066 000013E4 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5067 000013E9 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5068 000013EB A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  5069 000013ED E1FA                                            loopz   .10                                             ;loop until output buffer bit
  5070 000013EF 59                                              pop     ecx                                             ;restore non-volatile regs
  5071 000013F0 C3                                              ret                                                     ;return
  5072                                  ;-----------------------------------------------------------------------------------------------------------------------
  5073                                  ;
  5074                                  ;       End of the Kernel Function Library
  5075                                  ;
  5076                                  ;-----------------------------------------------------------------------------------------------------------------------
  5077 000013F1 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  5078                                  ;=======================================================================================================================
  5079                                  ;
  5080                                  ;       Console Task
  5081                                  ;
  5082                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5083                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5084                                  ;       screen and responds to user commands.
  5085                                  ;
  5086                                  ;=======================================================================================================================
  5087                                  ;-----------------------------------------------------------------------------------------------------------------------
  5088                                  ;
  5089                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5090                                  ;
  5091                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5092                                  ;
  5093                                  ;-----------------------------------------------------------------------------------------------------------------------
  5094                                  section                 constack                                                ;console task stack
  5095 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  5096                                  ;-----------------------------------------------------------------------------------------------------------------------
  5097                                  ;
  5098                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5099                                  ;
  5100                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5101                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5102                                  ;       16 descriptors. Six are initially defined.
  5103                                  ;
  5104                                  ;-----------------------------------------------------------------------------------------------------------------------
  5105                                  section                 conldt                                                  ;console local descriptors
  5106 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  5107 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  5108 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  5109 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  5110 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  5111 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  5112 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5113                                  ;-----------------------------------------------------------------------------------------------------------------------
  5114                                  ;
  5115                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5116                                  ;
  5117                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5118                                  ;       segment. CS to console code.
  5119                                  ;
  5120                                  ;-----------------------------------------------------------------------------------------------------------------------
  5121                                  section                 contss                                                  ;console task state segment
  5122 00000000 00000000                                        dd      0                                               ;00 back-link tss
  5123 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  5124 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  5125 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  5126 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  5127 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  5128 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  5129 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  5130 00000020 00000000                                        dd      0                                               ;20 eip
  5131 00000024 00020000                                        dd      0200h                                           ;24 eflags
  5132 00000028 00000000                                        dd      0                                               ;28 eax
  5133 0000002C 00000000                                        dd      0                                               ;2c ecx
  5134 00000030 00000000                                        dd      0                                               ;30 edx
  5135 00000034 00000000                                        dd      0                                               ;34 ebx
  5136 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  5137 0000003C 00000000                                        dd      0                                               ;3c ebp
  5138 00000040 00000000                                        dd      0                                               ;40 esi
  5139 00000044 00000000                                        dd      0                                               ;44 edi
  5140 00000048 1C000000                                        dd      001Ch                                           ;48 es
  5141 0000004C 24000000                                        dd      0024h                                           ;4c cs
  5142 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  5143 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  5144 00000058 00000000                                        dd      0                                               ;58 fs
  5145 0000005C 00000000                                        dd      0                                               ;5c gs
  5146 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5147 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5148                                  ;-----------------------------------------------------------------------------------------------------------------------
  5149                                  ;
  5150                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5151                                  ;
  5152                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5153                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5154                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5155                                  ;       event.
  5156                                  ;
  5157                                  ;-----------------------------------------------------------------------------------------------------------------------
  5158                                  section                 conmque                                                 ;console message queue
  5159 00000000 08000000                                        dd      8                                               ;head pointer
  5160 00000004 08000000                                        dd      8                                               ;tail pointer
  5161 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  5162                                  ;-----------------------------------------------------------------------------------------------------------------------
  5163                                  ;
  5164                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5165                                  ;
  5166                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5167                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5168                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5169                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5170                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5171                                  ;       board input, echoing to the console screen and responding to user commands.
  5172                                  ;
  5173                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5174                                  ;
  5175                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5176                                  ;                               |  Real Mode Interrupt Vectors                  |
  5177                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5178                                  ;                               |  Reserved BIOS Memory Area                    |
  5179                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5180                                  ;                               |  Shared Kernel Memory Area                    |
  5181                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5182                                  ;                               |  Global Descriptor Table (GDT)                |
  5183                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5184                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5185                                  ;                       002000  +-----------------------------------------------+
  5186                                  ;                               |  Interrupt Handlers                           |
  5187                                  ;                               |  Kernel Function Library                      |
  5188                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5189                                  ;                               |  Console Task Stack Area                      |
  5190                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5191                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5192                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5193                                  ;                               |  Console Task Task State Segment (TSS)        |
  5194                                  ;                       004800  +-----------------------------------------------+
  5195                                  ;                               |  Console Task Message Queue                   |
  5196                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5197                                  ;                               |  Console Task Code                            |
  5198                                  ;                               |  Console Task Constants                       |
  5199                                  ;                       006000  +===============================================+
  5200                                  ;
  5201                                  ;-----------------------------------------------------------------------------------------------------------------------
  5202                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5203 00000000 E8D9000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  5204                                  
  5205                                                          clearConsoleScreen                                      ;clear the console screen
  5205 00000005 B001                <1>  mov al,eClearConsoleScreen
  5205 00000007 CD30                <1>  int _svc
  5206                                                          putConsoleString czTitle                                ;display startup message
  5206 00000009 BA[0A090000]        <1>  mov edx,%1
  5206 0000000E B00C                <1>  mov al,ePutConsoleString
  5206 00000010 CD30                <1>  int _svc
  5207                                                          putConsoleString czROMMem                               ;ROM memory label
  5207 00000012 BA[E5080000]        <1>  mov edx,%1
  5207 00000017 B00C                <1>  mov al,ePutConsoleString
  5207 00000019 CD30                <1>  int _svc
  5208                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5208 0000001B BA23090000          <1>  mov edx,%1
  5208 00000020 B00C                <1>  mov al,ePutConsoleString
  5208 00000022 CD30                <1>  int _svc
  5209                                                          putConsoleString czKB                                   ;Kilobytes
  5209 00000024 BA[5F080000]        <1>  mov edx,%1
  5209 00000029 B00C                <1>  mov al,ePutConsoleString
  5209 0000002B CD30                <1>  int _svc
  5210                                                          putConsoleString czNewLine                              ;new line
  5210 0000002D BA[62080000]        <1>  mov edx,%1
  5210 00000032 B00C                <1>  mov al,ePutConsoleString
  5210 00000034 CD30                <1>  int _svc
  5211                                                          putConsoleString czBaseMem                              ;base memory label
  5211 00000036 BA[39080000]        <1>  mov edx,%1
  5211 0000003B B00C                <1>  mov al,ePutConsoleString
  5211 0000003D CD30                <1>  int _svc
  5212                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5212 0000003F BA18090000          <1>  mov edx,%1
  5212 00000044 B00C                <1>  mov al,ePutConsoleString
  5212 00000046 CD30                <1>  int _svc
  5213                                                          putConsoleString czKB                                   ;Kilobytes
  5213 00000048 BA[5F080000]        <1>  mov edx,%1
  5213 0000004D B00C                <1>  mov al,ePutConsoleString
  5213 0000004F CD30                <1>  int _svc
  5214                                                          putConsoleString czNewLine                              ;new line
  5214 00000051 BA[62080000]        <1>  mov edx,%1
  5214 00000056 B00C                <1>  mov al,ePutConsoleString
  5214 00000058 CD30                <1>  int _svc
  5215                                                          putConsoleString czExtendedMem                          ;extended memory label
  5215 0000005A BA[47080000]        <1>  mov edx,%1
  5215 0000005F B00C                <1>  mov al,ePutConsoleString
  5215 00000061 CD30                <1>  int _svc
  5216                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5216 00000063 BA2E090000          <1>  mov edx,%1
  5216 00000068 B00C                <1>  mov al,ePutConsoleString
  5216 0000006A CD30                <1>  int _svc
  5217                                                          putConsoleString czKB                                   ;Kilobytes
  5217 0000006C BA[5F080000]        <1>  mov edx,%1
  5217 00000071 B00C                <1>  mov al,ePutConsoleString
  5217 00000073 CD30                <1>  int _svc
  5218                                                          putConsoleString czNewLine                              ;new line
  5218 00000075 BA[62080000]        <1>  mov edx,%1
  5218 0000007A B00C                <1>  mov al,ePutConsoleString
  5218 0000007C CD30                <1>  int _svc
  5219                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5219                              <1> .10 :
  5219 0000007E BA[C6080000]        <1>  mov edx,%1
  5219 00000083 B00C                <1>  mov al,ePutConsoleString
  5219 00000085 CD30                <1>  int _svc
  5220                                                          placeCursor                                             ;set CRT cursor location
  5220 00000087 B00B                <1>  mov al,ePlaceCursor
  5220 00000089 CD30                <1>  int _svc
  5221                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5221 0000008B BA28080000          <1>  mov edx,%1
  5221 00000090 B94F000000          <1>  mov ecx,%2
  5221 00000095 B701                <1>  mov bh,%3
  5221 00000097 B30D                <1>  mov bl,%4
  5221 00000099 B006                <1>  mov al,eGetConsoleString
  5221 0000009B CD30                <1>  int _svc
  5222                                                          putConsoleString czNewLine                              ;newline
  5222 0000009D BA[62080000]        <1>  mov edx,%1
  5222 000000A2 B00C                <1>  mov al,ePutConsoleString
  5222 000000A4 CD30                <1>  int _svc
  5223                                  
  5224 000000A6 BA28080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  5225 000000AB BB78080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  5226 000000B0 E8BB000000                                      call    ConTakeToken                                    ;handle console input
  5227 000000B5 BA78080000                                      mov     edx,wzConsoleToken                              ;token buffer
  5228 000000BA E8E6000000                                      call    ConDetermineCommand                             ;determine command number
  5229 000000BF 83F81A                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5230 000000C2 720B                                            jb      .20                                             ;yes, branch
  5231                                  
  5232                                                          putConsoleString czUnknownCommand                       ;display error message
  5232 000000C4 BA[28090000]        <1>  mov edx,%1
  5232 000000C9 B00C                <1>  mov al,ePutConsoleString
  5232 000000CB CD30                <1>  int _svc
  5233                                  
  5234 000000CD EBAF                                            jmp     .10                                             ;next command
  5235 000000CF C1E002                  .20                     shl     eax,2                                           ;index into jump table
  5236 000000D2 BA[ED060000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  5237 000000D7 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5238 000000DA FFD0                                            call    eax                                             ;call command handler
  5239 000000DC EBA0                                            jmp     .10                                             ;next command
  5240                                  ;-----------------------------------------------------------------------------------------------------------------------
  5241                                  ;
  5242                                  ;       Routine:        ConInitializeData
  5243                                  ;
  5244                                  ;       Description:    This routine initializes console task variables.
  5245                                  ;
  5246                                  ;-----------------------------------------------------------------------------------------------------------------------
  5247 000000DE 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  5248 000000DF 57                                              push    edi                                             ;
  5249 000000E0 06                                              push    es                                              ;
  5250                                  ;
  5251                                  ;       Initialize console work areas.
  5252                                  ;
  5253 000000E1 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  5254 000000E3 07                                              pop     es                                              ;... into extra segment register
  5255 000000E4 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  5256 000000E9 30C0                                            xor     al,al                                           ;initialization value
  5257 000000EB B97D010000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  5258 000000F0 FC                                              cld                                                     ;forward strings
  5259 000000F1 F3AA                                            rep     stosb                                           ;initialize data
  5260                                  ;
  5261                                  ;       Initialize heap size
  5262                                  ;
  5263 000000F3 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5264 000000F8 A304080000                                      mov     [wdConsoleHeapSize],eax                         ;set heap size
  5265                                  ;
  5266                                  ;       Initialize MEMROOT structure
  5267                                  ;
  5268 000000FD BF39090000                                      mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5269 00000102 B800000100                                      mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5270 00000107 31C9                                            xor     ecx,ecx                                         ;zero register
  5271 00000109 B104                                            mov     cl,4                                            ;count
  5272 0000010B F3AB                                            rep     stosd                                           ;store first/last contig and free addrs
  5273 0000010D 31C0                                            xor     eax,eax                                         ;zero register
  5274 0000010F AB                                              stosd                                                   ;zero first task block
  5275 00000110 AB                                              stosd                                                   ;zero last task block
  5276                                  ;
  5277                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5278                                  ;
  5279 00000111 BF00000100                                      mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5280 00000116 B846524545                                      mov     eax,EMEMFREECODE                                ;free memory signature
  5281 0000011B AB                                              stosd                                                   ;store signature
  5282 0000011C B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5283 00000121 AB                                              stosd                                                   ;store block size
  5284 00000122 31C9                                            xor     ecx,ecx                                         ;zero register
  5285 00000124 B106                                            mov     cl,6                                            ;count
  5286 00000126 31C0                                            xor     eax,eax                                         ;zero register
  5287 00000128 F3AB                                            rep     stosd                                           ;zero owner, reserved, pointers
  5288                                  ;
  5289                                  ;       Read memory sizes from ROM
  5290                                  ;
  5291                                                          getROMMemSize                                           ;get ROM memory size
  5291 0000012A B008                <1>  mov al,eGetROMMemSize
  5291 0000012C CD30                <1>  int _svc
  5292 0000012E A310080000                                      mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5293 00000133 89C1                                            mov     ecx,eax                                         ;integer param
  5294 00000135 BA23090000                                      mov     edx,wzROMMemSize                                ;output buffer param
  5295 0000013A B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5296                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5296 0000013C B01A                <1>  mov al,eUnsignedToDecimalString
  5296 0000013E CD30                <1>  int _svc
  5297                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5297 00000140 B005                <1>  mov al,eGetBaseMemSize
  5297 00000142 CD30                <1>  int _svc
  5298 00000144 A308080000                                      mov     [wdBaseMemSize],eax                             ;save base RAM count
  5299 00000149 89C1                                            mov     ecx,eax                                         ;integer param
  5300 0000014B BA18090000                                      mov     edx,wzBaseMemSize                               ;output buffer param
  5301 00000150 B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5302                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5302 00000152 B01A                <1>  mov al,eUnsignedToDecimalString
  5302 00000154 CD30                <1>  int _svc
  5303                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5303 00000156 B007                <1>  mov al,eGetExtendedMemSize
  5303 00000158 CD30                <1>  int _svc
  5304 0000015A A30C080000                                      mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5305 0000015F 89C1                                            mov     ecx,eax                                         ;integer param
  5306 00000161 BA2E090000                                      mov     edx,wzExtendedMemSize                           ;output buffer param
  5307 00000166 B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5308                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5308 00000168 B01A                <1>  mov al,eUnsignedToDecimalString
  5308 0000016A CD30                <1>  int _svc
  5309                                  ;
  5310                                  ;       Restore and return.
  5311                                  ;
  5312 0000016C 07                                              pop     es                                              ;restore non-volatile regs
  5313 0000016D 5F                                              pop     edi                                             ;
  5314 0000016E 59                                              pop     ecx                                             ;
  5315 0000016F C3                                              ret                                                     ;return
  5316                                  ;-----------------------------------------------------------------------------------------------------------------------
  5317                                  ;
  5318                                  ;       Routine:        ConTakeToken
  5319                                  ;
  5320                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5321                                  ;
  5322                                  ;       In:             DS:EDX  source buffer address
  5323                                  ;                       DS:EBX  target buffer address
  5324                                  ;
  5325                                  ;       Out:            DS:EDX  source buffer address
  5326                                  ;                       DS:EBX  target buffer address
  5327                                  ;
  5328                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5329                                  ;
  5330                                  ;-----------------------------------------------------------------------------------------------------------------------
  5331 00000170 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  5332 00000171 57                                              push    edi                                             ;
  5333 00000172 06                                              push    es                                              ;
  5334 00000173 1E                                              push    ds                                              ;load data segment selector ...
  5335 00000174 07                                              pop     es                                              ;... into extra segment reg
  5336 00000175 89D6                                            mov     esi,edx                                         ;source buffer address
  5337 00000177 89DF                                            mov     edi,ebx                                         ;target buffer address
  5338 00000179 C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5339 0000017C FC                                              cld                                                     ;forward strings
  5340 0000017D AC                      .10                     lodsb                                                   ;load byte
  5341 0000017E 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5342 00000180 74FB                                            je      .10                                             ;yes, continue
  5343 00000182 84C0                                            test    al,al                                           ;end of line?
  5344 00000184 7410                                            jz      .40                                             ;yes, branch
  5345 00000186 AA                      .20                     stosb                                                   ;store byte
  5346 00000187 AC                                              lodsb                                                   ;load byte
  5347 00000188 84C0                                            test    al,al                                           ;end of line?
  5348 0000018A 740A                                            jz      .40                                             ;no, continue
  5349 0000018C 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5350 0000018E 75F6                                            jne     .20                                             ;no, continue
  5351 00000190 AC                      .30                     lodsb                                                   ;load byte
  5352 00000191 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5353 00000193 74FB                                            je      .30                                             ;yes, continue
  5354 00000195 4E                                              dec     esi                                             ;pre-position
  5355 00000196 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5356 00000199 89D7                                            mov     edi,edx                                         ;source buffer address
  5357 0000019B AC                      .50                     lodsb                                                   ;remaining byte
  5358 0000019C AA                                              stosb                                                   ;move to front of buffer
  5359 0000019D 84C0                                            test    al,al                                           ;end of line?
  5360 0000019F 75FA                                            jnz     .50                                             ;no, continue
  5361 000001A1 07                                              pop     es                                              ;restore non-volatile regs
  5362 000001A2 5F                                              pop     edi                                             ;
  5363 000001A3 5E                                              pop     esi                                             ;
  5364 000001A4 C3                                              ret                                                     ;return
  5365                                  ;-----------------------------------------------------------------------------------------------------------------------
  5366                                  ;
  5367                                  ;       Routine:        ConDetermineCommand
  5368                                  ;
  5369                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5370                                  ;
  5371                                  ;       input:          DS:EDX  command address
  5372                                  ;
  5373                                  ;       output:         EAX     >=0     = command nbr
  5374                                  ;                               0       = unknown command
  5375                                  ;
  5376                                  ;-----------------------------------------------------------------------------------------------------------------------
  5377 000001A5 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5378 000001A6 51                                              push    ecx                                             ;
  5379 000001A7 56                                              push    esi                                             ;
  5380 000001A8 57                                              push    edi                                             ;
  5381                                  
  5382                                                          upperCaseString                                         ;upper-case string at EDX
  5382 000001A9 B01C                <1>  mov al,eUpperCaseString
  5382 000001AB CD30                <1>  int _svc
  5383                                  
  5384 000001AD BE[55070000]                                    mov     esi,tConCmdTbl                                  ;commands table
  5385 000001B2 31FF                                            xor     edi,edi                                         ;intialize command number
  5386 000001B4 FC                                              cld                                                     ;forward strings
  5387 000001B5 AC                      .10                     lodsb                                                   ;command length
  5388 000001B6 0FB6C8                                          movzx   ecx,al                                          ;command length
  5389 000001B9 E30D                                            jecxz   .20                                             ;branch if end of table
  5390 000001BB 89F3                                            mov     ebx,esi                                         ;table entry address
  5391 000001BD 01CE                                            add     esi,ecx                                         ;next table entry address
  5392                                  
  5393                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5393 000001BF B002                <1>  mov al,eCompareMemory
  5393 000001C1 CD30                <1>  int _svc
  5394                                  
  5395 000001C3 E303                                            jecxz   .20                                             ;branch if equal
  5396 000001C5 47                                              inc     edi                                             ;increment command nbr
  5397 000001C6 EBED                                            jmp     .10                                             ;repeat
  5398 000001C8 89F8                    .20                     mov     eax,edi                                         ;command number
  5399 000001CA 5F                                              pop     edi                                             ;restore non-volatile regs
  5400 000001CB 5E                                              pop     esi                                             ;
  5401 000001CC 59                                              pop     ecx                                             ;
  5402 000001CD 5B                                              pop     ebx                                             ;
  5403 000001CE C3                                              ret                                                     ;return
  5404                                  ;-----------------------------------------------------------------------------------------------------------------------
  5405                                  ;
  5406                                  ;       Routine:        ConClear
  5407                                  ;
  5408                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5409                                  ;
  5410                                  ;-----------------------------------------------------------------------------------------------------------------------
  5411                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5411                              <1> ConClear :
  5411 000001CF B001                <1>  mov al,eClearConsoleScreen
  5411 000001D1 CD30                <1>  int _svc
  5412 000001D3 C3                                              ret                                                     ;return
  5413                                  ;-----------------------------------------------------------------------------------------------------------------------
  5414                                  ;
  5415                                  ;       Routine:        ConDate
  5416                                  ;
  5417                                  ;       Description:    This routine handles the DATE command.
  5418                                  ;
  5419                                  ;-----------------------------------------------------------------------------------------------------------------------
  5420                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5420                              <1> ConDate :
  5420 000001D4 BB51090000          <1>  mov ebx,%1
  5420 000001D9 B018                <1>  mov al,eReadRealTimeClock
  5420 000001DB CD30                <1>  int _svc
  5421                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5421 000001DD BB51090000          <1>  mov ebx,%1
  5421 000001E2 BAC8080000          <1>  mov edx,%2
  5421 000001E7 B00D                <1>  mov al,ePutDateString
  5421 000001E9 CD30                <1>  int _svc
  5422                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5422 000001EB BAC8080000          <1>  mov edx,%1
  5422 000001F0 B00C                <1>  mov al,ePutConsoleString
  5422 000001F2 CD30                <1>  int _svc
  5423                                                          putConsoleString  czNewLine                             ;write newline to console
  5423 000001F4 BA[62080000]        <1>  mov edx,%1
  5423 000001F9 B00C                <1>  mov al,ePutConsoleString
  5423 000001FB CD30                <1>  int _svc
  5424 000001FD C3                                              ret                                                     ;return
  5425                                  ;-----------------------------------------------------------------------------------------------------------------------
  5426                                  ;
  5427                                  ;       Routine:        ConDay
  5428                                  ;
  5429                                  ;       Description:    This routine handles the DAY command.
  5430                                  ;
  5431                                  ;-----------------------------------------------------------------------------------------------------------------------
  5432                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5432                              <1> ConDay :
  5432 000001FE BB51090000          <1>  mov ebx,%1
  5432 00000203 B018                <1>  mov al,eReadRealTimeClock
  5432 00000205 CD30                <1>  int _svc
  5433                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5433 00000207 BB51090000          <1>  mov ebx,%1
  5433 0000020C BAC8080000          <1>  mov edx,%2
  5433 00000211 B00E                <1>  mov al,ePutDayString
  5433 00000213 CD30                <1>  int _svc
  5434                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5434 00000215 BAC8080000          <1>  mov edx,%1
  5434 0000021A B00C                <1>  mov al,ePutConsoleString
  5434 0000021C CD30                <1>  int _svc
  5435                                                          putConsoleString  czNewLine                             ;write newline to console
  5435 0000021E BA[62080000]        <1>  mov edx,%1
  5435 00000223 B00C                <1>  mov al,ePutConsoleString
  5435 00000225 CD30                <1>  int _svc
  5436 00000227 C3                                              ret                                                     ;return
  5437                                  ;-----------------------------------------------------------------------------------------------------------------------
  5438                                  ;
  5439                                  ;       Routine:        ConExit
  5440                                  ;
  5441                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5442                                  ;
  5443                                  ;-----------------------------------------------------------------------------------------------------------------------
  5444                                  ConExit                 resetSystem                                             ;issue system reset
  5444                              <1> ConExit :
  5444 00000228 B019                <1>  mov al,eResetSystem
  5444 0000022A CD30                <1>  int _svc
  5445 0000022C C3                                              ret                                                     ;return
  5446                                  ;-----------------------------------------------------------------------------------------------------------------------
  5447                                  ;
  5448                                  ;       Routine:        ConFree
  5449                                  ;
  5450                                  ;       Description:    This routine handles the FREE command.
  5451                                  ;
  5452                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5453                                  ;
  5454                                  ;-----------------------------------------------------------------------------------------------------------------------
  5455 0000022D 53                      ConFree                 push    ebx                                             ;save non-volatile regs
  5456 0000022E 51                                              push    ecx                                             ;
  5457 0000022F 56                                              push    esi                                             ;
  5458 00000230 57                                              push    edi                                             ;
  5459                                  ;
  5460                                  ;       Get address parameter
  5461                                  ;
  5462 00000231 BA28080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5463 00000236 BB78080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5464 0000023B E830FFFFFF                                      call    ConTakeToken                                    ;take first param as token
  5465                                  ;
  5466                                  ;       Convert input parameter from hexadecimal string to binary
  5467                                  ;
  5468 00000240 803D7808000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5469 00000247 7421                                            je      .10                                             ;no, branch
  5470 00000249 BA78080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5471                                  
  5472                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5472 0000024E B009                <1>  mov al,eHexadecimalToUnsigned
  5472 00000250 CD30                <1>  int _svc
  5473                                  
  5474 00000252 85C0                                            test    eax,eax                                         ;valid parameter?
  5475 00000254 7414                                            jz      .10                                             ;no, branch
  5476                                  ;
  5477                                  ;       Free memory block
  5478                                  ;
  5479                                                          freeMemory eax                                          ;free memory
  5479 00000256 89C2                <1>  mov edx,%1
  5479 00000258 B004                <1>  mov al,eFreeMemory
  5479 0000025A CD30                <1>  int _svc
  5480                                  
  5481 0000025C 83F8FF                                          cmp     eax,-1                                          ;memory freed?
  5482 0000025F 7409                                            je      .10                                             ;no, branch
  5483                                  ;
  5484                                  ;       Indicate memory freed
  5485                                  ;
  5486                                                          putConsoleString czOK                                   ;indicate success
  5486 00000261 BA[65080000]        <1>  mov edx,%1
  5486 00000266 B00C                <1>  mov al,ePutConsoleString
  5486 00000268 CD30                <1>  int _svc
  5487                                  ;
  5488                                  ;       Restore and return
  5489                                  ;
  5490 0000026A 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5491 0000026B 5E                                              pop     esi                                             ;
  5492 0000026C 59                                              pop     ecx                                             ;
  5493 0000026D 5B                                              pop     ebx                                             ;
  5494 0000026E C3                                              ret                                                     ;return
  5495                                  ;-----------------------------------------------------------------------------------------------------------------------
  5496                                  ;
  5497                                  ;       Routine:        ConHour
  5498                                  ;
  5499                                  ;       Description:    This routine Handles the HOUR command.
  5500                                  ;
  5501                                  ;-----------------------------------------------------------------------------------------------------------------------
  5502                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5502                              <1> ConHour :
  5502 0000026F BB51090000          <1>  mov ebx,%1
  5502 00000274 B018                <1>  mov al,eReadRealTimeClock
  5502 00000276 CD30                <1>  int _svc
  5503                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5503 00000278 BB51090000          <1>  mov ebx,%1
  5503 0000027D BAC8080000          <1>  mov edx,%2
  5503 00000282 B00F                <1>  mov al,ePutHourString
  5503 00000284 CD30                <1>  int _svc
  5504                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5504 00000286 BAC8080000          <1>  mov edx,%1
  5504 0000028B B00C                <1>  mov al,ePutConsoleString
  5504 0000028D CD30                <1>  int _svc
  5505                                                          putConsoleString  czNewLine                             ;write newline to console
  5505 0000028F BA[62080000]        <1>  mov edx,%1
  5505 00000294 B00C                <1>  mov al,ePutConsoleString
  5505 00000296 CD30                <1>  int _svc
  5506 00000298 C3                                              ret                                                     ;return
  5507                                  ;-----------------------------------------------------------------------------------------------------------------------
  5508                                  ;
  5509                                  ;       Routine:        ConInt6
  5510                                  ;
  5511                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5512                                  ;
  5513                                  ;-----------------------------------------------------------------------------------------------------------------------
  5514 00000299 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  5515 0000029B C3                                              ret                                                     ;return (not executed)
  5516                                  ;-----------------------------------------------------------------------------------------------------------------------
  5517                                  ;
  5518                                  ;       Routine:        ConMalloc
  5519                                  ;
  5520                                  ;       Description:    This routine handles the MALLOC command.
  5521                                  ;
  5522                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5523                                  ;
  5524                                  ;-----------------------------------------------------------------------------------------------------------------------
  5525 0000029C 53                      ConMalloc               push    ebx                                             ;save non-volatile regs
  5526 0000029D 51                                              push    ecx                                             ;
  5527 0000029E 56                                              push    esi                                             ;
  5528 0000029F 57                                              push    edi                                             ;
  5529                                  ;
  5530                                  ;       Get size parameter
  5531                                  ;
  5532 000002A0 BA28080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5533 000002A5 BB78080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5534 000002AA E8C1FEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5535                                  ;
  5536                                  ;       Convert input parameter from decimal string to binary
  5537                                  ;
  5538 000002AF 803D7808000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5539 000002B6 7434                                            je      .10                                             ;no, branch
  5540 000002B8 BA78080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5541                                  
  5542                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5542 000002BD B003                <1>  mov al,eDecimalToUnsigned
  5542 000002BF CD30                <1>  int _svc
  5543                                  
  5544 000002C1 85C0                                            test    eax,eax                                         ;valid parameter?
  5545 000002C3 7427                                            jz      .10                                             ;no, branch
  5546                                  ;
  5547                                  ;       Allocate memory block
  5548                                  ;
  5549                                                          allocateMemory eax                                      ;allocate memory
  5549 000002C5 89C1                <1>  mov ecx,%1
  5549 000002C7 B000                <1>  mov al,eAllocateMemory
  5549 000002C9 CD30                <1>  int _svc
  5550                                  
  5551 000002CB 85C0                                            test    eax,eax                                         ;memory allocated?
  5552 000002CD 741D                                            jz      .10                                             ;no, branch
  5553                                  ;
  5554                                  ;       Report allocated memory block address
  5555                                  ;
  5556 000002CF BAC8080000                                      mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5557 000002D4 89C1                                            mov     ecx,eax                                         ;memory address
  5558                                  
  5559                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5559 000002D6 B01B                <1>  mov al,eUnsignedToHexadecimal
  5559 000002D8 CD30                <1>  int _svc
  5560                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5560 000002DA BAC8080000          <1>  mov edx,%1
  5560 000002DF B00C                <1>  mov al,ePutConsoleString
  5560 000002E1 CD30                <1>  int _svc
  5561                                                          putConsoleString czNewLine                              ;display new line
  5561 000002E3 BA[62080000]        <1>  mov edx,%1
  5561 000002E8 B00C                <1>  mov al,ePutConsoleString
  5561 000002EA CD30                <1>  int _svc
  5562                                  
  5563 000002EC 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5564 000002ED 5E                                              pop     esi                                             ;
  5565 000002EE 59                                              pop     ecx                                             ;
  5566 000002EF 5B                                              pop     ebx                                             ;
  5567 000002F0 C3                                              ret                                                     ;return
  5568                                  ;-----------------------------------------------------------------------------------------------------------------------
  5569                                  ;
  5570                                  ;       Routine:        ConMem
  5571                                  ;
  5572                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5573                                  ;
  5574                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5575                                  ;
  5576                                  ;-----------------------------------------------------------------------------------------------------------------------
  5577 000002F1 53                      ConMem                  push    ebx                                             ;save non-volatile regs
  5578 000002F2 56                                              push    esi                                             ;
  5579 000002F3 57                                              push    edi                                             ;
  5580                                  ;
  5581                                  ;       Update the source address if a parameter is given.
  5582                                  ;
  5583 000002F4 BA28080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5584 000002F9 BB78080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5585 000002FE E86DFEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5586 00000303 803D7808000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5587 0000030A 740E                                            je      .10                                             ;no, branch
  5588 0000030C BA78080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5589                                  
  5590                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5590 00000311 B009                <1>  mov al,eHexadecimalToUnsigned
  5590 00000313 CD30                <1>  int _svc
  5591                                  
  5592 00000315 A300080000                                      mov     [wdConsoleMemBase],eax                          ;save console memory address
  5593                                  ;
  5594                                  ;       Setup source address and row count.
  5595                                  ;
  5596 0000031A 8B3500080000            .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5597 00000320 31C9                                            xor     ecx,ecx                                         ;zero register
  5598 00000322 B110                                            mov     cl,16                                           ;row count
  5599                                  ;
  5600                                  ;       Start the row with the source address in hexadecimal.
  5601                                  ;
  5602 00000324 51                      .20                     push    ecx                                             ;save remaining rows
  5603 00000325 BFC8080000                                      mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5604 0000032A 89FA                                            mov     edx,edi                                         ;output buffer address
  5605 0000032C 89F1                                            mov     ecx,esi                                         ;console memory address
  5606                                  
  5607                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5607 0000032E B01B                <1>  mov al,eUnsignedToHexadecimal
  5607 00000330 CD30                <1>  int _svc
  5608                                  
  5609 00000332 83C708                                          add     edi,8                                           ;end of memory addr hexnum
  5610 00000335 B020                                            mov     al,' '                                          ;ascii space
  5611 00000337 AA                                              stosb                                                   ;store delimiter
  5612                                  ;
  5613                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  5614                                  ;
  5615 00000338 31C9                                            xor     ecx,ecx                                         ;zero register
  5616 0000033A B110                                            mov     cl,16                                           ;loop count
  5617 0000033C 51                      .30                     push    ecx                                             ;save loop count
  5618 0000033D AC                                              lodsb                                                   ;memory byte
  5619 0000033E 88C4                                            mov     ah,al                                           ;memory byte
  5620 00000340 C0E804                                          shr     al,4                                            ;high-order in bits 3-0
  5621 00000343 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  5622 00000345 3C3A                                            cmp     al,3ah                                          ;numeric range?
  5623 00000347 7202                                            jb      .40                                             ;yes, skip ahead
  5624 00000349 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  5625 0000034B AA                      .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5626 0000034C 88E0                                            mov     al,ah                                           ;low-order in bits 3-0
  5627 0000034E 240F                                            and     al,0fh                                          ;mask out high-order bits
  5628 00000350 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  5629 00000352 3C3A                                            cmp     al,3ah                                          ;numeric range?
  5630 00000354 7202                                            jb      .50                                             ;yes, skip ahead
  5631 00000356 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  5632 00000358 AA                      .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5633 00000359 B020                                            mov     al,' '                                          ;ascii space
  5634 0000035B AA                                              stosb                                                   ;store ascii space delimiter
  5635 0000035C 59                                              pop     ecx                                             ;loop count
  5636 0000035D E2DD                                            loop    .30                                             ;next
  5637                                  ;
  5638                                  ;       Output printable ASCII character section for the row.
  5639                                  ;
  5640 0000035F 83EE10                                          sub     esi,16                                          ;reset source pointer
  5641 00000362 B110                                            mov     cl,16                                           ;loop count
  5642 00000364 AC                      .60                     lodsb                                                   ;source byte
  5643 00000365 3C20                                            cmp     al,32                                           ;printable? (low-range test)
  5644 00000367 7204                                            jb      .70                                             ;no, skip ahead
  5645 00000369 3C80                                            cmp     al,128                                          ;printable? (high-range test)
  5646 0000036B 7202                                            jb      .80                                             ;yes, skip ahead
  5647 0000036D B020                    .70                     mov     al,' '                                          ;display space instead of printable
  5648 0000036F AA                      .80                     stosb                                                   ;store printable ascii byte
  5649 00000370 E2F2                                            loop    .60                                             ;next source byte
  5650 00000372 30C0                                            xor     al,al                                           ;nul-terminator
  5651 00000374 AA                                              stosb                                                   ;terminate output line
  5652                                  ;
  5653                                  ;       Display constructed output buffer and newline.
  5654                                  ;
  5655                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5655 00000375 BAC8080000          <1>  mov edx,%1
  5655 0000037A B00C                <1>  mov al,ePutConsoleString
  5655 0000037C CD30                <1>  int _svc
  5656                                                          putConsoleString czNewLine                              ;display new line
  5656 0000037E BA[62080000]        <1>  mov edx,%1
  5656 00000383 B00C                <1>  mov al,ePutConsoleString
  5656 00000385 CD30                <1>  int _svc
  5657                                  ;
  5658                                  ;       Repeat until all lines displayed and preserve source address.
  5659                                  ;
  5660 00000387 59                                              pop     ecx                                             ;remaining rows
  5661 00000388 E29A                                            loop    .20                                             ;next row
  5662 0000038A 893500080000                                    mov     [wdConsoleMemBase],esi                          ;update console memory address
  5663 00000390 5F                                              pop     edi                                             ;restore regs
  5664 00000391 5E                                              pop     esi                                             ;
  5665 00000392 5B                                              pop     ebx                                             ;
  5666 00000393 C3                                              ret                                                     ;return
  5667                                  ;-----------------------------------------------------------------------------------------------------------------------
  5668                                  ;
  5669                                  ;       Routine:        ConMinute
  5670                                  ;
  5671                                  ;       Description:    This routine Handles the MINUTE command.
  5672                                  ;
  5673                                  ;-----------------------------------------------------------------------------------------------------------------------
  5674                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5674                              <1> ConMinute :
  5674 00000394 BB51090000          <1>  mov ebx,%1
  5674 00000399 B018                <1>  mov al,eReadRealTimeClock
  5674 0000039B CD30                <1>  int _svc
  5675                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5675 0000039D BB51090000          <1>  mov ebx,%1
  5675 000003A2 BAC8080000          <1>  mov edx,%2
  5675 000003A7 B010                <1>  mov al,ePutMinuteString
  5675 000003A9 CD30                <1>  int _svc
  5676                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5676 000003AB BAC8080000          <1>  mov edx,%1
  5676 000003B0 B00C                <1>  mov al,ePutConsoleString
  5676 000003B2 CD30                <1>  int _svc
  5677                                                          putConsoleString  czNewLine                             ;write newline to console
  5677 000003B4 BA[62080000]        <1>  mov edx,%1
  5677 000003B9 B00C                <1>  mov al,ePutConsoleString
  5677 000003BB CD30                <1>  int _svc
  5678 000003BD C3                                              ret                                                     ;return
  5679                                  ;-----------------------------------------------------------------------------------------------------------------------
  5680                                  ;
  5681                                  ;       Routine:        ConMonth
  5682                                  ;
  5683                                  ;       Description:    This routine Handles the MONTH command.
  5684                                  ;
  5685                                  ;-----------------------------------------------------------------------------------------------------------------------
  5686                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5686                              <1> ConMonth :
  5686 000003BE BB51090000          <1>  mov ebx,%1
  5686 000003C3 B018                <1>  mov al,eReadRealTimeClock
  5686 000003C5 CD30                <1>  int _svc
  5687                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5687 000003C7 BB51090000          <1>  mov ebx,%1
  5687 000003CC BAC8080000          <1>  mov edx,%2
  5687 000003D1 B011                <1>  mov al,ePutMonthString
  5687 000003D3 CD30                <1>  int _svc
  5688                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5688 000003D5 BAC8080000          <1>  mov edx,%1
  5688 000003DA B00C                <1>  mov al,ePutConsoleString
  5688 000003DC CD30                <1>  int _svc
  5689                                                          putConsoleString  czNewLine                             ;write newline to console
  5689 000003DE BA[62080000]        <1>  mov edx,%1
  5689 000003E3 B00C                <1>  mov al,ePutConsoleString
  5689 000003E5 CD30                <1>  int _svc
  5690 000003E7 C3                                              ret                                                     ;return
  5691                                  ;-----------------------------------------------------------------------------------------------------------------------
  5692                                  ;
  5693                                  ;       Routine:        ConMonthName
  5694                                  ;
  5695                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5696                                  ;
  5697                                  ;-----------------------------------------------------------------------------------------------------------------------
  5698                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5698                              <1> ConMonthName :
  5698 000003E8 BB51090000          <1>  mov ebx,%1
  5698 000003ED B018                <1>  mov al,eReadRealTimeClock
  5698 000003EF CD30                <1>  int _svc
  5699                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5699 000003F1 BB51090000          <1>  mov ebx,%1
  5699 000003F6 BAC8080000          <1>  mov edx,%2
  5699 000003FB B012                <1>  mov al,ePutMonthNameString
  5699 000003FD CD30                <1>  int _svc
  5700                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5700 000003FF BAC8080000          <1>  mov edx,%1
  5700 00000404 B00C                <1>  mov al,ePutConsoleString
  5700 00000406 CD30                <1>  int _svc
  5701                                                          putConsoleString   czNewLine                            ;write newline to console
  5701 00000408 BA[62080000]        <1>  mov edx,%1
  5701 0000040D B00C                <1>  mov al,ePutConsoleString
  5701 0000040F CD30                <1>  int _svc
  5702 00000411 C3                                              ret                                                     ;return
  5703                                  ;-----------------------------------------------------------------------------------------------------------------------
  5704                                  ;
  5705                                  ;       Routine:        ConPCIProbe
  5706                                  ;
  5707                                  ;       Description:    This routine handles the PCIProbe command.
  5708                                  ;
  5709                                  ;-----------------------------------------------------------------------------------------------------------------------
  5710 00000412 53                      ConPCIProbe             push    ebx                                             ;save non-volatile regs
  5711                                  ;
  5712                                  ;       Setup addressability.
  5713                                  ;
  5714 00000413 BB59090000                                      mov     ebx,wsConsolePCI                                ;PCI structure address
  5715                                  ;
  5716                                  ;       Initialize variables.
  5717                                  ;
  5718 00000418 31C0                                            xor     eax,eax                                         ;zero register
  5719 0000041A 8903                                            mov     [ebx+PCI.configdata],eax                        ;initialize config-data
  5720 0000041C 894304                                          mov     [ebx+PCI.selector],eax                          ;initialize selector
  5721 0000041F 884308                                          mov     [ebx+PCI.bus],al                                ;initialize bus
  5722 00000422 884309                                          mov     [ebx+PCI.device],al                             ;initialize device
  5723 00000425 88430A                                          mov     [ebx+PCI.function],al                           ;initialize function
  5724 00000428 88430B                                          mov     [ebx+PCI.register],al                           ;initialize register
  5725 0000042B 89430C                                          mov     [ebx+PCI.bar0],eax                              ;initialize base address reg 0
  5726 0000042E 894310                                          mov     [ebx+PCI.bar1],eax                              ;initialize base address reg 1
  5727 00000431 894314                                          mov     [ebx+PCI.bar2],eax                              ;initialize base address reg 2
  5728 00000434 894318                                          mov     [ebx+PCI.bar3],eax                              ;initialize base address reg 3
  5729 00000437 89431C                                          mov     [ebx+PCI.bar4],eax                              ;initialize base address reg 4
  5730 0000043A 894320                                          mov     [ebx+PCI.bar5],eax                              ;initialize base address reg 5
  5731                                  ;
  5732                                  ;       Construct PCI selector.
  5733                                  ;
  5734 0000043D 8A6308                  .10                     mov     ah,[ebx+PCI.bus]                                ;AH = bbbb bbbb
  5735 00000440 8A5309                                          mov     dl,[ebx+PCI.device]                             ;DL = ???d dddd
  5736 00000443 C0E203                                          shl     dl,3                                            ;DL = dddd d000
  5737 00000446 8A430A                                          mov     al,[ebx+PCI.function]                           ;AL = ???? ?fff
  5738 00000449 2407                                            and     al,007h                                         ;AL = 0000 0fff
  5739 0000044B 08D0                                            or      al,dl                                           ;AL = dddd dfff
  5740 0000044D 0FB7C0                                          movzx   eax,ax                                          ;0000 0000 0000 0000 bbbb bbbb dddd dfff
  5741 00000450 C1E008                                          shl     eax,8                                           ;0000 0000 bbbb bbbb dddd dfff 0000 0000
  5742 00000453 0D00000080                                      or      eax,80000000h                                   ;1000 0000 bbbb bbbb dddd dfff 0000 0000
  5743 00000458 894304                                          mov     [ebx+PCI.selector],eax                          ;save selector
  5744                                  ;
  5745                                  ;       Read PCI data register.
  5746                                  ;
  5747 0000045B 66BAF80C                                        mov     dx,EPCIPORTCONFIGADDR                           ;PCI config address port
  5748 0000045F EF                                              out     dx,eax                                          ;select device
  5749 00000460 66BAFC0C                                        mov     dx,EPCIPORTCONFIGDATA                           ;PCI config data port
  5750 00000464 ED                                              in      eax,dx                                          ;read register data
  5751 00000465 8903                                            mov     [ebx+PCI.configdata],eax                        ;save config data
  5752                                  ;
  5753                                  ;       Interpret PCI data value and display finding.
  5754                                  ;
  5755 00000467 83F8FF                                          cmp     eax,0ffffffffh                                  ;not defined?
  5756 0000046A 7447                                            je      .20                                             ;yes, branch
  5757 0000046C BA78080000                                      mov     edx,wzConsoleToken                              ;output buffer
  5758 00000471 E86A000000                                      call    ConBuildPCIIdent                                ;build PCI bus, device, function ident
  5759                                  
  5760                                                          putConsoleString wzConsoleToken                         ;display bus as decimal
  5760 00000476 BA78080000          <1>  mov edx,%1
  5760 0000047B B00C                <1>  mov al,ePutConsoleString
  5760 0000047D CD30                <1>  int _svc
  5761                                  
  5762 0000047F E89A000000                                      call    ConInterpretPCIData                             ;update flags based on data
  5763                                  
  5764                                                          putConsoleString czSpace
  5764 00000484 BA[08090000]        <1>  mov edx,%1
  5764 00000489 B00C                <1>  mov al,ePutConsoleString
  5764 0000048B CD30                <1>  int _svc
  5765                                                          putConsoleString [wdConsolePCIVendorStr]
  5765 0000048D 8B1514080000        <1>  mov edx,%1
  5765 00000493 B00C                <1>  mov al,ePutConsoleString
  5765 00000495 CD30                <1>  int _svc
  5766                                                          putConsoleString czSpace
  5766 00000497 BA[08090000]        <1>  mov edx,%1
  5766 0000049C B00C                <1>  mov al,ePutConsoleString
  5766 0000049E CD30                <1>  int _svc
  5767                                                          putConsoleString [wdConsolePCIChipStr]
  5767 000004A0 8B1518080000        <1>  mov edx,%1
  5767 000004A6 B00C                <1>  mov al,ePutConsoleString
  5767 000004A8 CD30                <1>  int _svc
  5768                                                          putConsoleString czNewLine                              ;display new line
  5768 000004AA BA[62080000]        <1>  mov edx,%1
  5768 000004AF B00C                <1>  mov al,ePutConsoleString
  5768 000004B1 CD30                <1>  int _svc
  5769                                  ;
  5770                                  ;       Step to next function, device, bus.
  5771                                  ;
  5772 000004B3 FE430A                  .20                     inc     byte [ebx+PCI.function]                         ;next function
  5773 000004B6 807B0A08                                        cmp     byte [ebx+PCI.function],8                       ;at limit?
  5774 000004BA 7281                                            jb      .10                                             ;no, continue
  5775 000004BC C6430A00                                        mov     byte [ebx+PCI.function],0                       ;zero function
  5776 000004C0 FE4309                                          inc     byte [ebx+PCI.device]                           ;next device
  5777 000004C3 807B0920                                        cmp     byte [ebx+PCI.device],32                        ;at limit?
  5778 000004C7 0F8270FFFFFF                                    jb      .10                                             ;no, continue
  5779 000004CD C6430900                                        mov     byte [ebx+PCI.device],0                         ;zero device
  5780 000004D1 FE4308                                          inc     byte [ebx+PCI.bus]                              ;next bus
  5781 000004D4 807B0808                                        cmp     byte [ebx+PCI.bus],8                            ;at limit?
  5782 000004D8 0F825FFFFFFF                                    jb      .10                                             ;no, continue
  5783                                  ;
  5784                                  ;       Restore and return.
  5785                                  ;
  5786 000004DE 5B                                              pop     ebx                                             ;restore non-volatile regs
  5787 000004DF C3                                              ret                                                     ;return
  5788                                  ;-----------------------------------------------------------------------------------------------------------------------
  5789                                  ;
  5790                                  ;       Routine:        ConBuildPCIIdent
  5791                                  ;
  5792                                  ;       Description:    This routine constructs a PCI identification string from the current PCI Bus, Device, and
  5793                                  ;                       Function code values.
  5794                                  ;
  5795                                  ;       In:             DS:EBX  PCI structure address
  5796                                  ;                       DS:EDX  output buffer address
  5797                                  ;
  5798                                  ;-----------------------------------------------------------------------------------------------------------------------
  5799 000004E0 57                      ConBuildPCIIdent        push    edi                                             ;save non-volatile regs
  5800 000004E1 89D7                                            mov     edi,edx                                         ;output buffer address
  5801 000004E3 8A4308                                          mov     al,[ebx+PCI.bus]                                ;current PCI bus (0-255)
  5802 000004E6 30E4                                            xor     ah,ah                                           ;zero high-order dividend
  5803 000004E8 B164                                            mov     cl,100                                          ;divisor (10^2)
  5804 000004EA F6F1                                            div     cl                                              ;AL=100's, AH=bus MOD 100
  5805 000004EC 0C30                                            or      al,30h                                          ;apply ASCII zone
  5806 000004EE FC                                              cld                                                     ;forward strings
  5807 000004EF AA                                              stosb                                                   ;store 100's digit
  5808 000004F0 88E0                                            mov     al,ah                                           ;bus MOD 100
  5809 000004F2 30E4                                            xor     ah,ah                                           ;zero high-order dividend
  5810 000004F4 B10A                                            mov     cl,10                                           ;divisor (10^1)
  5811 000004F6 F6F1                                            div     cl                                              ;AL=10's, AH=1's
  5812 000004F8 660D3030                                        or      ax,3030h                                        ;apply ASCII zone
  5813 000004FC 66AB                                            stosw                                                   ;store 10's and 1's
  5814 000004FE B02E                                            mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  5815 00000500 AA                                              stosb                                                   ;store delimiter
  5816 00000501 8A4309                                          mov     al,[ebx+PCI.device]                             ;current PCI device (0-15)
  5817 00000504 30E4                                            xor     ah,ah                                           ;zero high order dividend
  5818 00000506 B10A                                            mov     cl,10                                           ;divisor (10^1)
  5819 00000508 F6F1                                            div     cl                                              ;AL=10's, AH=1's
  5820 0000050A 660D3030                                        or      ax,3030h                                        ;apply ASCII zone
  5821 0000050E 66AB                                            stosw                                                   ;store 10's and 1's
  5822 00000510 B02E                                            mov     al,EASCIIPERIOD                                 ;ASCII period delimiter
  5823 00000512 AA                                              stosb                                                   ;store delimiter
  5824 00000513 8A430A                                          mov     al,[ebx+PCI.function]                           ;current PCI function (0-7)
  5825 00000516 0C30                                            or      al,30h                                          ;apply ASCII zone
  5826 00000518 AA                                              stosb                                                   ;store 1's
  5827 00000519 30C0                                            xor     al,al                                           ;null terminator
  5828 0000051B AA                                              stosb                                                   ;store terminator
  5829 0000051C 5F                                              pop     edi                                             ;restore non-volatile regs
  5830 0000051D C3                                              ret                                                     ;return
  5831                                  ;-----------------------------------------------------------------------------------------------------------------------
  5832                                  ;
  5833                                  ;       Routine:        ConInterpretPCIData
  5834                                  ;
  5835                                  ;       Description:    This routine interprets the PCI vendor and device IDs.
  5836                                  ;
  5837                                  ;       In:             DS:EBX  PCI structure address
  5838                                  ;
  5839                                  ;-----------------------------------------------------------------------------------------------------------------------
  5840 0000051E B8[1C080000]            ConInterpretPCIData     mov     eax,czApple
  5841 00000523 66813B6B10                                      cmp     word [ebx+PCI.configdata_lo],EPCIVENDORAPPLE    ;Apple?
  5842 00000528 751A                                            jne     .10                                             ;no, branch
  5843 0000052A BA[3A090000]                                    mov     edx,czUSBController
  5844 0000052F 66837B023F                                      cmp     word [ebx+PCI.configdata_hi],EPCIAPPLEUSB       ;USB?
  5845 00000534 0F84A2000000                                    je      .40                                             ;yes, branch
  5846 0000053A BA[71080000]                                    mov     edx,czOther                                     ;other
  5847 0000053F E998000000                                      jmp     .40                                             ;continue
  5848 00000544 B8[59080000]            .10                     mov     eax,czIntel                                     ;Intel
  5849 00000549 66813B8680                                      cmp     word [ebx+PCI.configdata_lo],EPCIVENDORINTEL    ;Intel?
  5850 0000054E 7555                                            jne     .20                                             ;no, branch
  5851 00000550 BA[C8080000]                                    mov     edx,czPro1000MT                                 ;Pro/1000 MT
  5852 00000555 66817B020F10                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPRO1000MT ;Pro/1000 MT?
  5853 0000055B 747F                                            je      .40                                             ;yes, branch
  5854 0000055D BA[77080000]                                    mov     edx,czPCIAndMem                                 ;PCI and Memory
  5855 00000562 66817B023712                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPCIMEM    ;PCI and Memory?
  5856 00000568 7472                                            je      .40                                             ;yes, branch
  5857 0000056A BA[22080000]                                    mov     edx,czAurealAD1881                              ;Aureal 1881 SOUNDMAX
  5858 0000056F 66817B021524                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELAD1881    ;Aureal 1881 SOUNDMAX?
  5859 00000575 7465                                            je      .40                                             ;yes, branch
  5860 00000577 BA[86080000]                                    mov     edx,czPIIX3PCItoIDEBridge                       ;PIIX3 PCI-to-IDE Bridge
  5861 0000057C 66817B020070                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX3     ;PIIX3 PCI-to-IDE Bridge?
  5862 00000582 7458                                            je      .40                                             ;yes, branch
  5863 00000584 BA[B1090000]                                    mov     edx,cz82371ABBusMaster                          ;82371AB Bus Master
  5864 00000589 66817B021171                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTEL82371AB   ;82371AB Bua Master?
  5865 0000058F 744B                                            je      .40                                             ;yes, branch
  5866 00000591 BA[9E080000]                                    mov     edx,czPIIX4PowerMgmt                            ;PIIX4/4E/4M Power Mgmt Controller
  5867 00000596 66817B021371                                    cmp     word [ebx+PCI.configdata_hi],EPCIINTELPIIX4     ;PIIX4/4E/4M Power Mgmt Controller?
  5868 0000059C 743E                                            je      .40                                             ;yes, branch
  5869 0000059E BA[71080000]                                    mov     edx,czOther                                     ;other
  5870 000005A3 EB37                                            jmp     .40                                             ;continue
  5871 000005A5 B8[6A080000]            .20                     mov     eax,czOracle                                    ;Oracle
  5872 000005AA 66813BEE80                                      cmp     word [ebx+PCI.configdata_lo],EPCIVENDORORACLE   ;Oracle?
  5873 000005AF 7521                                            jne     .30                                             ;no, branch
  5874 000005B1 BA[5B090000]                                    mov     edx,czVirtualBoxGA                              ;VirtulaBox Graphics Adapter
  5875 000005B6 66817B02EFBE                                    cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXGA   ;VirtualBox Graphics Adapter?
  5876 000005BC 741E                                            je      .40                                             ;yes, branch
  5877 000005BE BA[49090000]                                    mov     edx,czVirtualBoxDevice                          ;VirtualBox Device
  5878 000005C3 66817B02FECA                                    cmp     word [ebx+PCI.configdata_hi],EPCIORACLEVBOXDEVICE       ;VirtualBox Device?
  5879 000005C9 7411                                            je      .40                                             ;yes, branch
  5880 000005CB BA[71080000]                                    mov     edx,czOther                                     ;other
  5881 000005D0 EB0A                                            jmp     .40                                             ;continue
  5882 000005D2 B8[71080000]            .30                     mov     eax,czOther                                     ;other
  5883 000005D7 BA[71080000]                                    mov     edx,czOther                                     ;other
  5884 000005DC A314080000              .40                     mov     [wdConsolePCIVendorStr],eax                     ;save vendor string
  5885 000005E1 891518080000                                    mov     [wdConsolePCIChipStr],edx                       ;save chip string
  5886 000005E7 C3                                              ret                                                     ;return
  5887                                  ;-----------------------------------------------------------------------------------------------------------------------
  5888                                  ;
  5889                                  ;       Routine:        ConSecond
  5890                                  ;
  5891                                  ;       Description:    This routine Handles the SECOND command.
  5892                                  ;
  5893                                  ;-----------------------------------------------------------------------------------------------------------------------
  5894                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5894                              <1> ConSecond :
  5894 000005E8 BB51090000          <1>  mov ebx,%1
  5894 000005ED B018                <1>  mov al,eReadRealTimeClock
  5894 000005EF CD30                <1>  int _svc
  5895                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  5895 000005F1 BB51090000          <1>  mov ebx,%1
  5895 000005F6 BAC8080000          <1>  mov edx,%2
  5895 000005FB B013                <1>  mov al,ePutSecondString
  5895 000005FD CD30                <1>  int _svc
  5896                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5896 000005FF BAC8080000          <1>  mov edx,%1
  5896 00000604 B00C                <1>  mov al,ePutConsoleString
  5896 00000606 CD30                <1>  int _svc
  5897                                                          putConsoleString  czNewLine                             ;write newline to console
  5897 00000608 BA[62080000]        <1>  mov edx,%1
  5897 0000060D B00C                <1>  mov al,ePutConsoleString
  5897 0000060F CD30                <1>  int _svc
  5898 00000611 C3                                              ret                                                     ;return
  5899                                  ;-----------------------------------------------------------------------------------------------------------------------
  5900                                  ;
  5901                                  ;       Routine:        ConTime
  5902                                  ;
  5903                                  ;       Description:    This routine Handles the TIME command.
  5904                                  ;
  5905                                  ;-----------------------------------------------------------------------------------------------------------------------
  5906                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5906                              <1> ConTime :
  5906 00000612 BB51090000          <1>  mov ebx,%1
  5906 00000617 B018                <1>  mov al,eReadRealTimeClock
  5906 00000619 CD30                <1>  int _svc
  5907                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  5907 0000061B BB51090000          <1>  mov ebx,%1
  5907 00000620 BAC8080000          <1>  mov edx,%2
  5907 00000625 B014                <1>  mov al,ePutTimeString
  5907 00000627 CD30                <1>  int _svc
  5908                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5908 00000629 BAC8080000          <1>  mov edx,%1
  5908 0000062E B00C                <1>  mov al,ePutConsoleString
  5908 00000630 CD30                <1>  int _svc
  5909                                                          putConsoleString  czNewLine                             ;write newline to console
  5909 00000632 BA[62080000]        <1>  mov edx,%1
  5909 00000637 B00C                <1>  mov al,ePutConsoleString
  5909 00000639 CD30                <1>  int _svc
  5910 0000063B C3                                              ret                                                     ;return
  5911                                  ;-----------------------------------------------------------------------------------------------------------------------
  5912                                  ;
  5913                                  ;       Routine:        ConVersion
  5914                                  ;
  5915                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  5916                                  ;
  5917                                  ;-----------------------------------------------------------------------------------------------------------------------
  5918                                  ConVersion              putConsoleString czTitle                                ;display version message
  5918                              <1> ConVersion :
  5918 0000063C BA[0A090000]        <1>  mov edx,%1
  5918 00000641 B00C                <1>  mov al,ePutConsoleString
  5918 00000643 CD30                <1>  int _svc
  5919 00000645 C3                                              ret                                                     ;return
  5920                                  ;-----------------------------------------------------------------------------------------------------------------------
  5921                                  ;
  5922                                  ;       Routine:        ConWeekday
  5923                                  ;
  5924                                  ;       Description:    This routine handles the WEEKDAY command.
  5925                                  ;
  5926                                  ;-----------------------------------------------------------------------------------------------------------------------
  5927                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5927                              <1> ConWeekday :
  5927 00000646 BB51090000          <1>  mov ebx,%1
  5927 0000064B B018                <1>  mov al,eReadRealTimeClock
  5927 0000064D CD30                <1>  int _svc
  5928                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  5928 0000064F BB51090000          <1>  mov ebx,%1
  5928 00000654 BAC8080000          <1>  mov edx,%2
  5928 00000659 B015                <1>  mov al,ePutWeekdayString
  5928 0000065B CD30                <1>  int _svc
  5929                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5929 0000065D BAC8080000          <1>  mov edx,%1
  5929 00000662 B00C                <1>  mov al,ePutConsoleString
  5929 00000664 CD30                <1>  int _svc
  5930                                                          putConsoleString  czNewLine                             ;write newline to console
  5930 00000666 BA[62080000]        <1>  mov edx,%1
  5930 0000066B B00C                <1>  mov al,ePutConsoleString
  5930 0000066D CD30                <1>  int _svc
  5931 0000066F C3                                              ret                                                     ;return
  5932                                  ;-----------------------------------------------------------------------------------------------------------------------
  5933                                  ;
  5934                                  ;       Routine:        ConWeekdayName
  5935                                  ;
  5936                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  5937                                  ;
  5938                                  ;-----------------------------------------------------------------------------------------------------------------------
  5939                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  5939                              <1> ConWeekdayName :
  5939 00000670 BB51090000          <1>  mov ebx,%1
  5939 00000675 B018                <1>  mov al,eReadRealTimeClock
  5939 00000677 CD30                <1>  int _svc
  5940                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  5940 00000679 BB51090000          <1>  mov ebx,%1
  5940 0000067E BAC8080000          <1>  mov edx,%2
  5940 00000683 B016                <1>  mov al,ePutWeekdayNameString
  5940 00000685 CD30                <1>  int _svc
  5941                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  5941 00000687 BAC8080000          <1>  mov edx,%1
  5941 0000068C B00C                <1>  mov al,ePutConsoleString
  5941 0000068E CD30                <1>  int _svc
  5942                                                          putConsoleString     czNewLine                                  ;write newline to console
  5942 00000690 BA[62080000]        <1>  mov edx,%1
  5942 00000695 B00C                <1>  mov al,ePutConsoleString
  5942 00000697 CD30                <1>  int _svc
  5943 00000699 C3                                              ret                                                             ;return
  5944                                  ;-----------------------------------------------------------------------------------------------------------------------
  5945                                  ;
  5946                                  ;       Routine:        ConYear
  5947                                  ;
  5948                                  ;       Description:    This routine Handles the YEAR command.
  5949                                  ;
  5950                                  ;-----------------------------------------------------------------------------------------------------------------------
  5951                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5951                              <1> ConYear :
  5951 0000069A BB51090000          <1>  mov ebx,%1
  5951 0000069F B018                <1>  mov al,eReadRealTimeClock
  5951 000006A1 CD30                <1>  int _svc
  5952                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  5952 000006A3 BB51090000          <1>  mov ebx,%1
  5952 000006A8 BAC8080000          <1>  mov edx,%2
  5952 000006AD B017                <1>  mov al,ePutYearString
  5952 000006AF CD30                <1>  int _svc
  5953                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5953 000006B1 BAC8080000          <1>  mov edx,%1
  5953 000006B6 B00C                <1>  mov al,ePutConsoleString
  5953 000006B8 CD30                <1>  int _svc
  5954                                                          putConsoleString  czNewLine                             ;write newline to console
  5954 000006BA BA[62080000]        <1>  mov edx,%1
  5954 000006BF B00C                <1>  mov al,ePutConsoleString
  5954 000006C1 CD30                <1>  int _svc
  5955 000006C3 C3                                              ret                                                     ;return
  5956                                  ;-----------------------------------------------------------------------------------------------------------------------
  5957                                  ;
  5958                                  ;       Routine:        ConYearIsLeap
  5959                                  ;
  5960                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  5961                                  ;
  5962                                  ;-----------------------------------------------------------------------------------------------------------------------
  5963                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5963                              <1> ConYearIsLeap :
  5963 000006C4 BB51090000          <1>  mov ebx,%1
  5963 000006C9 B018                <1>  mov al,eReadRealTimeClock
  5963 000006CB CD30                <1>  int _svc
  5964                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  5964 000006CD BB51090000          <1>  mov ebx,%1
  5964 000006D2 B00A                <1>  mov al,eIsLeapYear
  5964 000006D4 CD30                <1>  int _svc
  5965                                  
  5966 000006D6 E30B                                            jecxz   .10                                             ;branch if not leap
  5967                                  
  5968                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  5968 000006D8 BA[77090000]        <1>  mov edx,%1
  5968 000006DD B00C                <1>  mov al,ePutConsoleString
  5968 000006DF CD30                <1>  int _svc
  5969                                  
  5970 000006E1 EB09                                            jmp     .20                                             ;continue
  5971                                  
  5972                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  5972                              <1> .10 :
  5972 000006E3 BA[92090000]        <1>  mov edx,%1
  5972 000006E8 B00C                <1>  mov al,ePutConsoleString
  5972 000006EA CD30                <1>  int _svc
  5973 000006EC C3                      .20                     ret                                                     ;return
  5974                                  ;-----------------------------------------------------------------------------------------------------------------------
  5975                                  ;
  5976                                  ;       Tables
  5977                                  ;
  5978                                  ;-----------------------------------------------------------------------------------------------------------------------
  5979                                                                                                                  ;---------------------------------------
  5980                                                                                                                  ;  Command Jump Table
  5981                                                                                                                  ;---------------------------------------
  5982                                  tConJmpTbl              equ     $                                               ;command jump table
  5983 000006ED 70060000                                        dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  5984 000006F1 C4060000                                        dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  5985 000006F5 E8030000                                        dd      ConMonthName    - ConCode                       ;month.name command routine offset
  5986 000006F9 12040000                                        dd      ConPCIProbe     - ConCode                       ;pciprobe command routine offset
  5987 000006FD 28020000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  5988 00000701 3C060000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  5989 00000705 46060000                                        dd      ConWeekday      - ConCode                       ;weekday command routine offset
  5990 00000709 9C020000                                        dd      ConMalloc       - ConCode                       ;malloc command routine offset
  5991 0000070D F1020000                                        dd      ConMem          - ConCode                       ;memory command routine offset
  5992 00000711 94030000                                        dd      ConMinute       - ConCode                       ;minute command routine offset
  5993 00000715 E8050000                                        dd      ConSecond       - ConCode                       ;second command routine offset
  5994 00000719 CF010000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  5995 0000071D 12040000                                        dd      ConPCIProbe     - ConCode                       ;lspci command routine offset
  5996 00000721 BE030000                                        dd      ConMonth        - ConCode                       ;month command routine offset
  5997 00000725 D4010000                                        dd      ConDate         - ConCode                       ;date command routine offset
  5998 00000729 28020000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  5999 0000072D 2D020000                                        dd      ConFree         - ConCode                       ;free command routine offset
  6000 00000731 6F020000                                        dd      ConHour         - ConCode                       ;hour command routine offset
  6001 00000735 99020000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  6002 00000739 28020000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  6003 0000073D 12060000                                        dd      ConTime         - ConCode                       ;time command routine offset
  6004 00000741 9A060000                                        dd      ConYear         - ConCode                       ;year command routine offset
  6005 00000745 CF010000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  6006 00000749 FE010000                                        dd      ConDay          - ConCode                       ;day command routine offset
  6007 0000074D F1020000                                        dd      ConMem          - ConCode                       ;mem command routine offset
  6008 00000751 3C060000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  6009                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  6010                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  6011                                                                                                                  ;---------------------------------------
  6012                                                                                                                  ;  Command Name Table
  6013                                                                                                                  ;---------------------------------------
  6014                                  tConCmdTbl              equ     $                                               ;command name table
  6015 00000755 0D5745454B4441592E-                             db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  6015 0000075E 4E414D4500         
  6016 00000763 0C594541522E49534C-                             db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  6016 0000076C 45415000           
  6017 00000770 0B4D4F4E54482E4E41-                             db      11,"MONTH.NAME",0                               ;month.name command
  6017 00000779 4D4500             
  6018 0000077C 0950434950524F4245-                             db      9,"PCIPROBE",0                                  ;pciprobe command
  6018 00000785 00                 
  6019 00000786 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  6019 0000078F 00                 
  6020 00000790 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  6021 00000799 085745454B44415900                              db      8,"WEEKDAY",0                                   ;weekday command
  6022 000007A2 074D414C4C4F4300                                db      7,"MALLOC",0                                    ;malloc command
  6023 000007AA 074D454D4F525900                                db      7,"MEMORY",0                                    ;memory command
  6024 000007B2 074D494E55544500                                db      7,"MINUTE",0                                    ;minute command
  6025 000007BA 075345434F4E4400                                db      7,"SECOND",0                                    ;second command
  6026 000007C2 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  6027 000007C9 064C5350434900                                  db      6,"LSPCI",0                                     ;lspci command (pciprobe alias)
  6028 000007D0 064D4F4E544800                                  db      6,"MONTH",0                                     ;month command
  6029 000007D7 054441544500                                    db      5,"DATE",0                                      ;date command
  6030 000007DD 054558495400                                    db      5,"EXIT",0                                      ;exit command
  6031 000007E3 054652454500                                    db      5,"FREE",0                                      ;free command
  6032 000007E9 05484F555200                                    db      5,"HOUR",0                                      ;hour command
  6033 000007EF 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  6034 000007F5 055155495400                                    db      5,"QUIT",0                                      ;quit command
  6035 000007FB 0554494D4500                                    db      5,"TIME",0                                      ;time command
  6036 00000801 055945415200                                    db      5,"YEAR",0                                      ;year command
  6037 00000807 04434C5300                                      db      4,"CLS",0                                       ;cls command
  6038 0000080C 0444415900                                      db      4,"DAY",0                                       ;day command
  6039 00000811 044D454D00                                      db      4,"MEM",0                                       ;mem command
  6040 00000816 0456455200                                      db      4,"VER",0                                       ;ver command
  6041 0000081B 00                                              db      0                                               ;end of table
  6042                                  ;-----------------------------------------------------------------------------------------------------------------------
  6043                                  ;
  6044                                  ;       Constants
  6045                                  ;
  6046                                  ;-----------------------------------------------------------------------------------------------------------------------
  6047 0000081C 4170706C6500            czApple                 db      "Apple",0                                       ;vendor name string
  6048 00000822 41757265616C204144-     czAurealAD1881          db      "Aureal AD1881 SOUNDMAX",0                      ;soundmax string
  6048 0000082B 3138383120534F554E-
  6048 00000834 444D415800         
  6049 00000839 42617365206D656D6F-     czBaseMem               db      "Base memory: ",0                               ;base memory from BIOS
  6049 00000842 72793A2000         
  6050 00000847 457874656E64656420-     czExtendedMem           db      "Extended memory: ",0                           ;extended memory from BIOS
  6050 00000850 6D656D6F72793A2000 
  6051 00000859 496E74656C00            czIntel                 db      "Intel",0                                       ;vendor name string
  6052 0000085F 4B4200                  czKB                    db      "KB",0                                          ;Kilobytes
  6053 00000862 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  6054 00000865 6F6B0D0A00              czOK                    db      "ok",13,10,0                                    ;ok string
  6055 0000086A 4F7261636C6500          czOracle                db      "Oracle",0                                      ;vendor name string
  6056 00000871 4F7468657200            czOther                 db      "Other",0                                       ;default name string
  6057 00000877 5043492026204D656D-     czPCIAndMem             db      "PCI & Memory",0                                ;PCI and Memory string
  6057 00000880 6F727900           
  6058 00000884 2E00                    czPeriod                db      ".",0                                           ;period delimiter
  6059 00000886 504949583320504349-     czPIIX3PCItoIDEBridge   db      "PIIX3 PCI-to-ISA Bridge",0                     ;pci-to-isa bridge string
  6059 0000088F 2D746F2D4953412042-
  6059 00000898 726964676500       
  6060 0000089E 50494958342F34452F-     czPIIX4PowerMgmt        db      "PIIX4/4E/4M Power Management Controller",0     ;power management controller string
  6060 000008A7 344D20506F77657220-
  6060 000008B0 4D616E6167656D656E-
  6060 000008B9 7420436F6E74726F6C-
  6060 000008C2 6C657200           
  6061 000008C6 3A00                    czPrompt                db      ":",0                                           ;prompt string
  6062 000008C8 50726F2F3130303020-     czPro1000MT             db      "Pro/1000 MT Ethernet Adapter",0                ;Intel Pro/1000 MT Ethernet adapter strg
  6062 000008D1 4D542045746865726E-
  6062 000008DA 657420416461707465-
  6062 000008E3 7200               
  6063 000008E5 42617365206D656D6F-     czROMMem                db      "Base memory below EBDA (Int 12h): ",0          ;memory reported by ROM
  6063 000008EE 72792062656C6F7720-
  6063 000008F7 454244412028496E74-
  6063 00000900 20313268293A2000   
  6064 00000908 2000                    czSpace                 db      " ",0                                           ;space delimiter
  6065 0000090A 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  6065 00000913 65726174696E672053-
  6065 0000091C 797374656D20312E30-
  6065 00000925 0D0A00             
  6066 00000928 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  6066 00000931 6F6D6D616E640D0A00 
  6067 0000093A 55534220436F6E7472-     czUSBController         db      "USB Controller",0                              ;USB controller string
  6067 00000943 6F6C6C657200       
  6068 00000949 5669727475616C426F-     czVirtualBoxDevice      db      "VirtualBox Device",0                           ;Virtual Box device string
  6068 00000952 782044657669636500 
  6069 0000095B 5669727475616C426F-     czVirtualBoxGA          db      "VirtualBox Graphics Adapter",0                 ;Virtual Box graphics adapter string
  6069 00000964 782047726170686963-
  6069 0000096D 732041646170746572-
  6069 00000976 00                 
  6070 00000977 546865207965617220-     czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  6070 00000980 69732061206C656170-
  6070 00000989 20796561722E0D0A00 
  6071 00000992 546865207965617220-     czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  6071 0000099B 6973206E6F74206120-
  6071 000009A4 6C6561702079656172-
  6071 000009AD 2E0D0A00           
  6072 000009B1 383233373141422F45-     cz82371ABBusMaster      db      "82371AB/EB PCI Bus Master IDE Controller",0    ;bus-master strin
  6072 000009BA 422050434920427573-
  6072 000009C3 204D61737465722049-
  6072 000009CC 444520436F6E74726F-
  6072 000009D5 6C6C657200         
  6073 000009DA 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  6074                                  %endif
  6075                                  %ifdef BUILDDISK
  6076                                  ;-----------------------------------------------------------------------------------------------------------------------
  6077                                  ;
  6078                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  6079                                  ;
  6080                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  6081                                  ;
  6082                                  ;-----------------------------------------------------------------------------------------------------------------------
  6083                                  section                 unused                                                  ;unused disk space
  6084                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  6085                                  %endif
  6086                                  ;=======================================================================================================================
  6087                                  ;
  6088                                  ;       End of Program Code
  6089                                  ;
  6090                                  ;=======================================================================================================================
