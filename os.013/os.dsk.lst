     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.012
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support reading the real-time clock and new
     8                                  ;                       "date" and "time" and other related commands.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       ERTC...         Motorola MC 146818 Real-Time Clock (RTC) values
   152                                  ;       EX86...         Intel x86 CPU architecture values
   153                                  ;
   154                                  ;       Firmware-Defined Values
   155                                  ;
   156                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   157                                  ;
   158                                  ;       Standards-Based Values
   159                                  ;
   160                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   161                                  ;
   162                                  ;       Operating System Values
   163                                  ;
   164                                  ;       EBOOT...        Boot sector and loader values
   165                                  ;       ECON...         Console values (dimensions and attributes)
   166                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   167                                  ;       EKEYF...        Keyboard status flags
   168                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   169                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   170                                  ;       EMEM...         Memory Management values
   171                                  ;       EMSG...         Message identifers
   172                                  ;
   173                                  ;=======================================================================================================================
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       Hardware-Defined Values
   177                                  ;
   178                                  ;-----------------------------------------------------------------------------------------------------------------------
   179                                  ;-----------------------------------------------------------------------------------------------------------------------
   180                                  ;
   181                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   182                                  ;
   183                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   184                                  ;       for CGA, EGA, VGA and compatible video modes.
   185                                  ;
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   188                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   189                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   190                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   191                                  ;-----------------------------------------------------------------------------------------------------------------------
   192                                  ;
   193                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   194                                  ;
   195                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   196                                  ;
   197                                  ;-----------------------------------------------------------------------------------------------------------------------
   198                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   199                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   200                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   201                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   202                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   203                                  ;-----------------------------------------------------------------------------------------------------------------------
   204                                  ;
   205                                  ;       8042 Keyboard Controller                                                EKEYB...
   206                                  ;
   207                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   208                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   209                                  ;
   210                                  ;-----------------------------------------------------------------------------------------------------------------------
   211                                  EKEYBPORTDATA           equ     060h                                            ;data port
   212                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   213                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   214                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   215                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   216                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   217                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   218                                                                                                                  ;---------------------------------------
   219                                                                                                                  ;       Keyboard Scan Codes
   220                                                                                                                  ;---------------------------------------
   221                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   222                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   223                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   224                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   225                                  EKEYBSLASH              equ     035h                                            ;slash
   226                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   227                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   228                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   229                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   230                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   231                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   232                                  EKEYBUP                 equ     080h                                            ;up
   233                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   234                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   235                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   236                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   237                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   238                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   239                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   240                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   241                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   242                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   243                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   244                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   245                                  ;-----------------------------------------------------------------------------------------------------------------------
   246                                  ;
   247                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   248                                  ;
   249                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   250                                  ;       external devices and signals a hardware interrupt to the CPU.
   251                                  ;
   252                                  ;-----------------------------------------------------------------------------------------------------------------------
   253                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   254                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   255                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   256                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   257                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   258                                  ;-----------------------------------------------------------------------------------------------------------------------
   259                                  ;
   260                                  ;       8253 Programmable Interval Timer                                        EPIT...
   261                                  ;
   262                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   263                                  ;       approximately 18.2 times per second.
   264                                  ;
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;
   269                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   270                                  ;
   271                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   272                                  ;
   273                                  ;-----------------------------------------------------------------------------------------------------------------------
   274                                  ERTCREGPORT             equ     070h                                            ;register select port
   275                                  ERTCDATAPORT            equ     071h                                            ;data port
   276                                  ERTCSECONDREG           equ     000h                                            ;second
   277                                  ERTCMINUTEREG           equ     002h                                            ;minute
   278                                  ERTCHOURREG             equ     004h                                            ;hour
   279                                  ERTCWEEKDAYREG          equ     006h                                            ;weekday
   280                                  ERTCDAYREG              equ     007h                                            ;day
   281                                  ERTCMONTHREG            equ     008h                                            ;month
   282                                  ERTCYEARREG             equ     009h                                            ;year of the century
   283                                  ERTCSTATUSREG           equ     00bh                                            ;status
   284                                  ERTCBASERAMLO           equ     015h                                            ;base RAM low
   285                                  ERTCBASERAMHI           equ     016h                                            ;base RAM high
   286                                  ERTCEXTRAMLO            equ     017h                                            ;extended RAM low
   287                                  ERTCEXTRAMHI            equ     018h                                            ;extended RAM high
   288                                  ERTCCENTURYREG          equ     032h                                            ;century
   289                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   290                                  ;-----------------------------------------------------------------------------------------------------------------------
   291                                  ;
   292                                  ;       x86 CPU Architecture                                                    ;EX86...
   293                                  ;
   294                                  ;-----------------------------------------------------------------------------------------------------------------------
   295                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  ;
   298                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   299                                  ;
   300                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   301                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   302                                  ;
   303                                  ;       0.......        Segment is not present in memory (triggers int 11)
   304                                  ;       1.......        Segment is present in memory
   305                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   306                                  ;       ...0....        Segment is a system segment
   307                                  ;       ...00010                Local Descriptor Table
   308                                  ;       ...00101                Task Gate
   309                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   310                                  ;       ...01100                Call Gate (386)
   311                                  ;       ...01110                Interrupt Gate (386)
   312                                  ;       ...01111                Trap Gate (386)
   313                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   314                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   315                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   316                                  ;
   317                                  ;-----------------------------------------------------------------------------------------------------------------------
   318                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   319                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   320                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   321                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   322                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   323                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   324                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   325                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;
   328                                  ;       Firmware-Defined Values
   329                                  ;
   330                                  ;-----------------------------------------------------------------------------------------------------------------------
   331                                  ;-----------------------------------------------------------------------------------------------------------------------
   332                                  ;
   333                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   334                                  ;
   335                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   336                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   337                                  ;
   338                                  ;-----------------------------------------------------------------------------------------------------------------------
   339                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   340                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   341                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   342                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   343                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   344                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   345                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   346                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   347                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   348                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   349                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   350                                  ;-----------------------------------------------------------------------------------------------------------------------
   351                                  ;
   352                                  ;       Standards-Based Values
   353                                  ;
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  ;
   357                                  ;       ASCII                                                                   EASCII...
   358                                  ;
   359                                  ;-----------------------------------------------------------------------------------------------------------------------
   360                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   361                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   362                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   363                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   364                                  EASCIISPACE             equ     020h                                            ;space
   365                                  EASCIIUPPERA            equ     041h                                            ;'A'
   366                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   367                                  EASCIILOWERA            equ     061h                                            ;'a'
   368                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   369                                  EASCIITILDE             equ     07Eh                                            ;'~'
   370                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   371                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   372                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   373                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   374                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   375                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   376                                  EASCIICASE              equ     00100000b                                       ;case bit
   377                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   378                                  ;-----------------------------------------------------------------------------------------------------------------------
   379                                  ;
   380                                  ;       Operating System Values
   381                                  ;
   382                                  ;-----------------------------------------------------------------------------------------------------------------------
   383                                  ;-----------------------------------------------------------------------------------------------------------------------
   384                                  ;
   385                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   386                                  ;
   387                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   388                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   389                                  ;
   390                                  ;-----------------------------------------------------------------------------------------------------------------------
   391                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   392                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   393                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   394                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   395                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   396                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   397                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   398                                  ;-----------------------------------------------------------------------------------------------------------------------
   399                                  ;       Console Constants                                                       ECON...
   400                                  ;-----------------------------------------------------------------------------------------------------------------------
   401                                  ECONCOLS                equ     80                                              ;columns per row
   402                                  ECONROWS                equ     24                                              ;console rows
   403                                  ECONOIAROW              equ     24                                              ;operator information area row
   404                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   405                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   406                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   407                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   408                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   409                                  ;-----------------------------------------------------------------------------------------------------------------------
   410                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   411                                  ;-----------------------------------------------------------------------------------------------------------------------
   412                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   413                                  EGDTCGA                 equ     020h                                            ;cga video selector
   414                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   415                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   416                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   417                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   418                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   419                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   420                                  ;-----------------------------------------------------------------------------------------------------------------------
   421                                  ;       Keyboard Flags                                                          EKEYF...
   422                                  ;-----------------------------------------------------------------------------------------------------------------------
   423                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   424                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   425                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   426                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   427                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   428                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   429                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   430                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   431                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   432                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   433                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   434                                  ;-----------------------------------------------------------------------------------------------------------------------
   435                                  ;       Kernel Constants                                                        EKRN...
   436                                  ;-----------------------------------------------------------------------------------------------------------------------
   437                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   438                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   439                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   440                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   441                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   442                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   445                                  ;-----------------------------------------------------------------------------------------------------------------------
   446                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   447                                  ;-----------------------------------------------------------------------------------------------------------------------
   448                                  ;       Memory Management Constants                                             EMEM...
   449                                  ;-----------------------------------------------------------------------------------------------------------------------
   450                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   451                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   452                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   453                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   454                                  ;-----------------------------------------------------------------------------------------------------------------------
   455                                  ;       Message Identifiers                                                     EMSG...
   456                                  ;-----------------------------------------------------------------------------------------------------------------------
   457                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   458                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   459                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   460                                  ;=======================================================================================================================
   461                                  ;
   462                                  ;       Structures
   463                                  ;
   464                                  ;=======================================================================================================================
   465                                  ;-----------------------------------------------------------------------------------------------------------------------
   466                                  ;
   467                                  ;       DATETIME
   468                                  ;
   469                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   470                                  ;
   471                                  ;-----------------------------------------------------------------------------------------------------------------------
   472                                  struc                   DATETIME
   473 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   474 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   475 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   476 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   477 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   478 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   479 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   480 00000007 <res 00000001>          .century                resb    1                                               ;century
   481                                  EDATETIMELEN            equ     ($-.second)
   482                                  endstruc
   483                                  ;-----------------------------------------------------------------------------------------------------------------------
   484                                  ;
   485                                  ;       MEMBLOCK
   486                                  ;
   487                                  ;       The MEMBLOCK structure defines a memory block.
   488                                  ;
   489                                  ;-----------------------------------------------------------------------------------------------------------------------
   490                                  struc                   MEMBLOCK
   491 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   492 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   493 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   494 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   495 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   496 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   497 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   498 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   499                                  EMEMBLOCKLEN            equ     ($-.signature)
   500                                  endstruc
   501                                  ;-----------------------------------------------------------------------------------------------------------------------
   502                                  ;
   503                                  ;       MEMROOT
   504                                  ;
   505                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   506                                  ;
   507                                  ;-----------------------------------------------------------------------------------------------------------------------
   508                                  struc                   MEMROOT
   509 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   510 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   511 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   512 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   513 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   514 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   515                                  EMEMROOTLEN             equ     ($-.firstcontig)
   516                                  endstruc
   517                                  ;-----------------------------------------------------------------------------------------------------------------------
   518                                  ;
   519                                  ;       MQUEUE
   520                                  ;
   521                                  ;       The MQUEUE structure maps memory used for a message queue.
   522                                  ;
   523                                  ;-----------------------------------------------------------------------------------------------------------------------
   524                                  struc                   MQUEUE
   525 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   526 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   527 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   528                                  endstruc
   529                                  ;-----------------------------------------------------------------------------------------------------------------------
   530                                  ;
   531                                  ;       OSDATA
   532                                  ;
   533                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   534                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   535                                  ;
   536                                  ;-----------------------------------------------------------------------------------------------------------------------
   537                                  struc                   OSDATA
   538 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   539 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   540 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   541 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   542 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   543 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   544 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   545 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   546 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   547 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   548 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   549 00000413 <res 00000002>          wwROMMemSize            resw    1                                               ;413 memory size (kb) INT 12h
   550 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   551 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   552 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   553 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   554 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   555 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   556 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   557 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   558 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   559 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   560 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   561 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   562 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   563 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   564 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   565 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   566 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   567 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   568 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   569 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   570 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   571 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   572 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   573 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   574 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   575 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   576 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   577 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   578 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   579 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   580 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   581 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   582 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   583 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   584 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   585 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   586 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   587 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   588 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   589 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   590 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   591 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   592 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   593 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   594 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   595 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   596 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   597 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   598 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   599 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   600 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   601 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   602 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   603 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   604 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   605 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   606 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   607 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   608 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   609 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   610 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   611 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   612 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   613 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   614 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   615 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   616 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   617 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   618 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   619 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   620 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   621 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   622 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   623 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   624 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   625 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   626 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   627 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   628 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   629 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   630 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   631 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   632 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   633 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   634 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   635 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   636 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   637 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   638 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   639                                  ;-----------------------------------------------------------------------------------------------------------------------
   640                                  ;
   641                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   642                                  ;
   643                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   644                                  ;
   645                                  ;-----------------------------------------------------------------------------------------------------------------------
   646                                  ECONDATA                equ     ($)
   647 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   648 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   649 00000808 <res 00000004>          wdBaseMemSize           resd    1                                               ;base memory size (int 12h)
   650 0000080C <res 00000004>          wdExtendedMemSize       resd    1                                               ;extended memory size (int 12h)
   651 00000810 <res 00000004>          wdROMMemSize            resd    1                                               ;ROM memory size
   652 00000814 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   653 00000815 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   654 00000816 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   655 00000817 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   656 00000818 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   657 00000819 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   658 0000081A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   659 0000081B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   660 0000081C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   661 0000081D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   662 0000081E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   663 0000081F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   664 00000820 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   665 00000870 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   666 000008C0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   667 00000910 <res 0000000B>          wzBaseMemSize           resb    11                                              ;CMOS base memory bytes     zz,zzz,zz9\0
   668 0000091B <res 0000000B>          wzROMMemSize            resb    11                                              ;ROM base memory bytes      zz,zzz,zz9\0
   669 00000926 <res 0000000B>          wzExtendedMemSize       resb    11                                              ;CMOS extended memory bytes zz,zzz,zz9\0
   670 00000931 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   671 00000949 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   672                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   673                                  ;-----------------------------------------------------------------------------------------------------------------------
   674                                  ;
   675                                  ;       End of OS Variables
   676                                  ;
   677                                  ;-----------------------------------------------------------------------------------------------------------------------
   678                                  endstruc
   679                                  ;-----------------------------------------------------------------------------------------------------------------------
   680                                  ;
   681                                  ;       Macros
   682                                  ;
   683                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   684                                  ;
   685                                  ;-----------------------------------------------------------------------------------------------------------------------
   686                                  %macro                  mint    1
   687                                  _%1                     equ     ($-$$) / EX86DESCLEN
   688                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   689                                  %endmacro
   690                                  %macro                  mtrap   1
   691                                  _%1                     equ     ($-$$) / EX86DESCLEN
   692                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   693                                  %endmacro
   694                                  %macro                  menter  1
   695                                  ?%1                     equ     ($-$$)
   696                                  %endmacro
   697                                  %macro                  tsvce   1
   698                                  e%1                     equ     ($-tsvc)/4
   699                                                          dd      %1
   700                                  %endmacro
   701                                  %ifdef BUILDBOOT
   702                                  ;=======================================================================================================================
   703                                  ;
   704                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   705                                  ;
   706                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   707                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   708                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   709                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   710                                  ;
   711                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   712                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   713                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   714                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   715                                  ;       immediately followed by a disk parameter table.
   716                                  ;
   717                                  ;=======================================================================================================================
   718                                                          cpu     8086                                            ;assume minimal CPU
   719                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   720                                                          bits    16                                              ;16-bit code at power-up
   721                                  %ifdef BUILDPREP
   722                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   723                                  %else
   724 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   725                                  %endif
   726                                  ;-----------------------------------------------------------------------------------------------------------------------
   727                                  ;
   728                                  ;       Disk Parameter Table
   729                                  ;
   730                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   731                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   732                                  ;
   733                                  ;-----------------------------------------------------------------------------------------------------------------------
   734 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   735 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   736 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   737 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   738 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   739 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   740 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   741 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   742 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   743                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   744 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   745 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   746 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   747                                  ;
   748                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   749                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   750                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   751                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   752                                  ;       given several possible starting values for CS:IP.
   753                                  ;
   754                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   755 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   756                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   757 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   758 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   759 00000025 B104                                            mov     cl,4                                            ;shift count
   760 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   761 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   762 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   763                                  ;
   764                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   765                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   766                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   767                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   768                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   769                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   770                                  ;
   771 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   772 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   773 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   774 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   775 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   776                                  ;
   777                                  ;       Our boot addressability is now set up according to the following diagram.
   778                                  ;
   779                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   780                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   781                                  ;                               |  256 = 100h bytes                             |
   782                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   783                                  ;                               |  Boot Sector (vstart=0100h)                   |
   784                                  ;                               |  1 sector = 512 = 200h bytes                  |
   785                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   786                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   787                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   788                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   789                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   790                                  ;                               |  2 sectors = 1024 = 400h bytes
   791                                  ;                       009400  +-----------------------------------------------+ DS:1900
   792                                  ;
   793                                  ;       On entry, DL indicates the drive being booted from.
   794                                  ;
   795 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   796                                  ;
   797                                  ;       Compute directory i/o buffer address.
   798                                  ;
   799 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   800 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   801 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   802 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   803                                  ;
   804                                  ;       Compute segment where os.com will be loaded.
   805                                  ;
   806 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   807 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   808 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   809 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   810                                  ;
   811                                  ;       Set the video mode to 80 column, 25 row, text.
   812                                  ;
   813 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   814 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   815                                  ;
   816                                  ;       Write a message to the console so we know we have our addressability established.
   817                                  ;
   818 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   819 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   820                                  ;
   821                                  ;       Initialize the number of directory sectors to search.
   822                                  ;
   823 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   824 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   825                                  ;
   826                                  ;       Compute number of directory sectors and initialize overhead count.
   827                                  ;
   828 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   829 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   830 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   831 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   832                                  ;
   833                                  ;       Compute directory entries per sector.
   834                                  ;
   835 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   836 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   837 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   838                                  ;
   839                                  ;       Compute first logical directory sector and update overhead count.
   840                                  ;
   841 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   842 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   843 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   844 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   845 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   846 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   847                                  ;
   848                                  ;       Read directory sector.
   849                                  ;
   850 0000008E B001                    .30                     mov     al,1                                            ;sector count
   851 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   852 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   853 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   854                                  ;
   855                                  ;       Setup variables to search this directory sector.
   856                                  ;
   857 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   858 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   859 000000A1 7603                                            jna     .40                                             ;no, continue
   860 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   861 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   862 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   863 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   864                                  ;
   865                                  ;       Loop through directory sectors searching for kernel program.
   866                                  ;
   867 000000B1 56                      .50                     push    si                                              ;save kernel name address
   868 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   869 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   870 000000B6 FC                                              cld                                                     ;forward strings
   871 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   872 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   873 000000BA 5E                                              pop     si                                              ;restore kernel name address
   874 000000BB 7418                                            je      .60                                             ;exit loop if found
   875 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   876 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   877 000000C2 75ED                                            jnz     .50                                             ;next entry
   878                                  ;
   879                                  ;       Repeat search if we are not at the end of the directory.
   880                                  ;
   881 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   882 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   883 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   884 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   885 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   886                                  ;
   887                                  ;       If we find the kernel program in the directory, read the FAT.
   888                                  ;
   889 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   890 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   891 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   892 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   893 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   894 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   895                                  ;
   896                                  ;       Get the starting cluster of the kernel program and target address.
   897                                  ;
   898 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   899 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   900                                  ;
   901                                  ;       Read each program cluster into RAM.
   902                                  ;
   903 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   904 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   905 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   906 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   907 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   908 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   909 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   910 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   911 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   912                                  ;
   913                                  ;       Update buffer pointer for next cluster.
   914                                  ;
   915 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   916 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   917 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   918 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   919 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   920                                  ;
   921                                  ;       Compute next cluster number.
   922                                  ;
   923 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   924 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   925 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   926 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   927 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   928 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   929 00000120 83E701                                          and     di,1                                            ;get low bit
   930 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   931 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   932 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   933                                  ;
   934                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   935                                  ;
   936 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   937 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   938 00000130 B104                                            mov     cl,4                                            ;shift count
   939 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   940 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   941 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   942 0000013A 75B2                                            jne     .70                                             ;no, continue
   943                                  ;
   944                                  ;       Transfer control to the operating system program.
   945                                  ;
   946 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   947 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   948 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   949                                  ;
   950                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   951                                  ;
   952 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   953 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   954 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   955 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   956 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   957 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   958 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   959 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   960 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   961 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   962                                  ;
   963                                  ;       Try maxtries times to read sector.
   964                                  ;
   965 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   966 00000160 53                      .10                     push    bx                                              ;save buffer address
   967 00000161 51                                              push    cx                                              ;save retry count
   968 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   969 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   970 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   971 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   972 0000016F 59                                              pop     cx                                              ;restore retry count
   973 00000170 5B                                              pop     bx                                              ;restore buffer address
   974 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   975 00000173 E2EB                                            loop    .10                                             ;retry
   976                                  ;
   977                                  ;       Handle disk error: convert to ASCII and store in error string.
   978                                  ;
   979 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   980 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   981 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   982 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   983 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   984 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   985 00000183 7203                                            jb      .20                                             ;continue if numeral
   986 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   987 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   988 0000018A 7203                                            jb      .30                                             ;continue if numeral
   989 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   990 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   991 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   992 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   993                                  ;
   994                                  ;       Wait for a key press.
   995                                  ;
   996 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   997 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   998 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   999 0000019E FB                                              sti                                                     ;enable maskable interrupts
  1000 0000019F F4                                              hlt                                                     ;wait for interrupt
  1001 000001A0 EBF6                                            jmp     .10                                             ;repeat
  1002                                  ;
  1003                                  ;       Reset the system.
  1004                                  ;
  1005 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1006 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1007 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
  1008 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
  1009 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
  1010                                  ;
  1011                                  ;       Display text message.
  1012                                  ;
  1013 000001AA FC                      BootPrint               cld                                                     ;forward strings
  1014 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1015 000001AC 84C0                                            test    al,al                                           ;end of string?
  1016 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
  1017 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1018 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1019 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
  1020 000001B6 C3                      BootReturn              ret                                                     ;return
  1021                                  ;-----------------------------------------------------------------------------------------------------------------------
  1022                                  ;
  1023                                  ;       Constants
  1024                                  ;
  1025                                  ;-----------------------------------------------------------------------------------------------------------------------
  1026 000001B7 90                                              align   2
  1027 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
  1028 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
  1028 000001C3 4F4D               
  1029 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
  1029 000001CE 530D0A00           
  1030 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
  1030 000001DB 7220               
  1031 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
  1032 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
  1032 000001E9 6700               
  1033                                  ;-----------------------------------------------------------------------------------------------------------------------
  1034                                  ;
  1035                                  ;       Work Areas
  1036                                  ;
  1037                                  ;-----------------------------------------------------------------------------------------------------------------------
  1038 000001EB 90                                              align   2
  1039 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
  1040 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
  1041 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
  1042 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
  1043 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
  1044                                  wwReadCountCommand      equ     $                                               ;read count and command
  1045 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
  1046 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
  1047                                  wwDriveHead             equ     $                                               ;drive, head (word)
  1048 000001F8 00                      wbDrive                 db      0                                               ;drive
  1049 000001F9 00                      wbHead                  db      0                                               ;head
  1050                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1051 000001FA 00                                              db      0                                               ;sector
  1052 000001FB 00                      wbTrack                 db      0                                               ;track
  1053 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1054 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1055                                  %endif
  1056                                  %ifdef BUILDPREP
  1057                                  ;=======================================================================================================================
  1058                                  ;
  1059                                  ;       Diskette Preparation Code
  1060                                  ;
  1061                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1062                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1063                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1064                                  ;
  1065                                  ;=======================================================================================================================
  1066                                  ;
  1067                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1068                                  ;
  1069                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1070                                                          call    BootPrint                                       ;display message
  1071                                  ;
  1072                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1073                                  ;
  1074                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1075                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1076                                                          jnz     .20                                             ;continue if key pressed
  1077                                                          sti                                                     ;enable interrupts
  1078                                                          hlt                                                     ;wait for interrupt
  1079                                                          jmp     .10                                             ;repeat
  1080                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1081                                                          je      .30                                             ;yes, branch
  1082                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1083                                                          jne     .10                                             ;no, repeat
  1084                                                          jmp     .120                                            ;yes, exit program
  1085                                  ;
  1086                                  ;       Display writing-sector message and patch the JMP instruction.
  1087                                  ;
  1088                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1089                                                          call    BootPrint                                       ;display message
  1090                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1091                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1092                                                          mov     [bx],ax                                         ;update the JMP instruction
  1093                                  ;
  1094                                  ;       Try to read the boot sector.
  1095                                  ;
  1096                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1097                                  .40                     push    cx                                              ;save remaining tries
  1098                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1099                                                          mov     dx,0                                            ;head zero, drive zero
  1100                                                          mov     cx,1                                            ;track zero, sector one
  1101                                                          mov     al,1                                            ;one sector
  1102                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1103                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1104                                                          pop     cx                                              ;restore remaining retries
  1105                                                          jnc     .50                                             ;skip ahead if successful
  1106                                                          loop    .40                                             ;try again
  1107                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1108                                                          jmp     .70                                             ;branch to error routine
  1109                                  ;
  1110                                  ;       Copy diskette parms from input buffer to output buffer.
  1111                                  ;
  1112                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1113                                                          add     si,11                                           ;skip over JMP and system ID
  1114                                                          mov     di,Boot                                         ;output buffer address
  1115                                                          add     di,11                                           ;skip over JMP and system ID
  1116                                                          mov     cx,19                                           ;length of diskette parameters
  1117                                                          cld                                                     ;forward string copies
  1118                                                          rep     movsb                                           ;copy diskette parameters
  1119                                  ;
  1120                                  ;       Try to write boot sector to diskette.
  1121                                  ;
  1122                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1123                                  .60                     push    cx                                              ;save remaining tries
  1124                                                          mov     bx,Boot                                         ;output buffer address
  1125                                                          mov     dx,0                                            ;head zero, drive zero
  1126                                                          mov     cx,1                                            ;track zero, sector one
  1127                                                          mov     al,1                                            ;one sector
  1128                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1129                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1130                                                          pop     cx                                              ;restore remaining retries
  1131                                                          jnc     .100                                            ;skip ahead if successful
  1132                                                          loop    .60                                             ;try again
  1133                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1134                                  ;
  1135                                  ;       Convert the error code to ASCII and display the error message.
  1136                                  ;
  1137                                  .70                     push    ax                                              ;save error code
  1138                                                          mov     al,ah                                           ;copy error code
  1139                                                          mov     ah,0                                            ;AX = error code
  1140                                                          mov     dl,10h                                          ;hexadecimal divisor
  1141                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1142                                                          or      ax,03030h                                       ;add ASCII zone digits
  1143                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1144                                                          jb      .80                                             ;yes, continue
  1145                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1146                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1147                                                          jb      .90                                             ;yes, continue
  1148                                                          add     al,7                                            ;no, make ASCII
  1149                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1150                                                          call    BootPrint                                       ;write error message
  1151                                                          pop     ax                                              ;restore error code
  1152                                  ;
  1153                                  ;       Display the completion message.
  1154                                  ;
  1155                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1156                                                          mov     al,ah                                           ;BIOS return code
  1157                                                          cmp     al,0                                            ;success?
  1158                                                          je      .110                                            ;yes, continue
  1159                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1160                                                          cmp     al,1                                            ;disk parameter error?
  1161                                                          je      .110                                            ;yes, continue
  1162                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1163                                                          cmp     al,2                                            ;address mark not found?
  1164                                                          je      .110                                            ;yes, continue
  1165                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1166                                                          cmp     al,3                                            ;protected disk?
  1167                                                          je      .110                                            ;yes, continue
  1168                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1169                                                          cmp     al,6                                            ;diskette removed?
  1170                                                          je      .110                                            ;yes, continue
  1171                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1172                                                          cmp     al,80H                                          ;drive timed out?
  1173                                                          je      .110                                            ;yes, continue
  1174                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1175                                  .110                    call    BootPrint                                       ;display result message
  1176                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1177                                                          int     021h                                            ;terminate DOS program
  1178                                                          ret                                                     ;return (should not execute)
  1179                                  ;-----------------------------------------------------------------------------------------------------------------------
  1180                                  ;
  1181                                  ;       Diskette Preparation Messages
  1182                                  ;
  1183                                  ;-----------------------------------------------------------------------------------------------------------------------
  1184                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1185                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1186                                                          db      13,10
  1187                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1188                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1189                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1190                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1191                                                          db      13,10,0
  1192                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1193                                                          db      13,10,0
  1194                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1195                                                          db      13,10,0
  1196                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1197                                                          db      13,10,0
  1198                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1199                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1200                                                          db      13,10,0
  1201                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1202                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1203                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1204                                                          db      13,10,"and retry."
  1205                                                          db      13,10,0
  1206                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1207                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1208                                                          db      13,10,"using another diskette."
  1209                                                          db      13,10,0
  1210                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1211                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1212                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1213                                                          db      13,10,0
  1214                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1215                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1216                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1217                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1218                                                          db      13,10,"is properly inserted in the diskette drive."
  1219                                                          db      13,10,0
  1220                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1221                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1222                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1223                                                          db      13,10,0
  1224                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1225                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1226                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1227                                                          db      13,10,0
  1228                                  wcPrepInBuf             equ     $
  1229                                  %endif
  1230                                  %ifdef BUILDDISK
  1231                                  ;=======================================================================================================================
  1232                                  ;
  1233                                  ;       File Allocation Tables
  1234                                  ;
  1235                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1236                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1237                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1238                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1239                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1240                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1241                                  ;       the last cluster in the chain.
  1242                                  ;
  1243                                  ;       Every three bytes encode two FAT entries as follows:
  1244                                  ;
  1245                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1246                                  ;
  1247                                  ;=======================================================================================================================
  1248                                  ;-----------------------------------------------------------------------------------------------------------------------
  1249                                  ;
  1250                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1251                                  ;
  1252                                  ;-----------------------------------------------------------------------------------------------------------------------
  1253                                  section                 fat1                                                    ;first copy of FAT
  1254 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1255 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1256 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1257 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1258 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1259 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1260 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1261 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1262 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1263 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1264 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1265 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1266                                  ;-----------------------------------------------------------------------------------------------------------------------
  1267                                  ;
  1268                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1269                                  ;
  1270                                  ;-----------------------------------------------------------------------------------------------------------------------
  1271                                  section                 fat2                                                    ;second copy of FAT
  1272 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1273 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1274 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1275 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1276 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1277 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1278 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1279 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1280 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1281 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1282 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1283 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1284                                  ;-----------------------------------------------------------------------------------------------------------------------
  1285                                  ;
  1286                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1287                                  ;
  1288                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1289                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1290                                  ;       copy.
  1291                                  ;
  1292                                  ;-----------------------------------------------------------------------------------------------------------------------
  1293                                  section                 dir                                                     ;diskette directory
  1294 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1294 00000009 4F4D               
  1295 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1296 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1297 00000016 0000                                            dw      0h                                              ;time
  1298 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1299 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1300 0000001A 0200                                            dw      2                                               ;first cluster
  1301 0000001C 00540000                                        dd      05400h                                          ;file size
  1302 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1303                                  %endif
  1304                                  %ifdef BUILDCOM
  1305                                  ;=======================================================================================================================
  1306                                  ;
  1307                                  ;       OS.COM
  1308                                  ;
  1309                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1310                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1311                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1312                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1313                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1314                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1315                                  ;
  1316                                  ;       Our loader addressability is set up according to the following diagram.
  1317                                  ;
  1318                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1319                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1320                                  ;                               |  256 = 100h bytes                             |
  1321                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1322                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1323                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1324                                  ;                       007e00  +-----------------------------------------------+
  1325                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1326                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1327                                  ;                               |                                               |
  1328                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1329                                  ;                               |                                               |
  1330                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1331                                  ;                               |  Loader Code                                  |
  1332                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1333                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1334                                  ;
  1335                                  ;=======================================================================================================================
  1336                                  ;-----------------------------------------------------------------------------------------------------------------------
  1337                                  ;
  1338                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1339                                  ;
  1340                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1341                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1342                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1343                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1344                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1345                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1346                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1347                                  ;       registers.
  1348                                  ;
  1349                                  ;-----------------------------------------------------------------------------------------------------------------------
  1350                                                          cpu     8086                                            ;assume minimal CPU
  1351                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1352                                                          bits    16                                              ;this is 16-bit code
  1353 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1354 00000001 1F                                              pop     ds                                              ;...as our data segment
  1355 00000002 0E                                              push    cs                                              ;use the code segment
  1356 00000003 07                                              pop     es                                              ;...as our extra segment
  1357                                  ;
  1358                                  ;       Write a message to the console so we know we have our addressability established.
  1359                                  ;
  1360 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1361 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1362                                  ;
  1363                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1364                                  ;
  1365 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1366 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1367 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1368 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1369                                                          cpu     386                                             ;allow 80386 instructions
  1370 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1371 00000017 E89600                                          call    PutTTYString                                    ;display message
  1372                                  ;
  1373                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1374                                  ;
  1375 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1376 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1377 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1378 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1379 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1380 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1381 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1382 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1383 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1384 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1385                                  ;
  1386                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1387                                  ;
  1388 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1389 00000038 07                                              pop     es                                              ;... as target segment
  1390 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1391 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1392 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1393 00000041 FC                                              cld                                                     ;forward strings
  1394 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1395 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1396 00000047 E86600                                          call    PutTTYString                                    ;display message
  1397                                  ;
  1398                                  ;       Switch to protected mode.
  1399                                  ;
  1400 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1401 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1402 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1403 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1404 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1405 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1406 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1407 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1408 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1409 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1410 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1411                                  ;
  1412                                  ;       Enable hardware and maskable interrupts.
  1413                                  ;
  1414 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1415 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1416 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1417 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1418                                  ;
  1419                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1420                                  ;
  1421 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1422 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1423 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1424                                  ;-----------------------------------------------------------------------------------------------------------------------
  1425                                  ;
  1426                                  ;       Routine:        LoaderExit
  1427                                  ;
  1428                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1429                                  ;
  1430                                  ;       In:             DS:SI   string address
  1431                                  ;
  1432                                  ;-----------------------------------------------------------------------------------------------------------------------
  1433 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1434                                  ;
  1435                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1436                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1437                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1438                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1439                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1440                                  ;
  1441 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1442 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1443 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1444 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1445 00000085 F4                                              hlt                                                     ;wait for interrupt
  1446 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1447                                  ;
  1448                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1449                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1450                                  ;       HLT until the system resets.
  1451                                  ;
  1452 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1453 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1454 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1455 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1456 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1457                                  ;-----------------------------------------------------------------------------------------------------------------------
  1458                                  ;
  1459                                  ;       Routine:        GetCPUType
  1460                                  ;
  1461                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1462                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1463                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1464                                  ;
  1465                                  ;       Out:            AX      0 = 808x, v20, etc.
  1466                                  ;                               1 = 80186
  1467                                  ;                               2 = 80286
  1468                                  ;                               3 = 80386
  1469                                  ;
  1470                                  ;-----------------------------------------------------------------------------------------------------------------------
  1471 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1472 00000092 B120                                            mov     cl,32                                           ;shift count
  1473 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1474 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1475 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1476                                                          cpu     186
  1477 0000009A 54                                              push    sp                                              ;save stack pointer
  1478 0000009B 59                                              pop     cx                                              ;...into cx
  1479 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1480 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1481                                                          cpu     286
  1482 000000A0 40                                              inc     ax                                              ;AX = 2
  1483 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1484 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1485 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1486 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1487 000000AE 40                                              inc     ax                                              ;AX = 3
  1488 000000AF C3                      .10                     ret                                                     ;return
  1489                                  ;-----------------------------------------------------------------------------------------------------------------------
  1490                                  ;
  1491                                  ;       Routine:        PutTTYString
  1492                                  ;
  1493                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1494                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1495                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1496                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1497                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1498                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1499                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1500                                  ;                       to LODSB is not needed.
  1501                                  ;
  1502                                  ;       In:             DS:SI   address of string
  1503                                  ;
  1504                                  ;       Out:            DF      0
  1505                                  ;                       ZF      1
  1506                                  ;                       AL      0
  1507                                  ;
  1508                                  ;-----------------------------------------------------------------------------------------------------------------------
  1509 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1510 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1511 000000B2 84C0                                            test    al,al                                           ;end of string?
  1512 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1513 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1514 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1515 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1516 000000BC C3                      .20                     ret                                                     ;return
  1517                                  ;-----------------------------------------------------------------------------------------------------------------------
  1518                                  ;
  1519                                  ;       Loader Data
  1520                                  ;
  1521                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1522                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1523                                  ;
  1524                                  ;-----------------------------------------------------------------------------------------------------------------------
  1525 000000BD 90                                              align   2
  1526 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1527 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1528 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1529 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1530 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1530 000000D1 74696E672073797374-
  1530 000000DA 656D20726571756972-
  1530 000000E3 657320616E20693338-
  1530 000000EC 36206F72206C617465-
  1530 000000F5 722070726F63657373-
  1530 000000FE 6F722E0D0A         
  1531 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1531 0000010C 65737320616E79206B-
  1531 00000115 657920746F20726573-
  1531 0000011E 746172742074686520-
  1531 00000127 636F6D70757465722E-
  1531 00000130 0D0A00             
  1532 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1533 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1533 00000145 7265640D0A00       
  1534 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1534 00000154 616465640D0A00     
  1535 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1535 00000164 4F530D0A00         
  1536 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1537                                  ;=======================================================================================================================
  1538                                  ;
  1539                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1540                                  ;
  1541                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1542                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1543                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1544                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1545                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1546                                  ;
  1547                                  ;=======================================================================================================================
  1548                                  ;=======================================================================================================================
  1549                                  ;
  1550                                  ;       Kernel Tables
  1551                                  ;
  1552                                  ;=======================================================================================================================
  1553                                  ;-----------------------------------------------------------------------------------------------------------------------
  1554                                  ;
  1555                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1556                                  ;
  1557                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1558                                  ;       first descriptor must be all nulls.
  1559                                  ;
  1560                                  ;       6   5         4         3         2         1         0
  1561                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1562                                  ;       ----------------------------------------------------------------
  1563                                  ;       h......hffffmmmma......ab......................bn..............n
  1564                                  ;
  1565                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1566                                  ;               ffff                                                            flags
  1567                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1568                                  ;                       a......a                                                access
  1569                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1570                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1571                                  ;
  1572                                  ;       00000000                                                                all areas have base addresses below 2^24
  1573                                  ;               0...                                                            single-byte size granularity
  1574                                  ;               1...                                                            4-kilobyte size granularity
  1575                                  ;               .0..                                                            16-bit default for code segments
  1576                                  ;               .1..                                                            32-bit default for code segments
  1577                                  ;               ..0.                                                            intel-reserved; should be zero
  1578                                  ;               ...0                                                            available for operating system use
  1579                                  ;                   0000                                                        segment is less than 2^16 in size
  1580                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1581                                  ;                       1.......                                                segment is present in memory
  1582                                  ;                       .00.....                                                segment is of privilege level 0
  1583                                  ;                       ...0....                                                segment is of system or gate type
  1584                                  ;                       ...00010                                                local decriptor table (LDT)
  1585                                  ;                       ...01001                                                task state segment (TSS) available
  1586                                  ;                       ...01011                                                task state segment (TSS) busy
  1587                                  ;                       ...10...                                                data segment
  1588                                  ;                       ...10011                                                writable data (accessed)
  1589                                  ;                       ...11...                                                code segment
  1590                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1591                                  ;
  1592                                  ;-----------------------------------------------------------------------------------------------------------------------
  1593                                  section                 gdt                                                     ;global descriptor table
  1594 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1595 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1596 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1597 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1598 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1599 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1600 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1601 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1602 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1603 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1604 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1605 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1606 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1607 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1608 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                  ;
  1611                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1612                                  ;
  1613                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1614                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1615                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1616                                  ;
  1617                                  ;       6   5         4         3         2         1         0
  1618                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1619                                  ;       ----------------------------------------------------------------
  1620                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1621                                  ;
  1622                                  ;       h...h   high-order offset (bits 16-31)
  1623                                  ;       P       present (0=unused interrupt)
  1624                                  ;       zz      descriptor privilege level
  1625                                  ;       S       storage segment (must be zero for IDT)
  1626                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1627                                  ;       S...S   handling code selector in GDT
  1628                                  ;       l...l   lo-order offset (bits 0-15)
  1629                                  ;
  1630                                  ;-----------------------------------------------------------------------------------------------------------------------
  1631                                  section                 idt                                                     ;interrupt descriptor table
  1632                                                          mint    dividebyzero                                    ;00 divide by zero
  1632                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1632 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1633                                                          mint    singlestep                                      ;01 single step
  1633                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1633 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1634                                                          mint    nmi                                             ;02 non-maskable
  1634                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1634 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1635                                                          mint    break                                           ;03 break
  1635                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1635 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1636                                                          mint    into                                            ;04 into
  1636                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1636 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1637                                                          mint    bounds                                          ;05 bounds
  1637                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1637 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1638                                                          mint    badopcode                                       ;06 bad op code
  1638                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1638 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1639                                                          mint    nocoproc                                        ;07 no coprocessor
  1639                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1639 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1640                                                          mint    doublefault                                     ;08 double-fault
  1640                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1640 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1641                                                          mint    operand                                         ;09 operand
  1641                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1641 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1642                                                          mint    badtss                                          ;0a bad TSS
  1642                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1642 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1643                                                          mint    notpresent                                      ;0b not-present
  1643                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1643 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1644                                                          mint    stacklimit                                      ;0c stack limit
  1644                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1644 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1645                                                          mint    protection                                      ;0d general protection fault
  1645                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1645 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1646                                                          mint    int14                                           ;0e (reserved)
  1646                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1646 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1647                                                          mint    int15                                           ;0f (reserved)
  1647                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1647 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1648                                                          mint    coproccalc                                      ;10 (reserved)
  1648                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1648 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1649                                                          mint    int17                                           ;11 (reserved)
  1649                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1649 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1650                                                          mint    int18                                           ;12 (reserved)
  1650                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1650 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1651                                                          mint    int19                                           ;13 (reserved)
  1651                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1651 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1652                                                          mint    int20                                           ;14 (reserved)
  1652                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1652 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1653                                                          mint    int21                                           ;15 (reserved)
  1653                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1653 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1654                                                          mint    int22                                           ;16 (reserved)
  1654                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1654 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1655                                                          mint    int23                                           ;17 (reserved)
  1655                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1655 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1656                                                          mint    int24                                           ;18 (reserved)
  1656                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1656 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1657                                                          mint    int25                                           ;19 (reserved)
  1657                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1657 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1658                                                          mint    int26                                           ;1a (reserved)
  1658                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1658 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1659                                                          mint    int27                                           ;1b (reserved)
  1659                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1659 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1660                                                          mint    int28                                           ;1c (reserved)
  1660                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1660 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1661                                                          mint    int29                                           ;1d (reserved)
  1661                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1661 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1662                                                          mint    int30                                           ;1e (reserved)
  1662                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1662 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1663                                                          mint    int31                                           ;1f (reserved)
  1663                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1663 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1664                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1664                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1664 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1665                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1665                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1665 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1666                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1666                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1666 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1667                                                          mtrap   com2                                            ;23 IRQ3 com2
  1667                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1667 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1668                                                          mtrap   com1                                            ;24 IRQ4 com1
  1668                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1668 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1669                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1669                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1669 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1670                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1670                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1670 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1671                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1671                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1671 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1672                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1672                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1672 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1673                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1673                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1673 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1674                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1674                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1674 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1675                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1675                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1675 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1676                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1676                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1676 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1677                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1677                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1677 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1678                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1678                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1678 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1679                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1679                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1679 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1680                                                          mtrap   svc                                             ;30 OS services
  1680                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1680 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1681 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1682                                  ;=======================================================================================================================
  1683                                  ;
  1684                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1685                                  ;
  1686                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1687                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1688                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1689                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1690                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1691                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1692                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1693                                  ;
  1694                                  ;=======================================================================================================================
  1695                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1696                                                          cpu     386                                             ;allow 80386 instructions
  1697                                                          bits    32                                              ;this is 32-bit code
  1698                                  ;=======================================================================================================================
  1699                                  ;
  1700                                  ;       CPU Interrupt Handlers
  1701                                  ;
  1702                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1703                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1704                                  ;
  1705                                  ;=======================================================================================================================
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                  ;
  1708                                  ;       INT0    Divide By Zero
  1709                                  ;
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                                          menter  dividebyzero                                    ;divide by zero
  1711                              <1> ?%1 equ ($-$$)
  1712 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1713 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1714 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1715                                  ;-----------------------------------------------------------------------------------------------------------------------
  1716                                  ;
  1717                                  ;       INT1    Single Step
  1718                                  ;
  1719                                  ;-----------------------------------------------------------------------------------------------------------------------
  1720                                                          menter  singlestep                                      ;single step
  1720                              <1> ?%1 equ ($-$$)
  1721 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1722 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1723 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1724                                  ;-----------------------------------------------------------------------------------------------------------------------
  1725                                  ;
  1726                                  ;       INT2    Non-Maskable Interrupt
  1727                                  ;
  1728                                  ;-----------------------------------------------------------------------------------------------------------------------
  1729                                                          menter  nmi                                             ;non-maskable
  1729                              <1> ?%1 equ ($-$$)
  1730 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1731 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1732 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1733                                  ;-----------------------------------------------------------------------------------------------------------------------
  1734                                  ;
  1735                                  ;       INT3    Break
  1736                                  ;
  1737                                  ;-----------------------------------------------------------------------------------------------------------------------
  1738                                                          menter  break                                           ;break
  1738                              <1> ?%1 equ ($-$$)
  1739 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1740 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1741 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1742                                  ;-----------------------------------------------------------------------------------------------------------------------
  1743                                  ;
  1744                                  ;       INT4    Into
  1745                                  ;
  1746                                  ;-----------------------------------------------------------------------------------------------------------------------
  1747                                                          menter  into                                            ;into
  1747                              <1> ?%1 equ ($-$$)
  1748 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1749 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1750 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1751                                  ;-----------------------------------------------------------------------------------------------------------------------
  1752                                  ;
  1753                                  ;       INT5    Bounds
  1754                                  ;
  1755                                  ;-----------------------------------------------------------------------------------------------------------------------
  1756                                                          menter  bounds                                          ;bounds
  1756                              <1> ?%1 equ ($-$$)
  1757 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1758 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1759 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1760                                  ;-----------------------------------------------------------------------------------------------------------------------
  1761                                  ;
  1762                                  ;       INT6    Bad Operation Code
  1763                                  ;
  1764                                  ;-----------------------------------------------------------------------------------------------------------------------
  1765                                                          menter  badopcode                                       ;bad opcode interrupt
  1765                              <1> ?%1 equ ($-$$)
  1766 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1767 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1768 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1769                                  ;-----------------------------------------------------------------------------------------------------------------------
  1770                                  ;
  1771                                  ;       INT7    No Coprocessor
  1772                                  ;
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1774                              <1> ?%1 equ ($-$$)
  1775 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1776 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1777 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1778                                  ;-----------------------------------------------------------------------------------------------------------------------
  1779                                  ;
  1780                                  ;       INT8    Double Fault
  1781                                  ;
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                                          menter  doublefault                                     ;doublefault interrupt
  1783                              <1> ?%1 equ ($-$$)
  1784 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1785 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1786 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                  ;
  1789                                  ;       INT9    Operand
  1790                                  ;
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                                          menter  operand                                         ;operand interrupt
  1792                              <1> ?%1 equ ($-$$)
  1793 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1794 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1795 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                  ;
  1798                                  ;       INT10   Bad Task State Segment
  1799                                  ;
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                                          menter  badtss                                          ;bad TSS interrupt
  1801                              <1> ?%1 equ ($-$$)
  1802 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1803 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1804 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                  ;
  1807                                  ;       INT11   Not Present
  1808                                  ;
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                                          menter  notpresent                                      ;not present interrupt
  1810                              <1> ?%1 equ ($-$$)
  1811 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1812 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1813 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                  ;
  1816                                  ;       INT12   Stack Limit
  1817                                  ;
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                                          menter  stacklimit                                      ;stack limit interrupt
  1819                              <1> ?%1 equ ($-$$)
  1820 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1821 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1822 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                  ;
  1825                                  ;       INT13   General Protection Fault
  1826                                  ;
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                                          menter  protection                                      ;protection fault interrupt
  1828                              <1> ?%1 equ ($-$$)
  1829 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1830 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1831 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                  ;
  1834                                  ;       INT14   Reserved
  1835                                  ;
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                                          menter  int14                                           ;(reserved)
  1837                              <1> ?%1 equ ($-$$)
  1838 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1839 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1840 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                  ;
  1843                                  ;       INT15   Reserved
  1844                                  ;
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                                          menter  int15                                           ;(reserved)
  1846                              <1> ?%1 equ ($-$$)
  1847 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1848 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1849 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                  ;
  1852                                  ;       INT16   Coprocessor Calculation
  1853                                  ;
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                                          menter  coproccalc                                      ;coprocessor calculation
  1855                              <1> ?%1 equ ($-$$)
  1856 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1857 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1858 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                  ;
  1861                                  ;       INT17   Reserved
  1862                                  ;
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                                          menter  int17                                           ;(reserved)
  1864                              <1> ?%1 equ ($-$$)
  1865 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1866 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1867 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                  ;
  1870                                  ;       INT18   Reserved
  1871                                  ;
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                                          menter  int18                                           ;(reserved)
  1873                              <1> ?%1 equ ($-$$)
  1874 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1875 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1876 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                  ;
  1879                                  ;       INT19   Reserved
  1880                                  ;
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                                          menter  int19                                           ;(reserved)
  1882                              <1> ?%1 equ ($-$$)
  1883 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1884 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1885 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                  ;
  1888                                  ;       INT20   Reserved
  1889                                  ;
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                                          menter  int20                                           ;(reserved)
  1891                              <1> ?%1 equ ($-$$)
  1892 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1893 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1894 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                  ;
  1897                                  ;       INT21   Reserved
  1898                                  ;
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                                          menter  int21                                           ;(reserved)
  1900                              <1> ?%1 equ ($-$$)
  1901 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1902 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1903 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1904                                  ;-----------------------------------------------------------------------------------------------------------------------
  1905                                  ;
  1906                                  ;       INT22   Reserved
  1907                                  ;
  1908                                  ;-----------------------------------------------------------------------------------------------------------------------
  1909                                                          menter  int22                                           ;(reserved)
  1909                              <1> ?%1 equ ($-$$)
  1910 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1911 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1912 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                  ;
  1915                                  ;       INT23   Reserved
  1916                                  ;
  1917                                  ;-----------------------------------------------------------------------------------------------------------------------
  1918                                                          menter  int23                                           ;(reserved)
  1918                              <1> ?%1 equ ($-$$)
  1919 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1920 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1921 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1922                                  ;-----------------------------------------------------------------------------------------------------------------------
  1923                                  ;
  1924                                  ;       INT24   Reserved
  1925                                  ;
  1926                                  ;-----------------------------------------------------------------------------------------------------------------------
  1927                                                          menter  int24                                           ;(reserved)
  1927                              <1> ?%1 equ ($-$$)
  1928 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1929 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1930 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1931                                  ;-----------------------------------------------------------------------------------------------------------------------
  1932                                  ;
  1933                                  ;       INT25   Reserved
  1934                                  ;
  1935                                  ;-----------------------------------------------------------------------------------------------------------------------
  1936                                                          menter  int25                                           ;(reserved)
  1936                              <1> ?%1 equ ($-$$)
  1937 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1938 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1939 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1940                                  ;-----------------------------------------------------------------------------------------------------------------------
  1941                                  ;
  1942                                  ;       INT26   Reserved
  1943                                  ;
  1944                                  ;-----------------------------------------------------------------------------------------------------------------------
  1945                                                          menter  int26                                           ;(reserved)
  1945                              <1> ?%1 equ ($-$$)
  1946 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1947 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1948 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1949                                  ;-----------------------------------------------------------------------------------------------------------------------
  1950                                  ;
  1951                                  ;       INT27   Reserved
  1952                                  ;
  1953                                  ;-----------------------------------------------------------------------------------------------------------------------
  1954                                                          menter  int27                                           ;(reserved)
  1954                              <1> ?%1 equ ($-$$)
  1955 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1956 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1957 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1958                                  ;-----------------------------------------------------------------------------------------------------------------------
  1959                                  ;
  1960                                  ;       INT28   Reserved
  1961                                  ;
  1962                                  ;-----------------------------------------------------------------------------------------------------------------------
  1963                                                          menter  int28                                           ;(reserved)
  1963                              <1> ?%1 equ ($-$$)
  1964 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1965 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1966 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1967                                  ;-----------------------------------------------------------------------------------------------------------------------
  1968                                  ;
  1969                                  ;       INT29   Reserved
  1970                                  ;
  1971                                  ;-----------------------------------------------------------------------------------------------------------------------
  1972                                                          menter  int29                                           ;(reserved)
  1972                              <1> ?%1 equ ($-$$)
  1973 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1974 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1975 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1976                                  ;-----------------------------------------------------------------------------------------------------------------------
  1977                                  ;
  1978                                  ;       INT30   Reserved
  1979                                  ;
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                                          menter  int30                                           ;(reserved)
  1981                              <1> ?%1 equ ($-$$)
  1982 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1983 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1984 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1985                                  ;-----------------------------------------------------------------------------------------------------------------------
  1986                                  ;
  1987                                  ;       INT31   Reserved
  1988                                  ;
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990                                                          menter  int31                                           ;(reserved)
  1990                              <1> ?%1 equ ($-$$)
  1991 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1992 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1993 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1994                                  ;-----------------------------------------------------------------------------------------------------------------------
  1995                                  ;
  1996                                  ;       Routine:        ReportInterrupt
  1997                                  ;
  1998                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1999                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  2000                                  ;
  2001                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  2002                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  2003                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  2004                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  2005                                  ;                       [ESP+0]         error message address                   stored by push instructions
  2006                                  ;
  2007                                  ;       Out:            N/A             This routine does not exit.
  2008                                  ;
  2009                                  ;-----------------------------------------------------------------------------------------------------------------------
  2010 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  2011 00000154 06                                              push    es                                              ;save ES at time of interrupt
  2012 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  2013 00000156 89E5                                            mov     ebp,esp                                         ;EBP --> [EDI]
  2014                                  ;
  2015                                  ;       Addressability to registers at the time of the interrupt is now established as:
  2016                                  ;
  2017                                  ;                       [EBP+56]        EFLAGS
  2018                                  ;                       [EBP+52]        CS
  2019                                  ;                       [EBP+48]        EIP
  2020                                  ;                       [EBP+44]        interrupt number (0-31)
  2021                                  ;                       [EBP+40]        error message address
  2022                                  ;                       [EBP+36]        DS
  2023                                  ;                       [EBP+32]        ES
  2024                                  ;                       [EBP+28]        EAX
  2025                                  ;                       [EBP+24]        ECX
  2026                                  ;                       [EBP+20]        EDX
  2027                                  ;                       [EBP+16]        EBX
  2028                                  ;                       [EBP+12]        ESP
  2029                                  ;                       [EBP+8]         EBP
  2030                                  ;                       [EBP+4]         ESI
  2031                                  ;                       [EBP+0]         EDI
  2032                                  ;
  2033 00000158 0E                                              push    cs                                              ;load code selector ...
  2034 00000159 1F                                              pop     ds                                              ;... into DS
  2035 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  2036 0000015C 07                                              pop     es                                              ;... into ES
  2037                                  ;
  2038                                  ;       Display the interrupt report boundary box
  2039                                  ;
  2040 0000015D B10D                                            mov     cl,13                                           ;column
  2041 0000015F B506                                            mov     ch,6                                            ;row
  2042 00000161 B232                                            mov     dl,50                                           ;width
  2043 00000163 B608                                            mov     dh,8                                            ;height
  2044 00000165 B707                                            mov     bh,07h                                          ;attribute
  2045 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  2046                                  ;
  2047                                  ;       Display the report header
  2048                                  ;
  2049 0000016C B10F                                            mov     cl,15                                           ;column
  2050 0000016E B507                                            mov     ch,7                                            ;row
  2051 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  2052 00000175 E843110000                                      call    SetConsoleString                                ;draw text string
  2053                                  ;
  2054                                  ;       Display the interrupt description label
  2055                                  ;
  2056 0000017A B10F                                            mov     cl,15                                           ;column
  2057 0000017C B508                                            mov     ch,8                                            ;row
  2058 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  2059 00000183 E835110000                                      call    SetConsoleString                                ;draw text string
  2060                                  ;
  2061                                  ;       Display the interrupt number
  2062                                  ;
  2063 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  2064 0000018B B11A                                            mov     cl,26                                           ;column
  2065 0000018D B508                                            mov     ch,8                                            ;row
  2066 0000018F E8DE0D0000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  2067                                  ;
  2068                                  ;       Display the interrupt name
  2069                                  ;
  2070 00000194 B11D                                            mov     cl,29                                           ;column
  2071 00000196 B508                                            mov     ch,8                                            ;row
  2072 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2073 0000019B E81D110000                                      call    SetConsoleString                                ;display interrupt description
  2074                                  ;
  2075                                  ;       Display the register values header
  2076                                  ;
  2077 000001A0 B10F                                            mov     cl,15                                           ;column
  2078 000001A2 B50A                                            mov     ch,10                                           ;row
  2079 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  2080 000001A9 E80F110000                                      call    SetConsoleString                                ;draw text string
  2081                                  ;
  2082                                  ;       Display the EAX register label and value
  2083                                  ;
  2084 000001AE B10F                                            mov     cl,15                                           ;column
  2085 000001B0 B50B                                            mov     ch,11                                           ;row
  2086 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  2087 000001B7 E801110000                                      call    SetConsoleString                                ;draw label
  2088 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2089 000001BF B113                                            mov     cl,19                                           ;column
  2090 000001C1 B50B                                            mov     ch,11                                           ;row
  2091 000001C3 E8C40D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2092                                  ;
  2093                                  ;       Display the ECX register label and value
  2094                                  ;
  2095 000001C8 B10F                                            mov     cl,15                                           ;column
  2096 000001CA B50C                                            mov     ch,12                                           ;row
  2097 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2098 000001D1 E8E7100000                                      call    SetConsoleString                                ;draw label
  2099 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2100 000001D9 B113                                            mov     cl,19                                           ;column
  2101 000001DB B50C                                            mov     ch,12                                           ;row
  2102 000001DD E8AA0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2103                                  ;
  2104                                  ;       Display the EDX register label and value
  2105                                  ;
  2106 000001E2 B10F                                            mov     cl,15                                           ;column
  2107 000001E4 B50D                                            mov     ch,13                                           ;row
  2108 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2109 000001EB E8CD100000                                      call    SetConsoleString                                ;draw label
  2110 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2111 000001F3 B113                                            mov     cl,19                                           ;column
  2112 000001F5 B50D                                            mov     ch,13                                           ;row
  2113 000001F7 E8900D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2114                                  ;
  2115                                  ;       Display the EBX register label and value
  2116                                  ;
  2117 000001FC B10F                                            mov     cl,15                                           ;column
  2118 000001FE B50E                                            mov     ch,14                                           ;row
  2119 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2120 00000205 E8B3100000                                      call    SetConsoleString                                ;draw label
  2121 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2122 0000020D B113                                            mov     cl,19                                           ;column
  2123 0000020F B50E                                            mov     ch,14                                           ;row
  2124 00000211 E8760D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2125                                  ;
  2126                                  ;       Display the ESI register label and value
  2127                                  ;
  2128 00000216 B11D                                            mov     cl,29                                           ;column
  2129 00000218 B50B                                            mov     ch,11                                           ;row
  2130 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2131 0000021F E899100000                                      call    SetConsoleString                                ;draw label
  2132 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2133 00000227 B121                                            mov     cl,33                                           ;column
  2134 00000229 B50B                                            mov     ch,11                                           ;row
  2135 0000022B E85C0D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2136                                  ;
  2137                                  ;       Display the EDI register label and value
  2138                                  ;
  2139 00000230 B11D                                            mov     cl,29                                           ;column
  2140 00000232 B50C                                            mov     ch,12                                           ;row
  2141 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2142 00000239 E87F100000                                      call    SetConsoleString                                ;draw label
  2143 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2144 00000241 B121                                            mov     cl,33                                           ;column
  2145 00000243 B50C                                            mov     ch,12                                           ;row
  2146 00000245 E8420D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2147                                  ;
  2148                                  ;       Display the EBP register label and value
  2149                                  ;
  2150 0000024A B11D                                            mov     cl,29                                           ;column
  2151 0000024C B50D                                            mov     ch,13                                           ;row
  2152 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2153 00000253 E865100000                                      call    SetConsoleString                                ;draw label
  2154 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2155 0000025B B121                                            mov     cl,33                                           ;column
  2156 0000025D B50D                                            mov     ch,13                                           ;row
  2157 0000025F E8280D0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2158                                  ;
  2159                                  ;       Display the DS register label and value
  2160                                  ;
  2161 00000264 B12A                                            mov     cl,42                                           ;column
  2162 00000266 B50B                                            mov     ch,11                                           ;row
  2163 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2164 0000026D E84B100000                                      call    SetConsoleString                                ;draw label
  2165 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2166 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2167 00000278 B12E                                            mov     cl,46                                           ;column
  2168 0000027A B50B                                            mov     ch,11                                           ;row
  2169 0000027C E81B0D0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2170                                  ;
  2171                                  ;       Display the ES register label and value
  2172                                  ;
  2173 00000281 B12A                                            mov     cl,42                                           ;column
  2174 00000283 B50C                                            mov     ch,12                                           ;row
  2175 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2176 0000028A E82E100000                                      call    SetConsoleString                                ;draw label
  2177 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2178 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2179 00000295 B12E                                            mov     cl,46                                           ;column
  2180 00000297 B50C                                            mov     ch,12                                           ;row
  2181 00000299 E8FE0C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2182                                  ;
  2183                                  ;       Display the SS register label and value
  2184                                  ;
  2185 0000029E B12A                                            mov     cl,42                                           ;column
  2186 000002A0 B50D                                            mov     ch,13                                           ;row
  2187 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2188 000002A7 E811100000                                      call    SetConsoleString                                ;draw label
  2189 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2190 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2191 000002B1 B12E                                            mov     cl,46                                           ;column
  2192 000002B3 B50D                                            mov     ch,13                                           ;row
  2193 000002B5 E8E20C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2194                                  ;
  2195                                  ;       Display the CS register lable and value
  2196                                  ;
  2197 000002BA B12A                                            mov     cl,42                                           ;column
  2198 000002BC B50E                                            mov     ch,14                                           ;row
  2199 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2200 000002C3 E8F50F0000                                      call    SetConsoleString                                ;draw label
  2201 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2202 000002CA 668B4534                                        mov     ax,[ebp+52]                                     ;CS
  2203 000002CE B12E                                            mov     cl,46                                           ;column
  2204 000002D0 B50E                                            mov     ch,14                                           ;row
  2205 000002D2 E8C50C0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2206                                  ;
  2207                                  ;       Display the EFLAGS register label and value
  2208                                  ;
  2209 000002D7 B133                                            mov     cl,51                                           ;column
  2210 000002D9 B50B                                            mov     ch,11                                           ;row
  2211 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2212 000002E0 E8D80F0000                                      call    SetConsoleString                                ;draw label
  2213 000002E5 8B4538                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2214 000002E8 B137                                            mov     cl,55                                           ;column
  2215 000002EA B50B                                            mov     ch,11                                           ;row
  2216 000002EC E89B0C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2217                                  ;
  2218                                  ;       Display the ESP register label and value
  2219                                  ;
  2220 000002F1 B133                                            mov     cl,51                                           ;column
  2221 000002F3 B50D                                            mov     ch,13                                           ;row
  2222 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2223 000002FA E8BE0F0000                                      call    SetConsoleString                                ;draw label
  2224 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2225 00000302 B137                                            mov     cl,55                                           ;column
  2226 00000304 B50D                                            mov     ch,13                                           ;row
  2227 00000306 E8810C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2228                                  ;
  2229                                  ;       Display the EIP register label and value
  2230                                  ;
  2231 0000030B B133                                            mov     cl,51                                           ;column
  2232 0000030D B50E                                            mov     ch,14                                           ;row
  2233 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2234 00000314 E8A40F0000                                      call    SetConsoleString                                ;draw label
  2235 00000319 8B4530                                          mov     eax,[ebp+48]                                    ;EIP lo-order 32-bits
  2236 0000031C B137                                            mov     cl,55                                           ;column
  2237 0000031E B50E                                            mov     ch,14                                           ;row
  2238 00000320 E8670C0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2239                                  ;
  2240                                  ;       Halt and loop until reset
  2241                                  ;
  2242 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2243 00000326 F4                                              hlt                                                     ;halt processor
  2244 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2245                                  ;-----------------------------------------------------------------------------------------------------------------------
  2246                                  ;
  2247                                  ;       Processor Interrupt Name Strings
  2248                                  ;
  2249                                  ;-----------------------------------------------------------------------------------------------------------------------
  2250 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2250 00000332 6279207A65726F00   
  2251 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2251 00000343 657000             
  2252 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2252 0000034F 626C6520696E746572-
  2252 00000358 7275707400         
  2253 0000035D 427265616B00            czIntBreak              db      "Break",0
  2254 00000363 496E746F00              czIntInto               db      "Into",0
  2255 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2256 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2256 00000378 74696F6E20436F6465-
  2256 00000381 00                 
  2257 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2257 0000038B 6573736F7200       
  2258 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2258 0000039A 756C7400           
  2259 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2260 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2260 000003AF 537461746520536567-
  2260 000003B8 6D656E7400         
  2261 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2261 000003C6 6E7400             
  2262 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2262 000003D2 697400             
  2263 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2263 000003DE 726F74656374696F6E-
  2263 000003E7 204661756C7400     
  2264 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2264 000003F7 6F722043616C63756C-
  2264 00000400 6174696F6E00       
  2265 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2266                                  ;-----------------------------------------------------------------------------------------------------------------------
  2267                                  ;
  2268                                  ;       Processor Interrupt Handling Strings
  2269                                  ;
  2270                                  ;-----------------------------------------------------------------------------------------------------------------------
  2271 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2271 00000418 6C65642070726F6365-
  2271 00000421 73736F7220696E7465-
  2271 0000042A 727275707420686173-
  2271 00000433 206F63637572726564-
  2271 0000043C 3A00               
  2272 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2272 00000447 202300             
  2273 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2273 00000453 206174207468652074-
  2273 0000045C 696D65206F66207468-
  2273 00000465 6520696E7465727275-
  2273 0000046E 70743A00           
  2274 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2275 00000477 4543583A00              czIntECX                db      "ECX:",0
  2276 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2277 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2278 00000486 4553493A00              czIntESI                db      "ESI:",0
  2279 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2280 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2281 00000495 4553503A00              czIntESP                db      "ESP:",0
  2282 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2283 0000049F 2045533A00              czIntES                 db      " ES:",0
  2284 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2285 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2286 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2287 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2288                                  ;-----------------------------------------------------------------------------------------------------------------------
  2289                                  ;
  2290                                  ;       Routine:        DrawTextDialogBox
  2291                                  ;
  2292                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2293                                  ;
  2294                                  ;       In:             CL      upper left column (0-79)
  2295                                  ;                       CH      upper left row (0-24)
  2296                                  ;                       DL      column width, excluding border
  2297                                  ;                       DH      row height, excluding border
  2298                                  ;                       BH      color attribute
  2299                                  ;
  2300                                  ;-----------------------------------------------------------------------------------------------------------------------
  2301 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2302 000004B9 56                                              push    esi                                             ;
  2303 000004BA 57                                              push    edi                                             ;
  2304 000004BB 06                                              push    es                                              ;
  2305 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2306 000004BE 07                                              pop     es                                              ;... into ES
  2307                                  ;
  2308                                  ;       Compute target display offset
  2309                                  ;
  2310 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2311 000004C1 88E8                                            mov     al,ch                                           ;row
  2312 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2313 000004C5 F6E4                                            mul     ah                                              ;row offset
  2314 000004C7 00C8                                            add     al,cl                                           ;add column
  2315 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2316 000004CC 00C8                                            add     al,cl                                           ;add column
  2317 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2318 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2319                                  ;
  2320                                  ;       Display top border row
  2321                                  ;
  2322 000004D3 57                                              push    edi                                             ;save target row offset
  2323 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2324 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2325 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2326 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2327 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2328 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2329 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2330 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2331 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2332 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2333 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2334                                  ;
  2335                                  ;       Display dialog box body rows
  2336                                  ;
  2337 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2338 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2339 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2340 000004F3 57                                              push    edi                                             ;save target row offset
  2341 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2342 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2343 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2344 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2345 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2346 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2347 00000500 F366AB                                          rep     stosw                                           ;display row
  2348 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2349 00000505 66AB                                            stosw                                                   ;display character and attribute
  2350 00000507 5F                                              pop     edi                                             ;restore target row offset
  2351 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2352 0000050E 59                                              pop     ecx                                             ;remaining rows
  2353 0000050F E2E1                                            loop    .10                                             ;next row
  2354                                  ;
  2355                                  ;       Display bottom border row
  2356                                  ;
  2357 00000511 57                                              push    edi                                             ;save target row offset
  2358 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2359 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2360 00000516 66AB                                            stosw                                                   ;display character and attribute
  2361 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2362 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2363 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2364 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2365 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2366 00000523 66AB                                            stosw                                                   ;display character and attribute
  2367 00000525 5F                                              pop     edi                                             ;restore target row offset
  2368 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2369                                  ;
  2370                                  ;       Restore and return
  2371                                  ;
  2372 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2373 0000052D 5F                                              pop     edi                                             ;
  2374 0000052E 5E                                              pop     esi                                             ;
  2375 0000052F 59                                              pop     ecx                                             ;
  2376 00000530 C3                                              ret                                                     ;return
  2377                                  ;=======================================================================================================================
  2378                                  ;
  2379                                  ;       Hardware Device Interupts
  2380                                  ;
  2381                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2382                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2383                                  ;       (BX=2028h).
  2384                                  ;
  2385                                  ;=======================================================================================================================
  2386                                  ;-----------------------------------------------------------------------------------------------------------------------
  2387                                  ;
  2388                                  ;       IRQ0    Clock Tick Interrupt
  2389                                  ;
  2390                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2391                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2392                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2393                                  ;
  2394                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2395                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2396                                  ;
  2397                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2398                                  ;       zero, the floppy disk motors are turned off.
  2399                                  ;
  2400                                  ;-----------------------------------------------------------------------------------------------------------------------
  2401                                                          menter  clocktick                                       ;clock tick interrupt
  2401                              <1> ?%1 equ ($-$$)
  2402 00000531 50                                              push    eax                                             ;save non-volatile regs
  2403 00000532 52                                              push    edx                                             ;
  2404 00000533 1E                                              push    ds                                              ;
  2405                                  ;
  2406                                  ;       Update the clock tick count and the elapsed days as needed.
  2407                                  ;
  2408 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2409 00000536 1F                                              pop     ds                                              ;... into data segment register
  2410 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2411 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2412 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2413 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2414 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2415 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2416 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2417                                  ;
  2418                                  ;       Decrement floppy disk motor timeout.
  2419                                  ;
  2420 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2421 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2422 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2423 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2424                                  ;
  2425                                  ;       Turn off the floppy disk motor if appropriate.
  2426                                  ;
  2427 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2428 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2429 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2430 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2431 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2432 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2433 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2434 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2435 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2436 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2437 00000577 EE                                              out     dx,al                                           ;turn motor off
  2438                                  ;
  2439                                  ;       Signal the end of the hardware interrupt.
  2440                                  ;
  2441 00000578 E8A50D0000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2442                                  ;
  2443                                  ;       Restore and return.
  2444                                  ;
  2445 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2446 0000057E 5A                                              pop     edx                                             ;
  2447 0000057F 58                                              pop     eax                                             ;
  2448 00000580 CF                                              iretd                                                   ;return
  2449                                  ;-----------------------------------------------------------------------------------------------------------------------
  2450                                  ;
  2451                                  ;       IRQ1    Keyboard Interrupt
  2452                                  ;
  2453                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2454                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2455                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2456                                  ;       ALL modified registers upon return.
  2457                                  ;
  2458                                  ;-----------------------------------------------------------------------------------------------------------------------
  2459                                                          menter  keyboard                                        ;keyboard interrrupt
  2459                              <1> ?%1 equ ($-$$)
  2460 00000581 50                                              push    eax                                             ;save non-volatile regs
  2461 00000582 53                                              push    ebx                                             ;
  2462 00000583 51                                              push    ecx                                             ;
  2463 00000584 56                                              push    esi                                             ;
  2464 00000585 1E                                              push    ds                                              ;
  2465 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2466 00000588 1F                                              pop     ds                                              ;... into data segment register
  2467 00000589 30C0                                            xor     al,al                                           ;zero
  2468 0000058B A219080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2469 00000590 A21A080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2470 00000595 A21B080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2471 0000059A A21C080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2472 0000059F A21D080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2473 000005A4 A21E080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2474 000005A9 B020                                            mov     al,' '                                          ;space
  2475 000005AB A21F080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2476 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2477 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2478 000005B4 200518080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2479 000005BA 8A1D16080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2480 000005C0 8A3D17080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2481 000005C6 E80C0E0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2482 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2483 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2484 000005D3 A219080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2485 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2486 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2487 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2488 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2489 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2490 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2491 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2492 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2493 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2494 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2495 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2496 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2497 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2498 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2499 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2500 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2501 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2502 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2503 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2504 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2505 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2506 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2507 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2508 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2509 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2510 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2511 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2512 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2513 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2514 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2515 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2516 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2517 00000654 E87E0D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2518 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2519 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2520 00000661 A21A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2521 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2522 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2523 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2524 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2525 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2526 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2527 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2528 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2529 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2530 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2531 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2532 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2533 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2534 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2535 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2536 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2537 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2538 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2539 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2540 0000069C E8360D0000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2541 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2542 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2543 000006A9 A21B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2544 000006AE E8240D0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2545 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2546 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2547 000006BB A21C080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2548 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2549 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2550 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2551 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2552 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2553 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2554 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2555 000006D1 E8D20C0000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2556 000006D6 881D16080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2557 000006DC 883D17080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2558 000006E2 E81D090000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2559 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2560 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2561 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2562 000006F1 E8E10C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2563 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2564 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2565 000006FE A21A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2566 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2567 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2568 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2569 0000070E E8C40C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2570 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2571 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2572 0000071B A21B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2573 00000720 E8B20C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2574 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2575 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2576 0000072D A21C080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2577 00000732 E8A00C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2578 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2579 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2580 0000073F A21D080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2581 00000744 E88E0C0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2582 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2583 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2584 0000074D A21E080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2585 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2586 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2587 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2588 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2589 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2590 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2591 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2592 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2593 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2594 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2595 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2596 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2597 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2598 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2599 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2600 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2601 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2602 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2603 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2604 00000787 A21F080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2605 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2606 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2607 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2608 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2609 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2610 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2611 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2612 000007A4 50                                              push    eax                                             ;save codes
  2613 000007A5 E86E0A0000                                      call    PutMessage                                      ;put message to console
  2614 000007AA 58                                              pop     eax                                             ;restore codes
  2615 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2616 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2617 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2618 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2619 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2620 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2621 000007BD E8560A0000                                      call    PutMessage                                      ;put message to console
  2622 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2623 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2624 000007C6 080518080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2625 000007CC E8DB070000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2626 000007D1 E84C0B0000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2627 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2628 000007D7 5E                                              pop     esi                                             ;
  2629 000007D8 59                                              pop     ecx                                             ;
  2630 000007D9 5B                                              pop     ebx                                             ;
  2631 000007DA 58                                              pop     eax                                             ;
  2632 000007DB CF                                              iretd                                                   ;return
  2633                                  ;-----------------------------------------------------------------------------------------------------------------------
  2634                                  ;       Scan-Code to ASCII Translation Tables
  2635                                  ;-----------------------------------------------------------------------------------------------------------------------
  2636 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2637 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2638 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2639 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2640 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2641 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2642 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2643 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2644 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2645 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2646 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2647 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2648 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2649 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2650 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2651 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2652 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2653 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2654 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2655 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2656 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2657 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2658 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2659 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2660 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2661 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2662 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2663 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2664 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2665 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2666 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2667 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669                                  ;
  2670                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2671                                  ;
  2672                                  ;-----------------------------------------------------------------------------------------------------------------------
  2673                                                          menter  iochannel                                       ;secondary 8259A cascade
  2673                              <1> ?%1 equ ($-$$)
  2674 000008DC 50                                              push    eax                                             ;save modified regs
  2675 000008DD EB3F                                            jmp     hwint                                           ;end interrupt and return
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677                                  ;
  2678                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2679                                  ;
  2680                                  ;-----------------------------------------------------------------------------------------------------------------------
  2681                                                          menter  com2                                            ;serial port 2 interrupt
  2681                              <1> ?%1 equ ($-$$)
  2682 000008DF 50                                              push    eax                                             ;save modified regs
  2683 000008E0 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2684                                  ;-----------------------------------------------------------------------------------------------------------------------
  2685                                  ;
  2686                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2687                                  ;
  2688                                  ;-----------------------------------------------------------------------------------------------------------------------
  2689                                                          menter  com1                                            ;serial port 1 interrupt
  2689                              <1> ?%1 equ ($-$$)
  2690 000008E2 50                                              push    eax                                             ;save modified regs
  2691 000008E3 EB39                                            jmp     hwint                                           ;end interrupt and return
  2692                                  ;-----------------------------------------------------------------------------------------------------------------------
  2693                                  ;
  2694                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2695                                  ;
  2696                                  ;-----------------------------------------------------------------------------------------------------------------------
  2697                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2697                              <1> ?%1 equ ($-$$)
  2698 000008E5 50                                              push    eax                                             ;save modified regs
  2699 000008E6 EB36                                            jmp     hwint                                           ;end interrupt and return
  2700                                  ;-----------------------------------------------------------------------------------------------------------------------
  2701                                  ;
  2702                                  ;       IRQ6    Diskette Hardware Interrupt
  2703                                  ;
  2704                                  ;-----------------------------------------------------------------------------------------------------------------------
  2705                                                          menter  diskette                                        ;floppy disk interrupt
  2705                              <1> ?%1 equ ($-$$)
  2706 000008E8 50                                              push    eax                                             ;save non-volatile regs
  2707 000008E9 1E                                              push    ds                                              ;
  2708 000008EA 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2709 000008EC 1F                                              pop     ds                                              ;... into DS register
  2710 000008ED A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2711 000008F2 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2712 000008F4 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2713 000008F9 1F                                              pop     ds                                              ;restore non-volatile regs
  2714 000008FA EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2715                                  ;-----------------------------------------------------------------------------------------------------------------------
  2716                                  ;
  2717                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2718                                  ;
  2719                                  ;-----------------------------------------------------------------------------------------------------------------------
  2720                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2720                              <1> ?%1 equ ($-$$)
  2721 000008FC 50                                              push    eax                                             ;save modified regs
  2722 000008FD EB1F                                            jmp     hwint                                           ;end interrupt and return
  2723                                  ;-----------------------------------------------------------------------------------------------------------------------
  2724                                  ;
  2725                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2726                                  ;
  2727                                  ;-----------------------------------------------------------------------------------------------------------------------
  2728                                                          menter  rtclock                                         ;real-time clock interrupt
  2728                              <1> ?%1 equ ($-$$)
  2729 000008FF 50                                              push    eax                                             ;save modified regs
  2730 00000900 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2731                                  ;-----------------------------------------------------------------------------------------------------------------------
  2732                                  ;
  2733                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2734                                  ;
  2735                                  ;-----------------------------------------------------------------------------------------------------------------------
  2736                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2736                              <1> ?%1 equ ($-$$)
  2737 00000902 50                                              push    eax                                             ;save modified regs
  2738 00000903 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2739                                  ;-----------------------------------------------------------------------------------------------------------------------
  2740                                  ;
  2741                                  ;       IRQ10   Reserved Hardware Interrupt
  2742                                  ;
  2743                                  ;-----------------------------------------------------------------------------------------------------------------------
  2744                                                          menter  irq10                                           ;reserved
  2744                              <1> ?%1 equ ($-$$)
  2745 00000905 50                                              push    eax                                             ;save modified regs
  2746 00000906 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2747                                  ;-----------------------------------------------------------------------------------------------------------------------
  2748                                  ;
  2749                                  ;       IRQ11   Reserved Hardware Interrupt
  2750                                  ;
  2751                                  ;-----------------------------------------------------------------------------------------------------------------------
  2752                                                          menter  irq11                                           ;reserved
  2752                              <1> ?%1 equ ($-$$)
  2753 00000908 50                                              push    eax                                             ;save modified regs
  2754 00000909 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2755                                  ;-----------------------------------------------------------------------------------------------------------------------
  2756                                  ;
  2757                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2758                                  ;
  2759                                  ;-----------------------------------------------------------------------------------------------------------------------
  2760                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2760                              <1> ?%1 equ ($-$$)
  2761 0000090B 50                                              push    eax                                             ;save modified regs
  2762 0000090C EB09                                            jmp     hwwint                                          ;end interrupt and return
  2763                                  ;-----------------------------------------------------------------------------------------------------------------------
  2764                                  ;
  2765                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2766                                  ;
  2767                                  ;-----------------------------------------------------------------------------------------------------------------------
  2768                                                          menter  coprocessor                                     ;coprocessor interrupt
  2768                              <1> ?%1 equ ($-$$)
  2769 0000090E 50                                              push    eax                                             ;save modified regs
  2770 0000090F EB06                                            jmp     hwwint                                          ;end interrupt and return
  2771                                  ;-----------------------------------------------------------------------------------------------------------------------
  2772                                  ;
  2773                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2774                                  ;
  2775                                  ;-----------------------------------------------------------------------------------------------------------------------
  2776                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2776                              <1> ?%1 equ ($-$$)
  2777 00000911 50                                              push    eax                                             ;save modified regs
  2778 00000912 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2779                                  ;-----------------------------------------------------------------------------------------------------------------------
  2780                                  ;
  2781                                  ;       IRQ15   Reserved Hardware Interrupt
  2782                                  ;
  2783                                  ;-----------------------------------------------------------------------------------------------------------------------
  2784                                                          menter  irq15                                           ;reserved
  2784                              <1> ?%1 equ ($-$$)
  2785 00000914 50                                              push    eax                                             ;save modified regs
  2786 00000915 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2787                                  ;-----------------------------------------------------------------------------------------------------------------------
  2788                                  ;
  2789                                  ;       Exit from hardware interrupt
  2790                                  ;
  2791                                  ;-----------------------------------------------------------------------------------------------------------------------
  2792 00000917 E80C0A0000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2793 0000091C EB05                                            jmp     hwint90                                         ;skip ahead
  2794 0000091E E8FF090000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2795 00000923 58                      hwint90                 pop     eax                                             ;restore modified regs
  2796 00000924 CF                                              iretd                                                   ;return from interrupt
  2797                                  ;-----------------------------------------------------------------------------------------------------------------------
  2798                                  ;
  2799                                  ;       INT 30h Operating System Software Service Interrupt
  2800                                  ;
  2801                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2802                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2803                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2804                                  ;       the entry address of the specific function from a table.
  2805                                  ;
  2806                                  ;-----------------------------------------------------------------------------------------------------------------------
  2807                                                          menter  svc
  2807                              <1> ?%1 equ ($-$$)
  2808 00000925 3C1D                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2809 00000927 730D                                            jae     svc90                                           ;yes, skip ahead
  2810 00000929 0FB6C0                                          movzx   eax,al                                          ;function
  2811 0000092C C1E002                                          shl     eax,2                                           ;offset into table
  2812 0000092F 2EFF90[37090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2813 00000936 CF                      svc90                   iretd                                                   ;return from interrupt
  2814                                  ;-----------------------------------------------------------------------------------------------------------------------
  2815                                  ;
  2816                                  ;       Service Request Table
  2817                                  ;
  2818                                  ;
  2819                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2820                                  ;
  2821                                  ;-----------------------------------------------------------------------------------------------------------------------
  2822                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2822                              <1> tsvc :
  2822                              <1> e%1 equ ($-tsvc)/4
  2822 00000937 [D00B0000]          <1>  dd %1
  2823                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2823                              <1> e%1 equ ($-tsvc)/4
  2823 0000093B [40120000]          <1>  dd %1
  2824                                                          tsvce   CompareMemory                                   ;compare memory
  2824                              <1> e%1 equ ($-tsvc)/4
  2824 0000093F [2B0E0000]          <1>  dd %1
  2825                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2825                              <1> e%1 equ ($-tsvc)/4
  2825 00000943 [CE100000]          <1>  dd %1
  2826                                                          tsvce   FreeMemory                                      ;free memory block
  2826                              <1> e%1 equ ($-tsvc)/4
  2826 00000947 [EE0C0000]          <1>  dd %1
  2827                                                          tsvce   GetBaseMemSize                                  ;get base RAM size in bytes
  2827                              <1> e%1 equ ($-tsvc)/4
  2827 0000094B [CD120000]          <1>  dd %1
  2828                                                          tsvce   GetConsoleString                                ;get string input
  2828                              <1> e%1 equ ($-tsvc)/4
  2828 0000094F [8C0E0000]          <1>  dd %1
  2829                                                          tsvce   GetExtendedMemSize                              ;get extended RAM size in bytes
  2829                              <1> e%1 equ ($-tsvc)/4
  2829 00000953 [DE120000]          <1>  dd %1
  2830                                                          tsvce   GetROMMemSize                                   ;get RAM size as reported by INT 12h
  2830                              <1> e%1 equ ($-tsvc)/4
  2830 00000957 [EF120000]          <1>  dd %1
  2831                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2831                              <1> e%1 equ ($-tsvc)/4
  2831 0000095B [01110000]          <1>  dd %1
  2832                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2832                              <1> e%1 equ ($-tsvc)/4
  2832 0000095F [B9090000]          <1>  dd %1
  2833                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2833                              <1> e%1 equ ($-tsvc)/4
  2833 00000963 [F8120000]          <1>  dd %1
  2834                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2834                              <1> e%1 equ ($-tsvc)/4
  2834 00000967 [9E100000]          <1>  dd %1
  2835                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2835                              <1> e%1 equ ($-tsvc)/4
  2835 0000096B [D4090000]          <1>  dd %1
  2836                                                          tsvce   PutDayString                                    ;put DD string
  2836                              <1> e%1 equ ($-tsvc)/4
  2836 0000096F [150A0000]          <1>  dd %1
  2837                                                          tsvce   PutHourString                                   ;put hh string
  2837                              <1> e%1 equ ($-tsvc)/4
  2837 00000973 [230A0000]          <1>  dd %1
  2838                                                          tsvce   PutMinuteString                                 ;put mm string
  2838                              <1> e%1 equ ($-tsvc)/4
  2838 00000977 [310A0000]          <1>  dd %1
  2839                                                          tsvce   PutMonthString                                  ;put MM string
  2839                              <1> e%1 equ ($-tsvc)/4
  2839 0000097B [3F0A0000]          <1>  dd %1
  2840                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2840                              <1> e%1 equ ($-tsvc)/4
  2840 0000097F [4D0A0000]          <1>  dd %1
  2841                                                          tsvce   PutSecondString                                 ;put ss string
  2841                              <1> e%1 equ ($-tsvc)/4
  2841 00000983 [710A0000]          <1>  dd %1
  2842                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2842                              <1> e%1 equ ($-tsvc)/4
  2842 00000987 [7E0A0000]          <1>  dd %1
  2843                                                          tsvce   PutWeekdayString                                ;put weekday string
  2843                              <1> e%1 equ ($-tsvc)/4
  2843 0000098B [B30A0000]          <1>  dd %1
  2844                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2844                              <1> e%1 equ ($-tsvc)/4
  2844 0000098F [C10A0000]          <1>  dd %1
  2845                                                          tsvce   PutYearString                                   ;put YYYY string
  2845                              <1> e%1 equ ($-tsvc)/4
  2845 00000993 [E40A0000]          <1>  dd %1
  2846                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2846                              <1> e%1 equ ($-tsvc)/4
  2846 00000997 [2E130000]          <1>  dd %1
  2847                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2847                              <1> e%1 equ ($-tsvc)/4
  2847 0000099B [99130000]          <1>  dd %1
  2848                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2848                              <1> e%1 equ ($-tsvc)/4
  2848 0000099F [1F110000]          <1>  dd %1
  2849                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2849                              <1> e%1 equ ($-tsvc)/4
  2849 000009A3 [C3110000]          <1>  dd %1
  2850                                                          tsvce   UpperCaseString                                 ;upper-case string
  2850                              <1> e%1 equ ($-tsvc)/4
  2850 000009A7 [480E0000]          <1>  dd %1
  2851                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2852                                  ;-----------------------------------------------------------------------------------------------------------------------
  2853                                  ;
  2854                                  ;       Service Request Macros
  2855                                  ;
  2856                                  ;       These macros provide positional parameterization of service request calls.
  2857                                  ;
  2858                                  ;-----------------------------------------------------------------------------------------------------------------------
  2859                                  %macro                  allocateMemory 1
  2860                                                          mov     ecx,%1                                          ;bytes to allocate
  2861                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2862                                                          int     _svc                                            ;invoke OS service
  2863                                  %endmacro
  2864                                  %macro                  clearConsoleScreen 0
  2865                                                          mov     al,eClearConsoleScreen                          ;function code
  2866                                                          int     _svc                                            ;invoke OS service
  2867                                  %endmacro
  2868                                  %macro                  compareMemory 0
  2869                                                          mov     al,eCompareMemory                               ;function code
  2870                                                          int     _svc                                            ;invoke OS service
  2871                                  %endmacro
  2872                                  %macro                  decimalToUnsigned 0
  2873                                                          mov     al,eDecimalToUnsigned                           ;function code
  2874                                                          int     _svc                                            ;invoke OS servie
  2875                                  %endmacro
  2876                                  %macro                  freeMemory 1
  2877                                                          mov     edx,%1                                          ;address of memory block
  2878                                                          mov     al,eFreeMemory                                  ;function code
  2879                                                          int     _svc                                            ;invoke OS service
  2880                                  %endmacro
  2881                                  %macro                  getBaseMemSize 0
  2882                                                          mov     al,eGetBaseMemSize                              ;function code
  2883                                                          int     _svc                                            ;invoke OS service
  2884                                  %endmacro
  2885                                  %macro                  getConsoleString 4
  2886                                                          mov     edx,%1                                          ;buffer address
  2887                                                          mov     ecx,%2                                          ;max characters
  2888                                                          mov     bh,%3                                           ;echo indicator
  2889                                                          mov     bl,%4                                           ;terminator
  2890                                                          mov     al,eGetConsoleString                            ;function code
  2891                                                          int     _svc                                            ;invoke OS service
  2892                                  %endmacro
  2893                                  %macro                  getExtendedMemSize 0
  2894                                                          mov     al,eGetExtendedMemSize                          ;function code
  2895                                                          int     _svc                                            ;invoke OS service
  2896                                  %endmacro
  2897                                  %macro                  getROMMemSize 0
  2898                                                          mov     al,eGetROMMemSize                               ;function code
  2899                                                          int     _svc                                            ;invoke OS service
  2900                                  %endmacro
  2901                                  %macro                  hexadecimalToUnsigned 0
  2902                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2903                                                          int     _svc                                            ;invoke OS service
  2904                                  %endmacro
  2905                                  %macro                  isLeapYear 1
  2906                                                          mov     ebx,%1                                          ;DATETIME addr
  2907                                                          mov     al,eIsLeapYear                                  ;function code
  2908                                                          int     _svc                                            ;invoke OS service
  2909                                  %endmacro
  2910                                  %macro                  placeCursor 0
  2911                                                          mov     al,ePlaceCursor                                 ;function code
  2912                                                          int     _svc                                            ;invoke OS service
  2913                                  %endmacro
  2914                                  %macro                  putConsoleString 1
  2915                                                          mov     edx,%1                                          ;string address
  2916                                                          mov     al,ePutConsoleString                            ;function code
  2917                                                          int     _svc                                            ;invoke OS service
  2918                                  %endmacro
  2919                                  %macro                  putDateString 0
  2920                                                          mov     al,ePutDateString                               ;function code
  2921                                                          int     _svc                                            ;invoke OS service
  2922                                  %endmacro
  2923                                  %macro                  putDateString 2
  2924                                                          mov     ebx,%1                                          ;DATETIME addr
  2925                                                          mov     edx,%2                                          ;output buffer addr
  2926                                                          mov     al,ePutDateString                               ;function code
  2927                                                          int     _svc                                            ;invoke OS service
  2928                                  %endmacro
  2929                                  %macro                  putDayString 2
  2930                                                          mov     ebx,%1                                          ;DATETIME addr
  2931                                                          mov     edx,%2                                          ;output buffer addr
  2932                                                          mov     al,ePutDayString                                ;function code
  2933                                                          int     _svc                                            ;invoke OS service
  2934                                  %endmacro
  2935                                  %macro                  putHourString 2
  2936                                                          mov     ebx,%1                                          ;DATETIME addr
  2937                                                          mov     edx,%2                                          ;output buffer addr
  2938                                                          mov     al,ePutHourString                               ;function code
  2939                                                          int     _svc                                            ;invoke OS service
  2940                                  %endmacro
  2941                                  %macro                  putMinuteString 2
  2942                                                          mov     ebx,%1                                          ;DATETIME addr
  2943                                                          mov     edx,%2                                          ;output buffer addr
  2944                                                          mov     al,ePutMinuteString                             ;function code
  2945                                                          int     _svc                                            ;invoke OS service
  2946                                  %endmacro
  2947                                  %macro                  putMonthString 2
  2948                                                          mov     ebx,%1                                          ;DATETIME addr
  2949                                                          mov     edx,%2                                          ;output buffer addr
  2950                                                          mov     al,ePutMonthString                              ;function code
  2951                                                          int     _svc                                            ;invoke OS service
  2952                                  %endmacro
  2953                                  %macro                  putMonthNameString 2
  2954                                                          mov     ebx,%1                                          ;DATETIME addr
  2955                                                          mov     edx,%2                                          ;output buffer addr
  2956                                                          mov     al,ePutMonthNameString                          ;function code
  2957                                                          int     _svc                                            ;invoke OS service
  2958                                  %endmacro
  2959                                  %macro                  putSecondString 2
  2960                                                          mov     ebx,%1                                          ;DATETIME addr
  2961                                                          mov     edx,%2                                          ;output buffer addr
  2962                                                          mov     al,ePutSecondString                             ;function code
  2963                                                          int     _svc                                            ;invoke OS service
  2964                                  %endmacro
  2965                                  %macro                  putTimeString 0
  2966                                                          mov     al,ePutTimeString                               ;function code
  2967                                                          int     _svc                                            ;invoke OS service
  2968                                  %endmacro
  2969                                  %macro                  putTimeString 2
  2970                                                          mov     ebx,%1                                          ;DATETIME addr
  2971                                                          mov     edx,%2                                          ;output buffer addr
  2972                                                          mov     al,ePutTimeString                               ;function code
  2973                                                          int     _svc                                            ;invoke OS service
  2974                                  %endmacro
  2975                                  %macro                  putWeekdayString 2
  2976                                                          mov     ebx,%1                                          ;DATETIME addr
  2977                                                          mov     edx,%2                                          ;output buffer addr
  2978                                                          mov     al,ePutWeekdayString                            ;function code
  2979                                                          int     _svc                                            ;invoke OS service
  2980                                  %endmacro
  2981                                  %macro                  putWeekdayNameString 2
  2982                                                          mov     ebx,%1                                          ;DATETIME addr
  2983                                                          mov     edx,%2                                          ;output buffer addr
  2984                                                          mov     al,ePutWeekdayNameString                        ;function code
  2985                                                          int     _svc                                            ;invoke OS service
  2986                                  %endmacro
  2987                                  %macro                  putYearString 2
  2988                                                          mov     ebx,%1                                          ;DATETIME addr
  2989                                                          mov     edx,%2                                          ;output buffer addr
  2990                                                          mov     al,ePutYearString                               ;function code
  2991                                                          int     _svc                                            ;invoke OS service
  2992                                  %endmacro
  2993                                  %macro                  readRealTimeClock 0
  2994                                                          mov     al,eReadRealTimeClock                           ;function code
  2995                                                          int     _svc                                            ;invoke OS service
  2996                                  %endmacro
  2997                                  %macro                  readRealTimeClock 1
  2998                                                          mov     ebx,%1                                          ;DATETIME addr
  2999                                                          mov     al,eReadRealTimeClock                           ;function code
  3000                                                          int     _svc                                            ;invoke OS service
  3001                                  %endmacro
  3002                                  %macro                  resetSystem 0
  3003                                                          mov     al,eResetSystem                                 ;function code
  3004                                                          int     _svc                                            ;invoke OS service
  3005                                  %endmacro
  3006                                  %macro                  unsignedToDecimalString 0
  3007                                                          mov     al,eUnsignedToDecimalString                     ;function code
  3008                                                          int     _svc                                            ;invoke OS service
  3009                                  %endmacro
  3010                                  %macro                  unsignedToHexadecimal 0
  3011                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  3012                                                          int     _svc                                            ;invoke OS service
  3013                                  %endmacro
  3014                                  %macro                  upperCaseString 0
  3015                                                          mov     al,eUpperCaseString                             ;function code
  3016                                                          int     _svc                                            ;invoke OS service
  3017                                  %endmacro
  3018                                  ;=======================================================================================================================
  3019                                  ;
  3020                                  ;       Kernel Function Library
  3021                                  ;
  3022                                  ;=======================================================================================================================
  3023                                  ;=======================================================================================================================
  3024                                  ;
  3025                                  ;       Date and Time Helper Routines
  3026                                  ;
  3027                                  ;       GetYear
  3028                                  ;       IsLeapYear
  3029                                  ;       PutDateString
  3030                                  ;       PutDayString
  3031                                  ;       PutHourString
  3032                                  ;       PutMinuteString
  3033                                  ;       PutMonthString
  3034                                  ;       PutMonthNameString
  3035                                  ;       PutSecondString
  3036                                  ;       PutTimeString
  3037                                  ;       PutWeekdayString
  3038                                  ;       PutWeekdayNameString
  3039                                  ;       PutYearString
  3040                                  ;
  3041                                  ;=======================================================================================================================
  3042                                  ;-----------------------------------------------------------------------------------------------------------------------
  3043                                  ;
  3044                                  ;       Routine:        GetYear
  3045                                  ;
  3046                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  3047                                  ;
  3048                                  ;       In:             DS:EBX  DATETIME address
  3049                                  ;
  3050                                  ;       Out:            ECX     year
  3051                                  ;
  3052                                  ;-----------------------------------------------------------------------------------------------------------------------
  3053 000009AB 0FB64B07                GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  3054 000009AF 6BC964                                          imul    ecx,100                                         ;century * 100
  3055 000009B2 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  3056 000009B6 01C1                                            add     ecx,eax                                         ;year (YYYY)
  3057 000009B8 C3                                              ret                                                     ;return
  3058                                  ;-----------------------------------------------------------------------------------------------------------------------
  3059                                  ;
  3060                                  ;       Routine:        IsLeapYear
  3061                                  ;
  3062                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  3063                                  ;
  3064                                  ;       In:             DS:EBX  DATETIME ADDRESS
  3065                                  ;
  3066                                  ;       Out:            ECX     0 = not a leap year
  3067                                  ;                               1 = leap year
  3068                                  ;
  3069                                  ;-----------------------------------------------------------------------------------------------------------------------
  3070 000009B9 E8EDFFFFFF              IsLeapYear              call    GetYear                                         ;ECX = YYYY
  3071 000009BE 89C8                                            mov     eax,ecx                                         ;EAX = YYYY
  3072 000009C0 31C9                                            xor     ecx,ecx                                         ;assume not leap year
  3073 000009C2 A803                                            test    al,00000011b                                    ;multiple of four?
  3074 000009C4 750D                                            jnz     .no                                             ;no, branch
  3075 000009C6 B264                                            mov     dl,100                                          ;divisor
  3076 000009C8 F6F2                                            div     dl                                              ;divide by 100
  3077 000009CA 84E4                                            test    ah,ah                                           ;multiple of 100?
  3078 000009CC 7504                                            jnz     .yes                                            ;yes, branch
  3079 000009CE A803                                            test    al,00000011b                                    ;multiple of 400?
  3080 000009D0 7501                                            jnz     .no                                             ;no, branch
  3081 000009D2 41                      .yes                    inc     ecx                                             ;indicate leap
  3082 000009D3 C3                      .no                     ret                                                     ;return
  3083                                  ;-----------------------------------------------------------------------------------------------------------------------
  3084                                  ;
  3085                                  ;       Routine:        PutDateString
  3086                                  ;
  3087                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  3088                                  ;                       structure at ds:ebx.
  3089                                  ;
  3090                                  ;       In:             DS:EBX  DATETIME address
  3091                                  ;                       DS:EDX  output buffer address
  3092                                  ;
  3093                                  ;-----------------------------------------------------------------------------------------------------------------------
  3094 000009D4 51                      PutDateString           push    ecx                                             ;save non-volatile regs
  3095 000009D5 57                                              push    edi                                             ;
  3096 000009D6 06                                              push    es                                              ;
  3097 000009D7 1E                                              push    ds                                              ;store data selector ...
  3098 000009D8 07                                              pop     es                                              ;... in extra segment reg
  3099 000009D9 89D7                                            mov     edi,edx                                         ;output buffer address
  3100 000009DB B10A                                            mov     cl,10                                           ;divisor
  3101 000009DD BA30302F00                                      mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  3102 000009E2 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month
  3103 000009E6 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3104 000009E8 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3105 000009EA FC                                              cld                                                     ;forward strings
  3106 000009EB AB                                              stosd                                                   ;store "mm/"nul
  3107 000009EC 4F                                              dec     edi                                             ;address of terminator
  3108 000009ED 0FB64304                                        movzx   eax,byte [ebx+DATETIME.day]                     ;day
  3109 000009F1 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3110 000009F3 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3111 000009F5 AB                                              stosd                                                   ;store "dd/"nul
  3112 000009F6 4F                                              dec     edi                                             ;address of terminator
  3113 000009F7 0FB64307                                        movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3114 000009FB F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3115 000009FD 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3116 000009FF AB                                              stosd                                                   ;store "cc/"null
  3117 00000A00 4F                                              dec     edi                                             ;address of terminator
  3118 00000A01 4F                                              dec     edi                                             ;address of delimiter
  3119 00000A02 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3120 00000A06 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3121 00000A08 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3122 00000A0A AA                                              stosb                                                   ;store quotient
  3123 00000A0B 88E0                                            mov     al,ah                                           ;remainder
  3124 00000A0D AA                                              stosb                                                   ;store remainder
  3125 00000A0E 30C0                                            xor     al,al                                           ;null terminator
  3126 00000A10 AA                                              stosb                                                   ;store terminator
  3127 00000A11 07                                              pop     es                                              ;restore non-volatile regs
  3128 00000A12 5F                                              pop     edi                                             ;
  3129 00000A13 59                                              pop     ecx                                             ;
  3130 00000A14 C3                                              ret                                                     ;return
  3131                                  ;-----------------------------------------------------------------------------------------------------------------------
  3132                                  ;
  3133                                  ;       Routine:        PutDayString
  3134                                  ;
  3135                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3136                                  ;                       structure at ds:ebx.
  3137                                  ;
  3138                                  ;       In:             DS:EBX  DATETIME address
  3139                                  ;                       DS:EDX  output buffer address
  3140                                  ;
  3141                                  ;-----------------------------------------------------------------------------------------------------------------------
  3142 00000A15 51                      PutDayString            push    ecx                                             ;save non-volatile regs
  3143 00000A16 0FB64B04                                        movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3144 00000A1A B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3145 00000A1C E8FE060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3146 00000A21 59                                              pop     ecx                                             ;
  3147 00000A22 C3                                              ret                                                     ;return
  3148                                  ;-----------------------------------------------------------------------------------------------------------------------
  3149                                  ;
  3150                                  ;       Routine:        PutHourString
  3151                                  ;
  3152                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3153                                  ;                       structure at ds:ebx.
  3154                                  ;
  3155                                  ;       In:             DS:EBX  DATETIME address
  3156                                  ;                       DS:EDX  output buffer address
  3157                                  ;
  3158                                  ;-----------------------------------------------------------------------------------------------------------------------
  3159 00000A23 51                      PutHourString           push    ecx                                             ;save non-volatile regs
  3160 00000A24 0FB64B02                                        movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3161 00000A28 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3162 00000A2A E8F0060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3163 00000A2F 59                                              pop     ecx                                             ;
  3164 00000A30 C3                                              ret                                                     ;return
  3165                                  ;-----------------------------------------------------------------------------------------------------------------------
  3166                                  ;
  3167                                  ;       Routine:        PutMinuteString
  3168                                  ;
  3169                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3170                                  ;                       structure at ds:ebx.
  3171                                  ;
  3172                                  ;       In:             DS:EBX  DATETIME address
  3173                                  ;                       DS:EDX  output buffer address
  3174                                  ;
  3175                                  ;-----------------------------------------------------------------------------------------------------------------------
  3176 00000A31 51                      PutMinuteString         push    ecx                                             ;save non-volatile regs
  3177 00000A32 0FB64B01                                        movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3178 00000A36 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3179 00000A38 E8E2060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3180 00000A3D 59                                              pop     ecx                                             ;
  3181 00000A3E C3                                              ret                                                     ;return
  3182                                  ;-----------------------------------------------------------------------------------------------------------------------
  3183                                  ;
  3184                                  ;       Routine:        PutMonthString
  3185                                  ;
  3186                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3187                                  ;                       structure at ds:ebx.
  3188                                  ;
  3189                                  ;       In:             DS:EBX  DATETIME address
  3190                                  ;                       DS:EDX  output buffer address
  3191                                  ;
  3192                                  ;-----------------------------------------------------------------------------------------------------------------------
  3193 00000A3F 51                      PutMonthString          push    ecx                                             ;save non-volatile regs
  3194 00000A40 0FB64B05                                        movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3195 00000A44 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3196 00000A46 E8D4060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3197 00000A4B 59                                              pop     ecx                                             ;
  3198 00000A4C C3                                              ret                                                     ;return
  3199                                  ;-----------------------------------------------------------------------------------------------------------------------
  3200                                  ;
  3201                                  ;       Routine:        PutMonthNameString
  3202                                  ;
  3203                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3204                                  ;                       structure at ds:ebx.
  3205                                  ;
  3206                                  ;       In:             DS:EBX  DATETIME address
  3207                                  ;                       DS:EDX  output buffer address
  3208                                  ;
  3209                                  ;-----------------------------------------------------------------------------------------------------------------------
  3210 00000A4D 56                      PutMonthNameString      push    esi                                             ;save non-volatile regs
  3211 00000A4E 57                                              push    edi                                             ;
  3212 00000A4F 1E                                              push    ds                                              ;
  3213 00000A50 06                                              push    es                                              ;
  3214 00000A51 1E                                              push    ds                                              ;load data selector ...
  3215 00000A52 07                                              pop     es                                              ;... into extra segment
  3216 00000A53 89D7                                            mov     edi,edx                                         ;output buffer address
  3217 00000A55 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3218 00000A59 48                                              dec     eax                                             ;month (0-11)
  3219 00000A5A C1E002                                          shl     eax,2                                           ;offset into month name lookup table
  3220 00000A5D 0E                                              push    cs                                              ;load code selector ...
  3221 00000A5E 1F                                              pop     ds                                              ;... into data segment
  3222 00000A5F 8BB0[A00B0000]                                  mov     esi,[tMonthNames+eax]                           ;month name address
  3223 00000A65 FC                                              cld                                                     ;forward strings
  3224 00000A66 AC                      .10                     lodsb                                                   ;name character
  3225 00000A67 AA                                              stosb                                                   ;store in output buffer
  3226 00000A68 84C0                                            test    al,al                                           ;end of string?
  3227 00000A6A 75FA                                            jnz     .10                                             ;no, continue
  3228 00000A6C 07                                              pop     es                                              ;restore non-volatile regs
  3229 00000A6D 1F                                              pop     ds                                              ;
  3230 00000A6E 5F                                              pop     edi                                             ;
  3231 00000A6F 5E                                              pop     esi                                             ;
  3232 00000A70 C3                                              ret                                                     ;return
  3233                                  ;-----------------------------------------------------------------------------------------------------------------------
  3234                                  ;
  3235                                  ;       Routine:        PutSecondString
  3236                                  ;
  3237                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3238                                  ;                       structure at ds:ebx.
  3239                                  ;
  3240                                  ;       In:             DS:EBX  DATETIME address
  3241                                  ;                       DS:EDX  output buffer address
  3242                                  ;
  3243                                  ;-----------------------------------------------------------------------------------------------------------------------
  3244 00000A71 51                      PutSecondString         push    ecx                                             ;save non-volatile regs
  3245 00000A72 0FB60B                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3246 00000A75 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3247 00000A77 E8A3060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3248 00000A7C 59                                              pop     ecx                                             ;
  3249 00000A7D C3                                              ret                                                     ;return
  3250                                  ;-----------------------------------------------------------------------------------------------------------------------
  3251                                  ;
  3252                                  ;       Routine:        PutTimeString
  3253                                  ;
  3254                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3255                                  ;                       structure at ds:ebx.
  3256                                  ;
  3257                                  ;       In:             DS:EBX  DATETIME address
  3258                                  ;                       DS:EDX  output buffer address
  3259                                  ;
  3260                                  ;-----------------------------------------------------------------------------------------------------------------------
  3261 00000A7E 51                      PutTimeString           push    ecx                                             ;save non-volatile regs
  3262 00000A7F 57                                              push    edi                                             ;
  3263 00000A80 06                                              push    es                                              ;
  3264 00000A81 1E                                              push    ds                                              ;store data selector ...
  3265 00000A82 07                                              pop     es                                              ;... in extra segment reg
  3266 00000A83 89D7                                            mov     edi,edx                                         ;output buffer address
  3267 00000A85 B10A                                            mov     cl,10                                           ;divisor
  3268 00000A87 BA30303A00                                      mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3269 00000A8C 0FB64302                                        movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3270 00000A90 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3271 00000A92 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3272 00000A94 FC                                              cld                                                     ;forward strings
  3273 00000A95 AB                                              stosd                                                   ;store "mm/"nul
  3274 00000A96 4F                                              dec     edi                                             ;address of terminator
  3275 00000A97 0FB64301                                        movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3276 00000A9B F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3277 00000A9D 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3278 00000A9F AB                                              stosd                                                   ;store "dd/"nul
  3279 00000AA0 4F                                              dec     edi                                             ;address of terminator
  3280 00000AA1 0FB603                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3281 00000AA4 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3282 00000AA6 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3283 00000AA8 AA                                              stosb                                                   ;store quotient
  3284 00000AA9 88E0                                            mov     al,ah                                           ;remainder
  3285 00000AAB AA                                              stosb                                                   ;store remainder
  3286 00000AAC 30C0                                            xor     al,al                                           ;null terminator
  3287 00000AAE AA                                              stosb                                                   ;store terminator
  3288 00000AAF 07                                              pop     es                                              ;restore non-volatile regs
  3289 00000AB0 5F                                              pop     edi                                             ;
  3290 00000AB1 59                                              pop     ecx                                             ;
  3291 00000AB2 C3                                              ret                                                     ;return
  3292                                  ;-----------------------------------------------------------------------------------------------------------------------
  3293                                  ;
  3294                                  ;       Routine:        PutWeekdayString
  3295                                  ;
  3296                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3297                                  ;                       structure at ds:ebx.
  3298                                  ;
  3299                                  ;       In:             DS:EBX  DATETIME address
  3300                                  ;                       DS:EDX  output buffer address
  3301                                  ;
  3302                                  ;-----------------------------------------------------------------------------------------------------------------------
  3303 00000AB3 51                      PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3304 00000AB4 0FB64B03                                        movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3305 00000AB8 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3306 00000ABA E860060000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3307 00000ABF 59                                              pop     ecx                                             ;
  3308 00000AC0 C3                                              ret                                                     ;return
  3309                                  ;-----------------------------------------------------------------------------------------------------------------------
  3310                                  ;
  3311                                  ;       Routine:        PutWeekdayNameString
  3312                                  ;
  3313                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3314                                  ;                       structure at ds:ebx.
  3315                                  ;
  3316                                  ;       In:             DS:EBX  DATETIME address
  3317                                  ;                       DS:EDX  output buffer address
  3318                                  ;
  3319                                  ;-----------------------------------------------------------------------------------------------------------------------
  3320 00000AC1 56                      PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3321 00000AC2 57                                              push    edi                                             ;
  3322 00000AC3 1E                                              push    ds                                              ;
  3323 00000AC4 06                                              push    es                                              ;
  3324 00000AC5 1E                                              push    ds                                              ;load data selector ...
  3325 00000AC6 07                                              pop     es                                              ;... into extra segment
  3326 00000AC7 89D7                                            mov     edi,edx                                         ;output buffer address
  3327 00000AC9 0FB64303                                        movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3328 00000ACD C1E002                                          shl     eax,2                                           ;offset into day name lookup table
  3329 00000AD0 0E                                              push    cs                                              ;load code selector ...
  3330 00000AD1 1F                                              pop     ds                                              ;... into data segment
  3331 00000AD2 8BB0[840B0000]                                  mov     esi,[tDayNames+eax]                             ;day name address
  3332 00000AD8 FC                                              cld                                                     ;forward strings
  3333 00000AD9 AC                      .10                     lodsb                                                   ;name character
  3334 00000ADA AA                                              stosb                                                   ;store in output buffer
  3335 00000ADB 84C0                                            test    al,al                                           ;end of string?
  3336 00000ADD 75FA                                            jnz     .10                                             ;no, continue
  3337 00000ADF 07                                              pop     es                                              ;restore non-volatile regs
  3338 00000AE0 1F                                              pop     ds                                              ;
  3339 00000AE1 5F                                              pop     edi                                             ;
  3340 00000AE2 5E                                              pop     esi                                             ;
  3341 00000AE3 C3                                              ret                                                     ;return
  3342                                  ;-----------------------------------------------------------------------------------------------------------------------
  3343                                  ;
  3344                                  ;       Routine:        PutYearString
  3345                                  ;
  3346                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3347                                  ;                       structure at ds:ebx.
  3348                                  ;
  3349                                  ;       In:             DS:EBX  DATETIME address
  3350                                  ;                       DS:EDX  output buffer address
  3351                                  ;
  3352                                  ;-----------------------------------------------------------------------------------------------------------------------
  3353 00000AE4 51                      PutYearString           push    ecx                                             ;save non-volatile regs
  3354 00000AE5 E8C1FEFFFF                                      call    GetYear                                         ;ECX = YYYY
  3355 00000AEA B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3356 00000AEC E82E060000                                      call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3357 00000AF1 59                                              pop     ecx                                             ;restore non-volatile regs
  3358 00000AF2 C3                                              ret                                                     ;return
  3359                                  ;-----------------------------------------------------------------------------------------------------------------------
  3360                                  ;
  3361                                  ;       Day Names
  3362                                  ;
  3363                                  ;-----------------------------------------------------------------------------------------------------------------------
  3364 00000AF3 53756E64617900          czSunday                db      "Sunday",0
  3365 00000AFA 4D6F6E64617900          czMonday                db      "Monday",0
  3366 00000B01 5475657364617900        czTuesday               db      "Tuesday",0
  3367 00000B09 5765646E6573646179-     czWednesday             db      "Wednesday",0
  3367 00000B12 00                 
  3368 00000B13 546875727364617900      czThursday              db      "Thursday",0
  3369 00000B1C 46726964617900          czFriday                db      "Friday",0
  3370 00000B23 536174757264617900      czSaturday              db      "Saturday",0
  3371                                  ;-----------------------------------------------------------------------------------------------------------------------
  3372                                  ;
  3373                                  ;       Month Names
  3374                                  ;
  3375                                  ;-----------------------------------------------------------------------------------------------------------------------
  3376 00000B2C 4A616E7561727900        czJanuary               db      "January",0
  3377 00000B34 466562727561727900      czFebruary              db      "February",0
  3378 00000B3D 4D6172636800            czMarch                 db      "March",0
  3379 00000B43 417072696C00            czApril                 db      "April",0
  3380 00000B49 4D617900                czMay                   db      "May",0
  3381 00000B4D 4A756E6500              czJune                  db      "June",0
  3382 00000B52 4A756C7900              czJuly                  db      "July",0
  3383 00000B57 41756775737400          czAugust                db      "August",0
  3384 00000B5E 53657074656D626572-     czSeptember             db      "September",0
  3384 00000B67 00                 
  3385 00000B68 4F63746F62657200        czOctober               db      "October",0
  3386 00000B70 4E6F76656D62657200      czNovember              db      "November",0
  3387 00000B79 446563656D62657200      czDecember              db      "December",0
  3388                                  ;-----------------------------------------------------------------------------------------------------------------------
  3389                                  ;
  3390                                  ;       Day Names Lookup Table
  3391                                  ;
  3392                                  ;-----------------------------------------------------------------------------------------------------------------------
  3393 00000B82 90<rept>                                        align   4
  3394                                  tDayNames               equ     $
  3395 00000B84 [F30A0000]                                      dd      czSunday
  3396 00000B88 [FA0A0000]                                      dd      czMonday
  3397 00000B8C [010B0000]                                      dd      czTuesday
  3398 00000B90 [090B0000]                                      dd      czWednesday
  3399 00000B94 [130B0000]                                      dd      czThursday
  3400 00000B98 [1C0B0000]                                      dd      czFriday
  3401 00000B9C [230B0000]                                      dd      czSaturday
  3402                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3403                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3404                                  ;-----------------------------------------------------------------------------------------------------------------------
  3405                                  ;
  3406                                  ;       Month Names Lookup Table
  3407                                  ;
  3408                                  ;-----------------------------------------------------------------------------------------------------------------------
  3409                                                          align   4
  3410                                  tMonthNames             equ     $
  3411 00000BA0 [2C0B0000]                                      dd      czJanuary
  3412 00000BA4 [340B0000]                                      dd      czFebruary
  3413 00000BA8 [3D0B0000]                                      dd      czMarch
  3414 00000BAC [430B0000]                                      dd      czApril
  3415 00000BB0 [490B0000]                                      dd      czMay
  3416 00000BB4 [4D0B0000]                                      dd      czJune
  3417 00000BB8 [520B0000]                                      dd      czJuly
  3418 00000BBC [570B0000]                                      dd      czAugust
  3419 00000BC0 [5E0B0000]                                      dd      czSeptember
  3420 00000BC4 [680B0000]                                      dd      czOctober
  3421 00000BC8 [700B0000]                                      dd      czNovember
  3422 00000BCC [790B0000]                                      dd      czDecember
  3423                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3424                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3425                                  ;=======================================================================================================================
  3426                                  ;
  3427                                  ;       Memory Helper Routines
  3428                                  ;
  3429                                  ;       AllocateMemory
  3430                                  ;       FreeMemory
  3431                                  ;
  3432                                  ;=======================================================================================================================
  3433                                  ;-----------------------------------------------------------------------------------------------------------------------
  3434                                  ;
  3435                                  ;       Routine:        AllocateMemory
  3436                                  ;
  3437                                  ;       Description:    This routine allocates a memory block for the given task.
  3438                                  ;
  3439                                  ;       In:             ECX     bytes of memory to allocate
  3440                                  ;
  3441                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  3442                                  ;                               0       unable to allocate memory
  3443                                  ;
  3444                                  ;-----------------------------------------------------------------------------------------------------------------------
  3445 00000BD0 53                      AllocateMemory          push    ebx                                             ;save non-volatile regs
  3446 00000BD1 51                                              push    ecx                                             ;
  3447 00000BD2 56                                              push    esi                                             ;
  3448 00000BD3 1E                                              push    ds                                              ;
  3449                                  ;
  3450                                  ;       Address kernel memory structures
  3451                                  ;
  3452 00000BD4 6A18                                            push    EGDTOSDATA                                      ;load OS data GDT selector ...
  3453 00000BD6 1F                                              pop     ds                                              ;... into data segment reg
  3454 00000BD7 BE31090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure address
  3455                                  ;
  3456                                  ;       Set requested size to minimum block size if requested size is too small.
  3457                                  ;
  3458 00000BDC 81F900010000                                    cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  3459 00000BE2 7305                                            jae     .10                                             ;no, branch
  3460 00000BE4 B900010000                                      mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  3461 00000BE9 83C120                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  3462                                  ;
  3463                                  ;       Find the first free memory block large enough to satisfy the request.
  3464                                  ;
  3465 00000BEC 8B4608                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3466 00000BEF 85C0                    .20                     test    eax,eax                                         ;end of free block chain?
  3467 00000BF1 0F84F2000000                                    jz      .220                                            ;yes, branch
  3468 00000BF7 3B4804                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  3469 00000BFA 7605                                            jbe     .30                                             ;yes, branch
  3470 00000BFC 8B4018                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3471 00000BFF EBEE                                            jmp     .20                                             ;continue
  3472                                  ;-----------------------------------------------------------------------------------------------------------------------
  3473                                  ;
  3474                                  ;       Address the previous and next free memory blocks.
  3475                                  ;
  3476 00000C01 8B581C                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  3477 00000C04 8B5018                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  3478                                  ;
  3479                                  ;       Remove the free memory block from the forward free memory block chain.
  3480                                  ;
  3481 00000C07 85DB                                            test    ebx,ebx                                         ;any previous free memory block?
  3482 00000C09 7405                                            jz      .40                                             ;no, branch
  3483 00000C0B 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  3484 00000C0E EB03                                            jmp     .50                                             ;continue
  3485 00000C10 895608                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  3486                                  ;
  3487                                  ;       Remove the free memory block from the reverse free memory block chain.
  3488                                  ;
  3489 00000C13 85D2                    .50                     test    edx,edx                                         ;any next free memory block?
  3490 00000C15 7405                                            jz      .60                                             ;no, branch
  3491 00000C17 895A1C                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  3492 00000C1A EB03                                            jmp     .70                                             ;continue
  3493 00000C1C 895E0C                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  3494                                  ;-----------------------------------------------------------------------------------------------------------------------
  3495                                  ;
  3496                                  ;       Determine if the free memory block can be split.
  3497                                  ;
  3498 00000C1F 8B5804                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  3499 00000C22 29CB                                            sub     ebx,ecx                                         ;subtract requested memory size
  3500 00000C24 81FB00010000                                    cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  3501 00000C2A 7263                                            jb      .150                                            ;no, branch
  3502                                  ;
  3503                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  3504                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  3505                                  ;       of the requested memory size.
  3506                                  ;
  3507 00000C2C 894804                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  3508 00000C2F 89C2                                            mov     edx,eax                                         ;memory block address
  3509 00000C31 01CA                                            add     edx,ecx                                         ;address new new next contig block
  3510 00000C33 8B4810                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  3511 00000C36 895010                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  3512                                  ;
  3513                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  3514                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  3515                                  ;
  3516 00000C39 E305                                            jecxz   .80                                             ;no next contig, branch
  3517 00000C3B 895114                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  3518 00000C3E EB03                                            jmp     .90                                             ;continue
  3519 00000C40 895604                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  3520                                  ;
  3521                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  3522                                  ;
  3523 00000C43 895A04                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  3524 00000C46 894A10                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  3525 00000C49 894214                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  3526 00000C4C BB46524545                                      mov     ebx,EMEMFREECODE                                ;free memory signature
  3527 00000C51 891A                                            mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  3528 00000C53 31DB                                            xor     ebx,ebx                                         ;zero register
  3529 00000C55 895A0C                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  3530 00000C58 895A08                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  3531                                  ;
  3532                                  ;       Find the proper location in the free block chain for the new free block
  3533                                  ;
  3534 00000C5B 8B5A04                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  3535 00000C5E 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  3536 00000C61 E30A                    .100                    jecxz   .110                                            ;branch if at end of chain
  3537 00000C63 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  3538 00000C66 7605                                            jbe     .110                                            ;yes, branch
  3539 00000C68 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  3540 00000C6B EBF4                                            jmp     .100                                            ;continue
  3541                                  ;
  3542                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  3543                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  3544                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  3545                                  ;       block of hte next block, if there is one.
  3546                                  ;
  3547 00000C6D 894A18                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  3548 00000C70 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  3549 00000C73 E308                                            jecxz   .120                                            ;branch if no next block
  3550 00000C75 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  3551 00000C78 89511C                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  3552 00000C7B EB03                                            jmp     .130                                            ;continue
  3553 00000C7D 89560C                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  3554                                  ;
  3555                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  3556                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  3557                                  ;       last user block pointers if necessary.
  3558                                  ;
  3559 00000C80 895A1C                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  3560 00000C83 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3561 00000C85 7405                                            jz      .140                                            ;no, branch
  3562 00000C87 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  3563 00000C8A EB03                                            jmp     .150                                            ;continue
  3564 00000C8C 895608                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  3565                                  ;
  3566                                  ;       Update the newly allocated block's owner and signature.
  3567                                  ;
  3568 00000C8F BA55534552              .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  3569 00000C94 8910                                            mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  3570 00000C96 31D2                                            xor     edx,edx                                         ;zero register
  3571 00000C98 660F00CA                                        str     dx                                              ;load the task state register
  3572 00000C9C 895008                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3573                                  ;
  3574                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3575                                  ;
  3576 00000C9F 8B4E10                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3577 00000CA2 E323                    .160                    jecxz   .180                                            ;branch if at end of chain
  3578 00000CA4 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3579 00000CA7 721E                                            jb      .180                                            ;branch if block belongs to next task
  3580 00000CA9 7405                                            je      .170                                            ;branch if block belongs to this task
  3581 00000CAB 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3582 00000CAE EBF2                                            jmp     .160                                            ;continue
  3583                                  ;
  3584                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3585                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3586                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3587                                  ;       place to insert the block.
  3588                                  ;
  3589 00000CB0 8B5004                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3590 00000CB3 3B5104                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3591 00000CB6 760F                                            jbe     .180                                            ;yes, branch
  3592 00000CB8 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3593 00000CBB 85C9                                            test    ecx,ecx                                         ;end of chain?
  3594 00000CBD 7408                                            jz      .180                                            ;yes, branch
  3595 00000CBF 8B5008                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3596 00000CC2 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3597 00000CC5 74E9                                            je      .170                                            ;yes, continue search
  3598                                  ;
  3599                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3600                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3601                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3602                                  ;       do have a previous-block, we update that block's next-block pointer.
  3603                                  ;
  3604 00000CC7 894818                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3605 00000CCA 8B5E14                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3606 00000CCD E308                                            jecxz   .190                                            ;branch if no next-task block
  3607 00000CCF 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3608 00000CD2 89411C                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3609 00000CD5 EB03                                            jmp     .200                                            ;continue
  3610 00000CD7 894614                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3611                                  ;
  3612                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3613                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3614                                  ;       global first and/or last user-block pointers if necessary.
  3615                                  ;
  3616 00000CDA 89581C                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3617 00000CDD 85DB                                            test    ebx,ebx                                         ;do we have a previous task block?
  3618 00000CDF 7405                                            jz      .210                                            ;no, branch
  3619 00000CE1 894318                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3620 00000CE4 EB03                                            jmp     .220                                            ;continue
  3621 00000CE6 894610                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3622                                  ;
  3623                                  ;       Restore registers and return to caller.
  3624                                  ;
  3625 00000CE9 1F                      .220                    pop     ds                                              ;restore non-volatie regs
  3626 00000CEA 5E                                              pop     esi                                             ;
  3627 00000CEB 59                                              pop     ecx                                             ;
  3628 00000CEC 5B                                              pop     ebx                                             ;
  3629 00000CED C3                                              ret                                                     ;return
  3630                                  ;-----------------------------------------------------------------------------------------------------------------------
  3631                                  ;
  3632                                  ;       Routine:        FreeMemory
  3633                                  ;
  3634                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3635                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3636                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3637                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3638                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3639                                  ;
  3640                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3641                                  ;
  3642                                  ;       Out:            EAX     -1      invalid memory block
  3643                                  ;                               0       memory block freed
  3644                                  ;
  3645                                  ;-----------------------------------------------------------------------------------------------------------------------
  3646 00000CEE 53                      FreeMemory              push    ebx                                             ;save non-volatile regs
  3647 00000CEF 51                                              push    ecx                                             ;
  3648 00000CF0 56                                              push    esi                                             ;
  3649 00000CF1 57                                              push    edi                                             ;
  3650 00000CF2 1E                                              push    ds                                              ;
  3651 00000CF3 06                                              push    es                                              ;
  3652                                  ;
  3653                                  ;       Address the root memory structure
  3654                                  ;
  3655 00000CF4 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3656 00000CF6 07                                              pop     es                                              ;... into extra segment reg
  3657 00000CF7 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3658 00000CF9 1F                                              pop     ds                                              ;... into data segment reg
  3659 00000CFA BE31090000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure
  3660 00000CFF 89D7                                            mov     edi,edx                                         ;memory block address
  3661                                  ;
  3662                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3663                                  ;
  3664 00000D01 31C0                                            xor     eax,eax                                         ;indicate success
  3665 00000D03 813F46524545                                    cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3666 00000D09 0F8415010000                                    je      .240                                            ;yes, branch
  3667 00000D0F 48                                              dec     eax                                             ;indicate failure
  3668 00000D10 813F55534552                                    cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3669 00000D16 0F8508010000                                    jne     .240                                            ;no, branch
  3670                                  ;-----------------------------------------------------------------------------------------------------------------------
  3671                                  ;
  3672                                  ;       Unlink the USER memory block.
  3673                                  ;
  3674                                  ;-----------------------------------------------------------------------------------------------------------------------
  3675                                  ;
  3676                                  ;       Set the block signature. Reset owner.
  3677                                  ;
  3678 00000D1C C70746524545                                    mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3679 00000D22 31C0                                            xor     eax,eax                                         ;zero register
  3680 00000D24 894708                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3681                                  ;
  3682                                  ;       Wipe user area.
  3683                                  ;
  3684 00000D27 57                                              push    edi                                             ;save block address
  3685 00000D28 8B4F04                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3686 00000D2B 83E920                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3687 00000D2E 83C720                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3688 00000D31 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3689 00000D33 F3AA                                            rep     stosb                                           ;clear memory
  3690 00000D35 5F                                              pop     edi                                             ;restore block address
  3691                                  ;
  3692                                  ;       Address the preceding and following USER memory blocks
  3693                                  ;
  3694 00000D36 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3695 00000D39 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3696                                  ;
  3697                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3698                                  ;       pointer to point to the USER block following this block.
  3699                                  ;
  3700 00000D3C 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3701 00000D3E 7405                                            jz      .10                                             ;no, branch
  3702 00000D40 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3703 00000D43 EB03                                            jmp     .20                                             ;continue
  3704 00000D45 894E10                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3705                                  ;
  3706                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3707                                  ;       pointer to point to the USER block preceding this block.
  3708                                  ;
  3709 00000D48 E305                    .20                     jecxz   .30                                             ;branch if no next block
  3710 00000D4A 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3711 00000D4D EB03                                            jmp     .40                                             ;continue
  3712 00000D4F 895E14                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3713                                  ;-----------------------------------------------------------------------------------------------------------------------
  3714                                  ;
  3715                                  ;       Merge with a previous contiguous FREE memory block.
  3716                                  ;
  3717                                  ;-----------------------------------------------------------------------------------------------------------------------
  3718                                  ;
  3719                                  ;       Address the preceding and following contiguous memory blocks.
  3720                                  ;
  3721 00000D52 8B5F14                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3722 00000D55 8B4F10                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3723                                  ;
  3724                                  ;       Verify we have a previous contiguous FREE block.
  3725                                  ;
  3726 00000D58 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3727 00000D5A 7442                                            jz      .100                                            ;no, branch
  3728 00000D5C 813B46524545                                    cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3729 00000D62 753A                                            jne     .100                                            ;no, branch
  3730                                  ;
  3731                                  ;       Update adjacent block's contiguous pointers.
  3732                                  ;
  3733 00000D64 894B10                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3734 00000D67 E305                                            jecxz   .50                                             ;branch if no next contiguous block
  3735 00000D69 895914                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3736 00000D6C EB03                                            jmp     .60                                             ;continue
  3737 00000D6E 895E04                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3738                                  ;
  3739                                  ;       Update the size of the merged FREE block.
  3740                                  ;
  3741 00000D71 8B4704                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3742 00000D74 014304                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3743                                  ;
  3744                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3745                                  ;
  3746 00000D77 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;block header length
  3747 00000D7C B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3748 00000D7E F3AA                                            rep     stosb                                           ;clear memory header
  3749 00000D80 89DF                                            mov     edi,ebx                                         ;current block is now previous block
  3750                                  ;-----------------------------------------------------------------------------------------------------------------------
  3751                                  ;
  3752                                  ;       Unlink the previous contiguous FREE memory block
  3753                                  ;
  3754                                  ;-----------------------------------------------------------------------------------------------------------------------
  3755                                  ;
  3756                                  ;       Address the preceding and following USER memory blocks
  3757                                  ;
  3758 00000D82 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3759 00000D85 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3760                                  ;
  3761                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3762                                  ;       block pointer.
  3763                                  ;
  3764 00000D88 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3765 00000D8A 7405                                            jz      .70                                             ;no, branch
  3766 00000D8C 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3767 00000D8F EB03                                            jmp     .80                                             ;branch
  3768 00000D91 894E08                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3769                                  ;
  3770                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3771                                  ;       pointer.
  3772                                  ;
  3773 00000D94 E305                    .80                     jecxz   .90                                             ;branch if no next block
  3774 00000D96 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3775 00000D99 EB03                                            jmp     .100                                            ;continue
  3776 00000D9B 895E0C                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3777                                  ;-----------------------------------------------------------------------------------------------------------------------
  3778                                  ;
  3779                                  ;       Merge with a following contiguous FREE memory block.
  3780                                  ;
  3781                                  ;-----------------------------------------------------------------------------------------------------------------------
  3782                                  ;
  3783                                  ;       Verify we have a following contiguous FREE block.
  3784                                  ;
  3785 00000D9E 8B4F10                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3786 00000DA1 E34B                                            jecxz   .170                                            ;branch if no next contiguous block
  3787 00000DA3 813946524545                                    cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3788 00000DA9 7543                                            jne     .170                                            ;no, branch
  3789                                  ;
  3790                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3791                                  ;
  3792 00000DAB 8B4104                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3793 00000DAE 014704                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3794                                  ;
  3795                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3796                                  ;
  3797 00000DB1 8B4110                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3798 00000DB4 894710                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3799 00000DB7 85C0                                            test    eax,eax                                         ;does a block follow the next contig blk
  3800 00000DB9 7405                                            jz      .110                                            ;no, branch
  3801 00000DBB 897814                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3802 00000DBE EB03                                            jmp     .120                                            ;continue
  3803 00000DC0 897E04                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3804                                  ;-----------------------------------------------------------------------------------------------------------------------
  3805                                  ;
  3806                                  ;       Unlink the following contiguous FREE memory block
  3807                                  ;
  3808                                  ;-----------------------------------------------------------------------------------------------------------------------
  3809                                  ;
  3810                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3811                                  ;
  3812 00000DC3 57                      .120                    push    edi                                             ;save this block
  3813 00000DC4 89CF                                            mov     edi,ecx                                         ;next contiguous block
  3814 00000DC6 51                                              push    ecx                                             ;save next contiguous block
  3815                                  ;
  3816                                  ;       Address the preceding and following USER memory blocks
  3817                                  ;
  3818 00000DC7 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3819 00000DCA 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3820                                  ;
  3821                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3822                                  ;       block pointer.
  3823                                  ;
  3824 00000DCD 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3825 00000DCF 7405                                            jz      .130                                            ;no, branch
  3826 00000DD1 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3827 00000DD4 EB03                                            jmp     .140                                            ;branch
  3828 00000DD6 894E08                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3829                                  ;
  3830                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3831                                  ;       pointer.
  3832                                  ;
  3833 00000DD9 E305                    .140                    jecxz   .150                                            ;branch if no next block
  3834 00000DDB 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3835 00000DDE EB03                                            jmp     .160                                            ;continue
  3836 00000DE0 895E0C                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3837                                  ;
  3838                                  ;       Clear next contiguous block's header
  3839                                  ;
  3840 00000DE3 5F                      .160                    pop     edi                                             ;next congiguous block pointer
  3841 00000DE4 B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3842 00000DE9 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3843 00000DEB F3AA                                            rep     stosb                                           ;clear memory header
  3844 00000DED 5F                                              pop     edi                                             ;this block's pointer
  3845                                  ;-----------------------------------------------------------------------------------------------------------------------
  3846                                  ;
  3847                                  ;       Insert the final FREE block back into the block chain.
  3848                                  ;
  3849                                  ;-----------------------------------------------------------------------------------------------------------------------
  3850                                  ;
  3851                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3852                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3853                                  ;       all are smaller in size.
  3854                                  ;
  3855 00000DEE 8B5F04                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3856 00000DF1 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3857 00000DF4 E30A                    .180                    jecxz   .190                                            ;exit if no ptr
  3858 00000DF6 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3859 00000DF9 7205                                            jb      .190                                            ;yes, branch
  3860 00000DFB 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3861 00000DFE EBF4                                            jmp     .180                                            ;continue
  3862                                  ;
  3863                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3864                                  ;       larger free block. Update the next block's previous block pointer.
  3865                                  ;
  3866 00000E00 894F18                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3867 00000E03 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3868 00000E06 E308                                            jecxz   .200                                            ;branch if no block found
  3869 00000E08 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3870 00000E0B 89791C                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3871 00000E0E EB03                                            jmp     .210                                            ;continue
  3872 00000E10 897E0C                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3873                                  ;
  3874                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3875                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3876                                  ;       next pointer.
  3877                                  ;
  3878 00000E13 895F1C                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3879 00000E16 85DB                                            test    ebx,ebx                                         ;do we have a previous block?
  3880 00000E18 7405                                            jz      .220                                            ;no, branch
  3881 00000E1A 897B18                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3882 00000E1D EB03                                            jmp     .230                                            ;continue
  3883 00000E1F 897E08                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3884                                  ;
  3885                                  ;       The memory free has completed.
  3886                                  ;
  3887 00000E22 31C0                    .230                    xor     eax,eax                                         ;indicate success
  3888                                  ;
  3889                                  ;       Restore and return.
  3890                                  ;
  3891 00000E24 07                      .240                    pop     es                                              ;restore non-volatile regs
  3892 00000E25 1F                                              pop     ds                                              ;
  3893 00000E26 5F                                              pop     edi                                             ;
  3894 00000E27 5E                                              pop     esi                                             ;
  3895 00000E28 59                                              pop     ecx                                             ;
  3896 00000E29 5B                                              pop     ebx                                             ;
  3897 00000E2A C3                                              ret                                                     ;return
  3898                                  ;=======================================================================================================================
  3899                                  ;
  3900                                  ;       String Helper Routines
  3901                                  ;
  3902                                  ;       CompareMemory
  3903                                  ;       UpperCaseString
  3904                                  ;
  3905                                  ;=======================================================================================================================
  3906                                  ;-----------------------------------------------------------------------------------------------------------------------
  3907                                  ;
  3908                                  ;       Routine:        CompareMemory
  3909                                  ;
  3910                                  ;       Description:    This routine compares two byte arrays.
  3911                                  ;
  3912                                  ;       In:             DS:EDX  first source address
  3913                                  ;                       DS:EBX  second source address
  3914                                  ;                       ECX     comparison length
  3915                                  ;
  3916                                  ;       Out:            EDX     first source address
  3917                                  ;                       EBX     second source address
  3918                                  ;                       ECX     0       array 1 = array 2
  3919                                  ;                               <0      array 1 < array 2
  3920                                  ;                               >0      array 1 > array 2
  3921                                  ;
  3922                                  ;-----------------------------------------------------------------------------------------------------------------------
  3923 00000E2B 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  3924 00000E2C 57                                              push    edi                                             ;
  3925 00000E2D 06                                              push    es                                              ;
  3926 00000E2E 1E                                              push    ds                                              ;copy DS
  3927 00000E2F 07                                              pop     es                                              ;... to ES
  3928 00000E30 89D6                                            mov     esi,edx                                         ;first source address
  3929 00000E32 89DF                                            mov     edi,ebx                                         ;second source address
  3930 00000E34 FC                                              cld                                                     ;forward strings
  3931 00000E35 F3A6                                            rep     cmpsb                                           ;compare bytes
  3932 00000E37 B000                                            mov     al,0                                            ;default result
  3933 00000E39 7406                                            jz      .10                                             ;branch if arrays equal
  3934 00000E3B B001                                            mov     al,1                                            ;positive result
  3935 00000E3D 7302                                            jnc     .10                                             ;branch if target > source
  3936 00000E3F B0FF                                            mov     al,-1                                           ;negative result
  3937 00000E41 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  3938 00000E44 07                                              pop     es                                              ;restore non-volatile regs
  3939 00000E45 5F                                              pop     edi                                             ;
  3940 00000E46 5E                                              pop     esi                                             ;
  3941 00000E47 C3                                              ret                                                     ;return
  3942                                  ;-----------------------------------------------------------------------------------------------------------------------
  3943                                  ;
  3944                                  ;       Routine:        UpperCaseString
  3945                                  ;
  3946                                  ;       Description:    This routine places all characters in the given string to upper case.
  3947                                  ;
  3948                                  ;       In:             DS:EDX  string address
  3949                                  ;
  3950                                  ;       Out:            EDX     string address
  3951                                  ;
  3952                                  ;-----------------------------------------------------------------------------------------------------------------------
  3953 00000E48 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  3954 00000E49 89D6                                            mov     esi,edx                                         ;string address
  3955 00000E4B FC                                              cld                                                     ;forward strings
  3956 00000E4C AC                      .10                     lodsb                                                   ;string character
  3957 00000E4D 84C0                                            test    al,al                                           ;null?
  3958 00000E4F 740F                                            jz      .20                                             ;yes, skip ahead
  3959 00000E51 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3960 00000E53 72F7                                            jb      .10                                             ;no, continue
  3961 00000E55 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3962 00000E57 77F3                                            ja      .10                                             ;no, continue
  3963 00000E59 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  3964 00000E5B 8846FF                                          mov     [esi-1],al                                      ;upper character
  3965 00000E5E EBEC                                            jmp     .10                                             ;continue
  3966 00000E60 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  3967 00000E61 C3                                              ret                                                     ;return
  3968                                  ;=======================================================================================================================
  3969                                  ;
  3970                                  ;       Console Helper Routines
  3971                                  ;
  3972                                  ;       FirstConsoleColumn
  3973                                  ;       GetConsoleChar
  3974                                  ;       GetConsoleString
  3975                                  ;       NextConsoleColumn
  3976                                  ;       NextConsoleRow
  3977                                  ;       PreviousConsoleColumn
  3978                                  ;       PutConsoleChar
  3979                                  ;       PutConsoleHexByte
  3980                                  ;       PutConsoleHexDword
  3981                                  ;       PutConsoleHexWord
  3982                                  ;       PutConsoleOIAChar
  3983                                  ;       PutConsoleOIAShift
  3984                                  ;       PutConsoleString
  3985                                  ;       Yield
  3986                                  ;
  3987                                  ;=======================================================================================================================
  3988                                  ;-----------------------------------------------------------------------------------------------------------------------
  3989                                  ;
  3990                                  ;       Routine:        FirstConsoleColumn
  3991                                  ;
  3992                                  ;       Description:    This routine resets the console column to start of the row.
  3993                                  ;
  3994                                  ;       In:             DS      OS data selector
  3995                                  ;
  3996                                  ;-----------------------------------------------------------------------------------------------------------------------
  3997 00000E62 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  3998 00000E64 A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  3999 00000E69 C3                                              ret                                                     ;return
  4000                                  ;-----------------------------------------------------------------------------------------------------------------------
  4001                                  ;
  4002                                  ;       Routine:        GetConsoleChar
  4003                                  ;
  4004                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  4005                                  ;
  4006                                  ;       Out:            AL      ASCII character code
  4007                                  ;                       AH      keyboard scan code
  4008                                  ;
  4009                                  ;-----------------------------------------------------------------------------------------------------------------------
  4010 00000E6A E85C020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  4011 00000E6F E86F030000              GetConsoleChar          call    GetMessage                                      ;get the next message
  4012 00000E74 09C0                                            or      eax,eax                                         ;do we have a message?
  4013 00000E76 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  4014 00000E78 50                                              push    eax                                             ;save key codes
  4015 00000E79 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  4016 00000E7E 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  4017 00000E83 58                                              pop     eax                                             ;restore key codes
  4018 00000E84 75E9                                            jne     GetConsoleChar                                  ;no, try again
  4019 00000E86 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  4020 00000E8B C3                                              ret                                                     ;return
  4021                                  ;-----------------------------------------------------------------------------------------------------------------------
  4022                                  ;
  4023                                  ;       Routine:        GetConsoleString
  4024                                  ;
  4025                                  ;       Description:    This routine accepts keyboard input into a buffer.
  4026                                  ;
  4027                                  ;       In:             DS:EDX  target buffer address
  4028                                  ;                       ECX     maximum number of characters to accept
  4029                                  ;                       BH      echo to terminal
  4030                                  ;                       BL      terminating character
  4031                                  ;
  4032                                  ;-----------------------------------------------------------------------------------------------------------------------
  4033 00000E8C 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  4034 00000E8D 56                                              push    esi                                             ;
  4035 00000E8E 57                                              push    edi                                             ;
  4036 00000E8F 06                                              push    es                                              ;
  4037 00000E90 1E                                              push    ds                                              ;load data segment selector ...
  4038 00000E91 07                                              pop     es                                              ;... into extra segment register
  4039 00000E92 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4040 00000E94 51                                              push    ecx                                             ;save maximum characters
  4041 00000E95 30C0                                            xor     al,al                                           ;zero register
  4042 00000E97 FC                                              cld                                                     ;forward strings
  4043 00000E98 F3AA                                            rep     stosb                                           ;zero fill buffer
  4044 00000E9A 59                                              pop     ecx                                             ;maximum characters
  4045 00000E9B 89D7                                            mov     edi,edx                                         ;edi = target buffer
  4046 00000E9D 89D6                                            mov     esi,edx                                         ;esi = target buffer
  4047 00000E9F E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  4048 00000EA1 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  4049 00000EA6 38D8                                            cmp     al,bl                                           ;is this the terminator?
  4050 00000EA8 7445                                            je      .50                                             ;yes, exit
  4051 00000EAA 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  4052 00000EAC 7521                                            jne     .30                                             ;no, skip ahead
  4053 00000EAE 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  4054 00000EB0 74EF                                            je      .20                                             ;yes, get next character
  4055 00000EB2 4F                                              dec     edi                                             ;backup target pointer
  4056 00000EB3 C60700                                          mov     byte [edi],0                                    ;zero previous character
  4057 00000EB6 41                                              inc     ecx                                             ;increment remaining chars
  4058 00000EB7 F6C701                                          test    bh,1                                            ;echo to console?
  4059 00000EBA 74E5                                            jz      .20                                             ;no, get next character
  4060 00000EBC E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  4061 00000EC1 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4062 00000EC3 E891000000                                      call    PutConsoleChar                                  ;write space to console
  4063 00000EC8 E82B040000                                      call    PlaceCursor                                     ;position the cursor
  4064 00000ECD EBD2                                            jmp     .20                                             ;get next character
  4065 00000ECF 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  4066 00000ED1 72CE                                            jb      .20                                             ;no, get another character
  4067 00000ED3 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  4068 00000ED5 77CA                                            ja      .20                                             ;no, get another character
  4069 00000ED7 AA                                              stosb                                                   ;store character in buffer
  4070 00000ED8 F6C701                                          test    bh,1                                            ;echo to console?
  4071 00000EDB 740F                                            jz      .40                                             ;no, skip ahead
  4072 00000EDD E877000000                                      call    PutConsoleChar                                  ;write character to console
  4073 00000EE2 E810000000                                      call    NextConsoleColumn                               ;advance console position
  4074 00000EE7 E80C040000                                      call    PlaceCursor                                     ;position the cursor
  4075 00000EEC 49                      .40                     dec     ecx                                             ;decrement remaining chars
  4076 00000EED EBB0                                            jmp     .10                                             ;next
  4077 00000EEF 30C0                    .50                     xor     al,al                                           ;null
  4078 00000EF1 AA                                              stosb                                                   ;terminate buffer
  4079 00000EF2 07                                              pop     es                                              ;restore non-volatile regs
  4080 00000EF3 5F                                              pop     edi                                             ;
  4081 00000EF4 5E                                              pop     esi                                             ;
  4082 00000EF5 59                                              pop     ecx                                             ;
  4083 00000EF6 C3                                              ret                                                     ;return
  4084                                  ;-----------------------------------------------------------------------------------------------------------------------
  4085                                  ;
  4086                                  ;       Routine:        NextConsoleColumn
  4087                                  ;
  4088                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  4089                                  ;                       incremented if the end of the current row is reached.
  4090                                  ;
  4091                                  ;       In:             DS      OS data selector
  4092                                  ;
  4093                                  ;-----------------------------------------------------------------------------------------------------------------------
  4094 00000EF7 A014080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  4095 00000EFC FEC0                                            inc     al                                              ;increment column
  4096 00000EFE A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  4097 00000F03 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  4098 00000F05 720A                                            jb      .10                                             ;no, skip ahead
  4099 00000F07 E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  4100 00000F0C E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  4101 00000F11 C3                      .10                     ret                                                     ;return
  4102                                  ;-----------------------------------------------------------------------------------------------------------------------
  4103                                  ;
  4104                                  ;       Routine:        NextConsoleRow
  4105                                  ;
  4106                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  4107                                  ;
  4108                                  ;       In:             DS      OS data selector
  4109                                  ;
  4110                                  ;-----------------------------------------------------------------------------------------------------------------------
  4111 00000F12 A015080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  4112 00000F17 FEC0                                            inc     al                                              ;increment row
  4113 00000F19 A215080000                                      mov     [wbConsoleRow],al                               ;save row
  4114 00000F1E 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  4115 00000F20 7211                                            jb      .10                                             ;no, skip ahead
  4116 00000F22 E854030000                                      call    ScrollConsoleRow                                ;scroll up one row
  4117 00000F27 A015080000                                      mov     al,[wbConsoleRow]                               ;row
  4118 00000F2C FEC8                                            dec     al                                              ;decrement row
  4119 00000F2E A215080000                                      mov     [wbConsoleRow],al                               ;save row
  4120 00000F33 C3                      .10                     ret                                                     ;return
  4121                                  ;-----------------------------------------------------------------------------------------------------------------------
  4122                                  ;
  4123                                  ;       Routine:        PreviousConsoleColumn
  4124                                  ;
  4125                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  4126                                  ;                       the column is set to the last position in the row and the row is decremented.
  4127                                  ;
  4128                                  ;       In:             DS      OS data selector
  4129                                  ;
  4130                                  ;-----------------------------------------------------------------------------------------------------------------------
  4131 00000F34 A014080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  4132 00000F39 08C0                                            or      al,al                                           ;start of row?
  4133 00000F3B 7514                                            jnz     .10                                             ;no, skip ahead
  4134 00000F3D 8A2515080000                                    mov     ah,[wbConsoleRow]                               ;current row
  4135 00000F43 08E4                                            or      ah,ah                                           ;top of screen?
  4136 00000F45 7411                                            jz      .20                                             ;yes, exit with no change
  4137 00000F47 FECC                                            dec     ah                                              ;decrement row
  4138 00000F49 882515080000                                    mov     [wbConsoleRow],ah                               ;save row
  4139 00000F4F B050                                            mov     al,ECONCOLS                                     ;set maximum column
  4140 00000F51 FEC8                    .10                     dec     al                                              ;decrement column
  4141 00000F53 A214080000                                      mov     [wbConsoleColumn],al                            ;save column
  4142 00000F58 C3                      .20                     ret                                                     ;return
  4143                                  ;-----------------------------------------------------------------------------------------------------------------------
  4144                                  ;
  4145                                  ;       Routine:        PutConsoleChar
  4146                                  ;
  4147                                  ;       Description:    This routine writes one ASCII character to the console screen.
  4148                                  ;
  4149                                  ;       In:             AL      ASCII character
  4150                                  ;                       DS      OS data selector
  4151                                  ;
  4152                                  ;-----------------------------------------------------------------------------------------------------------------------
  4153 00000F59 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  4154 00000F5A 06                                              push    es                                              ;
  4155 00000F5B 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4156 00000F5D 07                                              pop     es                                              ;... into extra segment reg
  4157 00000F5E 8A0D14080000                                    mov     cl,[wbConsoleColumn]                            ;column
  4158 00000F64 8A2D15080000                                    mov     ch,[wbConsoleRow]                               ;row
  4159 00000F6A E838030000                                      call    SetConsoleChar                                  ;put character at row, column
  4160 00000F6F 07                                              pop     es                                              ;restore non-volatile regs
  4161 00000F70 59                                              pop     ecx                                             ;
  4162 00000F71 C3                                              ret                                                     ;return
  4163                                  ;-----------------------------------------------------------------------------------------------------------------------
  4164                                  ;
  4165                                  ;       Routine:        PutConsoleHexByte
  4166                                  ;
  4167                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  4168                                  ;
  4169                                  ;       In:             AL      byte value
  4170                                  ;                       CL      column
  4171                                  ;                       CH      row
  4172                                  ;                       DS      OS data selector
  4173                                  ;                       ES      CGA selector
  4174                                  ;
  4175                                  ;-----------------------------------------------------------------------------------------------------------------------
  4176 00000F72 50                      PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  4177 00000F73 C0E804                                          shr     al,4                                            ;hi-order nybble
  4178 00000F76 E803000000                                      call    .10                                             ;make ASCII and store
  4179 00000F7B 58                                              pop     eax                                             ;byte value
  4180 00000F7C 240F                                            and     al,0Fh                                          ;lo-order nybble
  4181 00000F7E 0C30                    .10                     or      al,030h                                         ;apply ASCII zone
  4182 00000F80 3C3A                                            cmp     al,03Ah                                         ;numeric?
  4183 00000F82 7202                                            jb      .20                                             ;yes, skip ahead
  4184 00000F84 0407                                            add     al,7                                            ;add ASCII offset for alpha
  4185 00000F86 E81C030000              .20                     call    SetConsoleChar                                  ;display ASCII character
  4186 00000F8B C3                                              ret                                                     ;return
  4187                                  ;-----------------------------------------------------------------------------------------------------------------------
  4188                                  ;
  4189                                  ;       Routine:        PutConsoleHexDword
  4190                                  ;
  4191                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  4192                                  ;
  4193                                  ;       In:             EAX     value
  4194                                  ;                       CL      column
  4195                                  ;                       CH      row
  4196                                  ;                       DS      OS data selector
  4197                                  ;                       ES      CGA selector
  4198                                  ;
  4199                                  ;-----------------------------------------------------------------------------------------------------------------------
  4200 00000F8C 50                      PutConsoleHexDword      push    eax
  4201 00000F8D C1E810                                          shr     eax,16
  4202 00000F90 E807000000                                      call    PutConsoleHexWord
  4203 00000F95 58                                              pop     eax
  4204 00000F96 E801000000                                      call    PutConsoleHexWord
  4205 00000F9B C3                                              ret
  4206                                  ;-----------------------------------------------------------------------------------------------------------------------
  4207                                  ;
  4208                                  ;       Routine:        PutConsoleHexWord
  4209                                  ;
  4210                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  4211                                  ;
  4212                                  ;       In:             EAX     value
  4213                                  ;                       CL      column
  4214                                  ;                       CH      row
  4215                                  ;                       DS      OS data selector
  4216                                  ;                       ES      CGA selector
  4217                                  ;
  4218                                  ;-----------------------------------------------------------------------------------------------------------------------
  4219 00000F9C 50                      PutConsoleHexWord       push    eax
  4220 00000F9D C1E808                                          shr     eax,8
  4221 00000FA0 E8CDFFFFFF                                      call    PutConsoleHexByte
  4222 00000FA5 58                                              pop     eax
  4223 00000FA6 E8C7FFFFFF                                      call    PutConsoleHexByte
  4224 00000FAB C3                                              ret
  4225                                  ;-----------------------------------------------------------------------------------------------------------------------
  4226                                  ;
  4227                                  ;       Routine:        PutConsoleOIAChar
  4228                                  ;
  4229                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  4230                                  ;
  4231                                  ;       In:             DS      OS data selector
  4232                                  ;
  4233                                  ;-----------------------------------------------------------------------------------------------------------------------
  4234 00000FAC 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  4235 00000FAD 51                                              push    ecx                                             ;
  4236 00000FAE 56                                              push    esi                                             ;
  4237 00000FAF 1E                                              push    ds                                              ;
  4238 00000FB0 06                                              push    es                                              ;
  4239 00000FB1 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  4240 00000FB3 1F                                              pop     ds                                              ;... into data segment register
  4241 00000FB4 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4242 00000FB6 07                                              pop     es                                              ;... into extra segment register
  4243 00000FB7 BE19080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  4244 00000FBC B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  4245 00000FBE B300                                            mov     bl,0                                            ;starting column
  4246 00000FC0 B906000000                                      mov     ecx,6                                           ;maximum scan codes
  4247 00000FC5 51                      .10                     push    ecx                                             ;save remaining count
  4248 00000FC6 89D9                                            mov     ecx,ebx                                         ;row, column
  4249 00000FC8 AC                                              lodsb                                                   ;read scan code
  4250 00000FC9 08C0                                            or      al,al                                           ;scan code present?
  4251 00000FCB 7407                                            jz      .20                                             ;no, skip ahead
  4252 00000FCD E8A0FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  4253 00000FD2 EB0E                                            jmp     .30                                             ;continue
  4254 00000FD4 B020                    .20                     mov     al,' '                                          ;ASCII space
  4255 00000FD6 E8CC020000                                      call    SetConsoleChar                                  ;display space
  4256 00000FDB B020                                            mov     al,' '                                          ;ASCII space
  4257 00000FDD E8C5020000                                      call    SetConsoleChar                                  ;display space
  4258 00000FE2 80C302                  .30                     add     bl,2                                            ;next column (+2)
  4259 00000FE5 59                                              pop     ecx                                             ;restore remaining
  4260 00000FE6 E2DD                                            loop    .10                                             ;next code
  4261 00000FE8 A01F080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  4262 00000FED 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  4263 00000FEF 720D                                            jb      .40                                             ;no, skip ahead
  4264 00000FF1 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  4265 00000FF3 7709                                            ja      .40                                             ;no, skip ahead
  4266 00000FF5 88FD                                            mov     ch,bh                                           ;OIA row
  4267 00000FF7 B128                                            mov     cl,40                                           ;character display column
  4268 00000FF9 E8A9020000                                      call    SetConsoleChar                                  ;display ASCII character
  4269 00000FFE 07                      .40                     pop     es                                              ;restore non-volatile regs
  4270 00000FFF 1F                                              pop     ds                                              ;
  4271 00001000 5E                                              pop     esi                                             ;
  4272 00001001 59                                              pop     ecx                                             ;
  4273 00001002 5B                                              pop     ebx                                             ;
  4274 00001003 C3                                              ret                                                     ;return
  4275                                  ;-----------------------------------------------------------------------------------------------------------------------
  4276                                  ;
  4277                                  ;       Routine:        PutConsoleOIAShift
  4278                                  ;
  4279                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  4280                                  ;
  4281                                  ;       In:             BL      shift flags
  4282                                  ;                       BH      lock flags
  4283                                  ;                       DS      OS data selector
  4284                                  ;
  4285                                  ;-----------------------------------------------------------------------------------------------------------------------
  4286 00001004 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  4287 00001005 06                                              push    es                                              ;
  4288 00001006 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4289 00001008 07                                              pop     es                                              ;... into ES register
  4290 00001009 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  4291 0000100B B020                                            mov     al,EASCIISPACE                                  ;space is default character
  4292 0000100D F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  4293 00001010 7402                                            jz      .10                                             ;no, skip ahead
  4294 00001012 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4295 00001014 B10E                    .10                     mov     cl,14                                           ;indicator column
  4296 00001016 E88C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4297 0000101B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4298 0000101D F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  4299 00001020 7402                                            jz      .20                                             ;no, skip ahead
  4300 00001022 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4301 00001024 B140                    .20                     mov     cl,64                                           ;indicator column
  4302 00001026 E87C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4303 0000102B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4304 0000102D F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  4305 00001030 7402                                            jz      .30                                             ;no, skip ahead
  4306 00001032 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4307 00001034 B10F                    .30                     mov     cl,15                                           ;indicator column
  4308 00001036 E86C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4309 0000103B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4310 0000103D F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  4311 00001040 7402                                            jz      .40                                             ;no, skip ahead
  4312 00001042 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4313 00001044 B13F                    .40                     mov     cl,63                                           ;indicator column
  4314 00001046 E85C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4315 0000104B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4316 0000104D F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  4317 00001050 7402                                            jz      .50                                             ;no, skip ahead
  4318 00001052 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4319 00001054 B110                    .50                     mov     cl,16                                           ;indicator column
  4320 00001056 E84C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4321 0000105B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4322 0000105D F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  4323 00001060 7402                                            jz      .60                                             ;no, skip ahead
  4324 00001062 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  4325 00001064 B13E                    .60                     mov     cl,62                                           ;indicator column
  4326 00001066 E83C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4327 0000106B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4328 0000106D F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  4329 00001070 7402                                            jz      .70                                             ;no, skip ahead
  4330 00001072 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  4331 00001074 B14E                    .70                     mov     cl,78                                           ;indicator column
  4332 00001076 E82C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4333 0000107B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4334 0000107D F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  4335 00001080 7402                                            jz      .80                                             ;no, skip ahead
  4336 00001082 B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  4337 00001084 B14D                    .80                     mov     cl,77                                           ;indicator column
  4338 00001086 E81C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4339 0000108B B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  4340 0000108D F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  4341 00001090 7402                                            jz      .90                                             ;no, skip ahead
  4342 00001092 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  4343 00001094 B14C                    .90                     mov     cl,76                                           ;indicator column
  4344 00001096 E80C020000                                      call    SetConsoleChar                                  ;display ASCII character
  4345 0000109B 07                                              pop     es                                              ;restore non-volatile regs
  4346 0000109C 59                                              pop     ecx                                             ;
  4347 0000109D C3                                              ret                                                     ;return
  4348                                  ;-----------------------------------------------------------------------------------------------------------------------
  4349                                  ;
  4350                                  ;       Routine:        PutConsoleString
  4351                                  ;
  4352                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  4353                                  ;                       console position as needed.
  4354                                  ;
  4355                                  ;       In:             EDX     source address
  4356                                  ;                       DS      OS data selector
  4357                                  ;
  4358                                  ;-----------------------------------------------------------------------------------------------------------------------
  4359 0000109E 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  4360 0000109F 89D6                                            mov     esi,edx                                         ;source address
  4361 000010A1 FC                                              cld                                                     ;forward strings
  4362 000010A2 AC                      .10                     lodsb                                                   ;ASCII character
  4363 000010A3 08C0                                            or      al,al                                           ;end of string?
  4364 000010A5 7422                                            jz      .40                                             ;yes, skip ahead
  4365 000010A7 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  4366 000010A9 7507                                            jne     .20                                             ;no, skip ahead
  4367 000010AB E8B2FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  4368 000010B0 EBF0                                            jmp     .10                                             ;next character
  4369 000010B2 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  4370 000010B4 7507                                            jne     .30                                             ;no, skip ahead
  4371 000010B6 E857FEFFFF                                      call    NextConsoleRow                                  ;move to next row
  4372 000010BB EBE5                                            jmp     .10                                             ;next character
  4373 000010BD E897FEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  4374 000010C2 E830FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  4375 000010C7 EBD9                                            jmp     .10                                             ;next character
  4376 000010C9 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  4377 000010CA C3                                              ret                                                     ;return
  4378                                  ;-----------------------------------------------------------------------------------------------------------------------
  4379                                  ;
  4380                                  ;       Routine:        Yield
  4381                                  ;
  4382                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  4383                                  ;
  4384                                  ;-----------------------------------------------------------------------------------------------------------------------
  4385 000010CB FB                      Yield                   sti                                                     ;enable maskagle interrupts
  4386 000010CC F4                                              hlt                                                     ;halt until external interrupt
  4387 000010CD C3                                              ret                                                     ;return
  4388                                  ;=======================================================================================================================
  4389                                  ;
  4390                                  ;       Data-Type Conversion Helper Routines
  4391                                  ;
  4392                                  ;       DecimalToUnsigned
  4393                                  ;       HexadecimalToUnsigned
  4394                                  ;       UnsignedToDecimalString
  4395                                  ;       UnsignedToHexadecimal
  4396                                  ;
  4397                                  ;=======================================================================================================================
  4398                                  ;-----------------------------------------------------------------------------------------------------------------------
  4399                                  ;
  4400                                  ;       Routine:        DecimalToUnsigned
  4401                                  ;
  4402                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  4403                                  ;
  4404                                  ;       Input:          DS:EDX  null-terminated decimal string address
  4405                                  ;
  4406                                  ;       Output:         EAX     unsigned integer value
  4407                                  ;
  4408                                  ;-----------------------------------------------------------------------------------------------------------------------
  4409 000010CE 56                      DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  4410 000010CF 89D6                                            mov     esi,edx                                         ;source address
  4411 000010D1 31D2                                            xor     edx,edx                                         ;zero total
  4412 000010D3 AC                      .10                     lodsb                                                   ;source byte
  4413 000010D4 3C2C                                            cmp     al,','                                          ;comma?
  4414 000010D6 74FB                                            je      .10                                             ;yes, ignore
  4415 000010D8 84C0                                            test    al,al                                           ;end of string?
  4416 000010DA 7421                                            jz      .30                                             ;yes, done
  4417 000010DC 3C2E                                            cmp     al,'.'                                          ;decimal point?
  4418 000010DE 741D                                            je      .30                                             ;yes, done
  4419 000010E0 3C30                                            cmp     al,'0'                                          ;numeral?
  4420 000010E2 7217                                            jb      .20                                             ;no, invalid string
  4421 000010E4 3C39                                            cmp     al,'9'                                          ;numeral?
  4422 000010E6 7713                                            ja      .20                                             ;no, invalid string
  4423 000010E8 240F                                            and     al,00Fh                                         ;mask ASCII zone
  4424 000010EA 50                                              push    eax                                             ;save numeral
  4425 000010EB D1E2                                            shl     edx,1                                           ;total * 2
  4426 000010ED 89D0                                            mov     eax,edx                                         ;total * 2
  4427 000010EF C1E202                                          shl     edx,2                                           ;total * 8
  4428 000010F2 01C2                                            add     edx,eax                                         ;total * 10
  4429 000010F4 58                                              pop     eax                                             ;restore numeral
  4430 000010F5 01C2                                            add     edx,eax                                         ;accumulate decimal digit
  4431 000010F7 31C0                                            xor     eax,eax                                         ;zero register
  4432 000010F9 EBD8                                            jmp     .10                                             ;next
  4433 000010FB 31D2                    .20                     xor     edx,edx                                         ;zero result on error
  4434 000010FD 89D0                    .30                     mov     eax,edx                                         ;result
  4435 000010FF 5E                                              pop     esi                                             ;restore non-volatile regs
  4436 00001100 C3                                              ret                                                     ;return
  4437                                  ;-----------------------------------------------------------------------------------------------------------------------
  4438                                  ;
  4439                                  ;       Routine:        HexadecimalToUnsigned
  4440                                  ;
  4441                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  4442                                  ;
  4443                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  4444                                  ;
  4445                                  ;       Output:         EAX     unsigned integer value
  4446                                  ;
  4447                                  ;-----------------------------------------------------------------------------------------------------------------------
  4448 00001101 56                      HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  4449 00001102 89D6                                            mov     esi,edx                                         ;source address
  4450 00001104 31D2                                            xor     edx,edx                                         ;zero register
  4451 00001106 AC                      .10                     lodsb                                                   ;source byte
  4452 00001107 84C0                                            test    al,al                                           ;end of string?
  4453 00001109 7410                                            jz      .30                                             ;yes, branch
  4454 0000110B 3C39                                            cmp     al,'9'                                          ;hexadecimal?
  4455 0000110D 7602                                            jna     .20                                             ;no, skip ahead
  4456 0000110F 2C37                                            sub     al,037h                                         ;'A' = 41h, less 37h = 0Ah
  4457 00001111 83E00F                  .20                     and     eax,00Fh                                        ;remove ascii zone
  4458 00001114 C1E204                                          shl     edx,4                                           ;previous total x 16
  4459 00001117 01C2                                            add     edx,eax                                         ;add prior value x 16
  4460 00001119 EBEB                                            jmp     .10                                             ;next
  4461 0000111B 89D0                    .30                     mov     eax,edx                                         ;result
  4462 0000111D 5E                                              pop     esi                                             ;restore non-volatile regs
  4463 0000111E C3                                              ret                                                     ;return
  4464                                  ;-----------------------------------------------------------------------------------------------------------------------
  4465                                  ;
  4466                                  ;       Routine:        UnsignedToDecimalString
  4467                                  ;
  4468                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  4469                                  ;
  4470                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  4471                                  ;                                               bit 1: 1 = include comma grouping delimiters
  4472                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  4473                                  ;                       ECX     32-bit binary
  4474                                  ;                       DS:EDX  output buffer address
  4475                                  ;
  4476                                  ;-----------------------------------------------------------------------------------------------------------------------
  4477 0000111F 53                      UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  4478 00001120 51                                              push    ecx                                             ;
  4479 00001121 57                                              push    edi                                             ;
  4480 00001122 06                                              push    es                                              ;
  4481 00001123 1E                                              push    ds                                              ;load data selector
  4482 00001124 07                                              pop     es                                              ;... into extra segment reg
  4483 00001125 89D7                                            mov     edi,edx                                         ;output buffer address
  4484 00001127 80E70F                                          and     bh,00001111b                                    ;zero internal flags
  4485 0000112A 89CA                                            mov     edx,ecx                                         ;binary
  4486 0000112C B900CA9A3B                                      mov     ecx,1000000000                                  ;10^9 divisor
  4487 00001131 E871000000                                      call    .30                                             ;divide and store
  4488 00001136 B900E1F505                                      mov     ecx,100000000                                   ;10^8 divisor
  4489 0000113B E855000000                                      call    .10                                             ;divide and store
  4490 00001140 B980969800                                      mov     ecx,10000000                                    ;10^7 divisor
  4491 00001145 E85D000000                                      call    .30                                             ;divide and store
  4492 0000114A B940420F00                                      mov     ecx,1000000                                     ;10^6 divisor
  4493 0000114F E853000000                                      call    .30                                             ;divide and store
  4494 00001154 B9A0860100                                      mov     ecx,100000                                      ;10^5 divisor
  4495 00001159 E837000000                                      call    .10                                             ;divide and store
  4496 0000115E B910270000                                      mov     ecx,10000                                       ;10^4 divisor
  4497 00001163 E83F000000                                      call    .30                                             ;divide and store
  4498 00001168 B9E8030000                                      mov     ecx,1000                                        ;10^3 divisor
  4499 0000116D E835000000                                      call    .30                                             ;divide and store
  4500 00001172 B964000000                                      mov     ecx,100                                         ;10^2 divisor
  4501 00001177 E819000000                                      call    .10                                             ;divide and store
  4502 0000117C B90A000000                                      mov     ecx,10                                          ;10^2 divisor
  4503 00001181 E821000000                                      call    .30                                             ;divide and store
  4504 00001186 89D0                                            mov     eax,edx                                         ;10^1 remainder
  4505 00001188 E827000000                                      call    .40                                             ;store
  4506 0000118D 30C0                                            xor     al,al                                           ;null terminator
  4507 0000118F AA                                              stosb                                                   ;store in output buffer
  4508 00001190 07                                              pop     es                                              ;restore non-volatile regs
  4509 00001191 5F                                              pop     edi                                             ;
  4510 00001192 59                                              pop     ecx                                             ;
  4511 00001193 5B                                              pop     ebx                                             ;
  4512 00001194 C3                                              ret                                                     ;return
  4513 00001195 F6C702                  .10                     test    bh,00000010b                                    ;comma group delims?
  4514 00001198 740D                                            jz      .30                                             ;no, branch
  4515 0000119A F6C701                                          test    bh,00000001b                                    ;trim leading zeros?
  4516 0000119D 7405                                            jz      .20                                             ;no, store delim
  4517 0000119F F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4518 000011A2 7403                                            jz      .30                                             ;no, branch
  4519 000011A4 B02C                    .20                     mov     al,','                                          ;delimiter
  4520 000011A6 AA                                              stosb                                                   ;store delimiter
  4521 000011A7 89D0                    .30                     mov     eax,edx                                         ;lo-orer dividend
  4522 000011A9 31D2                                            xor     edx,edx                                         ;zero hi-order
  4523 000011AB F7F1                                            div     ecx                                             ;divide by power of 10
  4524 000011AD 84C0                                            test    al,al                                           ;zero?
  4525 000011AF 7407                                            jz      .50                                             ;yes, branch
  4526 000011B1 80CF10                                          or      bh,00010000b                                    ;non-zero found
  4527 000011B4 0C30                    .40                     or      al,030h                                         ;ASCII zone
  4528 000011B6 AA                                              stosb                                                   ;store digit
  4529 000011B7 C3                                              ret                                                     ;return
  4530 000011B8 F6C701                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  4531 000011BB 74F7                                            jz      .40                                             ;no, store and continue
  4532 000011BD F6C710                                          test    bh,00010000b                                    ;non-zero found?
  4533 000011C0 75F2                                            jnz     .40                                             ;yes, store and continue
  4534 000011C2 C3                                              ret                                                     ;return
  4535                                  ;-----------------------------------------------------------------------------------------------------------------------
  4536                                  ;
  4537                                  ;       Routine:        UnsignedToHexadecimal
  4538                                  ;
  4539                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  4540                                  ;
  4541                                  ;       Input:          DS:EDX  output buffer address
  4542                                  ;                       ECX     32-bit binary
  4543                                  ;
  4544                                  ;-----------------------------------------------------------------------------------------------------------------------
  4545 000011C3 57                      UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  4546 000011C4 89D7                                            mov     edi,edx                                         ;output buffer address
  4547 000011C6 89CA                                            mov     edx,ecx                                         ;32-bit unsigned
  4548 000011C8 31C9                                            xor     ecx,ecx                                         ;zero register
  4549 000011CA B108                                            mov     cl,8                                            ;nybble count
  4550 000011CC C1C204                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  4551 000011CF 88D0                                            mov     al,dl                                           ;????bbbb
  4552 000011D1 240F                                            and     al,00Fh                                         ;mask out bits 4-7
  4553 000011D3 0C30                                            or      al,030h                                         ;mask in ascii zone
  4554 000011D5 3C3A                                            cmp     al,03Ah                                         ;A through F?
  4555 000011D7 7202                                            jb      .20                                             ;no, skip ahead
  4556 000011D9 0407                                            add     al,7                                            ;41h through 46h
  4557 000011DB AA                      .20                     stosb                                                   ;store hexnum
  4558 000011DC E2EE                                            loop    .10                                             ;next nybble
  4559 000011DE 30C0                                            xor     al,al                                           ;zero reg
  4560 000011E0 AA                                              stosb                                                   ;null terminate
  4561 000011E1 5F                                              pop     edi                                             ;restore non-volatile regs
  4562 000011E2 C3                                              ret                                                     ;return
  4563                                  ;=======================================================================================================================
  4564                                  ;
  4565                                  ;       Message Queue Helper Routines
  4566                                  ;
  4567                                  ;       GetMessage
  4568                                  ;       PutMessage
  4569                                  ;
  4570                                  ;=======================================================================================================================
  4571                                  ;-----------------------------------------------------------------------------------------------------------------------
  4572                                  ;
  4573                                  ;       Routine:        GetMessage
  4574                                  ;
  4575                                  ;       Description:    This routine reads and removes a message from the message queue.
  4576                                  ;
  4577                                  ;       Out:            EAX     lo-order message data
  4578                                  ;                       EDX     hi-order message data
  4579                                  ;
  4580                                  ;                       CY      0 = message read
  4581                                  ;                               1 = no message to read
  4582                                  ;
  4583                                  ;-----------------------------------------------------------------------------------------------------------------------
  4584 000011E3 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  4585 000011E4 51                                              push    ecx                                             ;
  4586 000011E5 1E                                              push    ds                                              ;
  4587 000011E6 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  4588 000011E8 1F                                              pop     ds                                              ;... into data segment register
  4589 000011E9 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  4590 000011EF 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  4591 000011F1 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  4592 000011F4 09D0                                            or      eax,edx                                         ;is queue empty?
  4593 000011F6 F9                                              stc                                                     ;assume queue is emtpy
  4594 000011F7 741B                                            jz      .20                                             ;yes, skip ahead
  4595 000011F9 31C9                                            xor     ecx,ecx                                         ;store zero
  4596 000011FB 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  4597 000011FD 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  4598 00001200 83C308                                          add     ebx,8                                           ;next queue element
  4599 00001203 81E3FC030000                                    and     ebx,03FCh                                       ;at end of queue?
  4600 00001209 7502                                            jnz     .10                                             ;no, skip ahead
  4601 0000120B B308                                            mov     bl,8                                            ;reset to 1st entry
  4602 0000120D 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  4603 00001213 F8                                              clc                                                     ;indicate message read
  4604 00001214 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4605 00001215 59                                              pop     ecx                                             ;
  4606 00001216 5B                                              pop     ebx                                             ;
  4607 00001217 C3                                              ret                                                     ;return
  4608                                  ;-----------------------------------------------------------------------------------------------------------------------
  4609                                  ;
  4610                                  ;       Routine:        PutMessage
  4611                                  ;
  4612                                  ;       Description:    This routine adda a message to the message queue.
  4613                                  ;
  4614                                  ;       In:             ECX     hi-order data word
  4615                                  ;                       EDX     lo-order data word
  4616                                  ;
  4617                                  ;       Out:            CY      0 = success
  4618                                  ;                               1 = fail: queue is full
  4619                                  ;
  4620                                  ;-----------------------------------------------------------------------------------------------------------------------
  4621 00001218 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  4622 00001219 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  4623 0000121B 1F                                              pop     ds                                              ;... into data segment register
  4624 0000121C A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  4625 00001221 833800                                          cmp     dword [eax],0                                   ;is queue full?
  4626 00001224 F9                                              stc                                                     ;assume failure
  4627 00001225 7517                                            jne     .20                                             ;yes, cannot store
  4628 00001227 8910                                            mov     [eax],edx                                       ;store lo-order data
  4629 00001229 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  4630 0000122C 83C008                                          add     eax,8                                           ;next queue element adr
  4631 0000122F 25FC030000                                      and     eax,03FCh                                       ;at end of queue?
  4632 00001234 7502                                            jnz     .10                                             ;no, skip ahead
  4633 00001236 B008                                            mov     al,8                                            ;reset to top of queue
  4634 00001238 A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4635 0000123D F8                                              clc                                                     ;indicate success
  4636 0000123E 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4637 0000123F C3                                              ret                                                     ;return
  4638                                  ;=======================================================================================================================
  4639                                  ;
  4640                                  ;       Memory-Mapped Video Routines
  4641                                  ;
  4642                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4643                                  ;
  4644                                  ;       ClearConsoleScreen
  4645                                  ;       ScrollConsoleRow
  4646                                  ;       SetConsoleChar
  4647                                  ;       SetConsoleString
  4648                                  ;
  4649                                  ;=======================================================================================================================
  4650                                  ;-----------------------------------------------------------------------------------------------------------------------
  4651                                  ;
  4652                                  ;       Routine:        ClearConsoleScreen
  4653                                  ;
  4654                                  ;       Description:    This routine clears the console (CGA) screen.
  4655                                  ;
  4656                                  ;-----------------------------------------------------------------------------------------------------------------------
  4657 00001240 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4658 00001241 57                                              push    edi                                             ;
  4659 00001242 1E                                              push    ds                                              ;
  4660 00001243 06                                              push    es                                              ;
  4661 00001244 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  4662 00001246 1F                                              pop     ds                                              ;... into DS register
  4663 00001247 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4664 00001249 07                                              pop     es                                              ;... into ES register
  4665 0000124A B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  4666 0000124F B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4667 00001254 31FF                                            xor     edi,edi                                         ;target offset
  4668 00001256 FC                                              cld                                                     ;forward strings
  4669 00001257 F3AB                                            rep     stosd                                           ;reset screen body
  4670 00001259 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4671 0000125E B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4672 00001263 F3AB                                            rep     stosd                                           ;reset OIA line
  4673 00001265 30C0                                            xor     al,al                                           ;zero register
  4674 00001267 A215080000                                      mov     [wbConsoleRow],al                               ;reset console row
  4675 0000126C A214080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  4676 00001271 E882000000                                      call    PlaceCursor                                     ;place cursor at current position
  4677 00001276 07                                              pop     es                                              ;restore non-volatile regs
  4678 00001277 1F                                              pop     ds                                              ;
  4679 00001278 5F                                              pop     edi                                             ;
  4680 00001279 59                                              pop     ecx                                             ;
  4681 0000127A C3                                              ret                                                     ;return
  4682                                  ;-----------------------------------------------------------------------------------------------------------------------
  4683                                  ;
  4684                                  ;       Routine:        ScrollConsoleRow
  4685                                  ;
  4686                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4687                                  ;
  4688                                  ;-----------------------------------------------------------------------------------------------------------------------
  4689 0000127B 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4690 0000127C 56                                              push    esi                                             ;
  4691 0000127D 57                                              push    edi                                             ;
  4692 0000127E 1E                                              push    ds                                              ;
  4693 0000127F 06                                              push    es                                              ;
  4694 00001280 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4695 00001282 1F                                              pop     ds                                              ;... into DS
  4696 00001283 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4697 00001285 07                                              pop     es                                              ;... into ES
  4698 00001286 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4699 0000128B BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4700 00001290 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  4701 00001292 FC                                              cld                                                     ;forward strings
  4702 00001293 F3A5                                            rep     movsd                                           ;move 24 lines up
  4703 00001295 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4704 0000129A B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4705 0000129F F3AB                                            rep     stosd                                           ;clear bottom row
  4706 000012A1 07                                              pop     es                                              ;restore non-volatile regs
  4707 000012A2 1F                                              pop     ds                                              ;
  4708 000012A3 5F                                              pop     edi                                             ;
  4709 000012A4 5E                                              pop     esi                                             ;
  4710 000012A5 59                                              pop     ecx                                             ;
  4711 000012A6 C3                                              ret                                                     ;return
  4712                                  ;-----------------------------------------------------------------------------------------------------------------------
  4713                                  ;
  4714                                  ;       Routine:        SetConsoleChar
  4715                                  ;
  4716                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4717                                  ;
  4718                                  ;       In:             AL      ASCII character
  4719                                  ;                       CL      column
  4720                                  ;                       CH      row
  4721                                  ;                       ES      CGA selector
  4722                                  ;
  4723                                  ;       Out:            EAX     last target address written (ES:)
  4724                                  ;                       CL      column + 1
  4725                                  ;
  4726                                  ;-----------------------------------------------------------------------------------------------------------------------
  4727 000012A7 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  4728 000012A9 0FB6C5                                          movzx   eax,ch                                          ;row
  4729 000012AC B450                                            mov     ah,ECONCOLS                                     ;cols/row
  4730 000012AE F6E4                                            mul     ah                                              ;row * cols/row
  4731 000012B0 00C8                                            add     al,cl                                           ;add column
  4732 000012B2 80D400                                          adc     ah,0                                            ;handle carry
  4733 000012B5 D1E0                                            shl     eax,1                                           ;screen offset
  4734 000012B7 268810                                          mov     [es:eax],dl                                     ;store character
  4735 000012BA FEC1                                            inc     cl                                              ;next column
  4736 000012BC C3                                              ret                                                     ;return
  4737                                  ;-----------------------------------------------------------------------------------------------------------------------
  4738                                  ;
  4739                                  ;       Routine:        SetConsoleString
  4740                                  ;
  4741                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4742                                  ;
  4743                                  ;       In:             ESI     source offset (DS:)
  4744                                  ;                       CL      column
  4745                                  ;                       CH      row
  4746                                  ;                       ES      CGA selector
  4747                                  ;
  4748                                  ;-----------------------------------------------------------------------------------------------------------------------
  4749 000012BD 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  4750 000012BE FC                                              cld                                                     ;forward strings
  4751 000012BF AC                      .10                     lodsb                                                   ;next ASCII character
  4752 000012C0 84C0                                            test    al,al                                           ;end of string?
  4753 000012C2 7407                                            jz      .20                                             ;yes, branch
  4754 000012C4 E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  4755 000012C9 EBF4                                            jmp     .10                                             ;continue
  4756 000012CB 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4757 000012CC C3                                              ret                                                     ;return
  4758                                  ;=======================================================================================================================
  4759                                  ;
  4760                                  ;       Input/Output Routines
  4761                                  ;
  4762                                  ;       These routines read and/or write directly to ports.
  4763                                  ;
  4764                                  ;       GetBaseMemSize
  4765                                  ;       GetExtendedMemSize
  4766                                  ;       GetROMMemSize
  4767                                  ;       PlaceCursor
  4768                                  ;       PutPrimaryEndOfInt
  4769                                  ;       PutSecondaryEndOfInt
  4770                                  ;       ReadRealTimeClock
  4771                                  ;       ResetSystem
  4772                                  ;       SetKeyboardLamps
  4773                                  ;       WaitForKeyInBuffer
  4774                                  ;       WaitForKeyOutBuffer
  4775                                  ;
  4776                                  ;=======================================================================================================================
  4777                                  ;-----------------------------------------------------------------------------------------------------------------------
  4778                                  ;
  4779                                  ;       Routine:        GetBaseMemSize
  4780                                  ;
  4781                                  ;       Description:    Return the amount of base RAM as reported by the CMOS.
  4782                                  ;
  4783                                  ;       Output:         EAX     base RAM size in bytes
  4784                                  ;
  4785                                  ;-----------------------------------------------------------------------------------------------------------------------
  4786 000012CD 31C0                    GetBaseMemSize          xor     eax,eax                                         ;zero register
  4787 000012CF B016                                            mov     al,ERTCBASERAMHI                                ;base RAM high register
  4788 000012D1 E670                                            out     ERTCREGPORT,al                                  ;select base RAM high register
  4789 000012D3 E471                                            in      al,ERTCDATAPORT                                 ;read base RAM high (KB)
  4790 000012D5 88C4                                            mov     ah,al                                           ;save base RAM high
  4791 000012D7 B015                                            mov     al,ERTCBASERAMLO                                ;base RAM low register
  4792 000012D9 E670                                            out     ERTCREGPORT,al                                  ;select base RAM low register
  4793 000012DB E471                                            in      al,ERTCDATAPORT                                 ;read base RAM low (KB)
  4794 000012DD C3                                              ret                                                     ;return to caller
  4795                                  ;-----------------------------------------------------------------------------------------------------------------------
  4796                                  ;
  4797                                  ;       Routine:        GetExtendedMemSize
  4798                                  ;
  4799                                  ;       Description:    Return the amount of extended RAM as reported by the CMOS.
  4800                                  ;
  4801                                  ;       Output:         EAX     extended RAM size in bytes
  4802                                  ;
  4803                                  ;-----------------------------------------------------------------------------------------------------------------------
  4804 000012DE 31C0                    GetExtendedMemSize      xor     eax,eax                                         ;zero register
  4805 000012E0 B018                                            mov     al,ERTCEXTRAMHI                                 ;extended RAM high register
  4806 000012E2 E670                                            out     ERTCREGPORT,al                                  ;select extended RAM high register
  4807 000012E4 E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM high (KB)
  4808 000012E6 88C4                                            mov     ah,al                                           ;save extended RAM high
  4809 000012E8 B017                                            mov     al,ERTCEXTRAMLO                                 ;extended RAM low register
  4810 000012EA E670                                            out     ERTCREGPORT,al                                  ;select extended RAM low register
  4811 000012EC E471                                            in      al,ERTCDATAPORT                                 ;read extended RAM low (KB)
  4812 000012EE C3                                              ret                                                     ;return to caller
  4813                                  ;-----------------------------------------------------------------------------------------------------------------------
  4814                                  ;
  4815                                  ;       Routine:        GetROMMemSize
  4816                                  ;
  4817                                  ;       Description:    Return the amount of RAM as reported by the BIOS during power-up.
  4818                                  ;
  4819                                  ;       Output:         EAX     RAM size in bytes
  4820                                  ;
  4821                                  ;-----------------------------------------------------------------------------------------------------------------------
  4822 000012EF 31C0                    GetROMMemSize           xor     eax,eax                                         ;zero register
  4823 000012F1 66A113040000                                    mov     ax,[wwROMMemSize]                               ;memory size (KB) as returned by INT 12h
  4824 000012F7 C3                                              ret                                                     ;return
  4825                                  ;-----------------------------------------------------------------------------------------------------------------------
  4826                                  ;
  4827                                  ;       Routine:        PlaceCursor
  4828                                  ;
  4829                                  ;       Description:    This routine positions the cursor on the console.
  4830                                  ;
  4831                                  ;       In:             DS      OS data selector
  4832                                  ;
  4833                                  ;-----------------------------------------------------------------------------------------------------------------------
  4834 000012F8 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  4835 000012F9 A015080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  4836 000012FE B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  4837 00001300 F6E4                                            mul     ah                                              ;row offset
  4838 00001302 020514080000                                    add     al,[wbConsoleColumn]                            ;add column
  4839 00001308 80D400                                          adc     ah,0                                            ;add overflow
  4840 0000130B 89C1                                            mov     ecx,eax                                         ;screen offset
  4841 0000130D B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4842 0000130F B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4843 00001311 B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4844 00001313 EE                                              out     dx,al                                           ;select register
  4845 00001314 42                                              inc     edx                                             ;data port
  4846 00001315 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  4847 00001317 EE                                              out     dx,al                                           ;store hi-order loc
  4848 00001318 4A                                              dec     edx                                             ;register select port
  4849 00001319 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4850 0000131B EE                                              out     dx,al                                           ;select register
  4851 0000131C 42                                              inc     edx                                             ;data port
  4852 0000131D 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  4853 0000131F EE                                              out     dx,al                                           ;store lo-order loc
  4854 00001320 59                                              pop     ecx                                             ;restore non-volatile regs
  4855 00001321 C3                                              ret                                                     ;return
  4856                                  ;-----------------------------------------------------------------------------------------------------------------------
  4857                                  ;
  4858                                  ;       Routine:        PutPrimaryEndOfInt
  4859                                  ;
  4860                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4861                                  ;
  4862                                  ;-----------------------------------------------------------------------------------------------------------------------
  4863 00001322 FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4864 00001323 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4865 00001325 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4866 00001327 C3                                              ret                                                     ;return
  4867                                  ;-----------------------------------------------------------------------------------------------------------------------
  4868                                  ;
  4869                                  ;       Routine:        PutSecondaryEndOfInt
  4870                                  ;
  4871                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4872                                  ;
  4873                                  ;-----------------------------------------------------------------------------------------------------------------------
  4874 00001328 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4875 00001329 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4876 0000132B E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4877 0000132D C3                                              ret                                                     ;return
  4878                                  ;-----------------------------------------------------------------------------------------------------------------------
  4879                                  ;
  4880                                  ;       Routine:        ReadRealTimeClock
  4881                                  ;
  4882                                  ;       Description:    This routine gets current date time from the real-time clock.
  4883                                  ;
  4884                                  ;       In:             DS:EBX  DATETIME structure
  4885                                  ;
  4886                                  ;-----------------------------------------------------------------------------------------------------------------------
  4887 0000132E 56                      ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4888 0000132F 57                                              push    edi                                             ;
  4889 00001330 06                                              push    es                                              ;
  4890 00001331 1E                                              push    ds                                              ;store data selector ...
  4891 00001332 07                                              pop     es                                              ;... in es register
  4892 00001333 89DF                                            mov     edi,ebx                                         ;date-time structure
  4893 00001335 B000                                            mov     al,ERTCSECONDREG                                ;second register
  4894 00001337 E670                                            out     ERTCREGPORT,al                                  ;select second register
  4895 00001339 E471                                            in      al,ERTCDATAPORT                                 ;read second register
  4896 0000133B FC                                              cld                                                     ;forward strings
  4897 0000133C AA                                              stosb                                                   ;store second value
  4898 0000133D B002                                            mov     al,ERTCMINUTEREG                                ;minute register
  4899 0000133F E670                                            out     ERTCREGPORT,al                                  ;select minute register
  4900 00001341 E471                                            in      al,ERTCDATAPORT                                 ;read minute register
  4901 00001343 AA                                              stosb                                                   ;store minute value
  4902 00001344 B004                                            mov     al,ERTCHOURREG                                  ;hour register
  4903 00001346 E670                                            out     ERTCREGPORT,al                                  ;select hour register
  4904 00001348 E471                                            in      al,ERTCDATAPORT                                 ;read hour register
  4905 0000134A AA                                              stosb                                                   ;store hour value
  4906 0000134B B006                                            mov     al,ERTCWEEKDAYREG                               ;weekday register
  4907 0000134D E670                                            out     ERTCREGPORT,al                                  ;select weekday register
  4908 0000134F E471                                            in      al,ERTCDATAPORT                                 ;read weekday register
  4909 00001351 AA                                              stosb                                                   ;store weekday value
  4910 00001352 B007                                            mov     al,ERTCDAYREG                                   ;day register
  4911 00001354 E670                                            out     ERTCREGPORT,al                                  ;select day register
  4912 00001356 E471                                            in      al,ERTCDATAPORT                                 ;read day register
  4913 00001358 AA                                              stosb                                                   ;store day value
  4914 00001359 B008                                            mov     al,ERTCMONTHREG                                 ;month register
  4915 0000135B E670                                            out     ERTCREGPORT,al                                  ;select month register
  4916 0000135D E471                                            in      al,ERTCDATAPORT                                 ;read month register
  4917 0000135F AA                                              stosb                                                   ;store month value
  4918 00001360 B009                                            mov     al,ERTCYEARREG                                  ;year register
  4919 00001362 E670                                            out     ERTCREGPORT,al                                  ;select year register
  4920 00001364 E471                                            in      al,ERTCDATAPORT                                 ;read year register
  4921 00001366 AA                                              stosb                                                   ;store year value
  4922 00001367 B032                                            mov     al,ERTCCENTURYREG                               ;century register
  4923 00001369 E670                                            out     ERTCREGPORT,al                                  ;select century register
  4924 0000136B E471                                            in      al,ERTCDATAPORT                                 ;read century register
  4925 0000136D AA                                              stosb                                                   ;store century value
  4926 0000136E B00B                                            mov     al,ERTCSTATUSREG                                ;status register
  4927 00001370 E670                                            out     ERTCREGPORT,al                                  ;select status register
  4928 00001372 E471                                            in      al,ERTCDATAPORT                                 ;read status register
  4929 00001374 A804                                            test    al,ERTCBINARYVALS                               ;test if values are binary
  4930 00001376 751D                                            jnz     .20                                             ;skip ahead if binary values
  4931 00001378 89DE                                            mov     esi,ebx                                         ;date-time structure address
  4932 0000137A 89DF                                            mov     edi,ebx                                         ;date-time structure address
  4933 0000137C B908000000                                      mov     ecx,8                                           ;loop counter
  4934 00001381 AC                      .10                     lodsb                                                   ;BCD value
  4935 00001382 88C4                                            mov     ah,al                                           ;BCD value
  4936 00001384 240F                                            and     al,00001111b                                    ;low-order decimal zone
  4937 00001386 80E4F0                                          and     ah,11110000b                                    ;hi-order decimal zone
  4938 00001389 D0EC                                            shr     ah,1                                            ;hi-order decimal * 8
  4939 0000138B 00E0                                            add     al,ah                                           ;low-order + hi-order * 8
  4940 0000138D C0EC02                                          shr     ah,2                                            ;hi-order decimal * 2
  4941 00001390 00E0                                            add     al,ah                                           ;low-order + hi-order * 10
  4942 00001392 AA                                              stosb                                                   ;replace BCD with binary
  4943 00001393 E2EC                                            loop    .10                                             ;next value
  4944 00001395 07                      .20                     pop     es                                              ;restore non-volatile regs
  4945 00001396 5F                                              pop     edi                                             ;
  4946 00001397 5E                                              pop     esi                                             ;
  4947 00001398 C3                                              ret                                                     ;return
  4948                                  ;-----------------------------------------------------------------------------------------------------------------------
  4949                                  ;
  4950                                  ;       Routine:        ResetSystem
  4951                                  ;
  4952                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4953                                  ;
  4954                                  ;       Out:            N/A     This routine does not return.
  4955                                  ;
  4956                                  ;-----------------------------------------------------------------------------------------------------------------------
  4957 00001399 B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4958 0000139E E2FE                                            loop    $                                               ;clear interrupts
  4959 000013A0 B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4960 000013A2 E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4961 000013A4 FB                      .10                     sti                                                     ;enable maskable interrupts
  4962 000013A5 F4                                              hlt                                                     ;halt until interrupt
  4963 000013A6 EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  4964                                  ;-----------------------------------------------------------------------------------------------------------------------
  4965                                  ;
  4966                                  ;       Routine:        SetKeyboardLamps
  4967                                  ;
  4968                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4969                                  ;
  4970                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4971                                  ;
  4972                                  ;-----------------------------------------------------------------------------------------------------------------------
  4973 000013A8 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4974 000013AD B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4975 000013AF E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  4976 000013B1 E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4977 000013B6 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4978 000013B8 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4979 000013BD 88F8                                            mov     al,bh                                           ;set/reset lamps value
  4980 000013BF E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  4981 000013C1 E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4982 000013C6 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4983 000013C8 C3                                              ret                                                     ;return
  4984                                  ;-----------------------------------------------------------------------------------------------------------------------
  4985                                  ;
  4986                                  ;       Routine:        WaitForKeyInBuffer
  4987                                  ;
  4988                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  4989                                  ;
  4990                                  ;       Out:            ZF      1 = Input buffer ready
  4991                                  ;                               0 = Input buffer not ready after timeout
  4992                                  ;
  4993                                  ;-----------------------------------------------------------------------------------------------------------------------
  4994 000013C9 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  4995 000013CA B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4996 000013CF E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4997 000013D1 A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  4998 000013D3 E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  4999 000013D5 59                                              pop     ecx                                             ;restore non-volatile regs
  5000 000013D6 C3                                              ret                                                     ;return
  5001                                  ;-----------------------------------------------------------------------------------------------------------------------
  5002                                  ;
  5003                                  ;       Routine:        WaitForKeyOutBuffer
  5004                                  ;
  5005                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  5006                                  ;
  5007                                  ;       Out:            ZF      1 = Output buffer has data from controller
  5008                                  ;                               0 = Output buffer empty after timeout
  5009                                  ;
  5010                                  ;-----------------------------------------------------------------------------------------------------------------------
  5011 000013D7 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  5012 000013D8 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  5013 000013DD E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  5014 000013DF A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  5015 000013E1 E1FA                                            loopz   .10                                             ;loop until output buffer bit
  5016 000013E3 59                                              pop     ecx                                             ;restore non-volatile regs
  5017 000013E4 C3                                              ret                                                     ;return
  5018                                  ;-----------------------------------------------------------------------------------------------------------------------
  5019                                  ;
  5020                                  ;       End of the Kernel Function Library
  5021                                  ;
  5022                                  ;-----------------------------------------------------------------------------------------------------------------------
  5023 000013E5 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  5024                                  ;=======================================================================================================================
  5025                                  ;
  5026                                  ;       Console Task
  5027                                  ;
  5028                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  5029                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  5030                                  ;       screen and responds to user commands.
  5031                                  ;
  5032                                  ;=======================================================================================================================
  5033                                  ;-----------------------------------------------------------------------------------------------------------------------
  5034                                  ;
  5035                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  5036                                  ;
  5037                                  ;       This is the stack for the console task. It supports 448 nested calls.
  5038                                  ;
  5039                                  ;-----------------------------------------------------------------------------------------------------------------------
  5040                                  section                 constack                                                ;console task stack
  5041 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  5042                                  ;-----------------------------------------------------------------------------------------------------------------------
  5043                                  ;
  5044                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  5045                                  ;
  5046                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  5047                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  5048                                  ;       16 descriptors. Six are initially defined.
  5049                                  ;
  5050                                  ;-----------------------------------------------------------------------------------------------------------------------
  5051                                  section                 conldt                                                  ;console local descriptors
  5052 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  5053 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  5054 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  5055 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  5056 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  5057 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  5058 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5059                                  ;-----------------------------------------------------------------------------------------------------------------------
  5060                                  ;
  5061                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  5062                                  ;
  5063                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  5064                                  ;       segment. CS to console code.
  5065                                  ;
  5066                                  ;-----------------------------------------------------------------------------------------------------------------------
  5067                                  section                 contss                                                  ;console task state segment
  5068 00000000 00000000                                        dd      0                                               ;00 back-link tss
  5069 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  5070 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  5071 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  5072 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  5073 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  5074 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  5075 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  5076 00000020 00000000                                        dd      0                                               ;20 eip
  5077 00000024 00020000                                        dd      0200h                                           ;24 eflags
  5078 00000028 00000000                                        dd      0                                               ;28 eax
  5079 0000002C 00000000                                        dd      0                                               ;2c ecx
  5080 00000030 00000000                                        dd      0                                               ;30 edx
  5081 00000034 00000000                                        dd      0                                               ;34 ebx
  5082 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  5083 0000003C 00000000                                        dd      0                                               ;3c ebp
  5084 00000040 00000000                                        dd      0                                               ;40 esi
  5085 00000044 00000000                                        dd      0                                               ;44 edi
  5086 00000048 1C000000                                        dd      001Ch                                           ;48 es
  5087 0000004C 24000000                                        dd      0024h                                           ;4c cs
  5088 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  5089 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  5090 00000058 00000000                                        dd      0                                               ;58 fs
  5091 0000005C 00000000                                        dd      0                                               ;5c gs
  5092 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  5093 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  5094                                  ;-----------------------------------------------------------------------------------------------------------------------
  5095                                  ;
  5096                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  5097                                  ;
  5098                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  5099                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  5100                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  5101                                  ;       event.
  5102                                  ;
  5103                                  ;-----------------------------------------------------------------------------------------------------------------------
  5104                                  section                 conmque                                                 ;console message queue
  5105 00000000 08000000                                        dd      8                                               ;head pointer
  5106 00000004 08000000                                        dd      8                                               ;tail pointer
  5107 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  5108                                  ;-----------------------------------------------------------------------------------------------------------------------
  5109                                  ;
  5110                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  5111                                  ;
  5112                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  5113                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  5114                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  5115                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  5116                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  5117                                  ;       board input, echoing to the console screen and responding to user commands.
  5118                                  ;
  5119                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  5120                                  ;
  5121                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  5122                                  ;                               |  Real Mode Interrupt Vectors                  |
  5123                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  5124                                  ;                               |  Reserved BIOS Memory Area                    |
  5125                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  5126                                  ;                               |  Shared Kernel Memory Area                    |
  5127                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  5128                                  ;                               |  Global Descriptor Table (GDT)                |
  5129                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  5130                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  5131                                  ;                       002000  +-----------------------------------------------+
  5132                                  ;                               |  Interrupt Handlers                           |
  5133                                  ;                               |  Kernel Function Library                      |
  5134                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  5135                                  ;                               |  Console Task Stack Area                      |
  5136                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  5137                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  5138                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  5139                                  ;                               |  Console Task Task State Segment (TSS)        |
  5140                                  ;                       004800  +-----------------------------------------------+
  5141                                  ;                               |  Console Task Message Queue                   |
  5142                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  5143                                  ;                               |  Console Task Code                            |
  5144                                  ;                               |  Console Task Constants                       |
  5145                                  ;                       006000  +===============================================+
  5146                                  ;
  5147                                  ;-----------------------------------------------------------------------------------------------------------------------
  5148                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  5149 00000000 E8C9000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  5150                                                          clearConsoleScreen                                      ;clear the console screen
  5150 00000005 B001                <1>  mov al,eClearConsoleScreen
  5150 00000007 CD30                <1>  int _svc
  5151                                                          putConsoleString czTitle                                ;display startup message
  5151 00000009 BA[48060000]        <1>  mov edx,%1
  5151 0000000E B00C                <1>  mov al,ePutConsoleString
  5151 00000010 CD30                <1>  int _svc
  5152                                                          putConsoleString czBaseMem                              ;base memory label
  5152 00000012 BA[F3050000]        <1>  mov edx,%1
  5152 00000017 B00C                <1>  mov al,ePutConsoleString
  5152 00000019 CD30                <1>  int _svc
  5153                                                          putConsoleString wzBaseMemSize                          ;base memory size
  5153 0000001B BA10090000          <1>  mov edx,%1
  5153 00000020 B00C                <1>  mov al,ePutConsoleString
  5153 00000022 CD30                <1>  int _svc
  5154                                                          putConsoleString czKB                                   ;Kilobytes
  5154 00000024 BA[23060000]        <1>  mov edx,%1
  5154 00000029 B00C                <1>  mov al,ePutConsoleString
  5154 0000002B CD30                <1>  int _svc
  5155 0000002D E82E010000                                      call    ConPutNewLine                                   ;new line
  5156                                                          putConsoleString czROMMem                               ;ROM memory label
  5156 00000032 BA[30060000]        <1>  mov edx,%1
  5156 00000037 B00C                <1>  mov al,ePutConsoleString
  5156 00000039 CD30                <1>  int _svc
  5157                                                          putConsoleString wzROMMemSize                           ;ROM memory amount
  5157 0000003B BA1B090000          <1>  mov edx,%1
  5157 00000040 B00C                <1>  mov al,ePutConsoleString
  5157 00000042 CD30                <1>  int _svc
  5158                                                          putConsoleString czKB                                   ;Kilobytes
  5158 00000044 BA[23060000]        <1>  mov edx,%1
  5158 00000049 B00C                <1>  mov al,ePutConsoleString
  5158 0000004B CD30                <1>  int _svc
  5159 0000004D E80E010000                                      call    ConPutNewLine                                   ;new line
  5160                                                          putConsoleString czExtendedMem                          ;extended memory label
  5160 00000052 BA[0B060000]        <1>  mov edx,%1
  5160 00000057 B00C                <1>  mov al,ePutConsoleString
  5160 00000059 CD30                <1>  int _svc
  5161                                                          putConsoleString wzExtendedMemSize                      ;extended memory size
  5161 0000005B BA26090000          <1>  mov edx,%1
  5161 00000060 B00C                <1>  mov al,ePutConsoleString
  5161 00000062 CD30                <1>  int _svc
  5162                                                          putConsoleString czKB                                   ;Kilobytes
  5162 00000064 BA[23060000]        <1>  mov edx,%1
  5162 00000069 B00C                <1>  mov al,ePutConsoleString
  5162 0000006B CD30                <1>  int _svc
  5163 0000006D E8EE000000                                      call    ConPutNewLine                                   ;new line
  5164                                  .10                     putConsoleString czPrompt                               ;display input prompt
  5164                              <1> .10 :
  5164 00000072 BA[2E060000]        <1>  mov edx,%1
  5164 00000077 B00C                <1>  mov al,ePutConsoleString
  5164 00000079 CD30                <1>  int _svc
  5165                                                          placeCursor                                             ;set CRT cursor location
  5165 0000007B B00B                <1>  mov al,ePlaceCursor
  5165 0000007D CD30                <1>  int _svc
  5166                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  5166 0000007F BA20080000          <1>  mov edx,%1
  5166 00000084 B94F000000          <1>  mov ecx,%2
  5166 00000089 B701                <1>  mov bh,%3
  5166 0000008B B30D                <1>  mov bl,%4
  5166 0000008D B006                <1>  mov al,eGetConsoleString
  5166 0000008F CD30                <1>  int _svc
  5167 00000091 E8CA000000                                      call    ConPutNewLine                                   ;newline
  5168 00000096 BA20080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  5169 0000009B BB70080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  5170 000000A0 E8C5000000                                      call    ConTakeToken                                    ;handle console input
  5171 000000A5 BA70080000                                      mov     edx,wzConsoleToken                              ;token buffer
  5172 000000AA E8F0000000                                      call    ConDetermineCommand                             ;determine command number
  5173 000000AF 83F818                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  5174 000000B2 720B                                            jb      .20                                             ;yes, branch
  5175                                                          putConsoleString czUnknownCommand                       ;display error message
  5175 000000B4 BA[66060000]        <1>  mov edx,%1
  5175 000000B9 B00C                <1>  mov al,ePutConsoleString
  5175 000000BB CD30                <1>  int _svc
  5176 000000BD EBB3                                            jmp     .10                                             ;next command
  5177 000000BF C1E002                  .20                     shl     eax,2                                           ;index into jump table
  5178 000000C2 BA[DD040000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  5179 000000C7 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  5180 000000CA FFD0                                            call    eax                                             ;call command handler
  5181 000000CC EBA4                                            jmp     .10                                             ;next command
  5182                                  ;-----------------------------------------------------------------------------------------------------------------------
  5183                                  ;
  5184                                  ;       Routine:        ConInitializeData
  5185                                  ;
  5186                                  ;       Description:    This routine initializes console task variables.
  5187                                  ;
  5188                                  ;-----------------------------------------------------------------------------------------------------------------------
  5189 000000CE 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  5190 000000CF 57                                              push    edi                                             ;
  5191 000000D0 06                                              push    es                                              ;
  5192                                  ;
  5193                                  ;       Initialize console work areas.
  5194                                  ;
  5195 000000D1 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  5196 000000D3 07                                              pop     es                                              ;... into extra segment register
  5197 000000D4 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  5198 000000D9 30C0                                            xor     al,al                                           ;initialization value
  5199 000000DB B951010000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  5200 000000E0 FC                                              cld                                                     ;forward strings
  5201 000000E1 F3AA                                            rep     stosb                                           ;initialize data
  5202                                  ;
  5203                                  ;       Initialize heap size
  5204                                  ;
  5205 000000E3 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5206 000000E8 A304080000                                      mov     [wdConsoleHeapSize],eax                         ;set heap size
  5207                                  ;
  5208                                  ;       Initialize MEMROOT structure
  5209                                  ;
  5210 000000ED BF31090000                                      mov     edi,wsConsoleMemRoot                            ;memory root structure address
  5211 000000F2 B800000100                                      mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  5212 000000F7 31C9                                            xor     ecx,ecx                                         ;zero register
  5213 000000F9 B104                                            mov     cl,4                                            ;count
  5214 000000FB F3AB                                            rep     stosd                                           ;store first/last contig and free addrs
  5215 000000FD 31C0                                            xor     eax,eax                                         ;zero register
  5216 000000FF AB                                              stosd                                                   ;zero first task block
  5217 00000100 AB                                              stosd                                                   ;zero last task block
  5218                                  ;
  5219                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  5220                                  ;
  5221 00000101 BF00000100                                      mov     edi,EKRNHEAPBASE                                ;memory block structure address
  5222 00000106 B846524545                                      mov     eax,EMEMFREECODE                                ;free memory signature
  5223 0000010B AB                                              stosd                                                   ;store signature
  5224 0000010C B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  5225 00000111 AB                                              stosd                                                   ;store block size
  5226 00000112 31C9                                            xor     ecx,ecx                                         ;zero register
  5227 00000114 B106                                            mov     cl,6                                            ;count
  5228 00000116 31C0                                            xor     eax,eax                                         ;zero register
  5229 00000118 F3AB                                            rep     stosd                                           ;zero owner, reserved, pointers
  5230                                  ;
  5231                                  ;       Read memory sizes from ROM
  5232                                  ;
  5233                                                          getROMMemSize                                           ;get ROM memory size
  5233 0000011A B008                <1>  mov al,eGetROMMemSize
  5233 0000011C CD30                <1>  int _svc
  5234 0000011E A310080000                                      mov     [wdROMMemSize],eax                              ;bytes reported by ROM
  5235 00000123 89C1                                            mov     ecx,eax                                         ;integer param
  5236 00000125 BA1B090000                                      mov     edx,wzROMMemSize                                ;output buffer param
  5237 0000012A B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5238                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5238 0000012C B01A                <1>  mov al,eUnsignedToDecimalString
  5238 0000012E CD30                <1>  int _svc
  5239                                                          getBaseMemSize                                          ;get base RAM count from CMOS
  5239 00000130 B005                <1>  mov al,eGetBaseMemSize
  5239 00000132 CD30                <1>  int _svc
  5240 00000134 A308080000                                      mov     [wdBaseMemSize],eax                             ;save base RAM count
  5241 00000139 89C1                                            mov     ecx,eax                                         ;integer param
  5242 0000013B BA10090000                                      mov     edx,wzBaseMemSize                               ;output buffer param
  5243 00000140 B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5244                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5244 00000142 B01A                <1>  mov al,eUnsignedToDecimalString
  5244 00000144 CD30                <1>  int _svc
  5245                                                          getExtendedMemSize                                      ;get extended RAM count from CMOS
  5245 00000146 B007                <1>  mov al,eGetExtendedMemSize
  5245 00000148 CD30                <1>  int _svc
  5246 0000014A A30C080000                                      mov     [wdExtendedMemSize],eax                         ;save base RAM count
  5247 0000014F 89C1                                            mov     ecx,eax                                         ;integer param
  5248 00000151 BA26090000                                      mov     edx,wzExtendedMemSize                           ;output buffer param
  5249 00000156 B703                                            mov     bh,3                                            ;no leading zeros; thousands grouping
  5250                                                          unsignedToDecimalString                                 ;build ASCIIZ decimal string
  5250 00000158 B01A                <1>  mov al,eUnsignedToDecimalString
  5250 0000015A CD30                <1>  int _svc
  5251                                  ;
  5252                                  ;       Restore and return.
  5253                                  ;
  5254 0000015C 07                                              pop     es                                              ;restore non-volatile regs
  5255 0000015D 5F                                              pop     edi                                             ;
  5256 0000015E 59                                              pop     ecx                                             ;
  5257 0000015F C3                                              ret                                                     ;return
  5258                                  ;-----------------------------------------------------------------------------------------------------------------------
  5259                                  ;
  5260                                  ;       Routine:        ConPutNewLine
  5261                                  ;
  5262                                  ;       Description:    Write a new-line to the console.
  5263                                  ;
  5264                                  ;-----------------------------------------------------------------------------------------------------------------------
  5265                                  ConPutNewLine           putConsoleString czNewLine                              ;write value to console
  5265                              <1> ConPutNewLine :
  5265 00000160 BA[26060000]        <1>  mov edx,%1
  5265 00000165 B00C                <1>  mov al,ePutConsoleString
  5265 00000167 CD30                <1>  int _svc
  5266 00000169 C3                                              ret                                                     ;return
  5267                                  ;-----------------------------------------------------------------------------------------------------------------------
  5268                                  ;
  5269                                  ;       Routine:        ConTakeToken
  5270                                  ;
  5271                                  ;       Description:    This routine extracts the next token from the given source buffer.
  5272                                  ;
  5273                                  ;       In:             DS:EDX  source buffer address
  5274                                  ;                       DS:EBX  target buffer address
  5275                                  ;
  5276                                  ;       Out:            DS:EDX  source buffer address
  5277                                  ;                       DS:EBX  target buffer address
  5278                                  ;
  5279                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  5280                                  ;
  5281                                  ;-----------------------------------------------------------------------------------------------------------------------
  5282 0000016A 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  5283 0000016B 57                                              push    edi                                             ;
  5284 0000016C 06                                              push    es                                              ;
  5285 0000016D 1E                                              push    ds                                              ;load data segment selector ...
  5286 0000016E 07                                              pop     es                                              ;... into extra segment reg
  5287 0000016F 89D6                                            mov     esi,edx                                         ;source buffer address
  5288 00000171 89DF                                            mov     edi,ebx                                         ;target buffer address
  5289 00000173 C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  5290 00000176 FC                                              cld                                                     ;forward strings
  5291 00000177 AC                      .10                     lodsb                                                   ;load byte
  5292 00000178 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5293 0000017A 74FB                                            je      .10                                             ;yes, continue
  5294 0000017C 84C0                                            test    al,al                                           ;end of line?
  5295 0000017E 7410                                            jz      .40                                             ;yes, branch
  5296 00000180 AA                      .20                     stosb                                                   ;store byte
  5297 00000181 AC                                              lodsb                                                   ;load byte
  5298 00000182 84C0                                            test    al,al                                           ;end of line?
  5299 00000184 740A                                            jz      .40                                             ;no, continue
  5300 00000186 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5301 00000188 75F6                                            jne     .20                                             ;no, continue
  5302 0000018A AC                      .30                     lodsb                                                   ;load byte
  5303 0000018B 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  5304 0000018D 74FB                                            je      .30                                             ;yes, continue
  5305 0000018F 4E                                              dec     esi                                             ;pre-position
  5306 00000190 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  5307 00000193 89D7                                            mov     edi,edx                                         ;source buffer address
  5308 00000195 AC                      .50                     lodsb                                                   ;remaining byte
  5309 00000196 AA                                              stosb                                                   ;move to front of buffer
  5310 00000197 84C0                                            test    al,al                                           ;end of line?
  5311 00000199 75FA                                            jnz     .50                                             ;no, continue
  5312 0000019B 07                                              pop     es                                              ;restore non-volatile regs
  5313 0000019C 5F                                              pop     edi                                             ;
  5314 0000019D 5E                                              pop     esi                                             ;
  5315 0000019E C3                                              ret                                                     ;return
  5316                                  ;-----------------------------------------------------------------------------------------------------------------------
  5317                                  ;
  5318                                  ;       Routine:        ConDetermineCommand
  5319                                  ;
  5320                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  5321                                  ;
  5322                                  ;       input:          DS:EDX  command address
  5323                                  ;
  5324                                  ;       output:         EAX     >=0     = command nbr
  5325                                  ;                               0       = unknown command
  5326                                  ;
  5327                                  ;-----------------------------------------------------------------------------------------------------------------------
  5328 0000019F 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  5329 000001A0 51                                              push    ecx                                             ;
  5330 000001A1 56                                              push    esi                                             ;
  5331 000001A2 57                                              push    edi                                             ;
  5332                                                          upperCaseString                                         ;upper-case string at EDX
  5332 000001A3 B01C                <1>  mov al,eUpperCaseString
  5332 000001A5 CD30                <1>  int _svc
  5333 000001A7 BE[3D050000]                                    mov     esi,tConCmdTbl                                  ;commands table
  5334 000001AC 31FF                                            xor     edi,edi                                         ;intialize command number
  5335 000001AE FC                                              cld                                                     ;forward strings
  5336 000001AF AC                      .10                     lodsb                                                   ;command length
  5337 000001B0 0FB6C8                                          movzx   ecx,al                                          ;command length
  5338 000001B3 E30D                                            jecxz   .20                                             ;branch if end of table
  5339 000001B5 89F3                                            mov     ebx,esi                                         ;table entry address
  5340 000001B7 01CE                                            add     esi,ecx                                         ;next table entry address
  5341                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  5341 000001B9 B002                <1>  mov al,eCompareMemory
  5341 000001BB CD30                <1>  int _svc
  5342 000001BD E303                                            jecxz   .20                                             ;branch if equal
  5343 000001BF 47                                              inc     edi                                             ;increment command nbr
  5344 000001C0 EBED                                            jmp     .10                                             ;repeat
  5345 000001C2 89F8                    .20                     mov     eax,edi                                         ;command number
  5346 000001C4 5F                                              pop     edi                                             ;restore non-volatile regs
  5347 000001C5 5E                                              pop     esi                                             ;
  5348 000001C6 59                                              pop     ecx                                             ;
  5349 000001C7 5B                                              pop     ebx                                             ;
  5350 000001C8 C3                                              ret                                                     ;return
  5351                                  ;-----------------------------------------------------------------------------------------------------------------------
  5352                                  ;
  5353                                  ;       Routine:        ConClear
  5354                                  ;
  5355                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  5356                                  ;
  5357                                  ;-----------------------------------------------------------------------------------------------------------------------
  5358                                  ConClear                clearConsoleScreen                                      ;clear console screen
  5358                              <1> ConClear :
  5358 000001C9 B001                <1>  mov al,eClearConsoleScreen
  5358 000001CB CD30                <1>  int _svc
  5359 000001CD C3                                              ret                                                     ;return
  5360                                  ;-----------------------------------------------------------------------------------------------------------------------
  5361                                  ;
  5362                                  ;       Routine:        ConDate
  5363                                  ;
  5364                                  ;       Description:    This routine handles the DATE command.
  5365                                  ;
  5366                                  ;-----------------------------------------------------------------------------------------------------------------------
  5367                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5367                              <1> ConDate :
  5367 000001CE BB49090000          <1>  mov ebx,%1
  5367 000001D3 B018                <1>  mov al,eReadRealTimeClock
  5367 000001D5 CD30                <1>  int _svc
  5368                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  5368 000001D7 BB49090000          <1>  mov ebx,%1
  5368 000001DC BAC0080000          <1>  mov edx,%2
  5368 000001E1 B00D                <1>  mov al,ePutDateString
  5368 000001E3 CD30                <1>  int _svc
  5369                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5369 000001E5 BAC0080000          <1>  mov edx,%1
  5369 000001EA B00C                <1>  mov al,ePutConsoleString
  5369 000001EC CD30                <1>  int _svc
  5370 000001EE E86DFFFFFF                                      call    ConPutNewLine                                   ;write newline to console
  5371 000001F3 C3                                              ret                                                     ;return
  5372                                  ;-----------------------------------------------------------------------------------------------------------------------
  5373                                  ;
  5374                                  ;       Routine:        ConDay
  5375                                  ;
  5376                                  ;       Description:    This routine handles the DAY command.
  5377                                  ;
  5378                                  ;-----------------------------------------------------------------------------------------------------------------------
  5379                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5379                              <1> ConDay :
  5379 000001F4 BB49090000          <1>  mov ebx,%1
  5379 000001F9 B018                <1>  mov al,eReadRealTimeClock
  5379 000001FB CD30                <1>  int _svc
  5380                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  5380 000001FD BB49090000          <1>  mov ebx,%1
  5380 00000202 BAC0080000          <1>  mov edx,%2
  5380 00000207 B00E                <1>  mov al,ePutDayString
  5380 00000209 CD30                <1>  int _svc
  5381                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5381 0000020B BAC0080000          <1>  mov edx,%1
  5381 00000210 B00C                <1>  mov al,ePutConsoleString
  5381 00000212 CD30                <1>  int _svc
  5382 00000214 E847FFFFFF                                      call    ConPutNewLine                                   ;write newline to console
  5383 00000219 C3                                              ret                                                     ;return
  5384                                  ;-----------------------------------------------------------------------------------------------------------------------
  5385                                  ;
  5386                                  ;       Routine:        ConExit
  5387                                  ;
  5388                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  5389                                  ;
  5390                                  ;-----------------------------------------------------------------------------------------------------------------------
  5391                                  ConExit                 resetSystem                                             ;issue system reset
  5391                              <1> ConExit :
  5391 0000021A B019                <1>  mov al,eResetSystem
  5391 0000021C CD30                <1>  int _svc
  5392 0000021E C3                                              ret                                                     ;return
  5393                                  ;-----------------------------------------------------------------------------------------------------------------------
  5394                                  ;
  5395                                  ;       Routine:        ConFree
  5396                                  ;
  5397                                  ;       Description:    This routine handles the FREE command.
  5398                                  ;
  5399                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5400                                  ;
  5401                                  ;-----------------------------------------------------------------------------------------------------------------------
  5402 0000021F 53                      ConFree                 push    ebx                                             ;save non-volatile regs
  5403 00000220 51                                              push    ecx                                             ;
  5404 00000221 56                                              push    esi                                             ;
  5405 00000222 57                                              push    edi                                             ;
  5406                                  ;
  5407                                  ;       Get address parameter
  5408                                  ;
  5409 00000223 BA20080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  5410 00000228 BB70080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5411 0000022D E838FFFFFF                                      call    ConTakeToken                                    ;take first param as token
  5412                                  ;
  5413                                  ;       Convert input parameter from hexadecimal string to binary
  5414                                  ;
  5415 00000232 803D7008000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5416 00000239 7421                                            je      .10                                             ;no, branch
  5417 0000023B BA70080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5418                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5418 00000240 B009                <1>  mov al,eHexadecimalToUnsigned
  5418 00000242 CD30                <1>  int _svc
  5419 00000244 85C0                                            test    eax,eax                                         ;valid parameter?
  5420 00000246 7414                                            jz      .10                                             ;no, branch
  5421                                  ;
  5422                                  ;       Free memory block
  5423                                  ;
  5424                                                          freeMemory eax                                          ;free memory
  5424 00000248 89C2                <1>  mov edx,%1
  5424 0000024A B004                <1>  mov al,eFreeMemory
  5424 0000024C CD30                <1>  int _svc
  5425 0000024E 83F8FF                                          cmp     eax,-1                                          ;memory freed?
  5426 00000251 7409                                            je      .10                                             ;no, branch
  5427                                  ;
  5428                                  ;       Indicate memory freed
  5429                                  ;
  5430                                                          putConsoleString czOK                                   ;indicate success
  5430 00000253 BA[29060000]        <1>  mov edx,%1
  5430 00000258 B00C                <1>  mov al,ePutConsoleString
  5430 0000025A CD30                <1>  int _svc
  5431                                  ;
  5432                                  ;       Restore and return
  5433                                  ;
  5434 0000025C 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5435 0000025D 5E                                              pop     esi                                             ;
  5436 0000025E 59                                              pop     ecx                                             ;
  5437 0000025F 5B                                              pop     ebx                                             ;
  5438 00000260 C3                                              ret                                                     ;return
  5439                                  ;-----------------------------------------------------------------------------------------------------------------------
  5440                                  ;
  5441                                  ;       Routine:        ConHour
  5442                                  ;
  5443                                  ;       Description:    This routine Handles the HOUR command.
  5444                                  ;
  5445                                  ;-----------------------------------------------------------------------------------------------------------------------
  5446                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5446                              <1> ConHour :
  5446 00000261 BB49090000          <1>  mov ebx,%1
  5446 00000266 B018                <1>  mov al,eReadRealTimeClock
  5446 00000268 CD30                <1>  int _svc
  5447                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  5447 0000026A BB49090000          <1>  mov ebx,%1
  5447 0000026F BAC0080000          <1>  mov edx,%2
  5447 00000274 B00F                <1>  mov al,ePutHourString
  5447 00000276 CD30                <1>  int _svc
  5448                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5448 00000278 BAC0080000          <1>  mov edx,%1
  5448 0000027D B00C                <1>  mov al,ePutConsoleString
  5448 0000027F CD30                <1>  int _svc
  5449 00000281 E8DAFEFFFF                                      call    ConPutNewLine                                   ;write newline to console
  5450 00000286 C3                                              ret                                                     ;return
  5451                                  ;-----------------------------------------------------------------------------------------------------------------------
  5452                                  ;
  5453                                  ;       Routine:        ConInt6
  5454                                  ;
  5455                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  5456                                  ;
  5457                                  ;-----------------------------------------------------------------------------------------------------------------------
  5458 00000287 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  5459 00000289 C3                                              ret                                                     ;return (not executed)
  5460                                  ;-----------------------------------------------------------------------------------------------------------------------
  5461                                  ;
  5462                                  ;       Routine:        ConMalloc
  5463                                  ;
  5464                                  ;       Description:    This routine handles the MALLOC command.
  5465                                  ;
  5466                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5467                                  ;
  5468                                  ;-----------------------------------------------------------------------------------------------------------------------
  5469 0000028A 53                      ConMalloc               push    ebx                                             ;save non-volatile regs
  5470 0000028B 51                                              push    ecx                                             ;
  5471 0000028C 56                                              push    esi                                             ;
  5472 0000028D 57                                              push    edi                                             ;
  5473                                  ;
  5474                                  ;       Get size parameter
  5475                                  ;
  5476 0000028E BA20080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5477 00000293 BB70080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5478 00000298 E8CDFEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5479                                  ;
  5480                                  ;       Convert input parameter from decimal string to binary
  5481                                  ;
  5482 0000029D 803D7008000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5483 000002A4 7430                                            je      .10                                             ;no, branch
  5484 000002A6 BA70080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5485                                                          decimalToUnsigned                                       ;convert string token to unsigned
  5485 000002AB B003                <1>  mov al,eDecimalToUnsigned
  5485 000002AD CD30                <1>  int _svc
  5486 000002AF 85C0                                            test    eax,eax                                         ;valid parameter?
  5487 000002B1 7423                                            jz      .10                                             ;no, branch
  5488                                  ;
  5489                                  ;       Allocate memory block
  5490                                  ;
  5491                                                          allocateMemory eax                                      ;allocate memory
  5491 000002B3 89C1                <1>  mov ecx,%1
  5491 000002B5 B000                <1>  mov al,eAllocateMemory
  5491 000002B7 CD30                <1>  int _svc
  5492 000002B9 85C0                                            test    eax,eax                                         ;memory allocated?
  5493 000002BB 7419                                            jz      .10                                             ;no, branch
  5494                                  ;
  5495                                  ;       Report allocated memory block address
  5496                                  ;
  5497 000002BD BAC0080000                                      mov     edx,wzConsoleOutBuffer                          ;output buffer address
  5498 000002C2 89C1                                            mov     ecx,eax                                         ;memory address
  5499                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  5499 000002C4 B01B                <1>  mov al,eUnsignedToHexadecimal
  5499 000002C6 CD30                <1>  int _svc
  5500                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  5500 000002C8 BAC0080000          <1>  mov edx,%1
  5500 000002CD B00C                <1>  mov al,ePutConsoleString
  5500 000002CF CD30                <1>  int _svc
  5501 000002D1 E88AFEFFFF                                      call    ConPutNewLine                                   ;display new line
  5502 000002D6 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  5503 000002D7 5E                                              pop     esi                                             ;
  5504 000002D8 59                                              pop     ecx                                             ;
  5505 000002D9 5B                                              pop     ebx                                             ;
  5506 000002DA C3                                              ret                                                     ;return
  5507                                  ;-----------------------------------------------------------------------------------------------------------------------
  5508                                  ;
  5509                                  ;       Routine:        ConMem
  5510                                  ;
  5511                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  5512                                  ;
  5513                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  5514                                  ;
  5515                                  ;-----------------------------------------------------------------------------------------------------------------------
  5516 000002DB 53                      ConMem                  push    ebx                                             ;save non-volatile regs
  5517 000002DC 56                                              push    esi                                             ;
  5518 000002DD 57                                              push    edi                                             ;
  5519                                  ;
  5520                                  ;       Update the source address if a parameter is given.
  5521                                  ;
  5522 000002DE BA20080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  5523 000002E3 BB70080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  5524 000002E8 E87DFEFFFF                                      call    ConTakeToken                                    ;take first param as token
  5525 000002ED 803D7008000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  5526 000002F4 740E                                            je      .10                                             ;no, branch
  5527 000002F6 BA70080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  5528                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  5528 000002FB B009                <1>  mov al,eHexadecimalToUnsigned
  5528 000002FD CD30                <1>  int _svc
  5529 000002FF A300080000                                      mov     [wdConsoleMemBase],eax                          ;save console memory address
  5530                                  ;
  5531                                  ;       Setup source address and row count.
  5532                                  ;
  5533 00000304 8B3500080000            .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  5534 0000030A 31C9                                            xor     ecx,ecx                                         ;zero register
  5535 0000030C B110                                            mov     cl,16                                           ;row count
  5536                                  ;
  5537                                  ;       Start the row with the source address in hexadecimal.
  5538                                  ;
  5539 0000030E 51                      .20                     push    ecx                                             ;save remaining rows
  5540 0000030F BFC0080000                                      mov     edi,wzConsoleOutBuffer                          ;output buffer address
  5541 00000314 89FA                                            mov     edx,edi                                         ;output buffer address
  5542 00000316 89F1                                            mov     ecx,esi                                         ;console memory address
  5543                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  5543 00000318 B01B                <1>  mov al,eUnsignedToHexadecimal
  5543 0000031A CD30                <1>  int _svc
  5544 0000031C 83C708                                          add     edi,8                                           ;end of memory addr hexnum
  5545 0000031F B020                                            mov     al,' '                                          ;ascii space
  5546 00000321 AA                                              stosb                                                   ;store delimiter
  5547                                  ;
  5548                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  5549                                  ;
  5550 00000322 31C9                                            xor     ecx,ecx                                         ;zero register
  5551 00000324 B110                                            mov     cl,16                                           ;loop count
  5552 00000326 51                      .30                     push    ecx                                             ;save loop count
  5553 00000327 AC                                              lodsb                                                   ;memory byte
  5554 00000328 88C4                                            mov     ah,al                                           ;memory byte
  5555 0000032A C0E804                                          shr     al,4                                            ;high-order in bits 3-0
  5556 0000032D 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  5557 0000032F 3C3A                                            cmp     al,3ah                                          ;numeric range?
  5558 00000331 7202                                            jb      .40                                             ;yes, skip ahead
  5559 00000333 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  5560 00000335 AA                      .40                     stosb                                                   ;store ascii hexadecimal of high-order
  5561 00000336 88E0                                            mov     al,ah                                           ;low-order in bits 3-0
  5562 00000338 240F                                            and     al,0fh                                          ;mask out high-order bits
  5563 0000033A 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  5564 0000033C 3C3A                                            cmp     al,3ah                                          ;numeric range?
  5565 0000033E 7202                                            jb      .50                                             ;yes, skip ahead
  5566 00000340 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  5567 00000342 AA                      .50                     stosb                                                   ;store ascii hexadecimal of low-order
  5568 00000343 B020                                            mov     al,' '                                          ;ascii space
  5569 00000345 AA                                              stosb                                                   ;store ascii space delimiter
  5570 00000346 59                                              pop     ecx                                             ;loop count
  5571 00000347 E2DD                                            loop    .30                                             ;next
  5572                                  ;
  5573                                  ;       Output printable ASCII character section for the row.
  5574                                  ;
  5575 00000349 83EE10                                          sub     esi,16                                          ;reset source pointer
  5576 0000034C B110                                            mov     cl,16                                           ;loop count
  5577 0000034E AC                      .60                     lodsb                                                   ;source byte
  5578 0000034F 3C20                                            cmp     al,32                                           ;printable? (low-range test)
  5579 00000351 7204                                            jb      .70                                             ;no, skip ahead
  5580 00000353 3C80                                            cmp     al,128                                          ;printable? (high-range test)
  5581 00000355 7202                                            jb      .80                                             ;yes, skip ahead
  5582 00000357 B020                    .70                     mov     al,' '                                          ;display space instead of printable
  5583 00000359 AA                      .80                     stosb                                                   ;store printable ascii byte
  5584 0000035A E2F2                                            loop    .60                                             ;next source byte
  5585 0000035C 30C0                                            xor     al,al                                           ;nul-terminator
  5586 0000035E AA                                              stosb                                                   ;terminate output line
  5587                                  ;
  5588                                  ;       Display constructed output buffer and newline.
  5589                                  ;
  5590                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  5590 0000035F BAC0080000          <1>  mov edx,%1
  5590 00000364 B00C                <1>  mov al,ePutConsoleString
  5590 00000366 CD30                <1>  int _svc
  5591 00000368 E8F3FDFFFF                                      call    ConPutNewLine                                   ;display new line
  5592                                  ;
  5593                                  ;       Repeat until all lines displayed and preserve source address.
  5594                                  ;
  5595 0000036D 59                                              pop     ecx                                             ;remaining rows
  5596 0000036E E29E                                            loop    .20                                             ;next row
  5597 00000370 893500080000                                    mov     [wdConsoleMemBase],esi                          ;update console memory address
  5598 00000376 5F                                              pop     edi                                             ;restore regs
  5599 00000377 5E                                              pop     esi                                             ;
  5600 00000378 5B                                              pop     ebx                                             ;
  5601 00000379 C3                                              ret                                                     ;return
  5602                                  ;-----------------------------------------------------------------------------------------------------------------------
  5603                                  ;
  5604                                  ;       Routine:        ConMinute
  5605                                  ;
  5606                                  ;       Description:    This routine Handles the MINUTE command.
  5607                                  ;
  5608                                  ;-----------------------------------------------------------------------------------------------------------------------
  5609                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5609                              <1> ConMinute :
  5609 0000037A BB49090000          <1>  mov ebx,%1
  5609 0000037F B018                <1>  mov al,eReadRealTimeClock
  5609 00000381 CD30                <1>  int _svc
  5610                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  5610 00000383 BB49090000          <1>  mov ebx,%1
  5610 00000388 BAC0080000          <1>  mov edx,%2
  5610 0000038D B010                <1>  mov al,ePutMinuteString
  5610 0000038F CD30                <1>  int _svc
  5611                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5611 00000391 BAC0080000          <1>  mov edx,%1
  5611 00000396 B00C                <1>  mov al,ePutConsoleString
  5611 00000398 CD30                <1>  int _svc
  5612 0000039A E8C1FDFFFF                                      call    ConPutNewLine                                   ;write newline to console
  5613 0000039F C3                                              ret                                                     ;return
  5614                                  ;-----------------------------------------------------------------------------------------------------------------------
  5615                                  ;
  5616                                  ;       Routine:        ConMonth
  5617                                  ;
  5618                                  ;       Description:    This routine Handles the MONTH command.
  5619                                  ;
  5620                                  ;-----------------------------------------------------------------------------------------------------------------------
  5621                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5621                              <1> ConMonth :
  5621 000003A0 BB49090000          <1>  mov ebx,%1
  5621 000003A5 B018                <1>  mov al,eReadRealTimeClock
  5621 000003A7 CD30                <1>  int _svc
  5622                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  5622 000003A9 BB49090000          <1>  mov ebx,%1
  5622 000003AE BAC0080000          <1>  mov edx,%2
  5622 000003B3 B011                <1>  mov al,ePutMonthString
  5622 000003B5 CD30                <1>  int _svc
  5623                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5623 000003B7 BAC0080000          <1>  mov edx,%1
  5623 000003BC B00C                <1>  mov al,ePutConsoleString
  5623 000003BE CD30                <1>  int _svc
  5624 000003C0 E89BFDFFFF                                      call    ConPutNewLine                                   ;write newline to console
  5625 000003C5 C3                                              ret                                                     ;return
  5626                                  ;-----------------------------------------------------------------------------------------------------------------------
  5627                                  ;
  5628                                  ;       Routine:        ConMonthName
  5629                                  ;
  5630                                  ;       Description:    This routine Handles the MONTH.NAME command.
  5631                                  ;
  5632                                  ;-----------------------------------------------------------------------------------------------------------------------
  5633                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  5633                              <1> ConMonthName :
  5633 000003C6 BB49090000          <1>  mov ebx,%1
  5633 000003CB B018                <1>  mov al,eReadRealTimeClock
  5633 000003CD CD30                <1>  int _svc
  5634                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  5634 000003CF BB49090000          <1>  mov ebx,%1
  5634 000003D4 BAC0080000          <1>  mov edx,%2
  5634 000003D9 B012                <1>  mov al,ePutMonthNameString
  5634 000003DB CD30                <1>  int _svc
  5635                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  5635 000003DD BAC0080000          <1>  mov edx,%1
  5635 000003E2 B00C                <1>  mov al,ePutConsoleString
  5635 000003E4 CD30                <1>  int _svc
  5636 000003E6 E875FDFFFF                                      call    ConPutNewLine                                   ;write newline to console
  5637 000003EB C3                                              ret                                                     ;return
  5638                                  ;-----------------------------------------------------------------------------------------------------------------------
  5639                                  ;
  5640                                  ;       Routine:        ConSecond
  5641                                  ;
  5642                                  ;       Description:    This routine Handles the SECOND command.
  5643                                  ;
  5644                                  ;-----------------------------------------------------------------------------------------------------------------------
  5645                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5645                              <1> ConSecond :
  5645 000003EC BB49090000          <1>  mov ebx,%1
  5645 000003F1 B018                <1>  mov al,eReadRealTimeClock
  5645 000003F3 CD30                <1>  int _svc
  5646                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  5646 000003F5 BB49090000          <1>  mov ebx,%1
  5646 000003FA BAC0080000          <1>  mov edx,%2
  5646 000003FF B013                <1>  mov al,ePutSecondString
  5646 00000401 CD30                <1>  int _svc
  5647                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5647 00000403 BAC0080000          <1>  mov edx,%1
  5647 00000408 B00C                <1>  mov al,ePutConsoleString
  5647 0000040A CD30                <1>  int _svc
  5648 0000040C E84FFDFFFF                                      call    ConPutNewLine                                   ;write newline to console
  5649 00000411 C3                                              ret                                                     ;return
  5650                                  ;-----------------------------------------------------------------------------------------------------------------------
  5651                                  ;
  5652                                  ;       Routine:        ConTime
  5653                                  ;
  5654                                  ;       Description:    This routine Handles the TIME command.
  5655                                  ;
  5656                                  ;-----------------------------------------------------------------------------------------------------------------------
  5657                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5657                              <1> ConTime :
  5657 00000412 BB49090000          <1>  mov ebx,%1
  5657 00000417 B018                <1>  mov al,eReadRealTimeClock
  5657 00000419 CD30                <1>  int _svc
  5658                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  5658 0000041B BB49090000          <1>  mov ebx,%1
  5658 00000420 BAC0080000          <1>  mov edx,%2
  5658 00000425 B014                <1>  mov al,ePutTimeString
  5658 00000427 CD30                <1>  int _svc
  5659                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5659 00000429 BAC0080000          <1>  mov edx,%1
  5659 0000042E B00C                <1>  mov al,ePutConsoleString
  5659 00000430 CD30                <1>  int _svc
  5660 00000432 E829FDFFFF                                      call    ConPutNewLine                                   ;write newline to console
  5661 00000437 C3                                              ret                                                     ;return
  5662                                  ;-----------------------------------------------------------------------------------------------------------------------
  5663                                  ;
  5664                                  ;       Routine:        ConVersion
  5665                                  ;
  5666                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  5667                                  ;
  5668                                  ;-----------------------------------------------------------------------------------------------------------------------
  5669                                  ConVersion              putConsoleString czTitle                                ;display version message
  5669                              <1> ConVersion :
  5669 00000438 BA[48060000]        <1>  mov edx,%1
  5669 0000043D B00C                <1>  mov al,ePutConsoleString
  5669 0000043F CD30                <1>  int _svc
  5670 00000441 C3                                              ret                                                     ;return
  5671                                  ;-----------------------------------------------------------------------------------------------------------------------
  5672                                  ;
  5673                                  ;       Routine:        ConWeekday
  5674                                  ;
  5675                                  ;       Description:    This routine handles the WEEKDAY command.
  5676                                  ;
  5677                                  ;-----------------------------------------------------------------------------------------------------------------------
  5678                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5678                              <1> ConWeekday :
  5678 00000442 BB49090000          <1>  mov ebx,%1
  5678 00000447 B018                <1>  mov al,eReadRealTimeClock
  5678 00000449 CD30                <1>  int _svc
  5679                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  5679 0000044B BB49090000          <1>  mov ebx,%1
  5679 00000450 BAC0080000          <1>  mov edx,%2
  5679 00000455 B015                <1>  mov al,ePutWeekdayString
  5679 00000457 CD30                <1>  int _svc
  5680                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5680 00000459 BAC0080000          <1>  mov edx,%1
  5680 0000045E B00C                <1>  mov al,ePutConsoleString
  5680 00000460 CD30                <1>  int _svc
  5681 00000462 E8F9FCFFFF                                      call    ConPutNewLine                                   ;write newline to console
  5682 00000467 C3                                              ret                                                     ;return
  5683                                  ;-----------------------------------------------------------------------------------------------------------------------
  5684                                  ;
  5685                                  ;       Routine:        ConWeekdayName
  5686                                  ;
  5687                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  5688                                  ;
  5689                                  ;-----------------------------------------------------------------------------------------------------------------------
  5690                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  5690                              <1> ConWeekdayName :
  5690 00000468 BB49090000          <1>  mov ebx,%1
  5690 0000046D B018                <1>  mov al,eReadRealTimeClock
  5690 0000046F CD30                <1>  int _svc
  5691                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  5691 00000471 BB49090000          <1>  mov ebx,%1
  5691 00000476 BAC0080000          <1>  mov edx,%2
  5691 0000047B B016                <1>  mov al,ePutWeekdayNameString
  5691 0000047D CD30                <1>  int _svc
  5692                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  5692 0000047F BAC0080000          <1>  mov edx,%1
  5692 00000484 B00C                <1>  mov al,ePutConsoleString
  5692 00000486 CD30                <1>  int _svc
  5693 00000488 E8D3FCFFFF                                      call    ConPutNewLine                                           ;write newline to console
  5694 0000048D C3                                              ret                                                             ;return
  5695                                  ;-----------------------------------------------------------------------------------------------------------------------
  5696                                  ;
  5697                                  ;       Routine:        ConYear
  5698                                  ;
  5699                                  ;       Description:    This routine Handles the YEAR command.
  5700                                  ;
  5701                                  ;-----------------------------------------------------------------------------------------------------------------------
  5702                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5702                              <1> ConYear :
  5702 0000048E BB49090000          <1>  mov ebx,%1
  5702 00000493 B018                <1>  mov al,eReadRealTimeClock
  5702 00000495 CD30                <1>  int _svc
  5703                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  5703 00000497 BB49090000          <1>  mov ebx,%1
  5703 0000049C BAC0080000          <1>  mov edx,%2
  5703 000004A1 B017                <1>  mov al,ePutYearString
  5703 000004A3 CD30                <1>  int _svc
  5704                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  5704 000004A5 BAC0080000          <1>  mov edx,%1
  5704 000004AA B00C                <1>  mov al,ePutConsoleString
  5704 000004AC CD30                <1>  int _svc
  5705 000004AE E8ADFCFFFF                                      call    ConPutNewLine                                   ;write newline to console
  5706 000004B3 C3                                              ret                                                     ;return
  5707                                  ;-----------------------------------------------------------------------------------------------------------------------
  5708                                  ;
  5709                                  ;       Routine:        ConYearIsLeap
  5710                                  ;
  5711                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  5712                                  ;
  5713                                  ;-----------------------------------------------------------------------------------------------------------------------
  5714                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  5714                              <1> ConYearIsLeap :
  5714 000004B4 BB49090000          <1>  mov ebx,%1
  5714 000004B9 B018                <1>  mov al,eReadRealTimeClock
  5714 000004BB CD30                <1>  int _svc
  5715                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  5715 000004BD BB49090000          <1>  mov ebx,%1
  5715 000004C2 B00A                <1>  mov al,eIsLeapYear
  5715 000004C4 CD30                <1>  int _svc
  5716 000004C6 E30B                                            jecxz   .10                                             ;branch if not leap
  5717                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  5717 000004C8 BA[78060000]        <1>  mov edx,%1
  5717 000004CD B00C                <1>  mov al,ePutConsoleString
  5717 000004CF CD30                <1>  int _svc
  5718 000004D1 EB09                                            jmp     .20                                             ;continue
  5719                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  5719                              <1> .10 :
  5719 000004D3 BA[93060000]        <1>  mov edx,%1
  5719 000004D8 B00C                <1>  mov al,ePutConsoleString
  5719 000004DA CD30                <1>  int _svc
  5720 000004DC C3                      .20                     ret                                                     ;return
  5721                                  ;-----------------------------------------------------------------------------------------------------------------------
  5722                                  ;
  5723                                  ;       Tables
  5724                                  ;
  5725                                  ;-----------------------------------------------------------------------------------------------------------------------
  5726                                                                                                                  ;---------------------------------------
  5727                                                                                                                  ;  Command Jump Table
  5728                                                                                                                  ;---------------------------------------
  5729                                  tConJmpTbl              equ     $                                               ;command jump table
  5730 000004DD 68040000                                        dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  5731 000004E1 B4040000                                        dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  5732 000004E5 C6030000                                        dd      ConMonthName    - ConCode                       ;month.name command routine offset
  5733 000004E9 1A020000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  5734 000004ED 38040000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  5735 000004F1 42040000                                        dd      ConWeekday      - ConCode                       ;weekday command routine offset
  5736 000004F5 8A020000                                        dd      ConMalloc       - ConCode                       ;malloc command routine offset
  5737 000004F9 DB020000                                        dd      ConMem          - ConCode                       ;memory command routine offset
  5738 000004FD 7A030000                                        dd      ConMinute       - ConCode                       ;minute command routine offset
  5739 00000501 EC030000                                        dd      ConSecond       - ConCode                       ;second command routine offset
  5740 00000505 C9010000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  5741 00000509 A0030000                                        dd      ConMonth        - ConCode                       ;month command routine offset
  5742 0000050D CE010000                                        dd      ConDate         - ConCode                       ;date command routine offset
  5743 00000511 1A020000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  5744 00000515 1F020000                                        dd      ConFree         - ConCode                       ;free command routine offset
  5745 00000519 61020000                                        dd      ConHour         - ConCode                       ;hour command routine offset
  5746 0000051D 87020000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  5747 00000521 1A020000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  5748 00000525 12040000                                        dd      ConTime         - ConCode                       ;time command routine offset
  5749 00000529 8E040000                                        dd      ConYear         - ConCode                       ;year command routine offset
  5750 0000052D C9010000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  5751 00000531 F4010000                                        dd      ConDay          - ConCode                       ;day command routine offset
  5752 00000535 DB020000                                        dd      ConMem          - ConCode                       ;mem command routine offset
  5753 00000539 38040000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  5754                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  5755                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  5756                                                                                                                  ;---------------------------------------
  5757                                                                                                                  ;  Command Name Table
  5758                                                                                                                  ;---------------------------------------
  5759                                  tConCmdTbl              equ     $                                               ;command name table
  5760 0000053D 0D5745454B4441592E-                             db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  5760 00000546 4E414D4500         
  5761 0000054B 0C594541522E49534C-                             db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  5761 00000554 45415000           
  5762 00000558 0B4D4F4E54482E4E41-                             db      11,"MONTH.NAME",0                               ;month.name command
  5762 00000561 4D4500             
  5763 00000564 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  5763 0000056D 00                 
  5764 0000056E 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  5765 00000577 085745454B44415900                              db      8,"WEEKDAY",0                                   ;weekday command
  5766 00000580 074D414C4C4F4300                                db      7,"MALLOC",0                                    ;malloc command
  5767 00000588 074D454D4F525900                                db      7,"MEMORY",0                                    ;memory command
  5768 00000590 074D494E55544500                                db      7,"MINUTE",0                                    ;minute command
  5769 00000598 075345434F4E4400                                db      7,"SECOND",0                                    ;second command
  5770 000005A0 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  5771 000005A7 064D4F4E544800                                  db      6,"MONTH",0                                     ;month command
  5772 000005AE 054441544500                                    db      5,"DATE",0                                      ;date command
  5773 000005B4 054558495400                                    db      5,"EXIT",0                                      ;exit command
  5774 000005BA 054652454500                                    db      5,"FREE",0                                      ;free command
  5775 000005C0 05484F555200                                    db      5,"HOUR",0                                      ;hour command
  5776 000005C6 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  5777 000005CC 055155495400                                    db      5,"QUIT",0                                      ;quit command
  5778 000005D2 0554494D4500                                    db      5,"TIME",0                                      ;time command
  5779 000005D8 055945415200                                    db      5,"YEAR",0                                      ;year command
  5780 000005DE 04434C5300                                      db      4,"CLS",0                                       ;cls command
  5781 000005E3 0444415900                                      db      4,"DAY",0                                       ;day command
  5782 000005E8 044D454D00                                      db      4,"MEM",0                                       ;mem command
  5783 000005ED 0456455200                                      db      4,"VER",0                                       ;ver command
  5784 000005F2 00                                              db      0                                               ;end of table
  5785                                  ;-----------------------------------------------------------------------------------------------------------------------
  5786                                  ;
  5787                                  ;       Constants
  5788                                  ;
  5789                                  ;-----------------------------------------------------------------------------------------------------------------------
  5790 000005F3 42617365206D656D6F-     czBaseMem               db      "Base memory (RTC):     ",0                     ;base memory from BIOS
  5790 000005FC 72792028525443293A-
  5790 00000605 202020202000       
  5791 0000060B 20457874656E646564-     czExtendedMem           db      " Extended (RTC):       ",0                     ;extended memory from BIOS
  5791 00000614 2028525443293A2020-
  5791 0000061D 202020202000       
  5792 00000623 4B4200                  czKB                    db      "KB",0                                          ;Kilobytes
  5793 00000626 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  5794 00000629 6F6B0D0A00              czOK                    db      "ok",13,10,0                                    ;ok string
  5795 0000062E 3A00                    czPrompt                db      ":",0                                           ;prompt string
  5796 00000630 2042656C6F77204542-     czROMMem                db      " Below EBDA (Int 12h): ",0                     ;memory reported by ROM
  5796 00000639 44412028496E742031-
  5796 00000642 3268293A2000       
  5797 00000648 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  5797 00000651 65726174696E672053-
  5797 0000065A 797374656D20312E30-
  5797 00000663 0D0A00             
  5798 00000666 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  5798 0000066F 6F6D6D616E640D0A00 
  5799 00000678 546865207965617220-     czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  5799 00000681 69732061206C656170-
  5799 0000068A 20796561722E0D0A00 
  5800 00000693 546865207965617220-     czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  5800 0000069C 6973206E6F74206120-
  5800 000006A5 6C6561702079656172-
  5800 000006AE 2E0D0A00           
  5801 000006B2 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  5802                                  %endif
  5803                                  %ifdef BUILDDISK
  5804                                  ;-----------------------------------------------------------------------------------------------------------------------
  5805                                  ;
  5806                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  5807                                  ;
  5808                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  5809                                  ;
  5810                                  ;-----------------------------------------------------------------------------------------------------------------------
  5811                                  section                 unused                                                  ;unused disk space
  5812 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  5813                                  %endif
  5814                                  ;=======================================================================================================================
  5815                                  ;
  5816                                  ;       End of Program Code
  5817                                  ;
  5818                                  ;=======================================================================================================================
