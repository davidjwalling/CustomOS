     1                                  ;-----------------------------------------------------------------------------------------------------------------------
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.003
     6                                  ;
     7                                  ;	Description:	This sample program adds code to create osprep.com, a program to update the boot sector on a
     8                                  ;			floppy disk.
     9                                  ;
    10                                  ;	Revised:	January 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;
    51                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    52                                  ;			Assembly operands begin in column 33.
    53                                  ;			Lines should not extend beyond column 120.
    54                                  ;
    55                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock)
    56                                  ;			Routine names begin with a verb (Get, Read, etc.)
    57                                  ;
    58                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    59                                  ;			Constant stored values are named in camel case, starting with 'c'.
    60                                  ;			The 2nd letter of the constant label indicates the storage type.
    61                                  ;
    62                                  ;			cq......	constant quad-word (dq)
    63                                  ;			cd......	constant double-word (dd)
    64                                  ;			cw......	constant word (dw)
    65                                  ;			cb......	constant byte (db)
    66                                  ;			cz......	constant ASCIIZ (null-terminated) string
    67                                  ;
    68                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    69                                  ;			The 2nd letter of the variable label indicates the storage type.
    70                                  ;
    71                                  ;			wq......	variable quad-word (resq)
    72                                  ;			wd......	variable double-word (resd)
    73                                  ;			ww......	variable word (resw)
    74                                  ;			wb......	variable byte (resb)
    75                                  ;
    76                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    77                                  ;			Structure names do not begin with a verb.
    78                                  ;
    79                                  ;	Macros:		Macro names are in camel case (getDateString).
    80                                  ;			Macro names do begin with a verb.
    81                                  ;
    82                                  ;	Registers:	Registers EBX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    83                                  ;			Register EAX is preferred for returning a response/result value.
    84                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
    85                                  ;			Registers EAX, EDX and ECX are preferred for passing integral parameters.
    86                                  ;
    87                                  ;-----------------------------------------------------------------------------------------------------------------------
    88                                  ;-----------------------------------------------------------------------------------------------------------------------
    89                                  ;
    90                                  ;	Equates
    91                                  ;
    92                                  ;	The equate (equ) statements define symbolic names for fixed values so that these values can be defined and
    93                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
    94                                  ;	values are used. Equate names are in all-caps and are the only symbolic names that begin with the letter 'E'.
    95                                  ;	Equates are grouped into related sets. Hardware-based values are listed first, followed by BIOS and protocol
    96                                  ;	values and, lastly, application values.
    97                                  ;
    98                                  ;-----------------------------------------------------------------------------------------------------------------------
    99                                  ;-----------------------------------------------------------------------------------------------------------------------
   100                                  ;
   101                                  ;	8042 Keyboard Controller						EKEY...
   102                                  ;
   103                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   104                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 0x64 is set to zero.
   105                                  ;
   106                                  ;-----------------------------------------------------------------------------------------------------------------------
   107                                  EKEYPORTSTAT		equ	064h						;8042 status port
   108                                  EKEYCMDRESET		equ	0FEh						;8042 drive B0 low to restart
   109                                  ;-----------------------------------------------------------------------------------------------------------------------
   110                                  ;
   111                                  ;	BIOS Interrupts and Functions						EBIOS...
   112                                  ;
   113                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   114                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   115                                  ;
   116                                  ;-----------------------------------------------------------------------------------------------------------------------
   117                                  EBIOSINTVIDEO		equ	010h						;BIOS video services interrupt
   118                                  EBIOSFNTTYOUTPUT	equ	00Eh						;BIOS video TTY output function
   119                                  EBIOSINTDISKETTE	equ	013h						;BIOS diskette services interrupt
   120                                  EBIOSINTKEYBOARD	equ	016h						;BIOS keyboard services interrupt
   121                                  EBIOSFNKEYSTATUS	equ	001h						;BIOS keyboard status function
   122                                  ;-----------------------------------------------------------------------------------------------------------------------
   123                                  ;
   124                                  ;	ASCII									EASC...
   125                                  ;
   126                                  ;-----------------------------------------------------------------------------------------------------------------------
   127                                  EASCIIRETURN		equ	13						;ASCII carriage return
   128                                  EASCIIESCAPE		equ	27						;ASCII escape
   129                                  ;-----------------------------------------------------------------------------------------------------------------------
   130                                  ;
   131                                  ;	Boot Sector and Loader Constants
   132                                  ;
   133                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   134                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   135                                  ;
   136                                  ;-----------------------------------------------------------------------------------------------------------------------
   137                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   138                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   139                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   140                                  EBOOTSTACKTOP		equ	400h						;boot sector stack top relative to DS
   141                                  EMAXTRIES		equ	5						;max read retries
   142                                  %ifdef BUILDBOOT
   143                                  ;-----------------------------------------------------------------------------------------------------------------------
   144                                  ;
   145                                  ;	Boot Sector Code							@disk: 000000	@mem: 007c00
   146                                  ;
   147                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   148                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   149                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   150                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   151                                  ;
   152                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   153                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   154                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   155                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   156                                  ;	immediately followed by a disk parameter table.
   157                                  ;
   158                                  ;-----------------------------------------------------------------------------------------------------------------------
   159                                  			cpu	8086						;assume minimal CPU
   160                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   161                                  			bits	16						;16-bit code at power-up
   162                                  %ifdef BUILDPREP
   163 00000000 E9FD01                  Boot			jmp	word Prep					;jump to preparation code
   164                                  %else
   165                                  Boot			jmp	word Boot.10					;jump over parameter table
   166                                  %endif
   167                                  ;-----------------------------------------------------------------------------------------------------------------------
   168                                  ;
   169                                  ;	Disk Parameter Table
   170                                  ;
   171                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   172                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   173                                  ;
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   176 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   177 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   178 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   179 00000010 02                      cbFatCount		db	2						;file allocation table copies
   180 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   181 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   182 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   183 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   184                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   185 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   186 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   187 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   188                                  ;
   189                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   190                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   191                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   192                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   193                                  ;	given several possible starting values for CS:IP.
   194                                  ;
   195                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   196 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   197                                  .@20			equ	$-$$						;.@20 = 021h
   198 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   199 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   200 00000025 B104                    			mov	cl,4						;shift count
   201 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   202 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   203 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   204                                  ;
   205                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we need DS and ES
   206                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   207                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   208                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   209                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   210                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   211                                  ;
   212 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   213 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   214 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   215 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp
   216 00000036 BC0004                  			mov	sp,EBOOTSTACKTOP				;SP = 0400
   217                                  ;
   218                                  ;	Our boot addressability is now set up according to the following diagram.
   219                                  ;
   220                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   221                                  ;				|  Unused (DOS Program Segment Prefix)		|
   222                                  ;			007c00	+-----------------------------------------------+ DS:0100
   223                                  ;				|  Boot Sector Code (vstart=100h)		|
   224                                  ;				|						|
   225                                  ;			007e00	+-----------------------------------------------+ DS:0300
   226                                  ;				|  Boot Stack					|
   227                                  ;	SS:SP --------> 007f00	+-----------------------------------------------+ DS:0400
   228                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   229                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   230                                  ;				|						|
   231                                  ;			009100	+-----------------------------------------------+ DS:1600
   232                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   233                                  ;				|						|
   234                                  ;			009300	+-----------------------------------------------+ DS:1800
   235                                  ;
   236                                  ;	On entry, DL indicates the drive being booted from.
   237                                  ;
   238 00000039 8816[F601]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   239                                  ;
   240                                  ;	Compute directory i/o buffer address.
   241                                  ;
   242 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   243 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   244 00000044 050004                  			add	ax,EBOOTSTACKTOP				;AX = 1600 = end of FAT buffer
   245 00000047 A3[EA01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1600
   246                                  ;
   247                                  ;	Compute segment where os.com will be loaded.
   248                                  ;
   249 0000004A D3E8                    			shr	ax,cl						;AX = 0160
   250 0000004C 01D8                    			add	ax,bx						;AX = 0160 + 07b0 = 0910
   251 0000004E 83E810                  			sub	ax,16						;AX = 0900
   252 00000051 A3[3A01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 0900
   253                                  ;
   254                                  ;	Write a message to the console so we know we have our addressability established.
   255                                  ;
   256 00000054 BE[BF01]                			mov	si,czLoadMsg					;loading message
   257 00000057 E84B01                  			call	BootPrint					;display loader message
   258                                  ;
   259                                  ;	Initialize the number of directory sectors to search.
   260                                  ;
   261 0000005A A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   262 0000005D A3[EC01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   263                                  ;
   264                                  ;	Compute number of directory sectors and initialize overhead count.
   265                                  ;
   266 00000060 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   267 00000062 F726[B201]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   268 00000066 F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   269 0000006A A3[EE01]                			mov	[wwOverhead],ax					;[overhead] = 000e
   270                                  ;
   271                                  ;	Compute directory entries per sector.
   272                                  ;
   273 0000006D 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   274 0000006E F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   275 00000070 A3[F001]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   276                                  ;
   277                                  ;	Compute first logical directory sector and update overhead count.
   278                                  ;
   279 00000073 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   280 00000076 F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   281 0000007A 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   282 0000007E 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   283 00000082 A3[F201]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   284 00000085 0106[EE01]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   285                                  ;
   286                                  ;	Read directory sector.
   287                                  ;
   288 00000089 B001                    .30			mov	al,1						;sector count
   289 0000008B A2[F401]                			mov	[wbReadCount],al				;[readcount] = 01
   290 0000008E 8B1E[EA01]              			mov	bx,[wwDirBuffer]				;BX = 1600
   291 00000092 E8A700                  			call	ReadSector					;read sector into es:bx
   292                                  ;
   293                                  ;	Setup variables to search this directory sector.
   294                                  ;
   295 00000095 A1[EC01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   296 00000098 3B06[F001]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   297 0000009C 7603                    			jna	.40						;no, continue
   298 0000009E A1[F001]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   299 000000A1 2906[EC01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   300 000000A5 BE[B401]                			mov	si,cbKernelProgram				;program name
   301 000000A8 8B3E[EA01]              			mov	di,[wwDirBuffer]				;DI = 1600
   302                                  ;
   303                                  ;	Loop through directory sectors searching for kernel program.
   304                                  ;
   305 000000AC 56                      .50			push	si						;save kernel name address
   306 000000AD 57                      			push	di						;save dir i/o buffer address
   307 000000AE B90B00                  			mov	cx,11						;length of 8+3 name
   308 000000B1 FC                      			cld							;forward strings
   309 000000B2 F3A6                    			repe	cmpsb						;compare entry name
   310 000000B4 5F                      			pop	di						;restore dir i/o buffer address
   311 000000B5 5E                      			pop	si						;restore kernel name address
   312 000000B6 7418                    			je	.60						;exit loop if found
   313 000000B8 033E[B201]              			add	di,[cwEntryLen]					;point to next dir entry
   314 000000BC 48                      			dec	ax						;decrement remaining entries
   315 000000BD 75ED                    			jnz	.50						;next entry
   316                                  ;
   317                                  ;	Repeat search if we are not at the end of the directory.
   318                                  ;
   319 000000BF FF06[F201]              			inc	word [wwLogicalSector]				;increment logical sector
   320 000000C3 833E[EC01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   321 000000C8 75BF                    			jne	.30						;no, get next sector
   322 000000CA BE[DB01]                			mov	si,czNoKernel					;missing kernel message
   323 000000CD E9C000                  			jmp	BootExit					;display message and exit
   324                                  ;
   325                                  ;	If we find the kernel program in the directory, read the FAT.
   326                                  ;
   327 000000D0 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   328 000000D3 A3[F201]                			mov	[wwLogicalSector],ax				;start past boot sector
   329 000000D6 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   330 000000D9 A2[F401]                			mov	[wbReadCount],al				;[readcount] = 09
   331 000000DC BB0004                  			mov	bx,EBOOTSTACKTOP				;BX = 0500
   332 000000DF E85A00                  			call	ReadSector					;read FAT into buffer
   333                                  ;
   334                                  ;	Get the starting cluster of the kernel program and target address.
   335                                  ;
   336 000000E2 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   337 000000E5 C41E[3801]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load address
   338                                  ;
   339                                  ;	Read each program cluster into RAM.
   340                                  ;
   341 000000E9 50                      .70			push	ax						;save cluster nbr
   342 000000EA 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   343 000000ED 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   344 000000F1 880E[F401]              			mov	[wbReadCount],cl				;save sectors to read
   345 000000F5 30ED                    			xor	ch,ch						;CX = sectors per cluster
   346 000000F7 F7E1                    			mul	cx						;DX:AX = logical cluster sector
   347 000000F9 0306[EE01]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   348 000000FD A3[F201]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   349 00000100 E83900                  			call	ReadSector					;read sectors into es:bx
   350                                  ;
   351                                  ;	Update buffer pointer for next cluster.
   352                                  ;
   353 00000103 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   354 00000106 30E4                    			xor	ah,ah						;AX = sectors per cluster
   355 00000108 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   356 0000010C 01C3                    			add	bx,ax						;BX = next cluster target address
   357 0000010E 58                      			pop	ax						;AX = restore cluster nbr
   358                                  ;
   359                                  ;	Compute next cluster number.
   360                                  ;
   361 0000010F 89C1                    			mov	cx,ax						;CX = cluster nbr
   362 00000111 89C7                    			mov	di,ax						;DI = cluster nbr
   363 00000113 D1E8                    			shr	ax,1						;AX = cluster/2
   364 00000115 89C2                    			mov	dx,ax						;DX = cluster/2
   365 00000117 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   366 00000119 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   367 0000011B 83E701                  			and	di,1						;get low bit
   368 0000011E 01C7                    			add	di,ax						;add one if cluster is odd
   369 00000120 81C70004                			add	di,EBOOTSTACKTOP				;add FAT buffer address
   370 00000124 8B05                    			mov	ax,[di]						;get cluster bytes
   371                                  ;
   372                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   373                                  ;
   374 00000126 F6C101                  			test	cl,1						;is cluster odd?
   375 00000129 7404                    			jz	.80						;no, skip ahead
   376 0000012B B104                    			mov	cl,4						;shift count
   377 0000012D D3E8                    			shr	ax,cl						;shift nybble low
   378 0000012F 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   379 00000132 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   380 00000135 75B2                    			jne	.70						;no, continue
   381                                  ;
   382                                  ;	Transfer control to the operating system program.
   383                                  ;
   384 00000137 EA                      			db	0EAh						;jmp seg:offset
   385 00000138 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   386 0000013A 0009                    wwLoadSegment		dw	0900h						;kernel entry segment (computed)
   387                                  ;
   388                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   389                                  ;
   390 0000013C A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   391 0000013F F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   392 00000143 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   393 00000145 A1[F201]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   394 00000148 F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   395 0000014A A2[F901]                			mov	[wbTrack],al					;[track] = cylinder
   396 0000014D 89D0                    			mov	ax,dx						;AX = cyl sector
   397 0000014F F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   398 00000153 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   399 00000155 A3[F701]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   400                                  ;
   401                                  ;	Try maxtries times to read sector.
   402                                  ;
   403 00000158 B90500                  			mov	cx,EMAXTRIES					;CX = 0005
   404 0000015B 53                      .10			push	bx						;save buffer address
   405 0000015C 51                      			push	cx						;save retry count
   406 0000015D 8B16[F601]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   407 00000161 8B0E[F801]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   408 00000165 A1[F401]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   409 00000168 CD13                    			int	EBIOSINTDISKETTE				;read sector
   410 0000016A 59                      			pop	cx						;restore retry count
   411 0000016B 5B                      			pop	bx						;restore buffer address
   412 0000016C 7343                    			jnc	BootReturn					;skip ahead if done
   413 0000016E E2EB                    			loop	.10						;retry
   414                                  ;
   415                                  ;	Handle disk error: convert to ASCII and store in error string.
   416                                  ;
   417 00000170 88E0                    			mov	al,ah						;AL = bios error code
   418 00000172 30E4                    			xor	ah,ah						;AX = bios error code
   419 00000174 B210                    			mov	dl,16						;divisor for base 16
   420 00000176 F6F2                    			div	dl						;AL = hi order, AH = lo order
   421 00000178 0D3030                  			or	ax,3030h					;apply ASCII zone bits
   422 0000017B 80FC3A                  			cmp	ah,3Ah						;range test ASCII numeral
   423 0000017E 7203                    			jb	.20						;continue if numeral
   424 00000180 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   425 00000183 3C3A                    .20			cmp	al,3Ah						;range test ASCII numeral
   426 00000185 7203                    			jb	.30						;continue if numeral
   427 00000187 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   428 0000018A A3[D801]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   429 0000018D BE[CD01]                			mov	si,czErrorMsg					;error message address
   430 00000190 E81200                  BootExit		call	BootPrint					;display messge to console
   431 00000193 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   432 00000195 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   433 00000197 7504                    			jnz	.20						;continue if key pressed
   434 00000199 FB                      			sti							;enable interrupts
   435 0000019A F4                      			hlt							;wait for interrupt
   436 0000019B EBF6                    			jmp	.10						;repeat
   437 0000019D B0FE                    .20			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   438 0000019F E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
   439 000001A1 FB                      .30			sti							;enable interrupts
   440 000001A2 F4                      			hlt							;stop until reset, int, nmi
   441 000001A3 EBFC                    			jmp	.30						;loop until restart kicks in
   442                                  ;
   443                                  ;	Display text message.
   444                                  ;
   445 000001A5 FC                      BootPrint		cld							;forward strings
   446 000001A6 AC                      			lodsb							;load next byte at DS:SI in AL
   447 000001A7 84C0                    			test	al,al						;end of string?
   448 000001A9 7406                    			jz	BootReturn					;... yes, exit our loop
   449 000001AB B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   450 000001AD CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   451 000001AF EBF4                    			jmp	BootPrint					;repeat until done
   452 000001B1 C3                      BootReturn		ret							;return to caller
   453                                  ;-----------------------------------------------------------------------------------------------------------------------
   454                                  ;
   455                                  ;	Constants
   456                                  ;
   457                                  ;-----------------------------------------------------------------------------------------------------------------------
   458                                  			align	2
   459 000001B2 2000                    cwEntryLen		dw	32						;length of directory entry
   460 000001B4 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   460 000001BD 4F4D               
   461 000001BF 4C6F6164696E67202E-     czLoadMsg		db	"Loading ...",13,10,0				;loading message
   461 000001C8 2E2E0D0A00         
   462 000001CD 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   462 000001D6 7220               
   463 000001D8 202000                  wzErrorCode		db	20h,20h,0					;error code and null terminator
   464 000001DB 4F532E434F4D206D69-     czNoKernel		db	"OS.COM missing",0				;missing kernel message
   464 000001E4 7373696E6700       
   465                                  ;-----------------------------------------------------------------------------------------------------------------------
   466                                  ;
   467                                  ;	Work Areas
   468                                  ;
   469                                  ;-----------------------------------------------------------------------------------------------------------------------
   470                                  			align	2
   471 000001EA 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   472 000001EC 0000                    wwEntriesLeft		dw	0						;directory entries to search
   473 000001EE 0000                    wwOverhead		dw	0						;overhead sectors
   474 000001F0 0000                    wwSectorEntries		dw	0						;directory entries per sector
   475 000001F2 0000                    wwLogicalSector		dw	0						;current logical sector
   476                                  wwReadCountCommand	equ	$						;read count and command
   477 000001F4 00                      wbReadCount		db	0						;sectors to read
   478 000001F5 02                      cbReadCommand		db	2						;BIOS read disk fn code
   479                                  wwDriveHead		equ	$						;drive, head (word)
   480 000001F6 00                      wbDrive			db	0						;drive
   481 000001F7 00                      wbHead			db	0						;head
   482                                  wwSectorTrack		equ	$						;sector, track (word)
   483 000001F8 00                      			db	0						;sector
   484 000001F9 00                      wbTrack			db	0						;track
   485 000001FA 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   486 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   487                                  %endif
   488                                  %ifdef BUILDPREP
   489                                  ;-----------------------------------------------------------------------------------------------------------------------
   490                                  ;
   491                                  ;	Diskette Preparation Code
   492                                  ;
   493                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   494                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   495                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   496                                  ;
   497                                  ;-----------------------------------------------------------------------------------------------------------------------
   498                                  ;
   499                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   500                                  ;
   501 00000200 BE[CA02]                Prep			mov	si,czPrepMsg10					;starting message address
   502 00000203 E89FFF                  			call	BootPrint					;display message
   503                                  ;
   504                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   505                                  ;
   506 00000206 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   507 00000208 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   508 0000020A 7504                    			jnz	.12						;continue if key pressed
   509 0000020C FB                      			sti							;enable interrupts
   510 0000020D F4                      			hlt							;wait for interrupt
   511 0000020E EBF6                    			jmp	short .10					;repeat
   512 00000210 3C0D                    .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   513 00000212 7407                    			je	.15						;yes, branch
   514 00000214 3C1B                    			cmp	al,EASCIIESCAPE					;Escape key pressed?
   515 00000216 75EE                    			jne	.10						;no, repeat
   516 00000218 E9A900                  			jmp	.90						;yes, exit program
   517                                  ;
   518                                  ;	Display writing-sector message and patch the JMP instruction.
   519                                  ;
   520 0000021B BE[6E04]                .15			mov	si,czPrepMsg12					;writing-sector message address
   521 0000021E E884FF                  			call	BootPrint					;display message
   522 00000221 BB[0100]                			mov	bx,Boot+1					;address of JMP instruction operand
   523 00000224 B81B00                  			mov	ax,01Bh						;address past disk parameter table
   524 00000227 8907                    			mov	[bx],ax						;update the JMP instruction
   525                                  ;
   526                                  ;	Try to read the boot sector.
   527                                  ;
   528 00000229 B90500                  			mov	cx,EMAXTRIES					;try up to five times
   529 0000022C 51                      .20			push	cx						;save remaining tries
   530 0000022D BB[760A]                			mov	bx,wcPrepInBuf					;input buffer address
   531 00000230 BA0000                  			mov	dx,0						;head zero, drive zero
   532 00000233 B90100                  			mov	cx,1						;track zero, sector one
   533 00000236 B80102                  			mov	ax,0201h					;read one sector
   534 00000239 CD13                    			int	EBIOSINTDISKETTE				;attempt the read
   535 0000023B 59                      			pop	cx						;restore remaining retries
   536 0000023C 7307                    			jnc	.30						;skip ahead if successful
   537 0000023E E2EC                    			loop	.20						;try again
   538 00000240 BE[9E04]                			mov	si,czPrepMsg20					;read-error message address
   539 00000243 EB2C                    			jmp	.50						;branch to error routine
   540                                  ;
   541                                  ;	Copy diskette parms from input buffer to output buffer.
   542                                  ;
   543 00000245 BE[760A]                .30			mov	si,wcPrepInBuf					;input buffer address
   544 00000248 83C60B                  			add	si,11						;skip over JMP and system ID
   545 0000024B BF[0000]                			mov	di,Boot						;output buffer address
   546 0000024E 83C70B                  			add	di,11						;skip over JMP and system ID
   547 00000251 B91300                  			mov	cx,19						;length of diskette parameters
   548 00000254 FC                      			cld							;forward string copies
   549 00000255 F3A4                    			rep	movsb						;copy diskette parameters
   550                                  ;
   551                                  ;	Try to write boot sector to diskette.
   552                                  ;
   553 00000257 B90500                  			mov	cx,EMAXTRIES					;try up to five times
   554 0000025A 51                      .40			push	cx						;save remaining tries
   555 0000025B BB[0000]                			mov	bx,Boot						;output buffer address
   556 0000025E BA0000                  			mov	dx,0						;head zero, drive zero
   557 00000261 B90100                  			mov	cx,1						;track zero, sector one
   558 00000264 B80103                  			mov	ax,0301h					;write one sector
   559 00000267 CD13                    			int	EBIOSINTDISKETTE				;attempt the write
   560 00000269 59                      			pop	cx						;restore remaining retries
   561 0000026A 7326                    			jnc	.80						;skip ahead if successful
   562 0000026C E2EC                    			loop	.40						;try again
   563 0000026E BE[EC04]                			mov	si,czPrepMsg30					;write-error message address
   564                                  ;
   565                                  ;	Convert the error code to ASCII and display the error message.
   566                                  ;
   567 00000271 50                      .50			push	ax						;save error code
   568 00000272 88E0                    			mov	al,ah						;copy error code
   569 00000274 B400                    			mov	ah,0						;AX = error code
   570 00000276 B210                    			mov	dl,10h						;hexadecimal divisor
   571 00000278 F6FA                    			idiv	dl						;AL = hi-order, AH = lo-order
   572 0000027A 0D3030                  			or	ax,3030h					;add ASCII zone digits
   573 0000027D 80FC3A                  			cmp	ah,3Ah						;AH ASCII numeral?
   574 00000280 7203                    			jb	.60						;yes, continue
   575 00000282 80C407                  			add	ah,7						;no, make ASCII 'A'-'F'
   576 00000285 3C3A                    .60			cmp	al,3Ah						;al ASCII numeral?
   577 00000287 7202                    			jb	.70						;yes, continue
   578 00000289 0407                    			add	al,7						;no, make ASCII
   579 0000028B 894411                  .70			mov	[si+17],ax					;put ASCII error code in message
   580 0000028E E814FF                  			call	BootPrint					;write error message
   581 00000291 58                      			pop	ax						;restore error code
   582                                  ;
   583                                  ;	Display the completion message.
   584                                  ;
   585 00000292 BE[3805]                .80			mov	si,czPrepMsgOK					;assume successful completion
   586 00000295 88E0                    			mov	al,ah						;BIOS return code
   587 00000297 3C00                    			cmp	al,0						;success?
   588 00000299 7426                    			je	.85						;yes, continue
   589 0000029B BE[D705]                			mov	si,czPrepMsgErr1				;disk parameter error message
   590 0000029E 3C01                    			cmp	al,1						;disk parameter error?
   591 000002A0 741F                    			je	.85						;yes, continue
   592 000002A2 BE[A106]                			mov	si,czPrepMsgErr2				;address mark not found message
   593 000002A5 3C02                    			cmp	al,2						;address mark not found?
   594 000002A7 7418                    			je	.85						;yes, continue
   595 000002A9 BE[2A07]                			mov	si,czPrepMsgErr3				;protected disk message
   596 000002AC 3C03                    			cmp	al,3						;protected disk?
   597 000002AE 7411                    			je	.85						;yes, continue
   598 000002B0 BE[E407]                			mov	si,czPrepMsgErr6				;diskette removed message
   599 000002B3 3C06                    			cmp	al,6						;diskette removed?
   600 000002B5 740A                    			je	.85						;yes, continue
   601 000002B7 BE[1409]                			mov	si,czPrepMsgErr80				;drive timed out message
   602 000002BA 3C80                    			cmp	al,80H						;drive timed out?
   603 000002BC 7403                    			je	.85						;yes, continue
   604 000002BE BE[C509]                			mov	si,czPrepMsgErrXX				;unknown error message
   605 000002C1 E8E1FE                  .85			call	BootPrint					;display result message
   606 000002C4 B8004C                  .90			mov	ax,4C00H					;terminate with zero result code
   607 000002C7 CD21                    			int	21h						;terminate DOS program
   608 000002C9 C3                      			ret							;return (should not execute)
   609                                  ;-----------------------------------------------------------------------------------------------------------------------
   610                                  ;
   611                                  ;	Diskette Preparation Messages
   612                                  ;
   613                                  ;-----------------------------------------------------------------------------------------------------------------------
   614 000002CA 0D0A437573746F6D4F-     czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   614 000002D3 5320426F6F742D4469-
   614 000002DC 736B65747465205072-
   614 000002E5 657061726174696F6E-
   614 000002EE 2050726F6772616D   
   615 000002F6 0D0A436F7079726967-     			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   615 000002FF 687420284329203230-
   615 00000308 31302D323031372044-
   615 00000311 61766964204A2E2057-
   615 0000031A 616C6C696E672E2041-
   615 00000323 6C6C20726967687473-
   615 0000032C 207265736572766564-
   615 00000335 2E                 
   616 00000336 0D0A                    			db	13,10
   617 00000338 0D0A54686973207072-     			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   617 00000341 6F6772616D206F7665-
   617 0000034A 727772697465732074-
   617 00000353 686520626F6F742073-
   617 0000035C 6563746F72206F6620-
   617 00000365 61206469736B657474-
   617 0000036E 652077697468207374-
   617 00000377 617274757020636F64-
   617 00000380 652074686174       
   618 00000386 0D0A77696C6C206C6F-     			db	13,10,"will load the operating system into memory when the computer is restarted."
   618 0000038F 616420746865206F70-
   618 00000398 65726174696E672073-
   618 000003A1 797374656D20696E74-
   618 000003AA 6F206D656D6F727920-
   618 000003B3 7768656E2074686520-
   618 000003BC 636F6D707574657220-
   618 000003C5 697320726573746172-
   618 000003CE 7465642E           
   619 000003D2 0D0A546F2070726F63-     			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   619 000003DB 6565642C20706C6163-
   619 000003E4 65206120666F726D61-
   619 000003ED 74746564206469736B-
   619 000003F6 6574746520696E746F-
   619 000003FF 20647269766520413A-
   619 00000408 20616E642070726573-
   619 00000411 732074686520456E74-
   619 0000041A 6572206B65792E     
   620 00000421 0D0A546F2065786974-     			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
   620 0000042A 20746869732070726F-
   620 00000433 6772616D2077697468-
   620 0000043C 6F7574207072657061-
   620 00000445 72696E672061206469-
   620 0000044E 736B657474652C2070-
   620 00000457 726573732074686520-
   620 00000460 457363617065206B65-
   620 00000469 792E               
   621 0000046B 0D0A00                  			db	13,10,0
   622 0000046E 0D0A57726974696E67-     czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
   622 00000477 2074686520626F6F74-
   622 00000480 20736563746F722074-
   622 00000489 6F2074686520646973-
   622 00000492 6B65747465202E2E2E 
   623 0000049B 0D0A00                  			db	13,10,0
   624 0000049E 0D0A54686520657272-     czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   624 000004A7 6F722D636F6465202E-
   624 000004B0 2E2077617320726574-
   624 000004B9 75726E65642066726F-
   624 000004C2 6D207468652042494F-
   624 000004CB 53207768696C652072-
   624 000004D4 656164696E67206672-
   624 000004DD 6F6D20746865206469-
   624 000004E6 736B2E             
   625 000004E9 0D0A00                  			db	13,10,0
   626 000004EC 0D0A54686520657272-     czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   626 000004F5 6F722D636F6465202E-
   626 000004FE 2E2077617320726574-
   626 00000507 75726E65642066726F-
   626 00000510 6D207468652042494F-
   626 00000519 53207768696C652077-
   626 00000522 726974696E6720746F-
   626 0000052B 20746865206469736B-
   626 00000534 2E                 
   627 00000535 0D0A00                  			db	13,10,0
   628 00000538 0D0A54686520626F6F-     czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   628 00000541 742D736563746F7220-
   628 0000054A 776173207772697474-
   628 00000553 656E20746F20746865-
   628 0000055C 206469736B65747465-
   628 00000565 2E204265666F726520-
   628 0000056E 626F6F74696E672079-
   628 00000577 6F757220636F6D7075-
   628 00000580 7465722077697468   
   629 00000588 0D0A74686973206469-     			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
   629 00000591 736B657474652C206D-
   629 0000059A 616B65207375726520-
   629 000005A3 746861742074686520-
   629 000005AC 66696C65204F532E43-
   629 000005B5 4F4D20697320636F70-
   629 000005BE 696564206F6E746F20-
   629 000005C7 746865206469736B65-
   629 000005D0 7474652E           
   630 000005D4 0D0A00                  			db	13,10,0
   631 000005D7 0D0A2830312920496E-     czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
   631 000005E0 76616C696420446973-
   631 000005E9 6B20506172616D6574-
   631 000005F2 6572               
   632 000005F4 0D0A54686973206973-     			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
   632 000005FD 20616E20696E746572-
   632 00000606 6E616C206572726F72-
   632 0000060F 206361757365642062-
   632 00000618 7920616E20696E7661-
   632 00000621 6C69642076616C7565-
   632 0000062A 206265696E67207061-
   632 00000633 7373656420746F2061-
   632 0000063C 2073797374656D     
   633 00000643 0D0A66756E6374696F-     			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
   633 0000064C 6E2E20546865204F53-
   633 00000655 424F4F542E434F4D20-
   633 0000065E 66696C65206D617920-
   633 00000667 626520636F72727570-
   633 00000670 742E20436F7079206F-
   633 00000679 7220646F776E6C6F61-
   633 00000682 64207468652066696C-
   633 0000068B 6520616761696E     
   634 00000692 0D0A616E6420726574-     			db	13,10,"and retry."
   634 0000069B 72792E             
   635 0000069E 0D0A00                  			db	13,10,0
   636 000006A1 0D0A28303229204164-     czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
   636 000006AA 6472657373204D6172-
   636 000006B3 6B204E6F7420466F75-
   636 000006BC 6E64               
   637 000006BE 0D0A54686973206572-     			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
   637 000006C7 726F7220696E646963-
   637 000006D0 617465732061207068-
   637 000006D9 79736963616C207072-
   637 000006E2 6F626C656D20776974-
   637 000006EB 682074686520666C6F-
   637 000006F4 707079206469736B65-
   637 000006FD 7474652E20506C6561-
   637 00000706 7365207265747279   
   638 0000070E 0D0A7573696E672061-     			db	13,10,"using another diskette."
   638 00000717 6E6F74686572206469-
   638 00000720 736B657474652E     
   639 00000727 0D0A00                  			db	13,10,0
   640 0000072A 0D0A28303329205072-     czPrepMsgErr3		db	13,10,"(03) Protected Disk"
   640 00000733 6F7465637465642044-
   640 0000073C 69736B             
   641 0000073F 0D0A54686973206572-     			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
   641 00000748 726F72206973207573-
   641 00000751 75616C6C7920636175-
   641 0000075A 736564206279206174-
   641 00000763 74656D7074696E6720-
   641 0000076C 746F20777269746520-
   641 00000775 746F20612077726974-
   641 0000077E 652D70726F74656374-
   641 00000787 6564206469736B2E   
   642 0000078F 0D0A436865636B2074-     			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
   642 00000798 686520277772697465-
   642 000007A1 2D70726F7465637427-
   642 000007AA 2073657474696E6720-
   642 000007B3 6F6E20746865206469-
   642 000007BC 736B206F7220726574-
   642 000007C5 7279207573696E6720-
   642 000007CE 7573696E6720616E6F-
   642 000007D7 74686572206469736B-
   642 000007E0 2E                 
   643 000007E1 0D0A00                  			db	13,10,0
   644 000007E4 0D0A28303629204469-     czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
   644 000007ED 736B65747465205265-
   644 000007F6 6D6F766564         
   645 000007FB 0D0A54686973206572-     			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
   645 00000804 726F72206D61792069-
   645 0000080D 6E6469636174652074-
   645 00000816 686174207468652066-
   645 0000081F 6C6F70707920646973-
   645 00000828 6B6574746520686173-
   645 00000831 206265656E2072656D-
   645 0000083A 6F7665642066726F6D-
   645 00000843 20746865           
   646 00000847 0D0A6469736B657474-     			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
   646 00000850 652064726976652E20-
   646 00000859 4F6E20736F6D652073-
   646 00000862 797374656D732C2074-
   646 0000086B 68697320636F646520-
   646 00000874 6D617920616C736F20-
   646 0000087D 6F6363757220696620-
   646 00000886 746865206469736B65-
   646 0000088F 747465206973       
   647 00000895 0D0A27777269746520-     			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
   647 0000089E 70726F746563746564-
   647 000008A7 2E2720506C65617365-
   647 000008B0 207665726966792074-
   647 000008B9 686174207468652064-
   647 000008C2 69736B657474652069-
   647 000008CB 73206E6F7420777269-
   647 000008D4 74652D70726F746563-
   647 000008DD 74656420616E64     
   648 000008E4 0D0A69732070726F70-     			db	13,10,"is properly inserted in the diskette drive."
   648 000008ED 65726C7920696E7365-
   648 000008F6 7274656420696E2074-
   648 000008FF 6865206469736B6574-
   648 00000908 74652064726976652E 
   649 00000911 0D0A00                  			db	13,10,0
   650 00000914 0D0A28383029204472-     czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
   650 0000091D 6976652054696D6564-
   650 00000926 204F7574           
   651 0000092A 0D0A54686973206572-     			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
   651 00000933 726F7220757375616C-
   651 0000093C 6C7920696E64696361-
   651 00000945 746573207468617420-
   651 0000094E 6E6F206469736B6574-
   651 00000957 746520697320696E20-
   651 00000960 746865206469736B65-
   651 00000969 747465206472697665-
   651 00000972 2E20506C65617365   
   652 0000097A 0D0A6D616B65207375-     			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
   652 00000983 726520746861742074-
   652 0000098C 6865206469736B6574-
   652 00000995 74652069732070726F-
   652 0000099E 7065726C7920736561-
   652 000009A7 74656420696E207468-
   652 000009B0 652064726976652061-
   652 000009B9 6E642072657472792E 
   653 000009C2 0D0A00                  			db	13,10,0
   654 000009C5 0D0A283F3F2920556E-     czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
   654 000009CE 6B6E6F776E20457272-
   654 000009D7 6F72               
   655 000009D9 0D0A54686520657272-     			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
   655 000009E2 6F722D636F64652072-
   655 000009EB 657475726E65642062-
   655 000009F4 79207468652042494F-
   655 000009FD 53206973206E6F7420-
   655 00000A06 61207265636F676E69-
   655 00000A0F 7A6564206572726F72-
   655 00000A18 2E20506C6561736520-
   655 00000A21 636F6E73756C74     
   656 00000A28 0D0A796F757220636F-     			db	13,10,"your computer's technical reference for a description of this error code."
   656 00000A31 6D7075746572277320-
   656 00000A3A 746563686E6963616C-
   656 00000A43 207265666572656E63-
   656 00000A4C 6520666F7220612064-
   656 00000A55 65736372697074696F-
   656 00000A5E 6E206F662074686973-
   656 00000A67 206572726F7220636F-
   656 00000A70 64652E             
   657 00000A73 0D0A00                  			db	13,10,0
   658                                  wcPrepInBuf		equ	$
   659                                  %endif
   660                                  %ifdef BUILDDISK
   661                                  ;-----------------------------------------------------------------------------------------------------------------------
   662                                  ;
   663                                  ;	File Allocation Tables
   664                                  ;
   665                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
   666                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
   667                                  ;	OS.COM file here is 200h bytes in length. These 200h bytes contain familiar code that displays a message to the
   668                                  ;	screen. Our disk parameter table defines a cluster as containing one sector and each sector having 200h bytes.
   669                                  ;	Therefore, our FAT table must reserve only one cluster for OS.COM. The cluster used by OS.COM, then, will be
   670                                  ;	cluster 2. The entry value for this cluster is set to "0fffh" to indicate that it is the last cluster in the
   671                                  ;	chain.
   672                                  ;
   673                                  ;	Every three bytes encode two FAT entries as follows:
   674                                  ;
   675                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
   676                                  ;
   677                                  ;-----------------------------------------------------------------------------------------------------------------------
   678                                  ;-----------------------------------------------------------------------------------------------------------------------
   679                                  ;
   680                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
   681                                  ;
   682                                  ;-----------------------------------------------------------------------------------------------------------------------
   683                                  section			fat1							;first copy of FAT
   684                                  			db	0F0h,0FFh,0FFh,	0FFh,00Fh,000h
   685                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
   686                                  ;-----------------------------------------------------------------------------------------------------------------------
   687                                  ;
   688                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
   689                                  ;
   690                                  ;-----------------------------------------------------------------------------------------------------------------------
   691                                  section			fat2							;second copy of FAT
   692                                  			db	0F0h,0FFh,0FFh,	0FFh,00Fh,000h
   693                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
   694                                  ;-----------------------------------------------------------------------------------------------------------------------
   695                                  ;
   696                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
   697                                  ;
   698                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
   699                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
   700                                  ;	copy.
   701                                  ;
   702                                  ;-----------------------------------------------------------------------------------------------------------------------
   703                                  section			dir							;diskette directory
   704                                  			db	"OS      COM"					;file name (must contain spaces)
   705                                  			db	20h						;attribute (archive bit set)
   706                                  			times	10 db 0;					;unused
   707                                  			dw	0h						;time
   708                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
   709                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
   710                                  			dw	2						;first cluster
   711                                  			dd	200h						;file size
   712                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
   713                                  %endif
   714                                  %ifdef BUILDCOM
   715                                  ;-----------------------------------------------------------------------------------------------------------------------
   716                                  ;
   717                                  ;	OS.COM
   718                                  ;
   719                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
   720                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
   721                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
   722                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
   723                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
   724                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
   725                                  ;
   726                                  ;	Our loader addressability is set up according to the following diagram.
   727                                  ;
   728                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
   729                                  ;				|  Boot Sector & Loader Stack Area		|
   730                                  ;				|						|
   731                                  ;	SS:SP -------->	007f00	+-----------------------------------------------+ SS:0400
   732                                  ;
   733                                  ;
   734                                  ;	CS,DS,ES ----->	009000	+-----------------------------------------------+ CS:0000
   735                                  ;				|  Unused (DOS Program Segment Prefix)		|
   736                                  ;	CS:IP -------->	009100	+-----------------------------------------------+ CS:0100
   737                                  ;				|  Loader Code					|
   738                                  ;				|						|
   739                                  ;			009300	+-----------------------------------------------+ CS:0200
   740                                  ;
   741                                  ;-----------------------------------------------------------------------------------------------------------------------
   742                                  ;-----------------------------------------------------------------------------------------------------------------------
   743                                  ;
   744                                  ;	OS Loader								@disk: 004200	@mem: 009100
   745                                  ;
   746                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
   747                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above. The
   748                                  ;	size of the loader is limited to 65,280 bytes since the bootstrap will copy the loader into memory at 0:9100.
   749                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
   750                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
   751                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
   752                                  ;	starts the kernel task. Since the loader was called either from the bootstrap or as a .com file on the boot
   753                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
   754                                  ;	registers.
   755                                  ;
   756                                  ;-----------------------------------------------------------------------------------------------------------------------
   757                                  			cpu	8086						;assume minimal CPU
   758                                  section			loader	vstart=100h					;use .COM compatible addressing
   759                                  			bits	16						;this is 16-bit code
   760                                  Loader			push	cs						;use the code segment
   761                                  			pop	ds						;...as our data segment
   762                                  			push	cs						;use the code segment
   763                                  			pop	es						;...as our extra segment
   764                                  ;
   765                                  ;	Write a message to the console so we know we have our addressability established.
   766                                  ;
   767                                  			mov	si,czStartingMsg				;starting message
   768                                  			call	PutTTYString					;display loader message
   769                                  ;
   770                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
   771                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
   772                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
   773                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
   774                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
   775                                  ;
   776                                  .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
   777                                  			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
   778                                  			jnz	.40						;exit if key pressed
   779                                  			sti							;enable maskable interrupts
   780                                  			hlt							;wait for interrupt
   781                                  			jmp	.30						;repeat until keypress
   782                                  ;
   783                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
   784                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
   785                                  ;	HLT until the system resets.
   786                                  ;
   787                                  .40			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   788                                  			out	EKEYPORTSTAT,al					;drive B0 low to restart
   789                                  .50			sti							;enable maskable interrupts
   790                                  			hlt							;stop until reset, int, nmi
   791                                  			jmp	.50						;loop until restart kicks in
   792                                  ;-----------------------------------------------------------------------------------------------------------------------
   793                                  ;
   794                                  ;	Routine:	PutTTYString
   795                                  ;
   796                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
   797                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
   798                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
   799                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
   800                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
   801                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
   802                                  ;			registers and flags unless used to indicate return status.
   803                                  ;
   804                                  ;	In:		DS:SI	address of string
   805                                  ;
   806                                  ;-----------------------------------------------------------------------------------------------------------------------
   807                                  PutTTYString		cld							;forward strings
   808                                  			lodsb							;load next byte at DS:SI in AL
   809                                  			test	al,al						;end of string?
   810                                  			jz	.10						;... yes, exit our loop
   811                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   812                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
   813                                  			jmp	PutTTYString					;repeat until done
   814                                  .10			ret							;return to caller
   815                                  ;-----------------------------------------------------------------------------------------------------------------------
   816                                  ;
   817                                  ;	Loader Data
   818                                  ;
   819                                  ;	Our only "data" is the string displayed when system starts. It ends with ASCII carriage-return (13) and line-
   820                                  ;	feed (10) values. The remainder of the boot sector is filled with NUL. The boot sector finally ends with the
   821                                  ;	required two-byte signature checked by the BIOS. Note that recent versions of NASM will issue a warning if
   822                                  ;	the calculated address for the end-of-sector signature produces a negative value for "510-($-$$)". This will
   823                                  ;	indicate if we have added too much data and exceeded the length of the sector.
   824                                  ;
   825                                  ;-----------------------------------------------------------------------------------------------------------------------
   826                                  czStartingMsg		db	"Starting ...",13,10,0				;loader message
   827                                  			times	510-($-$$) db 0h				;zero fill to end of sector
   828                                  			db	055h,0AAh					;end of sector signature
   829                                  %endif
   830                                  %ifdef BUILDDISK
   831                                  ;-----------------------------------------------------------------------------------------------------------------------
   832                                  ;
   833                                  ;	Free Disk Space								@disk: 004400	@mem:  n/a
   834                                  ;
   835                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
   836                                  ;
   837                                  ;-----------------------------------------------------------------------------------------------------------------------
   838                                  section			unused							;unused disk space
   839                                  			times 	EBOOTDISKBYTES-04400h db 0F6h			;fill to end of disk image
   840                                  %endif
