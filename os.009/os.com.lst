     1                                  ;-----------------------------------------------------------------------------------------------------------------------
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.009
     6                                  ;
     7                                  ;	Description:	In this sample, the console task is expanded to support commands that take parameters and new
     8                                  ;			commands "mem" and "memory".
     9                                  ;
    10                                  ;	Revised:	January 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;
    51                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    52                                  ;			Assembly operands begin in column 33.
    53                                  ;			Lines should not extend beyond column 120.
    54                                  ;
    55                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock)
    56                                  ;			Routine names begin with a verb (Get, Read, etc.)
    57                                  ;
    58                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    59                                  ;			Constant stored values are named in camel case, starting with 'c'.
    60                                  ;			The 2nd letter of the constant label indicates the storage type.
    61                                  ;
    62                                  ;			cq......	constant quad-word (dq)
    63                                  ;			cd......	constant double-word (dd)
    64                                  ;			cw......	constant word (dw)
    65                                  ;			cb......	constant byte (db)
    66                                  ;			cz......	constant ASCIIZ (null-terminated) string
    67                                  ;
    68                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    69                                  ;			The 2nd letter of the variable label indicates the storage type.
    70                                  ;
    71                                  ;			wq......	variable quad-word (resq)
    72                                  ;			wd......	variable double-word (resd)
    73                                  ;			ww......	variable word (resw)
    74                                  ;			wb......	variable byte (resb)
    75                                  ;
    76                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    77                                  ;			Structure names do not begin with a verb.
    78                                  ;
    79                                  ;	Macros:		Macro names are in camel case (getDateString).
    80                                  ;			Macro names do begin with a verb.
    81                                  ;
    82                                  ;	Registers:	Registers EBX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    83                                  ;			Registers EAX and ECX are preferred for returning response/result values.
    84                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
    85                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
    86                                  ;
    87                                  ;-----------------------------------------------------------------------------------------------------------------------
    88                                  ;-----------------------------------------------------------------------------------------------------------------------
    89                                  ;
    90                                  ;	Equates
    91                                  ;
    92                                  ;	The equate (equ) statements define symbolic names for fixed values so that these values can be defined and
    93                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
    94                                  ;	values are used. Equate names are in all-caps and are the only symbolic names that begin with the letter 'E'.
    95                                  ;	Equates are grouped into related sets. Hardware-based values are listed first, followed by BIOS and protocol
    96                                  ;	values and, lastly, application values.
    97                                  ;
    98                                  ;-----------------------------------------------------------------------------------------------------------------------
    99                                  ;-----------------------------------------------------------------------------------------------------------------------
   100                                  ;
   101                                  ;	8042 Keyboard Controller						EKEY...
   102                                  ;
   103                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   104                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 0x64 is set to zero.
   105                                  ;
   106                                  ;-----------------------------------------------------------------------------------------------------------------------
   107                                  EKEYPORTDATA		equ	060h						;8042 data port
   108                                  EKEYPORTSTAT		equ	064h						;8042 status port
   109                                  EKEYCMDRESET		equ	0FEh						;8042 drive B0 low to restart
   110                                  EKEYBITOUT		equ	001h						;8042 output buffer status bit
   111                                  EKEYBITIN		equ	002h						;8042 input buffer status bit
   112                                  EKEYCMDLAMPS		equ	0EDh						;8042 set/reset lamps command
   113                                  EKEYWAITLOOP		equ	010000h						;8042 wait loop
   114                                  										;---------------------------------------
   115                                  										;	Keyboard Scan Codes
   116                                  										;---------------------------------------
   117                                  EKEYCTRLDOWN		equ	01Dh						;control key down
   118                                  EKEYPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   119                                  EKEYSHIFTLDOWN		equ	02Ah						;left shift key down
   120                                  EKEYPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   121                                  EKEYSLASH		equ	035h						;slash
   122                                  EKEYSHIFTRDOWN		equ	036h						;right shift key down
   123                                  EKEYALTDOWN		equ	038h						;alt key down
   124                                  EKEYCAPSDOWN		equ	03Ah						;caps-lock down
   125                                  EKEYNUMDOWN		equ	045h						;num-lock down
   126                                  EKEYSCROLLDOWN		equ	046h						;scroll-lock down
   127                                  EKEYINSERTDOWN		equ	052h						;insert down (e0 52)
   128                                  EKEYUP			equ	080h						;up
   129                                  EKEYCTRLUP		equ	09Dh						;control key up
   130                                  EKEYSHIFTLUP		equ	0AAh						;left shift key up
   131                                  EKEYSLASHUP		equ	0B5h						;slash key up
   132                                  EKEYSHIFTRUP		equ	0B6h						;right shift key up
   133                                  EKEYPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   134                                  EKEYALTUP		equ	0B8h						;alt key up
   135                                  EKEYCAPSUP		equ	0BAh						;caps-lock up
   136                                  EKEYNUMUP		equ	0C5h						;num-lock up
   137                                  EKEYSCROLLUP		equ	0C6h						;scroll-lock up
   138                                  EKEYINSERTUP		equ	0D2h						;insert up (e0 d2)
   139                                  EKEYCODEEXT0		equ	0E0h						;8042 extended scan code 0
   140                                  EKEYCODEEXT1		equ	0E1h						;8042 extended scan code 1
   141                                  ;-----------------------------------------------------------------------------------------------------------------------
   142                                  ;
   143                                  ;	8253 Programmable Interrupt Timer					EPIT...
   144                                  ;
   145                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   146                                  ;	approximately 18.2 times per second.
   147                                  ;
   148                                  ;-----------------------------------------------------------------------------------------------------------------------
   149                                  EPITDAYTICKS		equ	1800B0h						;8253 ticks per day
   150                                  ;-----------------------------------------------------------------------------------------------------------------------
   151                                  ;
   152                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   153                                  ;
   154                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   155                                  ;	external devices and signals a hardware interrupt to the CPU.
   156                                  ;
   157                                  ;-----------------------------------------------------------------------------------------------------------------------
   158                                  EPICPORTPRI		equ	020h						;8259 primary control port 0
   159                                  EPICPORTPRI1		equ	021h						;8259 primary control port 1
   160                                  EPICPORTSEC		equ	0A0h						;8259 secondary control port 0
   161                                  EPICPORTSEC1		equ	0A1h						;8259 secondary control port 1
   162                                  EPICEOI			equ	020h						;8259 non-specific EOI code
   163                                  ;-----------------------------------------------------------------------------------------------------------------------
   164                                  ;
   165                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   166                                  ;
   167                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   168                                  ;	for CGA, EGA, VGA and compatible video modes.
   169                                  ;
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ECRTPORTHI		equ	003h						;CRT controller port hi
   172                                  ECRTPORTLO		equ	0D4h						;CRT controller port lo
   173                                  ECRTCURLOCHI		equ	00Eh						;CRT cursor loc reg hi
   174                                  ECRTCURLOCLO		equ	00Fh						;CRT cursor loc reg lo
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   178                                  ;
   179                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  EFDCPORTHI		equ	003h						;FDC controller port hi
   183                                  EFDCPORTLOOUT		equ	0F2h						;FDC digital output register lo
   184                                  EFDCPORTLOSTAT		equ	0F4h						;FDC main status register lo
   185                                  EFDCSTATBUSY		equ	010h						;FDC main status is busy
   186                                  EFDCMOTOROFF		equ	00Ch						;FDC motor off / enable / DMA
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;	Motorola MC 146818 Real-Time Clock					ERTC...
   190                                  ;
   191                                  ;	The Motorola MC 146818 was the original real-time clock in PCs.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  ERTCREGPORT		equ	70h						;register select port
   195                                  ERTCDATAPORT		equ	71h						;data port
   196                                  ERTCSECONDREG		equ	00h						;second
   197                                  ERTCMINUTEREG		equ	02h						;minute
   198                                  ERTCHOURREG		equ	04h						;hour
   199                                  ERTCWEEKDAYREG		equ	06h						;weekday
   200                                  ERTCDAYREG		equ	07h						;day
   201                                  ERTCMONTHREG		equ	08h						;month
   202                                  ERTCYEARREG		equ	09h						;year of the century
   203                                  ERTCSTATUSREG		equ	0bh						;status
   204                                  ERTCCENTURYREG		equ	32h						;century
   205                                  ERTCBINARYVALS		equ	00000100b					;values are binary
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  ;
   208                                  ;	x86 Descriptor Access Codes						EACC...
   209                                  ;
   210                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   211                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   212                                  ;
   213                                  ;	0.......	Segment is not present in memory (triggers int 11)
   214                                  ;	1.......	Segment is present in memory
   215                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   216                                  ;	...0....	Segment is a system segment
   217                                  ;	...00010		Local Descriptor Table
   218                                  ;	...00101		Task Gate
   219                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   220                                  ;	...01100		Call Gate (386)
   221                                  ;	...01110		Interrupt Gate (386)
   222                                  ;	...01111		Trap Gate (386)
   223                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   224                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   225                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   226                                  ;
   227                                  ;-----------------------------------------------------------------------------------------------------------------------
   228                                  EACCLDT			equ	10000010b					;local descriptor table
   229                                  EACCTASK		equ	10000101b					;task gate
   230                                  EACCTSS			equ	10001001b					;task-state segment
   231                                  EACCGATE		equ	10001100b					;call gate
   232                                  EACCINT			equ	10001110b					;interrupt gate
   233                                  EACCTRAP		equ	10001111b					;trap gate
   234                                  EACCDATA		equ	10010011b					;upward writable data
   235                                  EACCCODE		equ	10011011b					;non-conforming readable code
   236                                  ;-----------------------------------------------------------------------------------------------------------------------
   237                                  ;
   238                                  ;	BIOS Interrupts and Functions						EBIOS...
   239                                  ;
   240                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   241                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   242                                  ;
   243                                  ;-----------------------------------------------------------------------------------------------------------------------
   244                                  EBIOSINTVIDEO		equ	010h						;BIOS video services interrupt
   245                                  EBIOSFNTTYOUTPUT	equ	00Eh						;BIOS video TTY output function
   246                                  EBIOSINTDISKETTE	equ	013h						;BIOS diskette services interrupt
   247                                  EBIOSINTMISC		equ	015h						;BIOS miscellaneous services interrupt
   248                                  EBIOSFNINITPROTMODE	equ	089h						;BIOS initialize protected mode fn
   249                                  EBIOSINTKEYBOARD	equ	016h						;BIOS keyboard services interrupt
   250                                  EBIOSFNKEYSTATUS	equ	001h						;BIOS keyboard status function
   251                                  ;-----------------------------------------------------------------------------------------------------------------------
   252                                  ;
   253                                  ;	ASCII									EASCII...
   254                                  ;
   255                                  ;-----------------------------------------------------------------------------------------------------------------------
   256                                  EASCIIBACKSPACE		equ	8						;ASCII backspace
   257                                  EASCIILINEFEED		equ	10						;ASCII line feed
   258                                  EASCIIRETURN		equ	13						;ASCII carriage return
   259                                  EASCIIESCAPE		equ	27						;ASCII escape
   260                                  EASCIISPACE		equ	32						;ASCII space
   261                                  EASCIIUPPERA		equ	65						;ASCII 'A'
   262                                  EASCIIUPPERZ		equ	90						;ASCII 'Z'
   263                                  EASCIILOWERA		equ	97						;ASCII 'a'
   264                                  EASCIILOWERZ		equ	122						;ASCII 'z'
   265                                  EASCIITILDE		equ	126						;ASCII '~'
   266                                  EASCIICASE		equ	00100000b					;ASCII case bit
   267                                  EASCIICASEMASK		equ	11011111b					;ASCII case mask
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;	Boot Sector and Loader Constants
   271                                  ;
   272                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   273                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   277                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   278                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   279                                  EBOOTSTACKTOP		equ	400h						;boot sector stack top relative to DS
   280                                  EMAXTRIES		equ	5						;max read retries
   281                                  ;-----------------------------------------------------------------------------------------------------------------------
   282                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   283                                  ;-----------------------------------------------------------------------------------------------------------------------
   284                                  ESELDAT			equ	18h						;kernel data selector
   285                                  ESELCGA			equ	20h						;cga video selector
   286                                  ESELOSCODE		equ	48h						;os kernel selector
   287                                  ;-----------------------------------------------------------------------------------------------------------------------
   288                                  ;	LDT Selectors								ESEL...
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  ESELMQ			equ	2Ch						;console task message queue
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  ;	Kernel Constants							EKRN...
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  EKRNDESLEN		equ	8						;size of descriptor
   295                                  EKRNADR			equ	1000h						;kernel base address
   296                                  EKRNSEG			equ	(EKRNADR >> 4)					;kernel base segment
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  ;	Keyboard Flags								EKEY...
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  EKEYCTRLLEFT		equ	00000001b					;left control
   301                                  EKEYSHIFTLEFT		equ	00000010b					;left shift
   302                                  EKEYALTLEFT		equ	00000100b					;left alt
   303                                  EKEYCTRLRIGHT		equ	00001000b					;right control
   304                                  EKEYSHIFTRIGHT		equ	00010000b					;right shift
   305                                  EKEYSHIFT		equ	00010010b					;left or right shift
   306                                  EKEYALTRIGHT		equ	00100000b					;right alt
   307                                  EKEYLOCKSCROLL		equ	00000001b					;scroll-lock flag
   308                                  EKEYLOCKNUM		equ	00000010b					;num-lock flag
   309                                  EKEYLOCKCAPS		equ	00000100b					;cap-lock flag
   310                                  EKEYTIMEOUT		equ	10000000b					;controller timeout
   311                                  ;-----------------------------------------------------------------------------------------------------------------------
   312                                  ;	Console Constants							ECON...
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  ECONCOLS		equ	80						;columns per row
   315                                  ECONROWS		equ	24						;console rows
   316                                  ECONOIAROW		equ	24						;operator information area row
   317                                  ECONCOLBYTES		equ	2						;bytes per column
   318                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   319                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   320                                  ECONCLEARDWORD		equ	07200720h					;attribute and ASCII space
   321                                  ECONOIADWORD		equ	70207020h					;attribute and ASCII space
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;	Kernel Message Identifiers						EMSG...
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  EMSGKEYDOWN		equ	41000000h					;message: key-down
   326                                  EMSGKEYUP		equ	41010000h					;message: key-up
   327                                  EMSGKEYCHAR		equ	41020000h					;message: character
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;
   330                                  ;	Structures
   331                                  ;
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  ;
   335                                  ;	DATETIME
   336                                  ;
   337                                  ;	The DATETIME structure stores date and time values from the real-time clock.
   338                                  ;
   339                                  ;-----------------------------------------------------------------------------------------------------------------------
   340                                  struc			DATETIME
   341 00000000 <res 00000001>          .second			resb	1						;seconds
   342 00000001 <res 00000001>          .minute			resb	1						;minutes
   343 00000002 <res 00000001>          .hour			resb	1						;hours
   344 00000003 <res 00000001>          .weekday		resb	1						;day of week
   345 00000004 <res 00000001>          .day			resb	1						;day of month
   346 00000005 <res 00000001>          .month			resb	1						;month of year
   347 00000006 <res 00000001>          .year			resb	1						;year of century
   348 00000007 <res 00000001>          .century		resb	1						;century
   349                                  EDATETIMEL		equ	($-.second)
   350                                  endstruc
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;
   353                                  ;	MQUEUE
   354                                  ;
   355                                  ;	The MQUEUE structure maps memory used for a message queue.
   356                                  ;
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  struc			MQUEUE
   359 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   360 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   361 00000008 <res 000003F8>          MQData			resd	254						;message queue
   362                                  endstruc
   363                                  ;-----------------------------------------------------------------------------------------------------------------------
   364                                  ;
   365                                  ;	OSDATA
   366                                  ;
   367                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   368                                  ;	used by the BIOS.
   369                                  ;
   370                                  ;-----------------------------------------------------------------------------------------------------------------------
   371                                  struc			OSDATA
   372 00000000 <res 00000400>          			resb	400h						;000 real mode interrupt vectors
   373 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   374 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   375 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   376 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   377 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   378 0000040A <res 00000002>          			resw	1						;40A LPT2 port address
   379 0000040C <res 00000002>          			resw	1						;40C LPT3 port address
   380 0000040E <res 00000002>          			resw	1						;40E LPT4 port address
   381 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   382 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   383 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12H
   384 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   385 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   386 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   387 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   388 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   389 0000041A <res 00000002>          			resw	1						;41A keyboard buffer head offset
   390 0000041C <res 00000002>          			resw	1						;41C keyboard buffer tail offset
   391 0000041E <res 00000020>          			resb	32						;41E keyboard buffer
   392 0000043E <res 00000001>          wbFDCStatus		resb	1						;43E drive recalibration status
   393 0000043F <res 00000001>          wbFDCControl		resb	1						;43F FDC motor status/control byte
   394 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   395 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   396 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   397 00000449 <res 00000001>          			resb	1						;449 current video mode
   398 0000044A <res 00000002>          			resw	1						;44A screen columns
   399 0000044C <res 00000002>          			resw	1						;44C video regen buffer size
   400 0000044E <res 00000002>          			resw	1						;44E current video page offset
   401 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   402 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   403 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   404 00000462 <res 00000001>          			resb	1						;462 active display page number
   405 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   406 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   407 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   408 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   409 00000469 <res 00000003>          			resb	3						;469 vague
   410 0000046C <res 00000004>          wfClockTicks		resd	1						;46C clock ticks
   411 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   412 00000471 <res 00000001>          			resb	1						;471 bios break flag
   413 00000472 <res 00000002>          			resw	1						;472 soft reset
   414 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   415 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   416 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   417 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   418 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   419 0000047C <res 00000004>          			resb	4						;47C COM timeout values
   420 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   421 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   422 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   423 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   424 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   425 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   426 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   427 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   428 0000048A <res 00000001>          			resb	1						;48A EGA+ display combination code
   429 0000048B <res 00000001>          			resb	1						;48B last diskette data rate selected
   430 0000048C <res 00000001>          			resb	1						;48C hard disk status from controller
   431 0000048D <res 00000001>          			resb	1						;48D hard disk error from controller
   432 0000048E <res 00000001>          			resb	1						;48E hard disk interrupt control flag
   433 0000048F <res 00000001>          			resb	1						;48F combination hard/floppy disk card
   434 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   435 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   436 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   437 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   438 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   439 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   440 0000049C <res 00000004>          			resd	1						;49C user wait time-out value in microseconds
   441 000004A0 <res 00000001>          			resb	1						;4A0 RTC wait function flag
   442 000004A1 <res 00000001>          			resb	1						;4A1 LANA DMA channel flags
   443 000004A2 <res 00000002>          			resb	2						;4A2 status of LANA 0,1
   444 000004A4 <res 00000004>          			resd	1						;4A4 saved hard disk interrupt vector
   445 000004A8 <res 00000004>          			resd	1						;4A8 BIOS video save/override pointer table addr
   446 000004AC <res 00000008>          			resb	8						;4AC reserved
   447 000004B4 <res 00000001>          			resb	1						;4B4 keyboard NMI control flags
   448 000004B5 <res 00000004>          			resd	1						;4B5 keyboard break pending flags
   449 000004B9 <res 00000001>          			resb	1						;4B9 Port 60 single byte queue
   450 000004BA <res 00000001>          			resb	1						;4BA scan code of last key
   451 000004BB <res 00000001>          			resb	1						;4BB NMI buffer head pointer
   452 000004BC <res 00000001>          			resb	1						;4BC NMI buffer tail pointer
   453 000004BD <res 00000010>          			resb	16						;4BD NMI scan code buffer
   454 000004CD <res 00000001>          			resb	1						;4CD unknown
   455 000004CE <res 00000002>          			resw	1						;4CE day counter
   456 000004D0 <res 00000020>          			resb	32						;4D0 unknown
   457 000004F0 <res 00000010>          			resb	16						;4F0 intra-app comm area
   458 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   459 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   460 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   461 00000505 <res 0000000A>          			resb	10						;505 POST work area
   462 0000050F <res 00000001>          			resb	1						;50F BASIC shell flag
   463 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   464 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   465 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   466 0000051A <res 00000004>          			resd	1						;51A BASIC INT 24 interrupt handler
   467 0000051E <res 00000002>          			resw	1						;51E unknown
   468 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   469 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1E)
   470 00000530 <res 00000004>          			resb	4						;530 MODE command
   471 00000534 <res 000001CC>          			resb	460						;534 unused
   472 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  ;
   475                                  ;	OS Variables								@disk: N/A	@mem: 000800
   476                                  ;
   477                                  ;	These operating system variables are system global. They are defined at low memory address 800h and are
   478                                  ;	accessible by any kernel task or interrupt.
   479                                  ;
   480                                  ;-----------------------------------------------------------------------------------------------------------------------
   481                                  ECONDATA		equ	($)
   482 00000800 <res 00000004>          wfConsoleMemAddr	resd	1						;console memory address
   483 00000804 <res 00000001>          wbConsoleColumn		resb	1						;console column
   484 00000805 <res 00000001>          wbConsoleRow		resb	1						;console row
   485 00000806 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   486 00000807 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   487 00000808 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   488 00000809 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   489 0000080A <res 00000001>          wbConsoleScan1		resb	1						;scan code
   490 0000080B <res 00000001>          wbConsoleScan2		resb	1						;scan code
   491 0000080C <res 00000001>          wbConsoleScan3		resb	1						;scan code
   492 0000080D <res 00000001>          wbConsoleScan4		resb	1						;scan code
   493 0000080E <res 00000001>          wbConsoleScan5		resb	1						;scan code
   494 0000080F <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   495 00000810 <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   496 00000860 <res 00000050>          wzConsoleToken		resb	80						;token buffer
   497 000008B0 <res 00000050>          wzConsoleOutBuffer	resb	80						;response output buffer
   498 00000900 <res 00000008>          wsConsoleDateTime	resb	EDATETIMEL					;date-time buffer
   499                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   500                                  endstruc
   501                                  ;-----------------------------------------------------------------------------------------------------------------------
   502                                  ;
   503                                  ;	Macros
   504                                  ;
   505                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   506                                  ;
   507                                  ;-----------------------------------------------------------------------------------------------------------------------
   508                                  %macro			mint	1
   509                                  _%1			equ	($-$$) / EKRNDESLEN
   510                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   511                                  %endmacro
   512                                  %macro			mtrap	1
   513                                  _%1			equ	($-$$) / EKRNDESLEN
   514                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   515                                  %endmacro
   516                                  %macro			menter	1
   517                                  ?%1			equ	($-$$)
   518                                  %endmacro
   519                                  %macro			tsvce	1
   520                                  e%1			equ	($-tsvc)/4
   521                                  			dd	%1
   522                                  %endmacro
   523                                  %ifdef BUILDBOOT
   524                                  ;-----------------------------------------------------------------------------------------------------------------------
   525                                  ;
   526                                  ;	Boot Sector Code							@disk: 000000	@mem: 007c00
   527                                  ;
   528                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   529                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   530                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   531                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   532                                  ;
   533                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   534                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   535                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   536                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   537                                  ;	immediately followed by a disk parameter table.
   538                                  ;
   539                                  ;-----------------------------------------------------------------------------------------------------------------------
   540                                  			cpu	8086						;assume minimal CPU
   541                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   542                                  			bits	16						;16-bit code at power-up
   543                                  %ifdef BUILDPREP
   544                                  Boot			jmp	word Prep					;jump to preparation code
   545                                  %else
   546                                  Boot			jmp	word Boot.10					;jump over parameter table
   547                                  %endif
   548                                  ;-----------------------------------------------------------------------------------------------------------------------
   549                                  ;
   550                                  ;	Disk Parameter Table
   551                                  ;
   552                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   553                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   554                                  ;
   555                                  ;-----------------------------------------------------------------------------------------------------------------------
   556                                  			db	"CustomOS"					;eight-byte label
   557                                  cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   558                                  cbClusterSectors	db	1						;sectors per cluster
   559                                  cwReservedSectors	dw	1						;reserved sectors
   560                                  cbFatCount		db	2						;file allocation table copies
   561                                  cwDirEntries		dw	224						;max directory entries
   562                                  cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   563                                  cbDiskType		db	0F0h						;1.44MB
   564                                  cwFatSectors		dw	9						;sectors per FAT copy
   565                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   566                                  cwTrackSectors		dw	18						;sectors per track (as word)
   567                                  cwDiskSides		dw	2						;sides per disk
   568                                  cwSpecialSectors	dw	0						;special sectors
   569                                  ;
   570                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   571                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   572                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   573                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   574                                  ;	given several possible starting values for CS:IP.
   575                                  ;
   576                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   577                                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   578                                  .@20			equ	$-$$						;.@20 = 021h
   579                                  .20			pop	ax						;AX =	   7c21     c21    21
   580                                  			sub	ax,.@20						;BX =	   7c00     c00     0
   581                                  			mov	cl,4						;shift count
   582                                  			shr	ax,cl						;AX =	    7c0      c0     0
   583                                  			mov	bx,cs						;BX =	      0     700   7c0
   584                                  			add	bx,ax						;BX =	    7c0     7c0   7c0
   585                                  ;
   586                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we need DS and ES
   587                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   588                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   589                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   590                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   591                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   592                                  ;
   593                                  			sub	bx,16						;BX = 07b0
   594                                  			mov	ds,bx						;DS = 07b0 = psp
   595                                  			mov	es,bx						;ES = 07b0 = psp
   596                                  			mov	ss,bx						;SS = 07b0 = psp
   597                                  			mov	sp,EBOOTSTACKTOP				;SP = 0400
   598                                  ;
   599                                  ;	Our boot addressability is now set up according to the following diagram.
   600                                  ;
   601                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   602                                  ;				|  Unused (DOS Program Segment Prefix)		|
   603                                  ;			007c00	+-----------------------------------------------+ DS:0100
   604                                  ;				|  Boot Sector Code (vstart=100h)		|
   605                                  ;				|						|
   606                                  ;			007e00	+-----------------------------------------------+ DS:0300
   607                                  ;				|  Boot Stack					|
   608                                  ;	SS:SP --------> 007f00	+-----------------------------------------------+ DS:0400
   609                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   610                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   611                                  ;				|						|
   612                                  ;			009100	+-----------------------------------------------+ DS:1600
   613                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   614                                  ;				|						|
   615                                  ;			009300	+-----------------------------------------------+ DS:1800
   616                                  ;
   617                                  ;	On entry, DL indicates the drive being booted from.
   618                                  ;
   619                                  			mov	[wbDrive],dl					;[drive] = drive being booted from
   620                                  ;
   621                                  ;	Compute directory i/o buffer address.
   622                                  ;
   623                                  			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   624                                  			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   625                                  			add	ax,EBOOTSTACKTOP				;AX = 1600 = end of FAT buffer
   626                                  			mov	[wwDirBuffer],ax				;[dirbuffer] = 1600
   627                                  ;
   628                                  ;	Compute segment where os.com will be loaded.
   629                                  ;
   630                                  			shr	ax,cl						;AX = 0160
   631                                  			add	ax,bx						;AX = 0160 + 07b0 = 0910
   632                                  			sub	ax,16						;AX = 0900
   633                                  			mov	[wwLoadSegment],ax				;[loadsegment] = 0900
   634                                  ;
   635                                  ;	Write a message to the console so we know we have our addressability established.
   636                                  ;
   637                                  			mov	si,czLoadMsg					;loading message
   638                                  			call	BootPrint					;display loader message
   639                                  ;
   640                                  ;	Initialize the number of directory sectors to search.
   641                                  ;
   642                                  			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   643                                  			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   644                                  ;
   645                                  ;	Compute number of directory sectors and initialize overhead count.
   646                                  ;
   647                                  			mov	cx,ax						;CX = 00e0 = 224 entries
   648                                  			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   649                                  			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   650                                  			mov	[wwOverhead],ax					;[overhead] = 000e
   651                                  ;
   652                                  ;	Compute directory entries per sector.
   653                                  ;
   654                                  			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   655                                  			div	cx						;AX = 0010 = entries per dir sector
   656                                  			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   657                                  ;
   658                                  ;	Compute first logical directory sector and update overhead count.
   659                                  ;
   660                                  			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   661                                  			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   662                                  			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   663                                  			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   664                                  			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   665                                  			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   666                                  ;
   667                                  ;	Read directory sector.
   668                                  ;
   669                                  .30			mov	al,1						;sector count
   670                                  			mov	[wbReadCount],al				;[readcount] = 01
   671                                  			mov	bx,[wwDirBuffer]				;BX = 1600
   672                                  			call	ReadSector					;read sector into es:bx
   673                                  ;
   674                                  ;	Setup variables to search this directory sector.
   675                                  ;
   676                                  			mov	ax,[wwEntriesLeft]				;directory entries to search
   677                                  			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   678                                  			jna	.40						;no, continue
   679                                  			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   680                                  .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   681                                  			mov	si,cbKernelProgram				;program name
   682                                  			mov	di,[wwDirBuffer]				;DI = 1600
   683                                  ;
   684                                  ;	Loop through directory sectors searching for kernel program.
   685                                  ;
   686                                  .50			push	si						;save kernel name address
   687                                  			push	di						;save dir i/o buffer address
   688                                  			mov	cx,11						;length of 8+3 name
   689                                  			cld							;forward strings
   690                                  			repe	cmpsb						;compare entry name
   691                                  			pop	di						;restore dir i/o buffer address
   692                                  			pop	si						;restore kernel name address
   693                                  			je	.60						;exit loop if found
   694                                  			add	di,[cwEntryLen]					;point to next dir entry
   695                                  			dec	ax						;decrement remaining entries
   696                                  			jnz	.50						;next entry
   697                                  ;
   698                                  ;	Repeat search if we are not at the end of the directory.
   699                                  ;
   700                                  			inc	word [wwLogicalSector]				;increment logical sector
   701                                  			cmp	word [wwEntriesLeft],0				;done with directory?
   702                                  			jne	.30						;no, get next sector
   703                                  			mov	si,czNoKernel					;missing kernel message
   704                                  			jmp	BootExit					;display message and exit
   705                                  ;
   706                                  ;	If we find the kernel program in the directory, read the FAT.
   707                                  ;
   708                                  .60			mov	ax,[cwReservedSectors]				;AX = 0001
   709                                  			mov	[wwLogicalSector],ax				;start past boot sector
   710                                  			mov	ax,[cwFatSectors]				;AX = 0009
   711                                  			mov	[wbReadCount],al				;[readcount] = 09
   712                                  			mov	bx,EBOOTSTACKTOP				;BX = 0400
   713                                  			call	ReadSector					;read FAT into buffer
   714                                  ;
   715                                  ;	Get the starting cluster of the kernel program and target address.
   716                                  ;
   717                                  			mov	ax,[di+26]					;AX = starting cluster of file
   718                                  			les	bx,[wwLoadOffset]				;ES:BX = kernel load address
   719                                  ;
   720                                  ;	Read each program cluster into RAM.
   721                                  ;
   722                                  .70			push	ax						;save cluster nbr
   723                                  			sub	ax,2						;AX = cluster nbr base 0
   724                                  			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   725                                  			mov	[wbReadCount],cl				;save sectors to read
   726                                  			xor	ch,ch						;CX = sectors per cluster
   727                                  			mul	cx						;DX:AX = logical cluster sector
   728                                  			add	ax,[wwOverhead]					;AX = kernel sector nbr
   729                                  			mov	[wwLogicalSector],ax				;save logical sector nbr
   730                                  			call	ReadSector					;read sectors into es:bx
   731                                  ;
   732                                  ;	Update buffer pointer for next cluster.
   733                                  ;
   734                                  			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   735                                  			xor	ah,ah						;AX = sectors per cluster
   736                                  			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   737                                  			add	bx,ax						;BX = next cluster target address
   738                                  			pop	ax						;AX = restore cluster nbr
   739                                  ;
   740                                  ;	Compute next cluster number.
   741                                  ;
   742                                  			mov	cx,ax						;CX = cluster nbr
   743                                  			mov	di,ax						;DI = cluster nbr
   744                                  			shr	ax,1						;AX = cluster/2
   745                                  			mov	dx,ax						;DX = cluster/2
   746                                  			add	ax,dx						;AX = 2*(cluster/2)
   747                                  			add	ax,dx						;AX = 3*(cluster/2)
   748                                  			and	di,1						;get low bit
   749                                  			add	di,ax						;add one if cluster is odd
   750                                  			add	di,EBOOTSTACKTOP				;add FAT buffer address
   751                                  			mov	ax,[di]						;get cluster bytes
   752                                  ;
   753                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   754                                  ;
   755                                  			test	cl,1						;is cluster odd?
   756                                  			jz	.80						;no, skip ahead
   757                                  			mov	cl,4						;shift count
   758                                  			shr	ax,cl						;shift nybble low
   759                                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   760                                  			cmp	ax,0FFFh					;end of chain?
   761                                  			jne	.70						;no, continue
   762                                  ;
   763                                  ;	Transfer control to the operating system program.
   764                                  ;
   765                                  			db	0EAh						;jmp seg:offset
   766                                  wwLoadOffset		dw	0100h						;kernel entry offset
   767                                  wwLoadSegment		dw	0900h						;kernel entry segment (computed)
   768                                  ;
   769                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   770                                  ;
   771                                  ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   772                                  			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   773                                  			mov	cx,ax						;CX = sectors per cylinder
   774                                  			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   775                                  			div	cx						;AX = cylinder; DX = cyl sector
   776                                  			mov	[wbTrack],al					;[track] = cylinder
   777                                  			mov	ax,dx						;AX = cyl sector
   778                                  			div	byte [cbTrackSectors]				;AH = sector, AL = head
   779                                  			inc	ah						;AH = sector (1,2,3,...)
   780                                  			mov	[wbHead],ax					;[head]= head, [sector]= sector
   781                                  ;
   782                                  ;	Try maxtries times to read sector.
   783                                  ;
   784                                  			mov	cx,EMAXTRIES					;CX = 0005
   785                                  .10			push	bx						;save buffer address
   786                                  			push	cx						;save retry count
   787                                  			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   788                                  			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   789                                  			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   790                                  			int	EBIOSINTDISKETTE				;read sector
   791                                  			pop	cx						;restore retry count
   792                                  			pop	bx						;restore buffer address
   793                                  			jnc	BootReturn					;skip ahead if done
   794                                  			loop	.10						;retry
   795                                  ;
   796                                  ;	Handle disk error: convert to ASCII and store in error string.
   797                                  ;
   798                                  			mov	al,ah						;AL = bios error code
   799                                  			xor	ah,ah						;AX = bios error code
   800                                  			mov	dl,16						;divisor for base 16
   801                                  			div	dl						;AL = hi order, AH = lo order
   802                                  			or	ax,3030h					;apply ASCII zone bits
   803                                  			cmp	ah,3Ah						;range test ASCII numeral
   804                                  			jb	.20						;continue if numeral
   805                                  			add	ah,7						;adjust for ASCII 'A'-'F'
   806                                  .20			cmp	al,3Ah						;range test ASCII numeral
   807                                  			jb	.30						;continue if numeral
   808                                  			add	ah,7						;adjust for ASCII 'A'-'F'
   809                                  .30			mov	[wzErrorCode],ax				;store ASCII error code
   810                                  			mov	si,czErrorMsg					;error message address
   811                                  BootExit		call	BootPrint					;display messge to console
   812                                  .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   813                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   814                                  			jnz	.20						;continue if key pressed
   815                                  			sti							;enable maskable interrupts
   816                                  			hlt							;wait for interrupt
   817                                  			jmp	.10						;repeat
   818                                  .20			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   819                                  			out	EKEYPORTSTAT,al					;drive B0 low to restart
   820                                  .30			sti							;enable maskable interrupts
   821                                  			hlt							;stop until reset, int, nmi
   822                                  			jmp	.30						;loop until restart kicks in
   823                                  ;
   824                                  ;	Display text message.
   825                                  ;
   826                                  BootPrint		cld							;forward strings
   827                                  			lodsb							;load next byte at DS:SI in AL
   828                                  			test	al,al						;end of string?
   829                                  			jz	BootReturn					;... yes, exit our loop
   830                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   831                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
   832                                  			jmp	BootPrint					;repeat until done
   833                                  BootReturn		ret							;return
   834                                  ;-----------------------------------------------------------------------------------------------------------------------
   835                                  ;
   836                                  ;	Constants
   837                                  ;
   838                                  ;-----------------------------------------------------------------------------------------------------------------------
   839                                  			align	2
   840                                  cwEntryLen		dw	32						;length of directory entry
   841                                  cbKernelProgram		db	"OS      COM"					;kernel program name
   842                                  czLoadMsg		db	"Loading ...",13,10,0				;loading message
   843                                  czErrorMsg		db	"Disk error "					;error message
   844                                  wzErrorCode		db	20h,20h,0					;error code and null terminator
   845                                  czNoKernel		db	"OS.COM missing",0				;missing kernel message
   846                                  ;-----------------------------------------------------------------------------------------------------------------------
   847                                  ;
   848                                  ;	Work Areas
   849                                  ;
   850                                  ;-----------------------------------------------------------------------------------------------------------------------
   851                                  			align	2
   852                                  wwDirBuffer		dw	0						;directory i/o buffer address
   853                                  wwEntriesLeft		dw	0						;directory entries to search
   854                                  wwOverhead		dw	0						;overhead sectors
   855                                  wwSectorEntries		dw	0						;directory entries per sector
   856                                  wwLogicalSector		dw	0						;current logical sector
   857                                  wwReadCountCommand	equ	$						;read count and command
   858                                  wbReadCount		db	0						;sectors to read
   859                                  cbReadCommand		db	2						;BIOS read disk fn code
   860                                  wwDriveHead		equ	$						;drive, head (word)
   861                                  wbDrive			db	0						;drive
   862                                  wbHead			db	0						;head
   863                                  wwSectorTrack		equ	$						;sector, track (word)
   864                                  			db	0						;sector
   865                                  wbTrack			db	0						;track
   866                                  			times	510-($-$$) db 0h				;zero fill to end of sector
   867                                  			db	055h,0AAh					;end of sector signature
   868                                  %endif
   869                                  %ifdef BUILDPREP
   870                                  ;-----------------------------------------------------------------------------------------------------------------------
   871                                  ;
   872                                  ;	Diskette Preparation Code
   873                                  ;
   874                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   875                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   876                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   877                                  ;
   878                                  ;-----------------------------------------------------------------------------------------------------------------------
   879                                  ;
   880                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   881                                  ;
   882                                  Prep			mov	si,czPrepMsg10					;starting message address
   883                                  			call	BootPrint					;display message
   884                                  ;
   885                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   886                                  ;
   887                                  .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   888                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   889                                  			jnz	.12						;continue if key pressed
   890                                  			sti							;enable interrupts
   891                                  			hlt							;wait for interrupt
   892                                  			jmp	.10						;repeat
   893                                  .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   894                                  			je	.15						;yes, branch
   895                                  			cmp	al,EASCIIESCAPE					;Escape key pressed?
   896                                  			jne	.10						;no, repeat
   897                                  			jmp	.90						;yes, exit program
   898                                  ;
   899                                  ;	Display writing-sector message and patch the JMP instruction.
   900                                  ;
   901                                  .15			mov	si,czPrepMsg12					;writing-sector message address
   902                                  			call	BootPrint					;display message
   903                                  			mov	bx,Boot+1					;address of JMP instruction operand
   904                                  			mov	ax,01Bh						;address past disk parameter table
   905                                  			mov	[bx],ax						;update the JMP instruction
   906                                  ;
   907                                  ;	Try to read the boot sector.
   908                                  ;
   909                                  			mov	cx,EMAXTRIES					;try up to five times
   910                                  .20			push	cx						;save remaining tries
   911                                  			mov	bx,wcPrepInBuf					;input buffer address
   912                                  			mov	dx,0						;head zero, drive zero
   913                                  			mov	cx,1						;track zero, sector one
   914                                  			mov	ax,0201h					;read one sector
   915                                  			int	EBIOSINTDISKETTE				;attempt the read
   916                                  			pop	cx						;restore remaining retries
   917                                  			jnc	.30						;skip ahead if successful
   918                                  			loop	.20						;try again
   919                                  			mov	si,czPrepMsg20					;read-error message address
   920                                  			jmp	.50						;branch to error routine
   921                                  ;
   922                                  ;	Copy diskette parms from input buffer to output buffer.
   923                                  ;
   924                                  .30			mov	si,wcPrepInBuf					;input buffer address
   925                                  			add	si,11						;skip over JMP and system ID
   926                                  			mov	di,Boot						;output buffer address
   927                                  			add	di,11						;skip over JMP and system ID
   928                                  			mov	cx,19						;length of diskette parameters
   929                                  			cld							;forward string copies
   930                                  			rep	movsb						;copy diskette parameters
   931                                  ;
   932                                  ;	Try to write boot sector to diskette.
   933                                  ;
   934                                  			mov	cx,EMAXTRIES					;try up to five times
   935                                  .40			push	cx						;save remaining tries
   936                                  			mov	bx,Boot						;output buffer address
   937                                  			mov	dx,0						;head zero, drive zero
   938                                  			mov	cx,1						;track zero, sector one
   939                                  			mov	ax,0301h					;write one sector
   940                                  			int	EBIOSINTDISKETTE				;attempt the write
   941                                  			pop	cx						;restore remaining retries
   942                                  			jnc	.80						;skip ahead if successful
   943                                  			loop	.40						;try again
   944                                  			mov	si,czPrepMsg30					;write-error message address
   945                                  ;
   946                                  ;	Convert the error code to ASCII and display the error message.
   947                                  ;
   948                                  .50			push	ax						;save error code
   949                                  			mov	al,ah						;copy error code
   950                                  			mov	ah,0						;AX = error code
   951                                  			mov	dl,10h						;hexadecimal divisor
   952                                  			idiv	dl						;AL = hi-order, AH = lo-order
   953                                  			or	ax,3030h					;add ASCII zone digits
   954                                  			cmp	ah,3Ah						;AH ASCII numeral?
   955                                  			jb	.60						;yes, continue
   956                                  			add	ah,7						;no, make ASCII 'A'-'F'
   957                                  .60			cmp	al,3Ah						;al ASCII numeral?
   958                                  			jb	.70						;yes, continue
   959                                  			add	al,7						;no, make ASCII
   960                                  .70			mov	[si+17],ax					;put ASCII error code in message
   961                                  			call	BootPrint					;write error message
   962                                  			pop	ax						;restore error code
   963                                  ;
   964                                  ;	Display the completion message.
   965                                  ;
   966                                  .80			mov	si,czPrepMsgOK					;assume successful completion
   967                                  			mov	al,ah						;BIOS return code
   968                                  			cmp	al,0						;success?
   969                                  			je	.85						;yes, continue
   970                                  			mov	si,czPrepMsgErr1				;disk parameter error message
   971                                  			cmp	al,1						;disk parameter error?
   972                                  			je	.85						;yes, continue
   973                                  			mov	si,czPrepMsgErr2				;address mark not found message
   974                                  			cmp	al,2						;address mark not found?
   975                                  			je	.85						;yes, continue
   976                                  			mov	si,czPrepMsgErr3				;protected disk message
   977                                  			cmp	al,3						;protected disk?
   978                                  			je	.85						;yes, continue
   979                                  			mov	si,czPrepMsgErr6				;diskette removed message
   980                                  			cmp	al,6						;diskette removed?
   981                                  			je	.85						;yes, continue
   982                                  			mov	si,czPrepMsgErr80				;drive timed out message
   983                                  			cmp	al,80H						;drive timed out?
   984                                  			je	.85						;yes, continue
   985                                  			mov	si,czPrepMsgErrXX				;unknown error message
   986                                  .85			call	BootPrint					;display result message
   987                                  .90			mov	ax,4C00H					;terminate with zero result code
   988                                  			int	21h						;terminate DOS program
   989                                  			ret							;return (should not execute)
   990                                  ;-----------------------------------------------------------------------------------------------------------------------
   991                                  ;
   992                                  ;	Diskette Preparation Messages
   993                                  ;
   994                                  ;-----------------------------------------------------------------------------------------------------------------------
   995                                  czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   996                                  			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   997                                  			db	13,10
   998                                  			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   999                                  			db	13,10,"will load the operating system into memory when the computer is restarted."
  1000                                  			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1001                                  			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
  1002                                  			db	13,10,0
  1003                                  czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
  1004                                  			db	13,10,0
  1005                                  czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1006                                  			db	13,10,0
  1007                                  czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1008                                  			db	13,10,0
  1009                                  czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1010                                  			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1011                                  			db	13,10,0
  1012                                  czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
  1013                                  			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
  1014                                  			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1015                                  			db	13,10,"and retry."
  1016                                  			db	13,10,0
  1017                                  czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
  1018                                  			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1019                                  			db	13,10,"using another diskette."
  1020                                  			db	13,10,0
  1021                                  czPrepMsgErr3		db	13,10,"(03) Protected Disk"
  1022                                  			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1023                                  			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1024                                  			db	13,10,0
  1025                                  czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
  1026                                  			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
  1027                                  			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1028                                  			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1029                                  			db	13,10,"is properly inserted in the diskette drive."
  1030                                  			db	13,10,0
  1031                                  czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
  1032                                  			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1033                                  			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
  1034                                  			db	13,10,0
  1035                                  czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
  1036                                  			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1037                                  			db	13,10,"your computer's technical reference for a description of this error code."
  1038                                  			db	13,10,0
  1039                                  wcPrepInBuf		equ	$
  1040                                  %endif
  1041                                  %ifdef BUILDDISK
  1042                                  ;-----------------------------------------------------------------------------------------------------------------------
  1043                                  ;
  1044                                  ;	File Allocation Tables
  1045                                  ;
  1046                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1047                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1048                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1049                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1050                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1051                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1052                                  ;	the last cluster in the chain.
  1053                                  ;
  1054                                  ;	Every three bytes encode two FAT entries as follows:
  1055                                  ;
  1056                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1057                                  ;
  1058                                  ;-----------------------------------------------------------------------------------------------------------------------
  1059                                  ;-----------------------------------------------------------------------------------------------------------------------
  1060                                  ;
  1061                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1062                                  ;
  1063                                  ;-----------------------------------------------------------------------------------------------------------------------
  1064                                  section			fat1							;first copy of FAT
  1065                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1066                                  			db	005h,060h,000h,	007h,080h,000h
  1067                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1068                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1069                                  			db	011h,020h,001h,	013h,040h,001h
  1070                                  			db	015h,060h,001h,	017h,080h,001h
  1071                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1072                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1073                                  			db	021h,020h,002h,	023h,040h,002h
  1074                                  			db	025h,060h,002h,	027h,080h,002h
  1075                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1076                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1077                                  ;-----------------------------------------------------------------------------------------------------------------------
  1078                                  ;
  1079                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1080                                  ;
  1081                                  ;-----------------------------------------------------------------------------------------------------------------------
  1082                                  section			fat2							;second copy of FAT
  1083                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1084                                  			db	005h,060h,000h,	007h,080h,000h
  1085                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1086                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1087                                  			db	011h,020h,001h,	013h,040h,001h
  1088                                  			db	015h,060h,001h,	017h,080h,001h
  1089                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1090                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1091                                  			db	021h,020h,002h,	023h,040h,002h
  1092                                  			db	025h,060h,002h,	027h,080h,002h
  1093                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1094                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1095                                  ;-----------------------------------------------------------------------------------------------------------------------
  1096                                  ;
  1097                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1098                                  ;
  1099                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1100                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1101                                  ;	copy.
  1102                                  ;
  1103                                  ;-----------------------------------------------------------------------------------------------------------------------
  1104                                  section			dir							;diskette directory
  1105                                  			db	"OS      COM"					;file name (must contain spaces)
  1106                                  			db	20h						;attribute (archive bit set)
  1107                                  			times	10 db 0;					;unused
  1108                                  			dw	0h						;time
  1109                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1110                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1111                                  			dw	2						;first cluster
  1112                                  			dd	5200h						;file size
  1113                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1114                                  %endif
  1115                                  %ifdef BUILDCOM
  1116                                  ;-----------------------------------------------------------------------------------------------------------------------
  1117                                  ;
  1118                                  ;	OS.COM
  1119                                  ;
  1120                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1121                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1122                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1123                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1124                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1125                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1126                                  ;
  1127                                  ;	Our loader addressability is set up according to the following diagram.
  1128                                  ;
  1129                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1130                                  ;				|  Boot Sector & Loader Stack Area		|
  1131                                  ;				|						|
  1132                                  ;	SS:SP -------->	007f00	+-----------------------------------------------+ SS:0400
  1133                                  ;
  1134                                  ;
  1135                                  ;	CS,DS,ES ----->	009000	+-----------------------------------------------+ CS:0000
  1136                                  ;				|  Unused (DOS Program Segment Prefix)		|
  1137                                  ;	CS:IP -------->	009100	+-----------------------------------------------+ CS:0100
  1138                                  ;				|  Loader Code					|
  1139                                  ;				|						|
  1140                                  ;			009300	+-----------------------------------------------+ CS:0200
  1141                                  ;
  1142                                  ;-----------------------------------------------------------------------------------------------------------------------
  1143                                  ;-----------------------------------------------------------------------------------------------------------------------
  1144                                  ;
  1145                                  ;	OS Loader								@disk: 004200	@mem: 009100
  1146                                  ;
  1147                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1148                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above. The
  1149                                  ;	size of the loader is limited to 65,280 bytes since the bootstrap will copy the loader into memory at 0:9100.
  1150                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1151                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1152                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1153                                  ;	starts the kernel task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1154                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1155                                  ;	registers.
  1156                                  ;
  1157                                  ;-----------------------------------------------------------------------------------------------------------------------
  1158                                  			cpu	8086						;assume minimal CPU
  1159                                  section			loader	vstart=100h					;use .COM compatible addressing
  1160                                  			bits	16						;this is 16-bit code
  1161 00000000 0E                      Loader			push	cs						;use the code segment
  1162 00000001 1F                      			pop	ds						;...as our data segment
  1163 00000002 0E                      			push	cs						;use the code segment
  1164 00000003 07                      			pop	es						;...as our extra segment
  1165                                  ;
  1166                                  ;	Write a message to the console so we know we have our addressability established.
  1167                                  ;
  1168 00000004 BE[5B01]                			mov	si,czStartingMsg				;starting message
  1169 00000007 E8A600                  			call	PutTTYString					;display loader message
  1170                                  ;
  1171                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1172                                  ;
  1173 0000000A E88300                  			call	GetCPUType					;AL = cpu type
  1174 0000000D BE[C800]                			mov	si,czCPUErrorMsg				;loader error message
  1175 00000010 3C03                    			cmp	al,3						;80386+?
  1176 00000012 7267                    			jb	LoaderExit					;no, exit with error message
  1177                                  			cpu	386						;allow 80386 instructions
  1178 00000014 BE[3301]                			mov	si,czCPUOKMsg					;cpu ok message
  1179 00000017 E89600                  			call	PutTTYString					;display message
  1180                                  ;
  1181                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1182                                  ;
  1183 0000001A BE0003                  			mov	si,300h						;GDT offset
  1184 0000001D 8CC8                    			mov	ax,cs						;AX:SI = gdt source
  1185 0000001F C1C004                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1186 00000022 88C1                    			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1187 00000024 24F0                    			and	al,0F0h						;AL = phys addr bits 11-0
  1188 00000026 80E10F                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1189 00000029 894432                  			mov	word [si+30h+2],ax				;lo-order loader code (0-15)
  1190 0000002C 884C34                  			mov	byte [si+30h+4],cl				;lo-order loader code (16-23)
  1191 0000002F BE[3C01]                			mov	si,czGDTOKMsg					;GDT prepared message
  1192 00000032 E87B00                  			call	PutTTYString					;display message
  1193                                  ;
  1194                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1195                                  ;
  1196 00000035 680001                  			push	EKRNSEG						;use kernel segment ...
  1197 00000038 07                      			pop	es						;... as target segment
  1198 00000039 31FF                    			xor	di,di						;ES:DI = target address
  1199 0000003B BE0003                  			mov	si,300h						;DS:SI = source address
  1200 0000003E B90050                  			mov	cx,5000h					;CX = kernel size
  1201 00000041 FC                      			cld							;forward strings
  1202 00000042 F3A4                    			rep	movsb						;copy kernel image
  1203 00000044 BE[4B01]                			mov	si,czKernelLoadedMsg				;kernel moved message
  1204 00000047 E86600                  			call	PutTTYString					;display message
  1205                                  ;
  1206                                  ;	Switch to protected mode.
  1207                                  ;
  1208 0000004A 31F6                    			xor	si,si						;ES:SI = gdt addr
  1209 0000004C 8ED6                    			mov	ss,si						;protected mode ss
  1210 0000004E BC0010                  			mov	sp,1000h					;SS:SP = protected mode ss:sp
  1211 00000051 B489                    			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1212 00000053 BB2820                  			mov	bx,2028h					;BH,BL = IRQ int bases
  1213 00000056 BA1F00                  			mov	dx,001Fh					;outer delay loop count
  1214 00000059 B9FFFF                  .10			mov	cx,0FFFFh					;inner delay loop count
  1215 0000005C E2FE                    			loop	$						;wait out pending interrupts
  1216 0000005E 4A                      			dec	dx						;restore outer loop count
  1217 0000005F 75F8                    			jnz	.10						;continue outer loop
  1218 00000061 CD15                    			int	EBIOSINTMISC					;call BIOS to set protected mode
  1219                                  ;
  1220                                  ;	Enable hardware and maskable interrupts
  1221                                  ;
  1222 00000063 30C0                    			xor	al,al						;enable all registers code
  1223 00000065 E621                    			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1224 00000067 E6A1                    			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1225 00000069 FB                      			sti							;enable maskable interrupts
  1226                                  ;
  1227                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1228                                  ;
  1229 0000006A 2E0F001E[BE00]          			ltr	[cs:cwLoaderTSS]				;load task register
  1230 00000070 2E0F0016[C000]          			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1231 00000076 EA00005800              			jmp	0058h:0						;jump to task state segment selector
  1232                                  ;-----------------------------------------------------------------------------------------------------------------------
  1233                                  ;
  1234                                  ;	Routine:	LoaderExit
  1235                                  ;
  1236                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1237                                  ;
  1238                                  ;	In:		DS:SI	string address
  1239                                  ;
  1240                                  ;-----------------------------------------------------------------------------------------------------------------------
  1241 0000007B E83200                  LoaderExit		call	PutTTYString					;display error message
  1242                                  ;
  1243                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1244                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1245                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1246                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1247                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1248                                  ;
  1249 0000007E B401                    .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1250 00000080 CD16                    			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1251 00000082 7504                    			jnz	.40						;exit if key pressed
  1252 00000084 FB                      			sti							;enable maskable interrupts
  1253 00000085 F4                      			hlt							;wait for interrupt
  1254 00000086 EBF6                    			jmp	.30						;repeat until keypress
  1255                                  ;
  1256                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1257                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1258                                  ;	HLT until the system resets.
  1259                                  ;
  1260 00000088 B0FE                    .40			mov	al,EKEYCMDRESET					;8042 pulse output port pin
  1261 0000008A E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
  1262 0000008C FB                      .50			sti							;enable maskable interrupts
  1263 0000008D F4                      			hlt							;stop until reset, int, nmi
  1264 0000008E EBFC                    			jmp	.50						;loop until restart kicks in
  1265                                  ;-----------------------------------------------------------------------------------------------------------------------
  1266                                  ;
  1267                                  ;	Routine:	GetCPUType
  1268                                  ;
  1269                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1270                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1271                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1272                                  ;
  1273                                  ;	Output:		AX	0 = 808x, v20, etc.
  1274                                  ;				1 = 80186
  1275                                  ;				2 = 80286
  1276                                  ;				3 = 80386
  1277                                  ;
  1278                                  ;-----------------------------------------------------------------------------------------------------------------------
  1279 00000090 B001                    GetCPUType		mov	al,1						;AL = 1
  1280 00000092 B120                    			mov	cl,32						;shift count
  1281 00000094 D2E8                    			shr	al,cl						;try a 32-bit shift
  1282 00000096 08C0                    			or	al,al						;did the shift happen?
  1283 00000098 7415                    			jz	.10						;yes, cpu is 808x, v20, etc.
  1284                                  			cpu	186
  1285 0000009A 54                      			push	sp						;save stack pointer
  1286 0000009B 59                      			pop	cx						;...into cx
  1287 0000009C 39E1                    			cmp	cx,sp						;did sp decrement before push?
  1288 0000009E 750F                    			jne	.10						;yes, cpu is 80186
  1289                                  			cpu	286
  1290 000000A0 40                      			inc	ax						;AX = 2
  1291 000000A1 0F0106[C200]            			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1292 000000A6 8A0E[C700]              			mov	cl,[cbLoaderGDTHiByte]				;cl = hi-order byte
  1293 000000AA FEC1                    			inc	cl						;was hi-byte of GDTR 0xff?
  1294 000000AC 7401                    			jz	.10						;yes, cpu is 80286
  1295 000000AE 40                      			inc	ax						;AX = 3
  1296 000000AF C3                      .10			ret							;return
  1297                                  ;-----------------------------------------------------------------------------------------------------------------------
  1298                                  ;
  1299                                  ;	Routine:	PutTTYString
  1300                                  ;
  1301                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1302                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1303                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1304                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1305                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1306                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1307                                  ;			registers and flags unless used to indicate return status.
  1308                                  ;
  1309                                  ;	In:		DS:SI	address of string
  1310                                  ;
  1311                                  ;-----------------------------------------------------------------------------------------------------------------------
  1312 000000B0 FC                      PutTTYString		cld							;forward strings
  1313 000000B1 AC                      			lodsb							;load next byte at DS:SI in AL
  1314 000000B2 84C0                    			test	al,al						;end of string?
  1315 000000B4 7406                    			jz	.10						;... yes, exit our loop
  1316 000000B6 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1317 000000B8 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1318 000000BA EBF4                    			jmp	PutTTYString					;repeat until done
  1319 000000BC C3                      .10			ret							;return
  1320                                  ;-----------------------------------------------------------------------------------------------------------------------
  1321                                  ;
  1322                                  ;	Loader Data
  1323                                  ;
  1324                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1325                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1326                                  ;
  1327                                  ;-----------------------------------------------------------------------------------------------------------------------
  1328 000000BD 90                      			align	2
  1329 000000BE 6800                    cwLoaderTSS		dw	0068h						;TSS selector
  1330 000000C0 6000                    cwLoaderLDT		dw	0060h						;LDT selector
  1331 000000C2 00<rept>                cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1332 000000C7 00                      cbLoaderGDTHiByte	db	0						;hi-order byte
  1333 000000C8 546865206F70657261-     czCPUErrorMsg		db	"The operating system requires an i386 "
  1333 000000D1 74696E672073797374-
  1333 000000DA 656D20726571756972-
  1333 000000E3 657320616E20693338-
  1333 000000EC 3620               
  1334 000000EE 6F72206C6174657220-     			db	"or later processor.",13,10,
  1334 000000F7 70726F636573736F72-
  1334 00000100 2E0D0A             
  1335 00000103 506C65617365207072-     			db	"Please press any key to restart the "
  1335 0000010C 65737320616E79206B-
  1335 00000115 657920746F20726573-
  1335 0000011E 746172742074686520 
  1336 00000127 636F6D70757465722E-     			db	"computer.",13,10,0
  1336 00000130 0D0A00             
  1337 00000133 435055206F6B0D0A00      czCPUOKMsg		db	"CPU ok",13,10,0
  1338 0000013C 474454207072657061-     czGDTOKMsg		db	"GDT prepared",13,10,0
  1338 00000145 7265640D0A00       
  1339 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1339 00000154 616465640D0A00     
  1340 0000015B 5374617274696E6720-     czStartingMsg		db	"Starting ...",13,10,0				;loader message
  1340 00000164 2E2E2E0D0A00       
  1341 0000016A 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
  1342 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
  1343                                  ;-----------------------------------------------------------------------------------------------------------------------
  1344                                  ;
  1345                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1346                                  ;
  1347                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1348                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1349                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1350                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1351                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1352                                  ;
  1353                                  ;-----------------------------------------------------------------------------------------------------------------------
  1354                                  ;-----------------------------------------------------------------------------------------------------------------------
  1355                                  ;
  1356                                  ;	Tables
  1357                                  ;
  1358                                  ;-----------------------------------------------------------------------------------------------------------------------
  1359                                  ;-----------------------------------------------------------------------------------------------------------------------
  1360                                  ;
  1361                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1362                                  ;
  1363                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1364                                  ;	first descriptor must be all nulls.
  1365                                  ;
  1366                                  ;	6   5         4         3         2         1         0
  1367                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1368                                  ;	----------------------------------------------------------------
  1369                                  ;	h......hffffmmmma......ab......................bn..............n
  1370                                  ;	00000000			all areas have base addresses below 2^24
  1371                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1372                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1373                                  ;	            1001		present, ring-0, selector
  1374                                  ;
  1375                                  ;	h...h	hi-order base address (bits 24-31)
  1376                                  ;	ffff	flags
  1377                                  ;	mmmm	hi-order limit (bits 16-19)
  1378                                  ;	a...a	access
  1379                                  ;	b...b	lo-order base address (bits 0-23)
  1380                                  ;	n...n	lo-order limit (bits 0-15)
  1381                                  ;
  1382                                  ;-----------------------------------------------------------------------------------------------------------------------
  1383                                  section			gdt							;global descriptor table
  1384 00000000 0000000000000000        			dq	0000000000000000h				;00 required null selector
  1385 00000008 FF07001000934000        			dq	00409300100007FFh				;08 2KB  writable data (GDT)
  1386 00000010 FF07001800934000        			dq	00409300180007FFh				;10 2KB  writable data (IDT)
  1387 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;18 4GB  writable data (OS data)
  1388 00000020 FF0F00800B934000        			dq	0040930B80000FFFh				;20 4KB  writable data (CGA video)
  1389 00000028 FF0F000000934000        			dq	0040930000000FFFh				;28 4KB  writable data (Loader stack)
  1390 00000030 FFFF0000009B0000        			dq	00009B000000FFFFh				;30 64KB readable 16-bit code (Loader)
  1391 00000038 FFFF0000FF9B0000        			dq	00009BFF0000FFFFh				;38 64KB readable 16-bit code (BIOS)
  1392 00000040 FFFF000400934000        			dq	004093000400FFFFh				;40 64KB writable data (BIOS data)
  1393 00000048 FF1F0020009B4000        			dq	00409B0020001FFFh				;48 8KB  readable code (OS code)
  1394 00000050 7F00004700824000        			dq	004082004700007Fh				;50 80B  writable system (Console LDT)
  1395 00000058 7F00804700894000        			dq	004089004780007Fh				;58 80B  writable system (Console TSS)
  1396 00000060 7F00000F00824000        			dq	004082000F00007Fh				;60 80B  writable system (Loader LDT)
  1397 00000068 7F00800F00894000        			dq	004089000F80007Fh				;68 80B  writable system (Loader TSS)
  1398 00000070 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1399                                  ;-----------------------------------------------------------------------------------------------------------------------
  1400                                  ;
  1401                                  ;	Interrupt Descriptor Table						@disk: 004C00	@mem: 001800
  1402                                  ;
  1403                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1404                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1405                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1406                                  ;
  1407                                  ;	6   5         4         3         2         1         0
  1408                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1409                                  ;	----------------------------------------------------------------
  1410                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1411                                  ;
  1412                                  ;	h...h	high-order offset (bits 16-31)
  1413                                  ;	P	present (0=unused interrupt)
  1414                                  ;	zz	descriptor privilege level
  1415                                  ;	S	storage segment (must be zero for IDT)
  1416                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1417                                  ;	S...S	handling code selector in GDT
  1418                                  ;	l...l	lo-order offset (bits 0-15)
  1419                                  ;
  1420                                  ;-----------------------------------------------------------------------------------------------------------------------
  1421                                  section			idt							;interrupt descriptor table
  1422                                  			mint	dividebyzero					;00 divide by zero
  1422                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1422 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1423                                  			mint	singlestep					;01 single step
  1423                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1423 00000008 04004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1424                                  			mint	nmi						;02 non-maskable
  1424                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1424 00000010 08004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1425                                  			mint	break						;03 break
  1425                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1425 00000018 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1426                                  			mint	into						;04 into
  1426                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1426 00000020 10004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1427                                  			mint	bounds						;05 bounds
  1427                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1427 00000028 14004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1428                                  			mint	badopcode					;06 bad op code
  1428                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1428 00000030 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1429                                  			mint	nocoproc					;07 no coprocessor
  1429                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1429 00000038 1C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1430                                  			mint	doublefault					;08 double-fault
  1430                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1430 00000040 20004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1431                                  			mint	operand						;09 operand
  1431                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1431 00000048 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1432                                  			mint	badtss						;0A bad TSS
  1432                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1432 00000050 28004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1433                                  			mint	notpresent					;0B not-present
  1433                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1433 00000058 2C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1434                                  			mint	stacklimit					;0C stack limit
  1434                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1434 00000060 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1435                                  			mint	protection					;0D general protection fault
  1435                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1435 00000068 34004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1436                                  			mint	int14						;0E (reserved)
  1436                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1436 00000070 38004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1437                                  			mint	int15						;0F (reserved)
  1437                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1437 00000078 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1438                                  			mint	coproccalc					;10 (reserved)
  1438                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1438 00000080 40004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1439                                  			mint	int17						;11 (reserved)
  1439                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1439 00000088 44004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1440                                  			mint	int18						;12 (reserved)
  1440                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1440 00000090 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1441                                  			mint	int19						;13 (reserved)
  1441                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1441 00000098 4C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1442                                  			mint	int20						;14 (reserved)
  1442                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1442 000000A0 50004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1443                                  			mint	int21						;15 (reserved)
  1443                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1443 000000A8 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1444                                  			mint	int22						;16 (reserved)
  1444                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1444 000000B0 58004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1445                                  			mint	int23						;17 (reserved)
  1445                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1445 000000B8 5C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1446                                  			mint	int24						;18 (reserved)
  1446                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1446 000000C0 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1447                                  			mint	int25						;19 (reserved)
  1447                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1447 000000C8 64004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1448                                  			mint	int26						;1A (reserved)
  1448                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1448 000000D0 68004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1449                                  			mint	int27						;1B (reserved)
  1449                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1449 000000D8 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1450                                  			mint	int28						;1C (reserved)
  1450                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1450 000000E0 70004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1451                                  			mint	int29						;1D (reserved)
  1451                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1451 000000E8 74004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1452                                  			mint	int30						;1E (reserved)
  1452                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1452 000000F0 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1453                                  			mint	int31						;1F (reserved)
  1453                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1453 000000F8 7C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1454                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1454                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1454 00000100 80004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1455                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1455                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1455 00000108 D0004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1456                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1456                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1456 00000110 2B044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1457                                  			mtrap	com2						;23 IRQ3 com2
  1457                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1457 00000118 2E044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1458                                  			mtrap	com1						;24 IRQ4 com1
  1458                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1458 00000120 31044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1459                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1459                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1459 00000128 34044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1460                                  			mtrap	diskette					;26 IRQ6 diskette
  1460                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1460 00000130 37044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1461                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1461                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1461 00000138 4B044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1462                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1462                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1462 00000140 4E044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1463                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1463                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1463 00000148 51044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1464                                  			mtrap	irq10						;2A IRQA (reserved)
  1464                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1464 00000150 54044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1465                                  			mtrap	irq11						;2B IRQB (reserved)
  1465                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1465 00000158 57044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1466                                  			mtrap	ps2mouse					;2C IRQC ps/2 mouse
  1466                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1466 00000160 5A044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1467                                  			mtrap	coprocessor					;2D IRQD coprocessor
  1467                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1467 00000168 5D044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1468                                  			mtrap	fixeddisk					;2E IRQE fixed disk
  1468                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1468 00000170 60044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1469                                  			mtrap	irq15						;2F IRQF (reserved)
  1469                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1469 00000178 63044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1470                                  			mtrap	svc						;30 OS services
  1470                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1470 00000180 72044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1471 00000188 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1472                                  ;-----------------------------------------------------------------------------------------------------------------------
  1473                                  ;
  1474                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1475                                  ;
  1476                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1477                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1478                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1479                                  ;	signals the CPU on an interrupt request line. Software interrupts occur when directly called by other code
  1480                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1481                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1482                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1483                                  ;
  1484                                  ;-----------------------------------------------------------------------------------------------------------------------
  1485                                  section			kernel	vstart=0h					;data offsets relative to 0
  1486                                  			cpu	386						;allow 80386 instructions
  1487                                  			bits	32						;this is 32-bit code
  1488                                  ;-----------------------------------------------------------------------------------------------------------------------
  1489                                  ;
  1490                                  ;	CPU Interrupt Handlers
  1491                                  ;
  1492                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts.
  1493                                  ;
  1494                                  ;-----------------------------------------------------------------------------------------------------------------------
  1495                                  			menter	dividebyzero					;divide by zero
  1495                              <1> ?%1 equ ($-$$)
  1496 00000000 6A00                    			push	0						;
  1497 00000002 EB7A                    			jmp	intcpu						;
  1498                                  			menter	singlestep					;single step
  1498                              <1> ?%1 equ ($-$$)
  1499 00000004 6A01                    			push	1						;
  1500 00000006 EB76                    			jmp	intcpu						;
  1501                                  			menter	nmi						;non-maskable
  1501                              <1> ?%1 equ ($-$$)
  1502 00000008 6A02                    			push	2						;
  1503 0000000A EB72                    			jmp	intcpu						;
  1504                                  			menter	break						;break
  1504                              <1> ?%1 equ ($-$$)
  1505 0000000C 6A03                    			push	3						;
  1506 0000000E EB6E                    			jmp	intcpu						;
  1507                                  			menter	into						;into
  1507                              <1> ?%1 equ ($-$$)
  1508 00000010 6A04                    			push	4						;
  1509 00000012 EB6A                    			jmp	intcpu						;
  1510                                  			menter	bounds						;bounds
  1510                              <1> ?%1 equ ($-$$)
  1511 00000014 6A05                    			push	5						;
  1512 00000016 EB66                    			jmp	intcpu						;
  1513                                  			menter	badopcode					;bad opcode interrupt
  1513                              <1> ?%1 equ ($-$$)
  1514 00000018 6A06                    			push	6						;
  1515 0000001A EB62                    			jmp	intcpu						;
  1516                                  			menter	nocoproc					;no coprocessor interrupt
  1516                              <1> ?%1 equ ($-$$)
  1517 0000001C 6A07                    			push	7						;
  1518 0000001E EB5E                    			jmp	intcpu						;
  1519                                  			menter	doublefault					;doublefault interrupt
  1519                              <1> ?%1 equ ($-$$)
  1520 00000020 6A08                    			push	8						;
  1521 00000022 EB5A                    			jmp	intcpu						;
  1522                                  			menter	operand						;operand interrupt
  1522                              <1> ?%1 equ ($-$$)
  1523 00000024 6A09                    			push	9						;
  1524 00000026 EB56                    			jmp	intcpu						;
  1525                                  			menter	badtss						;bad tss interrupt
  1525                              <1> ?%1 equ ($-$$)
  1526 00000028 6A0A                    			push	10						;
  1527 0000002A EB52                    			jmp	intcpu						;
  1528                                  			menter	notpresent					;not present interrupt
  1528                              <1> ?%1 equ ($-$$)
  1529 0000002C 6A0B                    			push	11						;
  1530 0000002E EB4E                    			jmp	intcpu						;
  1531                                  			menter	stacklimit					;stack limit interrupt
  1531                              <1> ?%1 equ ($-$$)
  1532 00000030 6A0C                    			push	12						;
  1533 00000032 EB4A                    			jmp	intcpu						;
  1534                                  			menter	protection					;protection fault interrupt
  1534                              <1> ?%1 equ ($-$$)
  1535 00000034 6A0D                    			push	13						;
  1536 00000036 EB46                    			jmp	intcpu						;
  1537                                  			menter	int14						;(reserved)
  1537                              <1> ?%1 equ ($-$$)
  1538 00000038 6A0E                    			push	14						;
  1539 0000003A EB42                    			jmp	intcpu						;
  1540                                  			menter	int15						;(reserved)
  1540                              <1> ?%1 equ ($-$$)
  1541 0000003C 6A0F                    			push	15						;
  1542 0000003E EB3E                    			jmp	intcpu						;
  1543                                  			menter	coproccalc					;coprocessor calculation
  1543                              <1> ?%1 equ ($-$$)
  1544 00000040 6A10                    			push	16						;
  1545 00000042 EB3A                    			jmp	intcpu						;
  1546                                  			menter	int17						;(reserved)
  1546                              <1> ?%1 equ ($-$$)
  1547 00000044 6A11                    			push	17						;
  1548 00000046 EB36                    			jmp	intcpu						;
  1549                                  			menter	int18						;(reserved)
  1549                              <1> ?%1 equ ($-$$)
  1550 00000048 6A12                    			push	18						;
  1551 0000004A EB32                    			jmp	intcpu						;
  1552                                  			menter	int19						;(reserved)
  1552                              <1> ?%1 equ ($-$$)
  1553 0000004C 6A13                    			push	19						;
  1554 0000004E EB2E                    			jmp	intcpu						;
  1555                                  			menter	int20						;(reserved)
  1555                              <1> ?%1 equ ($-$$)
  1556 00000050 6A14                    			push	20						;
  1557 00000052 EB2A                    			jmp	intcpu						;
  1558                                  			menter	int21						;(reserved)
  1558                              <1> ?%1 equ ($-$$)
  1559 00000054 6A15                    			push	21						;
  1560 00000056 EB26                    			jmp	intcpu						;
  1561                                  			menter	int22						;(reserved)
  1561                              <1> ?%1 equ ($-$$)
  1562 00000058 6A16                    			push	22						;
  1563 0000005A EB22                    			jmp	intcpu						;
  1564                                  			menter	int23						;(reserved)
  1564                              <1> ?%1 equ ($-$$)
  1565 0000005C 6A17                    			push	23						;
  1566 0000005E EB1E                    			jmp	intcpu						;
  1567                                  			menter	int24						;(reserved)
  1567                              <1> ?%1 equ ($-$$)
  1568 00000060 6A18                    			push	24						;
  1569 00000062 EB1A                    			jmp	intcpu						;
  1570                                  			menter	int25						;(reserved)
  1570                              <1> ?%1 equ ($-$$)
  1571 00000064 6A19                    			push	25						;
  1572 00000066 EB16                    			jmp	intcpu						;
  1573                                  			menter	int26						;(reserved)
  1573                              <1> ?%1 equ ($-$$)
  1574 00000068 6A1A                    			push	26						;
  1575 0000006A EB12                    			jmp	intcpu						;
  1576                                  			menter	int27						;(reserved)
  1576                              <1> ?%1 equ ($-$$)
  1577 0000006C 6A1B                    			push	27						;
  1578 0000006E EB0E                    			jmp	intcpu						;
  1579                                  			menter	int28						;(reserved)
  1579                              <1> ?%1 equ ($-$$)
  1580 00000070 6A1C                    			push	28						;
  1581 00000072 EB0A                    			jmp	intcpu						;
  1582                                  			menter	int29						;(reserved)
  1582                              <1> ?%1 equ ($-$$)
  1583 00000074 6A1D                    			push	29						;
  1584 00000076 EB06                    			jmp	intcpu						;
  1585                                  			menter	int30						;(reserved)
  1585                              <1> ?%1 equ ($-$$)
  1586 00000078 6A1E                    			push	30						;
  1587 0000007A EB02                    			jmp	intcpu						;
  1588                                  			menter	int31						;(reserved)
  1588                              <1> ?%1 equ ($-$$)
  1589 0000007C 6A1F                    			push	31						;
  1590 0000007E 58                      intcpu			pop	eax						;
  1591 0000007F CF                      			iretd							;return
  1592                                  ;-----------------------------------------------------------------------------------------------------------------------
  1593                                  ;
  1594                                  ;	Hardware Device Interupts
  1595                                  ;
  1596                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1597                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1598                                  ;	(BX=2028h).
  1599                                  ;
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601                                  ;-----------------------------------------------------------------------------------------------------------------------
  1602                                  ;
  1603                                  ;	IRQ0	Clock Tick Interrupt
  1604                                  ;
  1605                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1606                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1607                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1608                                  ;
  1609                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1610                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1611                                  ;
  1612                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1613                                  ;	zero, the floppy disk motors are turned off.
  1614                                  ;
  1615                                  ;-----------------------------------------------------------------------------------------------------------------------
  1616                                  			menter	clocktick					;clock tick interrupt
  1616                              <1> ?%1 equ ($-$$)
  1617 00000080 50                      			push	eax						;save modified regs
  1618 00000081 52                      			push	edx						;
  1619 00000082 1E                      			push	ds						;
  1620 00000083 6A18                    			push	ESELDAT						;load OS data selector ...
  1621 00000085 1F                      			pop	ds						;... into data segment register
  1622 00000086 A16C040000              			mov	eax,[wfClockTicks]				;eax = clock ticks
  1623 0000008B 40                      			inc	eax						;increment clock ticks
  1624 0000008C 3DB0001800              			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1625 00000091 7208                    			jb	irq0.10						;no, skip ahead
  1626 00000093 FE0570040000            			inc	byte [wbClockDays]				;increment clock days
  1627 00000099 31C0                    			xor	eax,eax						;reset clock ticks
  1628 0000009B A36C040000              irq0.10			mov	dword [wfClockTicks],eax			;save clock ticks
  1629 000000A0 803D4004000000          			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1630 000000A7 741E                    			je	irq0.20						;yes, skip ahead
  1631 000000A9 FE0D40040000            			dec	byte [wbFDCMotor]				;decrement motor timeout
  1632 000000AF 7516                    			jnz	irq0.20						;skip ahead if non-zero
  1633 000000B1 FB                      			sti							;enable maskable interrupts
  1634 000000B2 B603                    irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1635 000000B4 B2F4                    			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1636 000000B6 EC                      			in	al,dx						;FDC main status byte
  1637 000000B7 A810                    			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1638 000000B9 75F7                    			jnz	irq0.15						;wait while busy
  1639 000000BB B00C                    			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1640 000000BD A23F040000              			mov	byte [wbFDCControl],al				;save motor-off setting
  1641 000000C2 B603                    			mov	dh,EFDCPORTHI					;fdc port hi
  1642 000000C4 B2F2                    			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1643 000000C6 EE                      			out	dx,al						;turn motor off
  1644 000000C7 E8D9080000              irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1645 000000CC 1F                      			pop	ds						;restore modified regs
  1646 000000CD 5A                      			pop	edx						;
  1647 000000CE 58                      			pop	eax						;
  1648 000000CF CF                      			iretd							;return
  1649                                  ;-----------------------------------------------------------------------------------------------------------------------
  1650                                  ;
  1651                                  ;	IRQ1	Keyboard Interrupt
  1652                                  ;
  1653                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1654                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1655                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1656                                  ;	ALL modified registers upon return.
  1657                                  ;
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                  			menter	keyboard					;keyboard interrrupt
  1659                              <1> ?%1 equ ($-$$)
  1660 000000D0 50                      			push	eax						;save non-volatile regs
  1661 000000D1 53                      			push	ebx						;
  1662 000000D2 51                      			push	ecx						;
  1663 000000D3 56                      			push	esi						;
  1664 000000D4 1E                      			push	ds						;
  1665 000000D5 6A18                    			push	ESELDAT						;load OS data selector ...
  1666 000000D7 1F                      			pop	ds						;... into data segment register
  1667 000000D8 30C0                    			xor	al,al						;zero
  1668 000000DA A209080000              			mov	[wbConsoleScan0],al				;clear scan code 0
  1669 000000DF A20A080000              			mov	[wbConsoleScan1],al				;clear scan code 1
  1670 000000E4 A20B080000              			mov	[wbConsoleScan2],al				;clear scan code 2
  1671 000000E9 A20C080000              			mov	[wbConsoleScan3],al				;clear scan code 3
  1672 000000EE A20D080000              			mov	[wbConsoleScan4],al				;clear scan code 4
  1673 000000F3 A20E080000              			mov	[wbConsoleScan5],al				;clear scan code 5
  1674 000000F8 B020                    			mov	al,' '						;space
  1675 000000FA A20F080000              			mov	[wbConsoleChar],al				;set character to space
  1676 000000FF B080                    			mov	al,EKEYTIMEOUT					;controller timeout flag
  1677 00000101 F6D0                    			not	al						;controller timeout mask
  1678 00000103 200508080000            			and	[wbConsoleStatus],al				;clear controller timeout flag
  1679 00000109 8A1D06080000            			mov	bl,[wbConsoleShift]				;shift flags
  1680 0000010F 8A3D07080000            			mov	bh,[wbConsoleLock]				;lock flags
  1681 00000115 E840090000              			call	WaitForKeyOutBuffer				;controller timeout?
  1682 0000011A 0F84F3010000            			jz	irq1.140					;yes, skip ahead
  1683 00000120 E460                    			in	al,EKEYPORTDATA					;read scan code 0
  1684 00000122 A209080000              			mov	[wbConsoleScan0],al				;save scan code 0
  1685 00000127 88C4                    			mov	ah,al						;copy scan code 0
  1686 00000129 B002                    			mov	al,EKEYSHIFTLEFT				;left shift flag
  1687 0000012B 80FC2A                  			cmp	ah,EKEYSHIFTLDOWN				;left shift key down code?
  1688 0000012E 0F84E0000000            			je	irq1.30						;yes, set flag
  1689 00000134 80FCAA                  			cmp	ah,EKEYSHIFTLUP					;left shift key up code?
  1690 00000137 0F84DB000000            			je	irq1.40						;yes, reset flag
  1691 0000013D B010                    			mov	al,EKEYSHIFTRIGHT				;right shift flag
  1692 0000013F 80FC36                  			cmp	ah,EKEYSHIFTRDOWN				;right shift key down code?
  1693 00000142 0F84CC000000            			je	irq1.30						;yes, set flag
  1694 00000148 80FCB6                  			cmp	ah,EKEYSHIFTRUP					;right shift key up code?
  1695 0000014B 0F84C7000000            			je	irq1.40						;yes, reset flag
  1696 00000151 B001                    			mov	al,EKEYCTRLLEFT					;left control flag
  1697 00000153 80FC1D                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1698 00000156 0F84B8000000            			je	irq1.30						;yes, set flag
  1699 0000015C 80FC9D                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1700 0000015F 0F84B3000000            			je	irq1.40						;yes, reset flag
  1701 00000165 B004                    			mov	al,EKEYALTLEFT					;left alt flag
  1702 00000167 80FC38                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1703 0000016A 0F84A4000000            			je	irq1.30						;yes, set flag
  1704 00000170 80FCB8                  			cmp	ah,EKEYALTUP					;alt key up code?
  1705 00000173 0F849F000000            			je	irq1.40						;yes, reset flag
  1706 00000179 B004                    			mov	al,EKEYLOCKCAPS					;caps-lock flag
  1707 0000017B 80FC3A                  			cmp	ah,EKEYCAPSDOWN					;caps-lock key down code?
  1708 0000017E 0F849A000000            			je	irq1.50						;yes, toggle lamps and flags
  1709 00000184 B002                    			mov	al,EKEYLOCKNUM					;num-lock flag
  1710 00000186 80FC45                  			cmp	ah,EKEYNUMDOWN					;num-lock key down code?
  1711 00000189 0F848F000000            			je	irq1.50						;yes, toggle lamps and flags
  1712 0000018F B001                    			mov	al,EKEYLOCKSCROLL				;scroll-lock flag
  1713 00000191 80FC46                  			cmp	ah,EKEYSCROLLDOWN				;scroll-lock key down code?
  1714 00000194 0F8484000000            			je	irq1.50						;yes, toggle lamps and flags
  1715 0000019A 80FCE0                  			cmp	ah,EKEYCODEEXT0					;extended scan code 0?
  1716 0000019D 0F8598000000            			jne	irq1.70 					;no, skip ahead
  1717 000001A3 E8B2080000              			call	WaitForKeyOutBuffer				;controller timeout?
  1718 000001A8 0F8465010000            			jz	irq1.140					;yes, skip ahead
  1719 000001AE E460                    			in	al,EKEYPORTDATA					;read scan code 1
  1720 000001B0 A20A080000              			mov	[wbConsoleScan1],al				;save scan code 1
  1721 000001B5 88C4                    			mov	ah,al						;copy scan code 1
  1722 000001B7 B008                    			mov	al,EKEYCTRLRIGHT				;right control flag
  1723 000001B9 80FC1D                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1724 000001BC 7456                    			je	irq1.30						;yes, set flag
  1725 000001BE 80FC9D                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1726 000001C1 7455                    			je	irq1.40						;yes, reset flag
  1727 000001C3 B020                    			mov	al,EKEYALTRIGHT					;right alt flag
  1728 000001C5 80FC38                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1729 000001C8 744A                    			je	irq1.30						;yes, set flag
  1730 000001CA 80FCB8                  			cmp	ah,EKEYALTUP					;alt key up code?
  1731 000001CD 7449                    			je	irq1.40						;yes, reset flag
  1732 000001CF 80FC35                  			cmp	ah,EKEYSLASH					;slash down code?
  1733 000001D2 0F84CB000000            			je	irq1.80						;yes, skip ahead
  1734 000001D8 80FCB5                  			cmp	ah,EKEYSLASHUP					;slash up code?
  1735 000001DB 0F84C2000000            			je	irq1.80						;yes, skip ahead
  1736 000001E1 80FC2A                  			cmp	ah,EKEYPRTSCRDOWN				;print screen down code?
  1737 000001E4 7405                    			je	irq1.10						;yes, continue
  1738 000001E6 80FCB7                  			cmp	ah,EKEYPRTSCRUP					;print screen up code?
  1739 000001E9 7524                    			jne	irq1.20						;no, skip ahead
  1740 000001EB E86A080000              irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1741 000001F0 0F841D010000            			jz	irq1.140					;yes, skip ahead
  1742 000001F6 E460                    			in	al,EKEYPORTDATA					;read scan code 2
  1743 000001F8 A20B080000              			mov	[wbConsoleScan2],al				;save scan code 2
  1744 000001FD E858080000              			call	WaitForKeyOutBuffer				;controller timeout?
  1745 00000202 0F840B010000            			jz	irq1.140					;yes, skip ahead
  1746 00000208 E460                    			in	al,EKEYPORTDATA					;read scan code 3
  1747 0000020A A20C080000              			mov	[wbConsoleScan3],al				;read scan code 3
  1748 0000020F E907010000              irq1.20			jmp	irq1.150					;finish keyboard handling
  1749 00000214 08C3                    irq1.30			or	bl,al						;set shift flag
  1750 00000216 EB0D                    			jmp	irq1.60						;skip ahead
  1751 00000218 F6D0                    irq1.40			not	al						;convert flag to mask
  1752 0000021A 20C3                    			and	bl,al						;reset shift flag
  1753 0000021C EB07                    			jmp	irq1.60						;skip ahead
  1754 0000021E 30C7                    irq1.50			xor	bh,al						;toggle lock flag
  1755 00000220 E806080000              			call	SetKeyboardLamps				;update keyboard lamps
  1756 00000225 881D06080000            irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1757 0000022B 883D07080000            			mov	[wbConsoleLock],bh				;save lock flags
  1758 00000231 E86F040000              			call	PutConsoleOIAShift				;update OIA indicators
  1759 00000236 E9E0000000              			jmp	irq1.150					;finish keyboard handling
  1760 0000023B 80FCE1                  irq1.70			cmp	ah,EKEYCODEEXT1					;extended scan code 1?
  1761 0000023E 7563                    			jne	irq1.80						;no continue
  1762 00000240 E815080000              			call	WaitForKeyOutBuffer				;controller timeout?
  1763 00000245 0F84C8000000            			jz	irq1.140					;yes, skip ahead
  1764 0000024B E460                    			in	al,EKEYPORTDATA					;read scan code 1
  1765 0000024D A20A080000              			mov	[wbConsoleScan1],al				;save scan code 1
  1766 00000252 88C4                    			mov	ah,al						;copy scan code 1
  1767 00000254 80FC1D                  			cmp	ah,EKEYPAUSEDOWN				;pause key down code?
  1768 00000257 0F85BE000000            			jne	irq1.150					;no, finish keyboard handling
  1769 0000025D E8F8070000              			call	WaitForKeyOutBuffer				;controller timeout?
  1770 00000262 0F84AB000000            			jz	irq1.140					;yes, skip ahead
  1771 00000268 E460                    			in	al,EKEYPORTDATA					;read scan code 2
  1772 0000026A A20B080000              			mov	[wbConsoleScan2],al				;save scan code 2
  1773 0000026F E8E6070000              			call	WaitForKeyOutBuffer				;controller timeout?
  1774 00000274 0F8499000000            			jz	irq1.140					;yes, skip ahead
  1775 0000027A E460                    			in	al,EKEYPORTDATA					;read scan code 3
  1776 0000027C A20C080000              			mov	[wbConsoleScan3],al				;save scan code 3
  1777 00000281 E8D4070000              			call	WaitForKeyOutBuffer				;controller timeout?
  1778 00000286 0F8487000000            			jz	irq1.140					;yes, skip ahead
  1779 0000028C E460                    			in	al,EKEYPORTDATA					;read scan code 4
  1780 0000028E A20D080000              			mov	[wbConsoleScan4],al				;save scan code 4
  1781 00000293 E8C2070000              			call	WaitForKeyOutBuffer				;controller timeout?
  1782 00000298 7479                    			jz	irq1.140					;yes, skip ahead
  1783 0000029A E460                    			in	al,EKEYPORTDATA					;read scan code 5
  1784 0000029C A20E080000              			mov	[wbConsoleScan5],al				;save scan code 5
  1785 000002A1 EB78                    			jmp	irq1.150					;continue
  1786 000002A3 30C0                    irq1.80			xor	al,al						;assume no ASCII translation
  1787 000002A5 F6C480                  			test	ah,EKEYUP					;release code?
  1788 000002A8 7531                    			jnz	irq1.110					;yes, skip ahead
  1789 000002AA BE[2B030000]            			mov	esi,tscan2ascii					;scan-to-ascii table address
  1790 000002AF F6C312                  			test	bl,EKEYSHIFT					;either shift key down?
  1791 000002B2 7405                    			jz	irq1.90						;no, skip ahead
  1792 000002B4 BE[AB030000]            			mov	esi,tscan2shift					;scan-to-shifted table address
  1793 000002B9 0FB6CC                  irq1.90			movzx	ecx,ah						;scan code offset
  1794 000002BC 2E8A0431                			mov	al,[cs:ecx+esi]					;al = ASCII code
  1795 000002C0 F6C704                  			test	bh,EKEYLOCKCAPS					;caps-lock on?
  1796 000002C3 7411                    			jz	irq1.100					;no skip ahead
  1797 000002C5 88C1                    			mov	cl,al						;copy ASCII code
  1798 000002C7 80E1DF                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  1799 000002CA 80F941                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  1800 000002CD 7207                    			jb	irq1.100					;yes, skip ahead
  1801 000002CF 80F95A                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  1802 000002D2 7702                    			ja	irq1.100					;yes, skip ahead
  1803 000002D4 3420                    			xor	al,EASCIICASE					;switch case
  1804 000002D6 A20F080000              irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  1805 000002DB BA00000041              irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  1806 000002E0 F6C480                  			test	ah,EKEYUP					;release scan-code?
  1807 000002E3 7405                    			jz	irq1.120					;no, skip ahead
  1808 000002E5 BA00000141              			mov	edx,EMSGKEYUP					;key-up event
  1809 000002EA 25FFFF0000              irq1.120		and	eax,0FFFFh					;clear high-order word
  1810 000002EF 09C2                    			or	edx,eax						;msg id and codes
  1811 000002F1 31C9                    			xor	ecx,ecx						;null param
  1812 000002F3 50                      			push	eax						;save codes
  1813 000002F4 E8AA050000              			call	PutMessage					;put message to console
  1814 000002F9 58                      			pop	eax						;restore codes
  1815 000002FA 84C0                    			test	al,al						;ASCII translation?
  1816 000002FC 7413                    			jz	irq1.130					;no, skip ahead
  1817 000002FE BA00000241              			mov	edx,EMSGKEYCHAR					;key-character event
  1818 00000303 25FFFF0000              			and	eax,0FFFFh					;clear high-order word
  1819 00000308 09C2                    			or	edx,eax						;msg id and codes
  1820 0000030A 31C9                    			xor	ecx,ecx						;null param
  1821 0000030C E892050000              			call	PutMessage					;put message to console
  1822 00000311 EB08                    irq1.130		jmp	irq1.150					;finish keyboard handling
  1823 00000313 B080                    irq1.140		mov	al,EKEYTIMEOUT					;controller timeout flag
  1824 00000315 080508080000            			or	[wbConsoleStatus],al				;set controller timeout flag
  1825 0000031B E81F040000              irq1.150		call	PutConsoleOIAChar				;update operator info area
  1826 00000320 E880060000              			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1827 00000325 1F                      			pop	ds						;restore non-volatile regs
  1828 00000326 5E                      			pop	esi						;
  1829 00000327 59                      			pop	ecx						;
  1830 00000328 5B                      			pop	ebx						;
  1831 00000329 58                      			pop	eax						;
  1832 0000032A CF                      			iretd							;return
  1833                                  ;-----------------------------------------------------------------------------------------------------------------------
  1834                                  ;	Scan-Code to ASCII Translation Tables
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836 0000032B 001B313233343536        tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  1837 00000333 373839302D3D0809        			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  1838 0000033B 7177657274797569        			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  1839 00000343 6F705B5D0D006173        			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  1840 0000034B 646667686A6B6C3B        			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  1841 00000353 2760005C7A786376        			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  1842 0000035B 626E6D2C2E2F002A        			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  1843 00000363 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  1844 0000036B 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  1845 00000373 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  1846 0000037B 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  1847 00000383 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  1848 0000038B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  1849 00000393 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  1850 0000039B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  1851 000003A3 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  1852 000003AB 001B21402324255E        tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  1853 000003B3 262A28295F2B0800        			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  1854 000003BB 5157455254595549        			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  1855 000003C3 4F507B7D0D004153        			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  1856 000003CB 444647484A4B4C3A        			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  1857 000003D3 227E007C5A584356        			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  1858 000003DB 424E4D3C3E3F002A        			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  1859 000003E3 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  1860 000003EB 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  1861 000003F3 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  1862 000003FB 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  1863 00000403 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  1864 0000040B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  1865 00000413 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  1866 0000041B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  1867 00000423 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                  ;
  1870                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  1871                                  ;
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                  			menter	iochannel					;secondary 8259A cascade
  1873                              <1> ?%1 equ ($-$$)
  1874 0000042B 50                      			push	eax						;
  1875 0000042C EB3D                    			jmp	hwint						;
  1876                                  ;-----------------------------------------------------------------------------------------------------------------------
  1877                                  ;
  1878                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  1879                                  ;
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                  			menter	com2						;serial port 2 interrupt
  1881                              <1> ?%1 equ ($-$$)
  1882 0000042E 50                      			push	eax						;
  1883 0000042F EB3A                    			jmp	hwint						;
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                  ;
  1886                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  1887                                  ;
  1888                                  ;-----------------------------------------------------------------------------------------------------------------------
  1889                                  			menter	com1						;serial port 1 interrupt
  1889                              <1> ?%1 equ ($-$$)
  1890 00000431 50                      			push	eax						;
  1891 00000432 EB37                    			jmp	hwint						;
  1892                                  ;-----------------------------------------------------------------------------------------------------------------------
  1893                                  ;
  1894                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  1895                                  ;
  1896                                  ;-----------------------------------------------------------------------------------------------------------------------
  1897                                  			menter	lpt2						;parallel port 2 interrupt
  1897                              <1> ?%1 equ ($-$$)
  1898 00000434 50                      			push	eax						;
  1899 00000435 EB34                    			jmp	hwint						;
  1900                                  ;-----------------------------------------------------------------------------------------------------------------------
  1901                                  ;
  1902                                  ;	IRQ6	Diskette Hardware Interrupt
  1903                                  ;
  1904                                  ;-----------------------------------------------------------------------------------------------------------------------
  1905                                  			menter	diskette					;floppy disk interrupt
  1905                              <1> ?%1 equ ($-$$)
  1906 00000437 50                      			push	eax						;save non-volatile regs
  1907 00000438 1E                      			push	ds						;
  1908 00000439 6A18                    			push	ESELDAT						;load OS data selector ...
  1909 0000043B 1F                      			pop	ds						;... into DS register
  1910 0000043C A03E040000              			mov	al,[wbFDCStatus]				;al = FDC calibration status
  1911 00000441 0C80                    			or	al,10000000b					;set IRQ flag
  1912 00000443 A23E040000              			mov	[wbFDCStatus],al				;update FDC calibration status
  1913 00000448 1F                      			pop	ds						;restore non-volatile regs
  1914 00000449 EB20                    			jmp	hwint						;end primary PIC interrupt
  1915                                  ;-----------------------------------------------------------------------------------------------------------------------
  1916                                  ;
  1917                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  1918                                  ;
  1919                                  ;-----------------------------------------------------------------------------------------------------------------------
  1920                                  			menter	lpt1						;parallel port 1 interrupt
  1920                              <1> ?%1 equ ($-$$)
  1921 0000044B 50                      			push	eax						;
  1922 0000044C EB1D                    			jmp	hwint						;
  1923                                  ;-----------------------------------------------------------------------------------------------------------------------
  1924                                  ;
  1925                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  1926                                  ;
  1927                                  ;-----------------------------------------------------------------------------------------------------------------------
  1928                                  			menter	rtclock						;real-time clock interrupt
  1928                              <1> ?%1 equ ($-$$)
  1929 0000044E 50                      			push	eax						;
  1930 0000044F EB13                    			jmp	hwwint						;
  1931                                  ;-----------------------------------------------------------------------------------------------------------------------
  1932                                  ;
  1933                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  1934                                  ;
  1935                                  ;-----------------------------------------------------------------------------------------------------------------------
  1936                                  			menter	retrace						;CGA vertical retrace interrupt
  1936                              <1> ?%1 equ ($-$$)
  1937 00000451 50                      			push	eax						;
  1938 00000452 EB10                    			jmp	hwwint						;
  1939                                  ;-----------------------------------------------------------------------------------------------------------------------
  1940                                  ;
  1941                                  ;	IRQ10	Reserved Hardware Interrupt
  1942                                  ;
  1943                                  ;-----------------------------------------------------------------------------------------------------------------------
  1944                                  			menter	irq10						;reserved
  1944                              <1> ?%1 equ ($-$$)
  1945 00000454 50                      			push	eax						;
  1946 00000455 EB0D                    			jmp	hwwint						;
  1947                                  ;-----------------------------------------------------------------------------------------------------------------------
  1948                                  ;
  1949                                  ;	IRQ11	Reserved Hardware Interrupt
  1950                                  ;
  1951                                  ;-----------------------------------------------------------------------------------------------------------------------
  1952                                  			menter	irq11						;reserved
  1952                              <1> ?%1 equ ($-$$)
  1953 00000457 50                      			push	eax						;
  1954 00000458 EB0A                    			jmp	hwwint						;
  1955                                  ;-----------------------------------------------------------------------------------------------------------------------
  1956                                  ;
  1957                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  1958                                  ;
  1959                                  ;-----------------------------------------------------------------------------------------------------------------------
  1960                                  			menter	ps2mouse					;PS/2 mouse interrupt
  1960                              <1> ?%1 equ ($-$$)
  1961 0000045A 50                      			push	eax						;
  1962 0000045B EB07                    			jmp	hwwint						;
  1963                                  ;-----------------------------------------------------------------------------------------------------------------------
  1964                                  ;
  1965                                  ;	IRQ13	Coprocessor Hardware Interrupt
  1966                                  ;
  1967                                  ;-----------------------------------------------------------------------------------------------------------------------
  1968                                  			menter	coprocessor					;coprocessor interrupt
  1968                              <1> ?%1 equ ($-$$)
  1969 0000045D 50                      			push	eax						;
  1970 0000045E EB04                    			jmp	hwwint						;
  1971                                  ;-----------------------------------------------------------------------------------------------------------------------
  1972                                  ;
  1973                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  1974                                  ;
  1975                                  ;-----------------------------------------------------------------------------------------------------------------------
  1976                                  			menter	fixeddisk					;fixed disk interrupt
  1976                              <1> ?%1 equ ($-$$)
  1977 00000460 50                      			push	eax						;
  1978 00000461 EB01                    			jmp	hwwint						;
  1979                                  ;-----------------------------------------------------------------------------------------------------------------------
  1980                                  ;
  1981                                  ;	IRQ15	Reserved Hardware Interrupt
  1982                                  ;
  1983                                  ;-----------------------------------------------------------------------------------------------------------------------
  1984                                  			menter	irq15						;reserved
  1984                              <1> ?%1 equ ($-$$)
  1985 00000463 50                      			push	eax						;save modified regs
  1986                                  ;-----------------------------------------------------------------------------------------------------------------------
  1987                                  ;
  1988                                  ;	Exit from hardware interrupt
  1989                                  ;
  1990                                  ;-----------------------------------------------------------------------------------------------------------------------
  1991 00000464 E842050000              hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  1992 00000469 EB05                    			jmp	hwint90						;skip ahead
  1993 0000046B E835050000              hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  1994 00000470 58                      hwint90			pop	eax						;restore modified regs
  1995 00000471 CF                      			iretd							;return from interrupt
  1996                                  ;-----------------------------------------------------------------------------------------------------------------------
  1997                                  ;
  1998                                  ;	INT 30h Operating System Software Service Interrupt
  1999                                  ;
  2000                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2001                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  2002                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2003                                  ;	the entry address of the specific function from a table.
  2004                                  ;
  2005                                  ;-----------------------------------------------------------------------------------------------------------------------
  2006                                  			menter	svc
  2006                              <1> ?%1 equ ($-$$)
  2007 00000472 3C0D                    			cmp	al,maxtsvc					;is our function out of range?
  2008 00000474 730D                    			jae	svc90						;yes, skip ahead
  2009 00000476 0FB6C0                  			movzx	eax,al						;function
  2010 00000479 C1E002                  			shl	eax,2						;offset into table
  2011 0000047C 2EFF90[84040000]        			call	dword [cs:tsvc+eax]				;far call to indirect address
  2012 00000483 CF                      svc90			iretd							;return from interrupt
  2013                                  ;-----------------------------------------------------------------------------------------------------------------------
  2014                                  ;
  2015                                  ;	Service Request Table
  2016                                  ;
  2017                                  ;
  2018                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2019                                  ;
  2020                                  ;-----------------------------------------------------------------------------------------------------------------------
  2021                                  tsvc			tsvce	PutConsoleString				;tty output asciiz string
  2021                              <1> tsvc :
  2021                              <1> e%1 equ ($-tsvc)/4
  2021 00000484 [65050000]          <1>  dd %1
  2022                                  			tsvce	GetConsoleString				;get string input
  2022                              <1> e%1 equ ($-tsvc)/4
  2022 00000488 [92050000]          <1>  dd %1
  2023                                  			tsvce	ClearConsoleScreen				;clear console screen
  2023                              <1> e%1 equ ($-tsvc)/4
  2023 0000048C [00090000]          <1>  dd %1
  2024                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  2024                              <1> e%1 equ ($-tsvc)/4
  2024 00000490 [7B090000]          <1>  dd %1
  2025                                  			tsvce	UpperCaseString					;upper-case string
  2025                              <1> e%1 equ ($-tsvc)/4
  2025 00000494 [2E050000]          <1>  dd %1
  2026                                  			tsvce	CompareMemory					;compare memory
  2026                              <1> e%1 equ ($-tsvc)/4
  2026 00000498 [48050000]          <1>  dd %1
  2027                                  			tsvce	ResetSystem					;reset system using 8042 chip
  2027                              <1> e%1 equ ($-tsvc)/4
  2027 0000049C [1C0A0000]          <1>  dd %1
  2028                                  			tsvce	PutDateString					;put MM/DD/YYYY string
  2028                              <1> e%1 equ ($-tsvc)/4
  2028 000004A0 [B8040000]          <1>  dd %1
  2029                                  			tsvce	PutTimeString					;put HH:MM:SS string
  2029                              <1> e%1 equ ($-tsvc)/4
  2029 000004A4 [F9040000]          <1>  dd %1
  2030                                  			tsvce	ReadRealTimeClock				;get real-time clock date and time
  2030                              <1> e%1 equ ($-tsvc)/4
  2030 000004A8 [B1090000]          <1>  dd %1
  2031                                  			tsvce	UnsignedToDecimalString 			;convert unsigned integer to decimal string
  2031                              <1> e%1 equ ($-tsvc)/4
  2031 000004AC [C1070000]          <1>  dd %1
  2032                                  			tsvce	UnsignedToHexadecimal				;convert unsigned integer to hexadecimal string
  2032                              <1> e%1 equ ($-tsvc)/4
  2032 000004B0 [65080000]          <1>  dd %1
  2033                                  			tsvce	HexadecimalToUnsigned				;convert hexadecimal string to unsigned integer
  2033                              <1> e%1 equ ($-tsvc)/4
  2033 000004B4 [85080000]          <1>  dd %1
  2034                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  2035                                  ;-----------------------------------------------------------------------------------------------------------------------
  2036                                  ;
  2037                                  ;	Service Request Macros
  2038                                  ;
  2039                                  ;	These macros provide positional parameterization of service request calls.
  2040                                  ;
  2041                                  ;-----------------------------------------------------------------------------------------------------------------------
  2042                                  %macro			putConsoleString 0
  2043                                  			mov	al,ePutConsoleString				;AL = put string fn.
  2044                                  			int	_svc						;invoke OS service
  2045                                  %endmacro
  2046                                  %macro			putConsoleString 1
  2047                                  			mov	edx,%1						;EDX = string address
  2048                                  			mov	al,ePutConsoleString				;AL = put string fn.
  2049                                  			int	_svc						;invoke OS service
  2050                                  %endmacro
  2051                                  %macro			getConsoleString 4
  2052                                  			mov	edx,%1						;EDX = buffer address
  2053                                  			mov	ecx,%2						;ECX = max characters
  2054                                  			mov	bh,%3						;BH = echo indicator
  2055                                  			mov	bl,%4						;BL = terminator
  2056                                  			mov	al,eGetConsoleString				;AL = get string fn.
  2057                                  			int	_svc						;invoke OS service
  2058                                  %endmacro
  2059                                  %macro			clearConsoleScreen 0
  2060                                  			mov	al,eClearConsoleScreen				;AL = clear console fn.
  2061                                  			int	_svc						;invoke OS service
  2062                                  %endmacro
  2063                                  %macro			placeCursor 0
  2064                                  			mov	al,ePlaceCursor					;AL = set cursor fn.
  2065                                  			int	_svc						;invoke OS service
  2066                                  %endmacro
  2067                                  %macro			upperCaseString 0
  2068                                  			mov	al,eUpperCaseString				;AL = upper case fn.
  2069                                  			int	_svc						;invoke OS service
  2070                                  %endmacro
  2071                                  %macro			compareMemory 0
  2072                                  			mov	al,eCompareMemory				;AL = compare memory fn.
  2073                                  			int	_svc						;invoke OS service
  2074                                  %endmacro
  2075                                  %macro			resetSystem 0
  2076                                  			mov	al,eResetSystem					;AL = system reset fn.
  2077                                  			int	_svc						;invoke OS service
  2078                                  %endmacro
  2079                                  %macro			putDateString 0
  2080                                  			mov	al,ePutDateString				;function code
  2081                                  			int	_svc						;invoke OS service
  2082                                  %endmacro
  2083                                  %macro			putDateString 2
  2084                                  			mov	ebx,%1						;DATETIME addr
  2085                                  			mov	edx,%2						;output buffer addr
  2086                                  			mov	al,ePutDateString				;function code
  2087                                  			int	_svc						;invoke OS service
  2088                                  %endmacro
  2089                                  %macro			putTimeString 0
  2090                                  			mov	al,ePutTimeString				;function code
  2091                                  			int	_svc						;invoke OS service
  2092                                  %endmacro
  2093                                  %macro			putTimeString 2
  2094                                  			mov	ebx,%1						;DATETIME addr
  2095                                  			mov	edx,%2						;output buffer addr
  2096                                  			mov	al,ePutTimeString				;function code
  2097                                  			int	_svc						;invoke OS service
  2098                                  %endmacro
  2099                                  %macro			readRealTimeClock 0
  2100                                  			mov	al,eReadRealTimeClock				;function code
  2101                                  			int	_svc						;invoke OS service
  2102                                  %endmacro
  2103                                  %macro			readRealTimeClock 1
  2104                                  			mov	ebx,%1						;DATETIME addr
  2105                                  			mov	al,eReadRealTimeClock				;function code
  2106                                  			int	_svc						;invoke OS service
  2107                                  %endmacro
  2108                                  %macro			unsignedToDecimalString 0
  2109                                  			mov	al,eUnsignedToDecimalString			;AL = function code
  2110                                  			int	_svc						;invoke OS service
  2111                                  %endmacro
  2112                                  %macro			unsignedToHexadecimal 0
  2113                                  			mov	al,eUnsignedToHexadecimal			;AL = unsigned to hexademcial fn.
  2114                                  			int	_svc						;invoke OS service
  2115                                  %endmacro
  2116                                  %macro			hexadecimalToUnsigned 0
  2117                                  			mov	al,eHexadecimalToUnsigned			;AL = hex to unsigned fn.
  2118                                  			int	_svc						;invoke OS service
  2119                                  %endmacro
  2120                                  ;-----------------------------------------------------------------------------------------------------------------------
  2121                                  ;
  2122                                  ;	Kernel Function Library
  2123                                  ;
  2124                                  ;-----------------------------------------------------------------------------------------------------------------------
  2125                                  ;-----------------------------------------------------------------------------------------------------------------------
  2126                                  ;
  2127                                  ;	Date and Time Helper Routines
  2128                                  ;
  2129                                  ;	PutDateString
  2130                                  ;	PutTimeString
  2131                                  ;
  2132                                  ;-----------------------------------------------------------------------------------------------------------------------
  2133                                  ;-----------------------------------------------------------------------------------------------------------------------
  2134                                  ;
  2135                                  ;	Routine:	PutDateString
  2136                                  ;
  2137                                  ;	Description:	This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  2138                                  ;			structure at ds:ebx.
  2139                                  ;
  2140                                  ;	In:		DS:EBX	DATETIME address
  2141                                  ;			DS:EDX	output buffer address
  2142                                  ;
  2143                                  ;-----------------------------------------------------------------------------------------------------------------------
  2144 000004B8 51                      PutDateString		push	ecx						;save non-volatile regs
  2145 000004B9 57                      			push	edi						;
  2146 000004BA 06                      			push	es						;
  2147 000004BB 1E                      			push	ds						;store data selector ...
  2148 000004BC 07                      			pop	es						;... in extra segment reg
  2149 000004BD 89D7                    			mov	edi,edx						;output buffer address
  2150 000004BF B10A                    			mov	cl,10						;divisor
  2151 000004C1 BA30302F00              			mov	edx,002f3030h					;ASCIIZ "00/" (reversed)
  2152 000004C6 0FB64305                			movzx	eax,byte [ebx+DATETIME.month]			;month
  2153 000004CA F6F1                    			div	cl						;ah = rem; al = quotient
  2154 000004CC 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2155 000004CE FC                      			cld							;forward strings
  2156 000004CF AB                      			stosd							;store "mm/"nul
  2157 000004D0 4F                      			dec	edi						;address of terminator
  2158 000004D1 0FB64304                			movzx	eax,byte [ebx+DATETIME.day]			;day
  2159 000004D5 F6F1                    			div	cl						;ah = rem; al = quotient
  2160 000004D7 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2161 000004D9 AB                      			stosd							;store "dd/"nul
  2162 000004DA 4F                      			dec	edi						;address of terminator
  2163 000004DB 0FB64307                			movzx	eax,byte [ebx+DATETIME.century]			;century
  2164 000004DF F6F1                    			div	cl						;ah = rem; al = quotient
  2165 000004E1 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2166 000004E3 AB                      			stosd							;store "cc/"null
  2167 000004E4 4F                      			dec	edi						;address of terminator
  2168 000004E5 4F                      			dec	edi						;address of delimiter
  2169 000004E6 0FB64306                			movzx	eax,byte [ebx+DATETIME.year]			;year (yy)
  2170 000004EA F6F1                    			div	cl						;ah = rem; al = quotient
  2171 000004EC 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2172 000004EE AA                      			stosb							;store quotient
  2173 000004EF 88E0                    			mov	al,ah						;remainder
  2174 000004F1 AA                      			stosb							;store remainder
  2175 000004F2 30C0                    			xor	al,al						;null terminator
  2176 000004F4 AA                      			stosb							;store terminator
  2177 000004F5 07                      			pop	es						;restore non-volatile regs
  2178 000004F6 5F                      			pop	edi						;
  2179 000004F7 59                      			pop	ecx						;
  2180 000004F8 C3                      			ret							;return
  2181                                  ;-----------------------------------------------------------------------------------------------------------------------
  2182                                  ;
  2183                                  ;	Routine:	PutTimeString
  2184                                  ;
  2185                                  ;	Description:	This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  2186                                  ;			structure at ds:ebx.
  2187                                  ;
  2188                                  ;	In:		DS:EBX	DATETIME address
  2189                                  ;			DS:EDX	output buffer address
  2190                                  ;
  2191                                  ;-----------------------------------------------------------------------------------------------------------------------
  2192 000004F9 51                      PutTimeString		push	ecx						;save non-volatile regs
  2193 000004FA 57                      			push	edi						;
  2194 000004FB 06                      			push	es						;
  2195 000004FC 1E                      			push	ds						;store data selector ...
  2196 000004FD 07                      			pop	es						;... in extra segment reg
  2197 000004FE 89D7                    			mov	edi,edx						;output buffer address
  2198 00000500 B10A                    			mov	cl,10						;divisor
  2199 00000502 BA30303A00              			mov	edx,003a3030h					;ASCIIZ "00:" (reversed)
  2200 00000507 0FB64302                			movzx	eax,byte [ebx+DATETIME.hour]			;hour
  2201 0000050B F6F1                    			div	cl						;ah = rem; al = quotient
  2202 0000050D 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2203 0000050F FC                      			cld							;forward strings
  2204 00000510 AB                      			stosd							;store "mm/"nul
  2205 00000511 4F                      			dec	edi						;address of terminator
  2206 00000512 0FB64301                			movzx	eax,byte [ebx+DATETIME.minute]			;minute
  2207 00000516 F6F1                    			div	cl						;ah = rem; al = quotient
  2208 00000518 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2209 0000051A AB                      			stosd							;store "dd/"nul
  2210 0000051B 4F                      			dec	edi						;address of terminator
  2211 0000051C 0FB603                  			movzx	eax,byte [ebx+DATETIME.second]			;second
  2212 0000051F F6F1                    			div	cl						;ah = rem; al = quotient
  2213 00000521 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2214 00000523 AA                      			stosb							;store quotient
  2215 00000524 88E0                    			mov	al,ah						;remainder
  2216 00000526 AA                      			stosb							;store remainder
  2217 00000527 30C0                    			xor	al,al						;null terminator
  2218 00000529 AA                      			stosb							;store terminator
  2219 0000052A 07                      			pop	es						;restore non-volatile regs
  2220 0000052B 5F                      			pop	edi						;
  2221 0000052C 59                      			pop	ecx						;
  2222 0000052D C3                      			ret							;return
  2223                                  ;-----------------------------------------------------------------------------------------------------------------------
  2224                                  ;
  2225                                  ;	String Helper Routines
  2226                                  ;
  2227                                  ;	UpperCaseString
  2228                                  ;	CompareMemory
  2229                                  ;
  2230                                  ;-----------------------------------------------------------------------------------------------------------------------
  2231                                  ;-----------------------------------------------------------------------------------------------------------------------
  2232                                  ;
  2233                                  ;	Routine:	UpperCaseString
  2234                                  ;
  2235                                  ;	Description:	This routine places all characters in the given string to upper case.
  2236                                  ;
  2237                                  ;	In:		DS:EDX	string address
  2238                                  ;
  2239                                  ;	Out:		EDX	string address
  2240                                  ;
  2241                                  ;-----------------------------------------------------------------------------------------------------------------------
  2242 0000052E 56                      UpperCaseString		push	esi						;save non-volatile regs
  2243 0000052F 89D6                    			mov	esi,edx						;string address
  2244 00000531 FC                      			cld							;forward strings
  2245 00000532 AC                      .10			lodsb							;string character
  2246 00000533 84C0                    			test	al,al						;null?
  2247 00000535 740F                    			jz	.20						;yes, skip ahead
  2248 00000537 3C61                    			cmp	al,EASCIILOWERA					;lower-case? (lower bounds)
  2249 00000539 72F7                    			jb	.10						;no, continue
  2250 0000053B 3C7A                    			cmp	al,EASCIILOWERZ					;lower-case? (upper bounds)
  2251 0000053D 77F3                    			ja	.10						;no, continue
  2252 0000053F 24DF                    			and	al,EASCIICASEMASK				;mask for upper case
  2253 00000541 8846FF                  			mov	[esi-1],al					;upper character
  2254 00000544 EBEC                    			jmp	.10						;continue
  2255 00000546 5E                      .20			pop	esi						;restore non-volatile regs
  2256 00000547 C3                      			ret							;return
  2257                                  ;-----------------------------------------------------------------------------------------------------------------------
  2258                                  ;
  2259                                  ;	Routine:	CompareMemory
  2260                                  ;
  2261                                  ;	Description:	This routine compares two byte arrays.
  2262                                  ;
  2263                                  ;	In:		DS:EDX	first source address
  2264                                  ;			DS:EBX	second source address
  2265                                  ;			ECX	comparison length
  2266                                  ;
  2267                                  ;	Out:		EDX	first source address
  2268                                  ;			EBX	second source address
  2269                                  ;			ECX	0	array 1 = array 2
  2270                                  ;				<0	array 1 < array 2
  2271                                  ;				>0	array 1 > array 2
  2272                                  ;
  2273                                  ;-----------------------------------------------------------------------------------------------------------------------
  2274 00000548 56                      CompareMemory		push	esi						;save non-volatile regs
  2275 00000549 57                      			push	edi						;
  2276 0000054A 06                      			push	es						;
  2277 0000054B 1E                      			push	ds						;copy DS
  2278 0000054C 07                      			pop	es						;... to ES
  2279 0000054D 89D6                    			mov	esi,edx						;first source address
  2280 0000054F 89DF                    			mov	edi,ebx						;second source address
  2281 00000551 FC                      			cld							;forward strings
  2282 00000552 F3A6                    			rep	cmpsb						;compare bytes
  2283 00000554 B000                    			mov	al,0						;default result
  2284 00000556 7406                    			jz	.10						;branch if arrays equal
  2285 00000558 B001                    			mov	al,1						;positive result
  2286 0000055A 7302                    			jnc	.10						;branch if target > source
  2287 0000055C B0FF                    			mov	al,-1						;negative result
  2288 0000055E 0FBEC8                  .10			movsx	ecx,al						;extend sign
  2289 00000561 07                      			pop	es						;restore regs
  2290 00000562 5F                      			pop	edi						;
  2291 00000563 5E                      			pop	esi						;
  2292 00000564 C3                      			ret							;return
  2293                                  ;-----------------------------------------------------------------------------------------------------------------------
  2294                                  ;
  2295                                  ;	Console Helper Routines
  2296                                  ;
  2297                                  ;	PutConsoleString
  2298                                  ;	GetConsoleString
  2299                                  ;	GetConsoleChar
  2300                                  ;	Yield
  2301                                  ;	PreviousConsoleColumn
  2302                                  ;	NextConsoleColumn
  2303                                  ;	FirstConsoleColumn
  2304                                  ;	NextConsoleRow
  2305                                  ;	PutConsoleChar
  2306                                  ;	PutConsoleOIAShift
  2307                                  ;	PutConsoleOIAChar
  2308                                  ;	PutConsoleHexByte
  2309                                  ;
  2310                                  ;-----------------------------------------------------------------------------------------------------------------------
  2311                                  ;-----------------------------------------------------------------------------------------------------------------------
  2312                                  ;
  2313                                  ;	Routine:	PutConsoleString
  2314                                  ;
  2315                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  2316                                  ;			console position as needed.
  2317                                  ;
  2318                                  ;	In:		EDX	source address
  2319                                  ;			DS	OS data selector
  2320                                  ;
  2321                                  ;-----------------------------------------------------------------------------------------------------------------------
  2322 00000565 56                      PutConsoleString	push	esi						;save non-volatile regs
  2323 00000566 89D6                    			mov	esi,edx						;source address
  2324 00000568 FC                      			cld							;forward strings
  2325 00000569 AC                      .10			lodsb							;ASCII character
  2326 0000056A 08C0                    			or	al,al						;end of string?
  2327 0000056C 7422                    			jz	.40						;yes, skip ahead
  2328 0000056E 3C0D                    			cmp	al,EASCIIRETURN					;carriage return?
  2329 00000570 7507                    			jne	.20						;no, skip ahead
  2330 00000572 E8EB000000              			call	FirstConsoleColumn				;move to start of row
  2331 00000577 EBF0                    			jmp	.10						;next character
  2332 00000579 3C0A                    .20			cmp	al,EASCIILINEFEED				;line feed?
  2333 0000057B 7507                    			jne	.30						;no, skip ahead
  2334 0000057D E8E8000000              			call	NextConsoleRow					;move to next row
  2335 00000582 EBE5                    			jmp	.10						;next character
  2336 00000584 E803010000              .30			call	PutConsoleChar					;output character to console
  2337 00000589 E8B9000000              			call	NextConsoleColumn				;advance to next column
  2338 0000058E EBD9                    			jmp	.10						;next character
  2339 00000590 5E                      .40			pop	esi						;restore non-volatile regs
  2340 00000591 C3                      			ret							;return
  2341                                  ;-----------------------------------------------------------------------------------------------------------------------
  2342                                  ;
  2343                                  ;	Routine:	GetConsoleString
  2344                                  ;
  2345                                  ;	Description:	This routine accepts keyboard input into a buffer.
  2346                                  ;
  2347                                  ;	Input:		DS:EDX	target buffer address
  2348                                  ;			ECX	maximum number of characters to accept
  2349                                  ;			BH	echo to terminal
  2350                                  ;			BL	terminating character
  2351                                  ;
  2352                                  ;-----------------------------------------------------------------------------------------------------------------------
  2353 00000592 51                      GetConsoleString	push	ecx						;save non-volatile regs
  2354 00000593 56                      			push	esi						;
  2355 00000594 57                      			push	edi						;
  2356 00000595 06                      			push	es						;
  2357 00000596 1E                      			push	ds						;load data segment selector ...
  2358 00000597 07                      			pop	es						;... into extra segment register
  2359 00000598 89D7                    			mov	edi,edx						;edi = target buffer
  2360 0000059A 51                      			push	ecx						;save maximum characters
  2361 0000059B 30C0                    			xor	al,al						;zero register
  2362 0000059D FC                      			cld							;forward strings
  2363 0000059E F3AA                    			rep	stosb						;zero fill buffer
  2364 000005A0 59                      			pop	ecx						;maximum characters
  2365 000005A1 89D7                    			mov	edi,edx						;edi = target buffer
  2366 000005A3 89D6                    			mov	esi,edx						;esi = target buffer
  2367 000005A5 E34E                    .10			jecxz	.50						;exit if max-length is zero
  2368 000005A7 E856000000              .20			call	GetConsoleChar					;al = next input char
  2369 000005AC 38D8                    			cmp	al,bl						;is this the terminator?
  2370 000005AE 7445                    			je	.50						;yes, exit
  2371 000005B0 3C08                    			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  2372 000005B2 7521                    			jne	.30						;no, skip ahead
  2373 000005B4 39FE                    			cmp	esi,edi						;at start of buffer?
  2374 000005B6 74EF                    			je	.20						;yes, get next character
  2375 000005B8 4F                      			dec	edi						;backup target pointer
  2376 000005B9 C60700                  			mov	byte [edi],0					;zero previous character
  2377 000005BC 41                      			inc	ecx						;increment remaining chars
  2378 000005BD F6C701                  			test	bh,1						;echo to console?
  2379 000005C0 74E5                    			jz	.20						;no, get next character
  2380 000005C2 E85B000000              			call	PreviousConsoleColumn				;backup console position
  2381 000005C7 B020                    			mov	al,EASCIISPACE					;ASCII space
  2382 000005C9 E8BE000000              			call	PutConsoleChar					;write space to console
  2383 000005CE E8A8030000              			call	PlaceCursor					;position the cursor
  2384 000005D3 EBD2                    			jmp	.20						;get next character
  2385 000005D5 3C20                    .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  2386 000005D7 72CE                    			jb	.20						;no, get another character
  2387 000005D9 3C7E                    			cmp	al,EASCIITILDE					;printable? (upper bounds)
  2388 000005DB 77CA                    			ja	.20						;no, get another character
  2389 000005DD AA                      			stosb							;store character in buffer
  2390 000005DE F6C701                  			test	bh,1						;echo to console?
  2391 000005E1 740F                    			jz	.40						;no, skip ahead
  2392 000005E3 E8A4000000              			call	PutConsoleChar					;write character to console
  2393 000005E8 E85A000000              			call	NextConsoleColumn				;advance console position
  2394 000005ED E889030000              			call	PlaceCursor					;position the cursor
  2395 000005F2 49                      .40			dec	ecx						;decrement remaining chars
  2396 000005F3 EBB0                    			jmp	.10						;next
  2397 000005F5 30C0                    .50			xor	al,al						;null
  2398 000005F7 AA                      			stosb							;terminate buffer
  2399 000005F8 07                      			pop	es						;restore non-volatile regs
  2400 000005F9 5F                      			pop	edi						;
  2401 000005FA 5E                      			pop	esi						;
  2402 000005FB 59                      			pop	ecx						;
  2403 000005FC C3                      			ret							;return
  2404                                  ;-----------------------------------------------------------------------------------------------------------------------
  2405                                  ;
  2406                                  ;	Routine:	GetConsoleChar
  2407                                  ;
  2408                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  2409                                  ;
  2410                                  ;	Output:		AL	ASCII character code
  2411                                  ;			AH	keyboard scan code
  2412                                  ;
  2413                                  ;-----------------------------------------------------------------------------------------------------------------------
  2414 000005FD E81D000000              GetConsoleChar.10	call	Yield						;pass control or halt
  2415 00000602 E8C4020000              GetConsoleChar		call	GetMessage					;get the next message
  2416 00000607 09C0                    			or	eax,eax						;do we have a message?
  2417 00000609 74F2                    			jz	GetConsoleChar.10				;no, skip ahead
  2418 0000060B 50                      			push	eax						;save key codes
  2419 0000060C 250000FFFF              			and	eax,0FFFF0000h					;mask for message type
  2420 00000611 3D00000241              			cmp	eax,EMSGKEYCHAR					;key-char message?
  2421 00000616 58                      			pop	eax						;restore key codes
  2422 00000617 75E9                    			jne	GetConsoleChar					;no, try again
  2423 00000619 25FFFF0000              			and	eax,0000ffffh					;mask for key codes
  2424 0000061E C3                      			ret							;return
  2425                                  ;-----------------------------------------------------------------------------------------------------------------------
  2426                                  ;
  2427                                  ;	Routine:	Yield
  2428                                  ;
  2429                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  2430                                  ;
  2431                                  ;-----------------------------------------------------------------------------------------------------------------------
  2432 0000061F FB                      Yield			sti							;enable maskagle interrupts
  2433 00000620 F4                      			hlt							;halt until external interrupt
  2434 00000621 C3                      			ret							;return
  2435                                  ;-----------------------------------------------------------------------------------------------------------------------
  2436                                  ;
  2437                                  ;	Routine:	PreviousConsoleColumn
  2438                                  ;
  2439                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2440                                  ;			the column is set to the last position in the row and the row is decremented.
  2441                                  ;
  2442                                  ;	Input:		DS	OS data selector
  2443                                  ;
  2444                                  ;-----------------------------------------------------------------------------------------------------------------------
  2445 00000622 A004080000              PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2446 00000627 08C0                    			or	al,al						;start of row?
  2447 00000629 7514                    			jnz	.10						;no, skip ahead
  2448 0000062B 8A2505080000            			mov	ah,[wbConsoleRow]				;current row
  2449 00000631 08E4                    			or	ah,ah						;top of screen?
  2450 00000633 7411                    			jz	.20						;yes, exit with no change
  2451 00000635 FECC                    			dec	ah						;decrement row
  2452 00000637 882505080000            			mov	[wbConsoleRow],ah				;save row
  2453 0000063D B050                    			mov	al,ECONCOLS					;set maximum column
  2454 0000063F FEC8                    .10			dec	al						;decrement column
  2455 00000641 A204080000              			mov	[wbConsoleColumn],al				;save column
  2456 00000646 C3                      .20			ret							;return
  2457                                  ;-----------------------------------------------------------------------------------------------------------------------
  2458                                  ;
  2459                                  ;	Routine:	NextConsoleColumn
  2460                                  ;
  2461                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  2462                                  ;			incremented if the end of the current row is reached.
  2463                                  ;
  2464                                  ;	In:		DS	OS data selector
  2465                                  ;
  2466                                  ;-----------------------------------------------------------------------------------------------------------------------
  2467 00000647 A004080000              NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2468 0000064C FEC0                    			inc	al						;increment column
  2469 0000064E A204080000              			mov	[wbConsoleColumn],al				;save column
  2470 00000653 3C50                    			cmp	al,ECONCOLS					;end of row?
  2471 00000655 720A                    			jb	.10						;no, skip ahead
  2472 00000657 E806000000              			call	FirstConsoleColumn				;reset column to start of row
  2473 0000065C E809000000              			call	NextConsoleRow					;line feed to next row
  2474 00000661 C3                      .10			ret							;return
  2475                                  ;-----------------------------------------------------------------------------------------------------------------------
  2476                                  ;
  2477                                  ;	Routine:	FirstConsoleColumn
  2478                                  ;
  2479                                  ;	Description:	This routine resets the console column to start of the row.
  2480                                  ;
  2481                                  ;	In:		DS	OS data selector
  2482                                  ;
  2483                                  ;-----------------------------------------------------------------------------------------------------------------------
  2484 00000662 30C0                    FirstConsoleColumn	xor	al,al						;zero column
  2485 00000664 A204080000              			mov	[wbConsoleColumn],al				;save column
  2486 00000669 C3                      			ret							;return
  2487                                  ;-----------------------------------------------------------------------------------------------------------------------
  2488                                  ;
  2489                                  ;	Routine:	NextConsoleRow
  2490                                  ;
  2491                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  2492                                  ;
  2493                                  ;	In:		DS	OS data selector
  2494                                  ;
  2495                                  ;-----------------------------------------------------------------------------------------------------------------------
  2496 0000066A A005080000              NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2497 0000066F FEC0                    			inc	al						;increment row
  2498 00000671 A205080000              			mov	[wbConsoleRow],al				;save row
  2499 00000676 3C18                    			cmp	al,ECONROWS					;end of screen?
  2500 00000678 7211                    			jb	.10						;no, skip ahead
  2501 0000067A E8BC020000              			call	ScrollConsoleRow				;scroll up one row
  2502 0000067F A005080000              			mov	al,[wbConsoleRow]				;row
  2503 00000684 FEC8                    			dec	al						;decrement row
  2504 00000686 A205080000              			mov	[wbConsoleRow],al				;save row
  2505 0000068B C3                      .10			ret							;return
  2506                                  ;-----------------------------------------------------------------------------------------------------------------------
  2507                                  ;
  2508                                  ;	Routine:	PutConsoleChar
  2509                                  ;
  2510                                  ;	Description:	This routine writes one ASCII character to the console screen.
  2511                                  ;
  2512                                  ;	In:		AL	ASCII character
  2513                                  ;			DS	OS data selector
  2514                                  ;
  2515                                  ;-----------------------------------------------------------------------------------------------------------------------
  2516 0000068C 51                      PutConsoleChar		push	ecx						;save non-volatile regs
  2517 0000068D 06                      			push	es						;
  2518 0000068E 6A20                    			push	ESELCGA						;load CGA selector ...
  2519 00000690 07                      			pop	es						;... into extra segment reg
  2520 00000691 8A0D04080000            			mov	cl,[wbConsoleColumn]				;column
  2521 00000697 8A2D05080000            			mov	ch,[wbConsoleRow]				;row
  2522 0000069D E8C5020000              			call	SetConsoleChar					;put character at row, column
  2523 000006A2 07                      			pop	es						;restore non-volatile regs
  2524 000006A3 59                      			pop	ecx						;
  2525 000006A4 C3                      			ret							;return
  2526                                  ;-----------------------------------------------------------------------------------------------------------------------
  2527                                  ;
  2528                                  ;	Routine:	PutConsoleOIAShift
  2529                                  ;
  2530                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2531                                  ;
  2532                                  ;	In:		BL	shift flags
  2533                                  ;			BH	lock flags
  2534                                  ;			DS	OS data selector
  2535                                  ;
  2536                                  ;-----------------------------------------------------------------------------------------------------------------------
  2537 000006A5 51                      PutConsoleOIAShift	push	ecx						;save non-volatile regs
  2538 000006A6 06                      			push	es						;
  2539 000006A7 6A20                    			push	ESELCGA						;load CGA selector ...
  2540 000006A9 07                      			pop	es						;... into ES register
  2541 000006AA B518                    			mov	ch,ECONOIAROW					;OIA row
  2542 000006AC B020                    			mov	al,EASCIISPACE					;space is default character
  2543 000006AE F6C302                  			test	bl,EKEYSHIFTLEFT				;left-shift indicated?
  2544 000006B1 7402                    			jz	.10						;no, skip ahead
  2545 000006B3 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2546 000006B5 B10E                    .10			mov	cl,14						;indicator column
  2547 000006B7 E8AB020000              			call	SetConsoleChar					;display ASCII character
  2548 000006BC B020                    			mov	al,EASCIISPACE					;ASCII space
  2549 000006BE F6C310                  			test	bl,EKEYSHIFTRIGHT				;right-shift indicated?
  2550 000006C1 7402                    			jz	.20						;no, skip ahead
  2551 000006C3 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2552 000006C5 B140                    .20			mov	cl,64						;indicator column
  2553 000006C7 E89B020000              			call	SetConsoleChar					;display ASCII character
  2554 000006CC B020                    			mov	al,EASCIISPACE					;ASCII space
  2555 000006CE F6C301                  			test	bl,EKEYCTRLLEFT					;left-ctrl indicated?
  2556 000006D1 7402                    			jz	.30						;no, skip ahead
  2557 000006D3 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2558 000006D5 B10F                    .30			mov	cl,15						;indicator column
  2559 000006D7 E88B020000              			call	SetConsoleChar					;display ASCII character
  2560 000006DC B020                    			mov	al,EASCIISPACE					;ASCII space
  2561 000006DE F6C308                  			test	bl,EKEYCTRLRIGHT				;right-ctrl indicated?
  2562 000006E1 7402                    			jz	.40						;no, skip ahead
  2563 000006E3 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2564 000006E5 B13F                    .40			mov	cl,63						;indicator column
  2565 000006E7 E87B020000              			call	SetConsoleChar					;display ASCII character
  2566 000006EC B020                    			mov	al,EASCIISPACE					;ASCII space
  2567 000006EE F6C304                  			test	bl,EKEYALTLEFT					;left-alt indicated?
  2568 000006F1 7402                    			jz	.50						;no, skip ahead
  2569 000006F3 B041                    			mov	al,'A'						;yes, indicate with 'A'
  2570 000006F5 B110                    .50			mov	cl,16						;indicator column
  2571 000006F7 E86B020000              			call	SetConsoleChar					;display ASCII character
  2572 000006FC B020                    			mov	al,EASCIISPACE					;ASCII space
  2573 000006FE F6C320                  			test	bl,EKEYALTRIGHT					;right-alt indicated?
  2574 00000701 7402                    			jz	.60						;no, skip ahead
  2575 00000703 B041                    			mov	al,'A'						;yes, indicate with 'A'
  2576 00000705 B13E                    .60			mov	cl,62						;indicator column
  2577 00000707 E85B020000              			call	SetConsoleChar					;display ASCII character
  2578 0000070C B020                    			mov	al,EASCIISPACE					;ASCII space
  2579 0000070E F6C704                  			test	bh,EKEYLOCKCAPS					;caps-lock indicated?
  2580 00000711 7402                    			jz	.70						;no, skip ahead
  2581 00000713 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2582 00000715 B14E                    .70			mov	cl,78						;indicator column
  2583 00000717 E84B020000              			call	SetConsoleChar					;display ASCII character
  2584 0000071C B020                    			mov	al,EASCIISPACE					;ASCII space
  2585 0000071E F6C702                  			test	bh,EKEYLOCKNUM					;num-lock indicated?
  2586 00000721 7402                    			jz	.80						;no, skip ahead
  2587 00000723 B04E                    			mov	al,'N'						;yes, indicate with 'N'
  2588 00000725 B14D                    .80			mov	cl,77						;indicator column
  2589 00000727 E83B020000              			call	SetConsoleChar					;display ASCII character
  2590 0000072C B020                    			mov	al,EASCIISPACE					;ASCII space
  2591 0000072E F6C701                  			test	bh,EKEYLOCKSCROLL				;scroll-lock indicated?
  2592 00000731 7402                    			jz	.90						;no, skip ahead
  2593 00000733 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2594 00000735 B14C                    .90			mov	cl,76						;indicator column
  2595 00000737 E82B020000              			call	SetConsoleChar					;display ASCII character
  2596 0000073C 07                      			pop	es						;restore non-volatile regs
  2597 0000073D 59                      			pop	ecx						;
  2598 0000073E C3                      			ret							;return
  2599                                  ;-----------------------------------------------------------------------------------------------------------------------
  2600                                  ;
  2601                                  ;	Routine:	PutConsoleOIAChar
  2602                                  ;
  2603                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  2604                                  ;
  2605                                  ;	In:		DS	OS data selector
  2606                                  ;
  2607                                  ;-----------------------------------------------------------------------------------------------------------------------
  2608 0000073F 53                      PutConsoleOIAChar	push	ebx						;save non-volatile regs
  2609 00000740 51                      			push	ecx						;
  2610 00000741 56                      			push	esi						;
  2611 00000742 1E                      			push	ds						;
  2612 00000743 06                      			push	es						;
  2613 00000744 6A18                    			push	ESELDAT						;load OS data selector ...
  2614 00000746 1F                      			pop	ds						;... into data segment register
  2615 00000747 6A20                    			push	ESELCGA						;load CGA selector ...
  2616 00000749 07                      			pop	es						;... into extra segment register
  2617 0000074A BE09080000              			mov	esi,wbConsoleScan0				;scan codes address
  2618 0000074F B718                    			mov	bh,ECONOIAROW					;OIA row
  2619 00000751 B300                    			mov	bl,0						;starting column
  2620 00000753 B906000000              			mov	ecx,6						;maximum scan codes
  2621 00000758 51                      .10			push	ecx						;save remaining count
  2622 00000759 89D9                    			mov	ecx,ebx						;row, column
  2623 0000075B AC                      			lodsb							;read scan code
  2624 0000075C 08C0                    			or	al,al						;scan code present?
  2625 0000075E 7407                    			jz	.20						;no, skip ahead
  2626 00000760 E834000000              			call	PutConsoleHexByte				;display scan code
  2627 00000765 EB10                    			jmp	.30						;continue
  2628 00000767 B020                    .20			mov	al,' '						;ASCII space
  2629 00000769 E8F9010000              			call	SetConsoleChar					;display space
  2630 0000076E FEC1                    			inc	cl
  2631 00000770 B020                    			mov	al,' '						;ASCII space
  2632 00000772 E8F0010000              			call	SetConsoleChar					;display space
  2633 00000777 80C302                  .30			add	bl,2						;next column (+2)
  2634 0000077A 59                      			pop	ecx						;restore remaining
  2635 0000077B E2DB                    			loop	.10						;next code
  2636 0000077D A00F080000              			mov	al,[wbConsoleChar]				;console ASCII character
  2637 00000782 3C20                    			cmp	al,32						;printable? (lower-bounds)
  2638 00000784 720D                    			jb	.40						;no, skip ahead
  2639 00000786 3C7E                    			cmp	al,126						;printable? (upper-bounds)
  2640 00000788 7709                    			ja	.40						;no, skip ahead
  2641 0000078A 88FD                    			mov	ch,bh						;OIA row
  2642 0000078C B128                    			mov	cl,40						;character display column
  2643 0000078E E8D4010000              			call	SetConsoleChar					;display ASCII character
  2644 00000793 07                      .40			pop	es						;restore non-volatile regs
  2645 00000794 1F                      			pop	ds						;
  2646 00000795 5E                      			pop	esi						;
  2647 00000796 59                      			pop	ecx						;
  2648 00000797 5B                      			pop	ebx						;
  2649 00000798 C3                      			ret							;return
  2650                                  ;-----------------------------------------------------------------------------------------------------------------------
  2651                                  ;
  2652                                  ;	Routine:	PutConsoleHexByte
  2653                                  ;
  2654                                  ;	Description:	This routine writes two ASCII characters to the console screen representing the value of a byte.
  2655                                  ;
  2656                                  ;	In:		AL	byte value
  2657                                  ;			CH	row
  2658                                  ;			CL	column
  2659                                  ;			DS	OS data selector
  2660                                  ;			ES	CGA selector
  2661                                  ;
  2662                                  ;-----------------------------------------------------------------------------------------------------------------------
  2663 00000799 53                      PutConsoleHexByte	push	ebx						;save non-volatile regs
  2664 0000079A 88C3                    			mov	bl,al						;save byte value
  2665 0000079C C0E804                  			shr	al,4						;hi-order nybble
  2666 0000079F 0C30                    			or	al,030h						;apply ASCII zone
  2667 000007A1 3C3A                    			cmp	al,03ah						;numeric?
  2668 000007A3 7202                    			jb	.10						;yes, skip ahead
  2669 000007A5 0407                    			add	al,7						;add ASCII offset for alpha
  2670 000007A7 E8BB010000              .10			call	SetConsoleChar					;display ASCII character
  2671 000007AC FEC1                    			inc	cl						;increment column
  2672 000007AE 88D8                    			mov	al,bl						;byte value
  2673 000007B0 240F                    			and	al,0fh						;lo-order nybble
  2674 000007B2 0C30                    			or	al,30h						;apply ASCII zone
  2675 000007B4 3C3A                    			cmp	al,03ah						;numeric?
  2676 000007B6 7202                    			jb	.20						;yes, skip ahead
  2677 000007B8 0407                    			add	al,7						;add ASCII offset for alpha
  2678 000007BA E8A8010000              .20			call	SetConsoleChar					;display ASCII character
  2679 000007BF 5B                      			pop	ebx						;restore non-volatile regs
  2680 000007C0 C3                      			ret							;return
  2681                                  ;-----------------------------------------------------------------------------------------------------------------------
  2682                                  ;
  2683                                  ;	Data-Type Conversion Helper Routines
  2684                                  ;
  2685                                  ;	UnsignedToDecimalString
  2686                                  ;	UnsignedToHexadecimal
  2687                                  ;	HexadecimalToUnsigned
  2688                                  ;
  2689                                  ;-----------------------------------------------------------------------------------------------------------------------
  2690                                  ;-----------------------------------------------------------------------------------------------------------------------
  2691                                  ;
  2692                                  ;	Routine:	UnsignedToDecimalString
  2693                                  ;
  2694                                  ;	Description:	This routine creates an ASCIIZ string representing the decimal value of binary input.
  2695                                  ;
  2696                                  ;	Input:		BH	flags		bit 0: 1 = trim leading zeros
  2697                                  ;						bit 1: 1 = include comma grouping delimiters
  2698                                  ;						bit 4: 1 = non-zero digit found (internal)
  2699                                  ;			ECX	32-bit binary
  2700                                  ;			DS:EDX	output buffer address
  2701                                  ;
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703 000007C1 53                      UnsignedToDecimalString push	ebx						;save non-volatile regs
  2704 000007C2 51                      			push	ecx						;
  2705 000007C3 57                      			push	edi						;
  2706 000007C4 06                      			push	es						;
  2707 000007C5 1E                      			push	ds						;load data selector
  2708 000007C6 07                      			pop	es						;... into extra segment reg
  2709 000007C7 89D7                    			mov	edi,edx 					;output buffer address
  2710 000007C9 80E70F                  			and	bh,00001111b					;zero internal flags
  2711 000007CC 89CA                    			mov	edx,ecx 					;binary
  2712 000007CE B900CA9A3B              			mov	ecx,1000000000					;10^9 divisor
  2713 000007D3 E871000000              			call	.30						;divide and store
  2714 000007D8 B900E1F505              			mov	ecx,100000000					;10^8 divisor
  2715 000007DD E855000000              			call	.10						;divide and store
  2716 000007E2 B980969800              			mov	ecx,10000000					;10^7 divisor
  2717 000007E7 E85D000000              			call	.30						;divide and store
  2718 000007EC B940420F00              			mov	ecx,1000000					;10^6 divisor
  2719 000007F1 E853000000              			call	.30						;divide and store
  2720 000007F6 B9A0860100              			mov	ecx,100000					;10^5 divisor
  2721 000007FB E837000000              			call	.10						;divide and store
  2722 00000800 B910270000              			mov	ecx,10000					;10^4 divisor
  2723 00000805 E83F000000              			call	.30						;divide and store
  2724 0000080A B9E8030000              			mov	ecx,1000					;10^3 divisor
  2725 0000080F E835000000              			call	.30						;divide and store
  2726 00000814 B964000000              			mov	ecx,100 					;10^2 divisor
  2727 00000819 E819000000              			call	.10						;divide and store
  2728 0000081E B90A000000              			mov	ecx,10						;10^2 divisor
  2729 00000823 E821000000              			call	.30						;divide and store
  2730 00000828 89D0                    			mov	eax,edx 					;10^1 remainder
  2731 0000082A E827000000              			call	.40						;store
  2732 0000082F 30C0                    			xor	al,al						;null terminator
  2733 00000831 AA                      			stosb
  2734 00000832 07                      			pop	es						;restore non-volatile regs
  2735 00000833 5F                      			pop	edi						;
  2736 00000834 59                      			pop	ecx						;
  2737 00000835 5B                      			pop	ebx						;
  2738 00000836 C3                      			ret							;return
  2739 00000837 F6C702                  .10			test	bh,00000010b					;comma group delims?
  2740 0000083A 740D                    			jz	.30						;no, skip ahead
  2741 0000083C F6C701                  			test	bh,00000001b					;trim leading zeros?
  2742 0000083F 7405                    			jz	.20						;no, store delim
  2743 00000841 F6C710                  			test	bh,00010000b					;non-zero found?
  2744 00000844 7403                    			jz	.30						;no, skip ahead
  2745 00000846 B02C                    .20			mov	al,','						;delimiter
  2746 00000848 AA                      			stosb							;store delimiter
  2747 00000849 89D0                    .30			mov	eax,edx 					;lo-orer dividend
  2748 0000084B 31D2                    			xor	edx,edx 					;zero hi-order
  2749 0000084D F7F1                    			div	ecx						;divide by power of 10
  2750 0000084F 08C0                    			or	al,al						;zero?
  2751 00000851 7407                    			jz	.50						;yes, skip ahead
  2752 00000853 80CF10                  			or	bh,00010000b					;non-zero found
  2753 00000856 0C30                    .40			or	al,30h						;ASCII zone
  2754 00000858 AA                      			stosb							;store digit
  2755 00000859 C3                      			ret							;return
  2756 0000085A F6C701                  .50			test	bh,00000001b					;trim leading zeros?
  2757 0000085D 74F7                    			jz	.40						;no, store and return
  2758 0000085F F6C710                  			test	bh,00010000b					;non-zero found?
  2759 00000862 75F2                    			jnz	.40						;yes, store and return
  2760 00000864 C3                      			ret							;return
  2761                                  ;-----------------------------------------------------------------------------------------------------------------------
  2762                                  ;
  2763                                  ;	Routine:	UnsignedToHexadecimal
  2764                                  ;
  2765                                  ;	Description:	This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  2766                                  ;
  2767                                  ;	Input:		DS:EDX	output buffer address
  2768                                  ;			ECX	32-bit binary
  2769                                  ;
  2770                                  ;-----------------------------------------------------------------------------------------------------------------------
  2771 00000865 57                      UnsignedToHexadecimal	push	edi						;store non-volatile regs
  2772 00000866 89D7                    			mov	edi,edx						;output buffer address
  2773 00000868 89CA                    			mov	edx,ecx						;32-bit unsigned
  2774 0000086A 31C9                    			xor	ecx,ecx						;zero register
  2775 0000086C B108                    			mov	cl,8						;nybble count
  2776 0000086E C1C204                  .10			rol	edx,4						;next hi-order nybble in bits 0-3
  2777 00000871 88D0                    			mov	al,dl						;????bbbb
  2778 00000873 240F                    			and	al,0fh						;mask out bits 4-7
  2779 00000875 0C30                    			or	al,30h						;mask in ascii zone
  2780 00000877 3C3A                    			cmp	al,3ah						;A through F?
  2781 00000879 7202                    			jb	.20						;no, skip ahead
  2782 0000087B 0407                    			add	al,7						;41h through 46h
  2783 0000087D AA                      .20			stosb							;store hexnum
  2784 0000087E E2EE                    			loop	.10						;next nybble
  2785 00000880 30C0                    			xor	al,al						;zero reg
  2786 00000882 AA                      			stosb							;null terminate
  2787 00000883 5F                      			pop	edi						;restore non-volatile regs
  2788 00000884 C3                      			ret							;return
  2789                                  ;-----------------------------------------------------------------------------------------------------------------------
  2790                                  ;
  2791                                  ;	Routine:	HexadecimalToUnsigned
  2792                                  ;
  2793                                  ;	Description:	This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  2794                                  ;
  2795                                  ;	Input:		DS:EDX	null-terminated hexadecimal string address
  2796                                  ;
  2797                                  ;	Output: 	EAX	unsigned integer value
  2798                                  ;
  2799                                  ;-----------------------------------------------------------------------------------------------------------------------
  2800 00000885 56                      HexadecimalToUnsigned	push	esi						;save non-volatile regs
  2801 00000886 89D6                    			mov	esi,edx						;source address
  2802 00000888 31D2                    			xor	edx,edx						;zero register
  2803 0000088A AC                      .10			lodsb							;source byte
  2804 0000088B 84C0                    			test	al,al						;end of string?
  2805 0000088D 7410                    			jz	.30						;yes, skip ahead
  2806 0000088F 3C39                    			cmp	al,'9'						;hexadecimal?
  2807 00000891 7602                    			jna	.20						;no, skip ahead
  2808 00000893 2C37                    			sub	al,37h						;'A' = 41h, less 37h = 0Ah
  2809 00000895 83E00F                  .20			and	eax,0fh						;remove ascii zone
  2810 00000898 C1E204                  			shl	edx,4						;previous total x 16
  2811 0000089B 01C2                    			add	edx,eax						;add prior value x 16
  2812 0000089D EBEB                    			jmp	.10						;next
  2813 0000089F 89D0                    .30			mov	eax,edx						;result
  2814 000008A1 5E                      			pop	esi						;restore non-volatile regs
  2815 000008A2 C3                      			ret							;return
  2816                                  ;-----------------------------------------------------------------------------------------------------------------------
  2817                                  ;
  2818                                  ;	Message Queue Helper Routines
  2819                                  ;
  2820                                  ;	PutMessage
  2821                                  ;	GetMessage
  2822                                  ;
  2823                                  ;-----------------------------------------------------------------------------------------------------------------------
  2824                                  ;-----------------------------------------------------------------------------------------------------------------------
  2825                                  ;
  2826                                  ;	Routine:	PutMessage
  2827                                  ;
  2828                                  ;	Description:	This routine adda a message to the message queue.
  2829                                  ;
  2830                                  ;	Input:		ECX	hi-order data word
  2831                                  ;			EDX	lo-order data word
  2832                                  ;
  2833                                  ;	Output:		CY	0 = success
  2834                                  ;				1 = fail: queue is full
  2835                                  ;
  2836                                  ;-----------------------------------------------------------------------------------------------------------------------
  2837 000008A3 1E                      PutMessage		push	ds						;save non-volatile regs
  2838 000008A4 6A2C                    			push	ESELMQ						;load task message queue selector ...
  2839 000008A6 1F                      			pop	ds						;... into data segment register
  2840 000008A7 A104000000              			mov	eax,[MQTail]					;tail ptr
  2841 000008AC 833800                  			cmp	dword [eax],0					;is queue full?
  2842 000008AF F9                      			stc							;assume failure
  2843 000008B0 7517                    			jne	.20						;yes, cannot store
  2844 000008B2 8910                    			mov	[eax],edx					;store lo-order data
  2845 000008B4 894804                  			mov	[eax+4],ecx					;store hi-order data
  2846 000008B7 83C008                  			add	eax,8						;next queue element adr
  2847 000008BA 25FC030000              			and	eax,03fch					;at end of queue?
  2848 000008BF 7502                    			jnz	.10						;no, skip ahead
  2849 000008C1 B008                    			mov	al,8						;reset to top of queue
  2850 000008C3 A304000000              .10			mov	[MQTail],eax					;save new tail ptr
  2851 000008C8 F8                      			clc							;indicate success
  2852 000008C9 1F                      .20			pop	ds						;restore non-volatile regs
  2853 000008CA C3                      			ret							;return
  2854                                  ;-----------------------------------------------------------------------------------------------------------------------
  2855                                  ;
  2856                                  ;	Routine:	GetMessage
  2857                                  ;
  2858                                  ;	Description:	This routine reads and removes a message from the message queue.
  2859                                  ;
  2860                                  ;	Output:		EAX	lo-order message data
  2861                                  ;			EDX	hi-order message data
  2862                                  ;
  2863                                  ;			CY	0 = message read
  2864                                  ;				1 = no message to read
  2865                                  ;
  2866                                  ;-----------------------------------------------------------------------------------------------------------------------
  2867 000008CB 53                      GetMessage		push	ebx						;save non-volatile regs
  2868 000008CC 51                      			push	ecx						;
  2869 000008CD 1E                      			push	ds						;
  2870 000008CE 6A2C                    			push	ESELMQ						;load message queue selector ...
  2871 000008D0 1F                      			pop	ds						;... into data segment register
  2872 000008D1 8B1D00000000            			mov	ebx,[MQHead]					;head ptr
  2873 000008D7 8B03                    			mov	eax,[ebx]					;lo-order 32 bits
  2874 000008D9 8B5304                  			mov	edx,[ebx+4]					;hi-order 32 bits
  2875 000008DC 09D0                    			or	eax,edx						;is queue empty?
  2876 000008DE F9                      			stc							;assume queue is emtpy
  2877 000008DF 741B                    			jz	.20						;yes, skip ahead
  2878 000008E1 31C9                    			xor	ecx,ecx						;store zero
  2879 000008E3 890B                    			mov	[ebx],ecx					;... in lo-order dword
  2880 000008E5 894B04                  			mov	[ebx+4],ecx					;... in hi-order dword
  2881 000008E8 83C308                  			add	ebx,8						;next queue element
  2882 000008EB 81E3FC030000            			and	ebx,03fch					;at end of queue?
  2883 000008F1 7502                    			jnz	.10						;no, skip ahead
  2884 000008F3 B308                    			mov	bl,8						;reset to 1st entry
  2885 000008F5 891D00000000            .10			mov	[MQHead],ebx					;save new head ptr
  2886 000008FB F8                      			clc							;indicate message read
  2887 000008FC 1F                      .20			pop	ds						;restore non-volatile regs
  2888 000008FD 59                      			pop	ecx						;
  2889 000008FE 5B                      			pop	ebx						;
  2890 000008FF C3                      			ret							;return
  2891                                  ;-----------------------------------------------------------------------------------------------------------------------
  2892                                  ;
  2893                                  ;	Memory-Mapped Video Routines
  2894                                  ;
  2895                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2896                                  ;
  2897                                  ;	ClearConsoleScreen
  2898                                  ;	ScrollConsoleRow
  2899                                  ;	SetConsoleChar
  2900                                  ;
  2901                                  ;-----------------------------------------------------------------------------------------------------------------------
  2902                                  ;-----------------------------------------------------------------------------------------------------------------------
  2903                                  ;
  2904                                  ;	Routine:	ClearConsoleScreen
  2905                                  ;
  2906                                  ;	Description:	This routine clears the console (CGA) screen.
  2907                                  ;
  2908                                  ;-----------------------------------------------------------------------------------------------------------------------
  2909 00000900 51                      ClearConsoleScreen	push	ecx						;save non-volatile regs
  2910 00000901 57                      			push	edi						;
  2911 00000902 1E                      			push	ds						;
  2912 00000903 06                      			push	es						;
  2913 00000904 6A18                    			push	ESELDAT						;load OS Data selector ...
  2914 00000906 1F                      			pop	ds						;... into DS register
  2915 00000907 6A20                    			push	ESELCGA						;load CGA selector ...
  2916 00000909 07                      			pop	es						;... into ES register
  2917 0000090A B820072007              			mov	eax,ECONCLEARDWORD				;initializtion value
  2918 0000090F B9C0030000              			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  2919 00000914 31FF                    			xor	edi,edi						;target offset
  2920 00000916 FC                      			cld							;forward strings
  2921 00000917 F3AB                    			rep	stosd						;reset screen body
  2922 00000919 B820702070              			mov	eax,ECONOIADWORD				;OIA attribute and space
  2923 0000091E B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  2924 00000923 F3AB                    			rep	stosd						;reset OIA line
  2925 00000925 30C0                    			xor	al,al						;zero register
  2926 00000927 A205080000              			mov	[wbConsoleRow],al				;reset console row
  2927 0000092C A204080000              			mov	[wbConsoleColumn],al				;reset console column
  2928 00000931 E845000000              			call	PlaceCursor					;place cursor at current position
  2929 00000936 07                      			pop	es						;restore non-volatile regs
  2930 00000937 1F                      			pop	ds						;
  2931 00000938 5F                      			pop	edi						;
  2932 00000939 59                      			pop	ecx						;
  2933 0000093A C3                      			ret							;return
  2934                                  ;-----------------------------------------------------------------------------------------------------------------------
  2935                                  ;
  2936                                  ;	Routine:	ScrollConsoleRow
  2937                                  ;
  2938                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  2939                                  ;
  2940                                  ;-----------------------------------------------------------------------------------------------------------------------
  2941 0000093B 51                      ScrollConsoleRow	push	ecx						;save non-volatile regs
  2942 0000093C 56                      			push	esi						;
  2943 0000093D 57                      			push	edi						;
  2944 0000093E 1E                      			push	ds						;
  2945 0000093F 06                      			push	es						;
  2946 00000940 6A20                    			push	ESELCGA						;load CGA video selector ...
  2947 00000942 1F                      			pop	ds						;... into DS
  2948 00000943 6A20                    			push	ESELCGA						;load CGA video selector ...
  2949 00000945 07                      			pop	es						;... into ES
  2950 00000946 B998030000              			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  2951 0000094B BEA0000000              			mov	esi,ECONROWBYTES				;esi = source (line 2)
  2952 00000950 31FF                    			xor	edi,edi						;edi = target (line 1)
  2953 00000952 FC                      			cld							;forward strings
  2954 00000953 F3A5                    			rep	movsd						;move 24 lines up
  2955 00000955 B820072007              			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  2956 0000095A B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  2957 0000095F F3AB                    			rep	stosd						;clear bottom row
  2958 00000961 07                      			pop	es						;restore non-volatile regs
  2959 00000962 1F                      			pop	ds						;
  2960 00000963 5F                      			pop	edi						;
  2961 00000964 5E                      			pop	esi						;
  2962 00000965 59                      			pop	ecx						;
  2963 00000966 C3                      			ret							;return
  2964                                  ;-----------------------------------------------------------------------------------------------------------------------
  2965                                  ;
  2966                                  ;	Routine:	SetConsoleChar
  2967                                  ;
  2968                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  2969                                  ;
  2970                                  ;	In:		AL	ASCII character
  2971                                  ;			CL	column
  2972                                  ;			CH	row
  2973                                  ;			ES	CGA selector
  2974                                  ;
  2975                                  ;-----------------------------------------------------------------------------------------------------------------------
  2976 00000967 88C2                    SetConsoleChar		mov	dl,al						;ASCII character
  2977 00000969 0FB6C5                  			movzx	eax,ch						;row
  2978 0000096C B450                    			mov	ah,ECONCOLS					;cols/row
  2979 0000096E F6E4                    			mul	ah						;row * cols/row
  2980 00000970 00C8                    			add	al,cl						;add column
  2981 00000972 80D400                  			adc	ah,0						;handle carry
  2982 00000975 D1E0                    			shl	eax,1						;screen offset
  2983 00000977 268810                  			mov	[es:eax],dl					;store character
  2984 0000097A C3                      			ret							;return
  2985                                  ;-----------------------------------------------------------------------------------------------------------------------
  2986                                  ;
  2987                                  ;	Input/Output Routines
  2988                                  ;
  2989                                  ;	These routines read and/or write directly to ports.
  2990                                  ;
  2991                                  ;	PlaceCursor
  2992                                  ;	PutPrimaryEndOfInt
  2993                                  ;	PutSecondaryEndOfInt
  2994                                  ;	ReadRealTimeClock
  2995                                  ;	ResetSystem
  2996                                  ;	SetKeyboardLamps
  2997                                  ;	WaitForKeyInBuffer
  2998                                  ;	WaitForKeyOutBuffer
  2999                                  ;
  3000                                  ;-----------------------------------------------------------------------------------------------------------------------
  3001                                  ;-----------------------------------------------------------------------------------------------------------------------
  3002                                  ;
  3003                                  ;	Routine:	PlaceCursor
  3004                                  ;
  3005                                  ;	Description:	This routine positions the cursor on the console.
  3006                                  ;
  3007                                  ;	In:		DS	OS data selector
  3008                                  ;
  3009                                  ;-----------------------------------------------------------------------------------------------------------------------
  3010 0000097B 51                      PlaceCursor		push	ecx						;save non-volatile regs
  3011 0000097C A005080000              			mov	al,[wbConsoleRow]				;al = row
  3012 00000981 B450                    			mov	ah,ECONCOLS					;ah = cols/row
  3013 00000983 F6E4                    			mul	ah						;row offset
  3014 00000985 020504080000            			add	al,[wbConsoleColumn]				;add column
  3015 0000098B 80D400                  			adc	ah,0						;add overflow
  3016 0000098E 89C1                    			mov	ecx,eax						;screen offset
  3017 00000990 B2D4                    			mov	dl,ECRTPORTLO					;crt controller port lo
  3018 00000992 B603                    			mov	dh,ECRTPORTHI					;crt controller port hi
  3019 00000994 B00E                    			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  3020 00000996 EE                      			out	dx,al						;select register
  3021 00000997 42                      			inc	edx						;data port
  3022 00000998 88E8                    			mov	al,ch						;hi-order cursor loc
  3023 0000099A EE                      			out	dx,al						;store hi-order loc
  3024 0000099B 4A                      			dec	edx						;register select port
  3025 0000099C B00F                    			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  3026 0000099E EE                      			out	dx,al						;select register
  3027 0000099F 42                      			inc	edx						;data port
  3028 000009A0 88C8                    			mov	al,cl						;lo-order cursor loc
  3029 000009A2 EE                      			out	dx,al						;store lo-order loc
  3030 000009A3 59                      			pop	ecx						;restore non-volatile regs
  3031 000009A4 C3                      			ret							;return
  3032                                  ;-----------------------------------------------------------------------------------------------------------------------
  3033                                  ;
  3034                                  ;	Routine:	PutPrimaryEndOfInt
  3035                                  ;
  3036                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3037                                  ;
  3038                                  ;-----------------------------------------------------------------------------------------------------------------------
  3039 000009A5 FB                      PutPrimaryEndOfInt	sti							;enable maskable interrupts
  3040 000009A6 B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  3041 000009A8 E620                    			out	EPICPORTPRI,al					;send EOI to primary PIC
  3042 000009AA C3                      			ret							;return
  3043                                  ;-----------------------------------------------------------------------------------------------------------------------
  3044                                  ;
  3045                                  ;	Routine:	PutSecondaryEndOfInt
  3046                                  ;
  3047                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3048                                  ;
  3049                                  ;-----------------------------------------------------------------------------------------------------------------------
  3050 000009AB FB                      PutSecondaryEndOfInt	sti							;enable maskable interrupts
  3051 000009AC B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  3052 000009AE E6A0                    			out	EPICPORTSEC,al					;send EOI to secondary PIC
  3053 000009B0 C3                      			ret							;return
  3054                                  ;-----------------------------------------------------------------------------------------------------------------------
  3055                                  ;
  3056                                  ;	Routine:	ReadRealTimeClock
  3057                                  ;
  3058                                  ;	Description:	This routine gets current date time from the real-time clock.
  3059                                  ;
  3060                                  ;	In:		DS:EBX	DATETIME structure
  3061                                  ;
  3062                                  ;-----------------------------------------------------------------------------------------------------------------------
  3063 000009B1 56                      ReadRealTimeClock	push	esi						;save non-volatile regs
  3064 000009B2 57                      			push	edi						;
  3065 000009B3 06                      			push	es						;
  3066 000009B4 1E                      			push	ds						;store data selector ...
  3067 000009B5 07                      			pop	es						;... in es register
  3068 000009B6 89DF                    			mov	edi,ebx						;date-time structure
  3069 000009B8 B000                    			mov	al,ERTCSECONDREG				;second register
  3070 000009BA E670                    			out	ERTCREGPORT,al					;select second register
  3071 000009BC E471                    			in	al,ERTCDATAPORT					;read second register
  3072 000009BE FC                      			cld							;forward strings
  3073 000009BF AA                      			stosb							;store second value
  3074 000009C0 B002                    			mov	al,ERTCMINUTEREG				;minute register
  3075 000009C2 E670                    			out	ERTCREGPORT,al					;select minute register
  3076 000009C4 E471                    			in	al,ERTCDATAPORT					;read minute register
  3077 000009C6 AA                      			stosb							;store minute value
  3078 000009C7 B004                    			mov	al,ERTCHOURREG					;hour register
  3079 000009C9 E670                    			out	ERTCREGPORT,al					;select hour register
  3080 000009CB E471                    			in	al,ERTCDATAPORT					;read hour register
  3081 000009CD AA                      			stosb							;store hour value
  3082 000009CE B006                    			mov	al,ERTCWEEKDAYREG				;weekday register
  3083 000009D0 E670                    			out	ERTCREGPORT,al					;select weekday register
  3084 000009D2 E471                    			in	al,ERTCDATAPORT					;read weekday register
  3085 000009D4 AA                      			stosb							;store weekday value
  3086 000009D5 B007                    			mov	al,ERTCDAYREG					;day register
  3087 000009D7 E670                    			out	ERTCREGPORT,al					;select day register
  3088 000009D9 E471                    			in	al,ERTCDATAPORT					;read day register
  3089 000009DB AA                      			stosb							;store day value
  3090 000009DC B008                    			mov	al,ERTCMONTHREG					;month register
  3091 000009DE E670                    			out	ERTCREGPORT,al					;select month register
  3092 000009E0 E471                    			in	al,ERTCDATAPORT					;read month register
  3093 000009E2 AA                      			stosb							;store month value
  3094 000009E3 B009                    			mov	al,ERTCYEARREG					;year register
  3095 000009E5 E670                    			out	ERTCREGPORT,al					;select year register
  3096 000009E7 E471                    			in	al,ERTCDATAPORT					;read year register
  3097 000009E9 AA                      			stosb							;store year value
  3098 000009EA B032                    			mov	al,ERTCCENTURYREG				;century register
  3099 000009EC E670                    			out	ERTCREGPORT,al					;select century register
  3100 000009EE E471                    			in	al,ERTCDATAPORT					;read century register
  3101 000009F0 AA                      			stosb							;store century value
  3102 000009F1 B00B                    			mov	al,ERTCSTATUSREG				;status register
  3103 000009F3 E670                    			out	ERTCREGPORT,al					;select status register
  3104 000009F5 E471                    			in	al,ERTCDATAPORT					;read status register
  3105 000009F7 A804                    			test	al,ERTCBINARYVALS				;test if values are binary
  3106 000009F9 751D                    			jnz	.20						;skip ahead if binary values
  3107 000009FB 89DE                    			mov	esi,ebx						;date-time structure address
  3108 000009FD 89DF                    			mov	edi,ebx						;date-time structure address
  3109 000009FF B908000000              			mov	ecx,8						;loop counter
  3110 00000A04 AC                      .10			lodsb							;BCD value
  3111 00000A05 88C4                    			mov	ah,al						;BCD value
  3112 00000A07 240F                    			and	al,00001111b					;low-order decimal zone
  3113 00000A09 80E4F0                  			and	ah,11110000b					;hi-order decimal zone
  3114 00000A0C D0EC                    			shr	ah,1						;hi-order decimal * 8
  3115 00000A0E 00E0                    			add	al,ah						;low-order + hi-order * 8
  3116 00000A10 C0EC02                  			shr	ah,2						;hi-order decimal * 2
  3117 00000A13 00E0                    			add	al,ah						;low-order + hi-order * 10
  3118 00000A15 AA                      			stosb							;replace BCD with binary
  3119 00000A16 E2EC                    			loop	.10						;next value
  3120 00000A18 07                      .20			pop	es						;restore non-volatile regs
  3121 00000A19 5F                      			pop	edi						;
  3122 00000A1A 5E                      			pop	esi						;
  3123 00000A1B C3                      			ret							;return
  3124                                  ;-----------------------------------------------------------------------------------------------------------------------
  3125                                  ;
  3126                                  ;	Routine:	ResetSystem
  3127                                  ;
  3128                                  ;	Description:	This routine restarts the system using the 8042 controller.
  3129                                  ;
  3130                                  ;-----------------------------------------------------------------------------------------------------------------------
  3131 00000A1C B9FFFF1F00              ResetSystem		mov	ecx,001fffffh					;delay to clear ints
  3132 00000A21 E2FE                    			loop	$						;clear interrupts
  3133 00000A23 B0FE                    			mov	al,EKEYCMDRESET					;mask out bit zero
  3134 00000A25 E664                    			out	EKEYPORTSTAT,al					;drive bit zero low
  3135 00000A27 FB                      .10			sti							;enable maskable interrupts
  3136 00000A28 F4                      			hlt							;halt until interrupt
  3137 00000A29 EBFC                    			jmp	.10						;repeat until reset kicks in
  3138                                  ;-----------------------------------------------------------------------------------------------------------------------
  3139                                  ;
  3140                                  ;	Routine:	SetKeyboardLamps
  3141                                  ;
  3142                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  3143                                  ;
  3144                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3145                                  ;
  3146                                  ;-----------------------------------------------------------------------------------------------------------------------
  3147 00000A2B E81C000000              SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  3148 00000A30 B0ED                    			mov	al,EKEYCMDLAMPS					;set/reset lamps command
  3149 00000A32 E660                    			out	EKEYPORTDATA,al					;send command to 8042
  3150 00000A34 E821000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  3151 00000A39 E460                    			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  3152 00000A3B E80C000000              			call	WaitForKeyInBuffer				;wait for input buffer ready
  3153 00000A40 88F8                    			mov	al,bh						;set/reset lamps value
  3154 00000A42 E660                    			out	EKEYPORTDATA,al					;send lamps value
  3155 00000A44 E811000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  3156 00000A49 E460                    			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  3157 00000A4B C3                      			ret							;return
  3158                                  ;-----------------------------------------------------------------------------------------------------------------------
  3159                                  ;
  3160                                  ;	Routine:	WaitForKeyInBuffer
  3161                                  ;
  3162                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  3163                                  ;
  3164                                  ;	Out:		ZF	1 = Input buffer ready
  3165                                  ;				0 = Input buffer not ready after timeout
  3166                                  ;
  3167                                  ;-----------------------------------------------------------------------------------------------------------------------
  3168 00000A4C 51                      WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  3169 00000A4D B900000100              			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  3170 00000A52 E464                    .10			in	al,EKEYPORTSTAT					;keyboard status byte
  3171 00000A54 A802                    			test	al,EKEYBITIN					;is input buffer still full?
  3172 00000A56 E0FA                    			loopnz	.10						;yes, repeat till timeout
  3173 00000A58 59                      			pop	ecx						;restore non-volatile regs
  3174 00000A59 C3                      			ret							;return
  3175                                  ;-----------------------------------------------------------------------------------------------------------------------
  3176                                  ;
  3177                                  ;	Routine:	WaitForKeyOutBuffer
  3178                                  ;
  3179                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  3180                                  ;
  3181                                  ;	Out:		ZF	0 = Output buffer has data from controller
  3182                                  ;				1 = Output buffer empty after timeout
  3183                                  ;
  3184                                  ;-----------------------------------------------------------------------------------------------------------------------
  3185 00000A5A 51                      WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  3186 00000A5B B900000100              			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  3187 00000A60 E464                    .10			in	al,EKEYPORTSTAT					;keyboard status byte
  3188 00000A62 A801                    			test	al,EKEYBITOUT					;output buffer status bit
  3189 00000A64 E1FA                    			loopz	.10						;loop until output buffer bit
  3190 00000A66 59                      			pop	ecx						;restore non-volatile regs
  3191 00000A67 C3                      			ret							;return
  3192                                  ;-----------------------------------------------------------------------------------------------------------------------
  3193                                  ;
  3194                                  ;	End of the Kernel Function Library
  3195                                  ;
  3196                                  ;-----------------------------------------------------------------------------------------------------------------------
  3197 00000A68 00<rept>                			times	8190-($-$$) db 0h				;zero fill to end of section
  3198 00001FFE 55AA                    			db	055h,0AAh					;end of segment
  3199                                  ;-----------------------------------------------------------------------------------------------------------------------
  3200                                  ;
  3201                                  ;	Console Task
  3202                                  ;
  3203                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3204                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3205                                  ;	screen and responds to user commands.
  3206                                  ;
  3207                                  ;-----------------------------------------------------------------------------------------------------------------------
  3208                                  ;-----------------------------------------------------------------------------------------------------------------------
  3209                                  ;
  3210                                  ;	Console Stack								@disk: 007400	@mem:  004000
  3211                                  ;
  3212                                  ;	This is the stack for the console task. It supports 448 nested calls.
  3213                                  ;
  3214                                  ;-----------------------------------------------------------------------------------------------------------------------
  3215                                  section			constack						;console task stack
  3216 00000000 00<rept>                			times	1792-($-$$) db 0h				;zero fill to end of section
  3217                                  ;-----------------------------------------------------------------------------------------------------------------------
  3218                                  ;
  3219                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  3220                                  ;
  3221                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3222                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3223                                  ;	16 descriptors. Six are initially defined.
  3224                                  ;
  3225                                  ;-----------------------------------------------------------------------------------------------------------------------
  3226                                  section			conldt							;console local descriptors
  3227 00000000 7F00804700934000        			dq	004093004780007Fh				;04 TSS alias
  3228 00000008 7F00004700934000        			dq	004093004700007Fh				;0C LDT alias
  3229 00000010 FF06004000934000        			dq	00409300400006FFh				;14 stack
  3230 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;1C data
  3231 00000020 FF0F0050009B4000        			dq	00409B0050000FFFh				;24 code
  3232 00000028 FF07004800934000        			dq	00409300480007FFh				;2C message queue
  3233 00000030 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  3234                                  ;-----------------------------------------------------------------------------------------------------------------------
  3235                                  ;
  3236                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  3237                                  ;
  3238                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3239                                  ;	segment. CS to console code.
  3240                                  ;
  3241                                  ;-----------------------------------------------------------------------------------------------------------------------
  3242                                  section			contss							;console task state segment
  3243 00000000 00000000                			dd	0						;00 back-link tss
  3244 00000004 00070000                			dd	0700h						;04 esp ring 0
  3245 00000008 14000000                			dd	0014h						;08 ss ring 0
  3246 0000000C 00070000                			dd	0700h						;0C esp ring 1
  3247 00000010 14000000                			dd	0014h						;10 es ring 1
  3248 00000014 00070000                			dd	0700h						;14 esp ring 2
  3249 00000018 14000000                			dd	0014h						;18 ss ring 2
  3250 0000001C 00000000                			dd	0						;1C cr ring 3
  3251 00000020 00000000                			dd	0						;20 eip
  3252 00000024 00020000                			dd	0200h						;24 eflags
  3253 00000028 00000000                			dd	0						;28 eax
  3254 0000002C 00000000                			dd	0						;2C ecx
  3255 00000030 00000000                			dd	0						;30 edx
  3256 00000034 00000000                			dd	0						;34 ebx
  3257 00000038 00070000                			dd	0700h						;38 esp ring 3
  3258 0000003C 00000000                			dd	0						;3C ebp
  3259 00000040 00000000                			dd	0						;40 esi
  3260 00000044 00000000                			dd	0						;44 edi
  3261 00000048 1C000000                			dd	001Ch						;48 es
  3262 0000004C 24000000                			dd	0024h						;4C cs
  3263 00000050 14000000                			dd	0014h						;50 ss ring 3
  3264 00000054 1C000000                			dd	001Ch						;54 ds
  3265 00000058 00000000                			dd	0						;58 fs
  3266 0000005C 00000000                			dd	0						;5c gs
  3267 00000060 50000000                			dd	0050h						;60 ldt selector in gdt
  3268 00000064 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  3269                                  ;-----------------------------------------------------------------------------------------------------------------------
  3270                                  ;
  3271                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  3272                                  ;
  3273                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3274                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3275                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3276                                  ;	event.
  3277                                  ;
  3278                                  ;-----------------------------------------------------------------------------------------------------------------------
  3279                                  section			conmque							;console message queue
  3280 00000000 08000000                			dd	8						;head pointer
  3281 00000004 08000000                			dd	8						;tail pointer
  3282 00000008 00000000<rept>          			times	510 dd 0					;queue elements
  3283                                  ;-----------------------------------------------------------------------------------------------------------------------
  3284                                  ;
  3285                                  ;	Console Code								@disk: 008400	@mem: 005000
  3286                                  ;
  3287                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3288                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3289                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3290                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3291                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3292                                  ;	board input, echoing to the console screen and responding to user commands.
  3293                                  ;
  3294                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  3295                                  ;
  3296                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  3297                                  ;				|  Real Mode Interrupt Vectors			|
  3298                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  3299                                  ;				|  Reserved BIOS Memory Area			|
  3300                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  3301                                  ;				|  Shared Kernel Memory Area			|
  3302                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  3303                                  ;				|  Global Descriptor Table (GDT)		|
  3304                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  3305                                  ;				|  Interrupt Descriptor Table (IDT)		|
  3306                                  ;			002000	+-----------------------------------------------+
  3307                                  ;				|  Interrupt Handlers				|
  3308                                  ;				|  Kernel Function Library			|
  3309                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  3310                                  ;				|  Console Task Stack Area			|
  3311                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  3312                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  3313                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  3314                                  ;				|  Console Task Task State Segment (TSS)	|
  3315                                  ;			004800	+-----------------------------------------------+
  3316                                  ;				|  Console Task Message Queue			|
  3317                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  3318                                  ;				|  Console Task Code				|
  3319                                  ;				|  Console Task Constants			|
  3320                                  ;			006000	+===============================================+
  3321                                  ;
  3322                                  ;-----------------------------------------------------------------------------------------------------------------------
  3323                                  section			concode	vstart=5000h					;labels relative to 5000h
  3324 00000000 E874000000              ConCode			call	ConInitializeData				;initialize console variables
  3325                                  
  3326                                  			clearConsoleScreen					;clear the console screen
  3326 00000005 B002                <1>  mov al,eClearConsoleScreen
  3326 00000007 CD30                <1>  int _svc
  3327                                  			putConsoleString czTitle				;display startup message
  3327 00000009 BA[69020000]        <1>  mov edx,%1
  3327 0000000E B000                <1>  mov al,ePutConsoleString
  3327 00000010 CD30                <1>  int _svc
  3328                                  .10			putConsoleString czPrompt				;display input prompt
  3328                              <1> .10 :
  3328 00000012 BA[87020000]        <1>  mov edx,%1
  3328 00000017 B000                <1>  mov al,ePutConsoleString
  3328 00000019 CD30                <1>  int _svc
  3329                                  			placeCursor						;set CRT cursor location
  3329 0000001B B003                <1>  mov al,ePlaceCursor
  3329 0000001D CD30                <1>  int _svc
  3330                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  3330 0000001F BA10080000          <1>  mov edx,%1
  3330 00000024 B94F000000          <1>  mov ecx,%2
  3330 00000029 B701                <1>  mov bh,%3
  3330 0000002B B30D                <1>  mov bl,%4
  3330 0000002D B001                <1>  mov al,eGetConsoleString
  3330 0000002F CD30                <1>  int _svc
  3331                                  			putConsoleString czNewLine				;newline
  3331 00000031 BA[9B020000]        <1>  mov edx,%1
  3331 00000036 B000                <1>  mov al,ePutConsoleString
  3331 00000038 CD30                <1>  int _svc
  3332                                  
  3333 0000003A C6056008000000          			mov	byte [wzConsoleToken],0				;null-terminate token buffer
  3334 00000041 BA10080000              			mov	edx,wzConsoleInBuffer				;console input buffer
  3335 00000046 BB60080000              			mov	ebx,wzConsoleToken				;token buffer
  3336 0000004B E842000000              			call	ConTakeToken					;handle console input
  3337 00000050 BA60080000              			mov	edx,wzConsoleToken				;token buffer
  3338 00000055 E866000000              			call	ConDetermineCommand				;determine command number
  3339 0000005A 83F80B                  			cmp	eax,ECONJMPTBLCNT				;valid command number?
  3340 0000005D 720B                    			jb	.20						;yes, branch
  3341                                  
  3342                                  			putConsoleString czUnknownCommand			;display error message
  3342 0000005F BA[89020000]        <1>  mov edx,%1
  3342 00000064 B000                <1>  mov al,ePutConsoleString
  3342 00000066 CD30                <1>  int _svc
  3343                                  
  3344 00000068 EBA8                    			jmp	.10						;next command
  3345 0000006A C1E002                  .20			shl	eax,2						;index into jump table
  3346 0000006D BA[F3010000]            			mov	edx,tConJmpTbl					;jump table base address
  3347 00000072 8B0402                  			mov	eax,[edx+eax]					;command handler routine address
  3348 00000075 FFD0                    			call	eax						;call command handler
  3349 00000077 EB99                    			jmp	.10						;next command
  3350                                  ;-----------------------------------------------------------------------------------------------------------------------
  3351                                  ;
  3352                                  ;	Routine:	ConInitializeData
  3353                                  ;
  3354                                  ;	Description:	This routine initializes console task variables.
  3355                                  ;
  3356                                  ;-----------------------------------------------------------------------------------------------------------------------
  3357 00000079 51                      ConInitializeData	push	ecx						;save non-volatile regs
  3358 0000007A 57                      			push	edi						;
  3359 0000007B 06                      			push	es						;
  3360 0000007C 6A18                    			push	ESELDAT						;load OS data selector ...
  3361 0000007E 07                      			pop	es						;... into extra segment register
  3362 0000007F BF00080000              			mov	edi,ECONDATA					;OS console data address
  3363 00000084 30C0                    			xor	al,al						;initialization value
  3364 00000086 B908010000              			mov	ecx,ECONDATALEN					;size of OS console data
  3365 0000008B FC                      			cld							;forward strings
  3366 0000008C F3AA                    			rep	stosb						;initialize data
  3367 0000008E 07                      			pop	es						;restore non-volatile regs
  3368 0000008F 5F                      			pop	edi						;
  3369 00000090 59                      			pop	ecx						;
  3370 00000091 C3                      			ret							;return
  3371                                  ;-----------------------------------------------------------------------------------------------------------------------
  3372                                  ;
  3373                                  ;	Routine:	ConTakeToken
  3374                                  ;
  3375                                  ;	Description:	This routine extracts the next token from the given source buffer.
  3376                                  ;
  3377                                  ;	In:		DS:EDX	source buffer address
  3378                                  ;			DS:EBX	target buffer address
  3379                                  ;
  3380                                  ;	Out:		DS:EDX	source buffer address
  3381                                  ;			DS:EBX	target buffer address
  3382                                  ;
  3383                                  ;	Command Form:	Line	= *3( *SP 1*ALNUM )
  3384                                  ;
  3385                                  ;-----------------------------------------------------------------------------------------------------------------------
  3386 00000092 56                      ConTakeToken		push	esi						;save non-volatile regs
  3387 00000093 57                      			push	edi						;
  3388 00000094 89D6                    			mov	esi,edx						;source buffer address
  3389 00000096 89DF                    			mov	edi,ebx						;target buffer address
  3390 00000098 FC                      			cld							;forward strings
  3391 00000099 AC                      .10			lodsb							;load byte
  3392 0000009A 3C20                    			cmp	al,EASCIISPACE					;space?
  3393 0000009C 74FB                    			je	.10						;yes, continue
  3394 0000009E 84C0                    			test	al,al						;end of line?
  3395 000000A0 7410                    			jz	.40						;yes, branch
  3396 000000A2 AA                      .20			stosb							;store byte
  3397 000000A3 AC                      			lodsb							;load byte
  3398 000000A4 84C0                    			test	al,al						;end of line?
  3399 000000A6 740A                    			jz	.40						;no, continue
  3400 000000A8 3C20                    			cmp	al,EASCIISPACE					;space?
  3401 000000AA 75F6                    			jne	.20						;no, continue
  3402 000000AC AC                      .30			lodsb							;load byte
  3403 000000AD 3C20                    			cmp	al,EASCIISPACE					;space?
  3404 000000AF 74FB                    			je	.30						;yes, continue
  3405 000000B1 4E                      			dec	esi						;pre-position
  3406 000000B2 C60700                  .40			mov	byte [edi],0					;terminate buffer
  3407 000000B5 89D7                    			mov	edi,edx						;source buffer address
  3408 000000B7 AC                      .50			lodsb							;remaining byte
  3409 000000B8 AA                      			stosb							;move to front of buffer
  3410 000000B9 84C0                    			test	al,al						;end of line?
  3411 000000BB 75FA                    			jnz	.50						;no, continue
  3412 000000BD 5F                      			pop	edi						;restore non-volatile regs
  3413 000000BE 5E                      			pop	esi						;
  3414 000000BF C3                      			ret							;return
  3415                                  ;-----------------------------------------------------------------------------------------------------------------------
  3416                                  ;
  3417                                  ;	Routine:	ConDetermineCommand
  3418                                  ;
  3419                                  ;	Description:	This routine determines the command number for the command at DS:EDX.
  3420                                  ;
  3421                                  ;	input:		DS:EDX	command address
  3422                                  ;
  3423                                  ;	output:		EAX	>=0	= command nbr
  3424                                  ;				0	= unknown command
  3425                                  ;
  3426                                  ;-----------------------------------------------------------------------------------------------------------------------
  3427 000000C0 53                      ConDetermineCommand	push	ebx						;save non-volatile regs
  3428 000000C1 56                      			push	esi						;
  3429 000000C2 57                      			push	edi						;
  3430                                  
  3431                                  			upperCaseString						;upper-case string at EDX
  3431 000000C3 B004                <1>  mov al,eUpperCaseString
  3431 000000C5 CD30                <1>  int _svc
  3432                                  
  3433 000000C7 BE[1F020000]            			mov	esi,tConCmdTbl					;commands table
  3434 000000CC 31FF                    			xor	edi,edi						;intialize command number
  3435 000000CE FC                      			cld							;forward strings
  3436 000000CF AC                      .10			lodsb							;command length
  3437 000000D0 0FB6C8                  			movzx	ecx,al						;command length
  3438 000000D3 E30D                    			jecxz	.20						;branch if end of table
  3439 000000D5 89F3                    			mov	ebx,esi						;table entry address
  3440 000000D7 01CE                    			add	esi,ecx						;next table entry address
  3441                                  
  3442                                  			compareMemory						;compare byte arrays at EDX, EBX
  3442 000000D9 B005                <1>  mov al,eCompareMemory
  3442 000000DB CD30                <1>  int _svc
  3443                                  
  3444 000000DD E303                    			jecxz	.20						;branch if equal
  3445 000000DF 47                      			inc	edi						;increment command nbr
  3446 000000E0 EBED                    			jmp	.10						;repeat
  3447 000000E2 89F8                    .20			mov	eax,edi						;command number
  3448 000000E4 5F                      			pop	edi						;restore non-volatile regs
  3449 000000E5 5E                      			pop	esi						;
  3450 000000E6 5B                      			pop	ebx						;
  3451 000000E7 C3                      			ret							;return
  3452                                  ;-----------------------------------------------------------------------------------------------------------------------
  3453                                  ;
  3454                                  ;	Routine:	ConClear
  3455                                  ;
  3456                                  ;	Description:	This routine handles the CLEAR command and its CLS alias.
  3457                                  ;
  3458                                  ;-----------------------------------------------------------------------------------------------------------------------
  3459                                  ConClear		clearConsoleScreen					;clear console screen
  3459                              <1> ConClear :
  3459 000000E8 B002                <1>  mov al,eClearConsoleScreen
  3459 000000EA CD30                <1>  int _svc
  3460 000000EC C3                      			ret							;return
  3461                                  ;-----------------------------------------------------------------------------------------------------------------------
  3462                                  ;
  3463                                  ;	Routine:	ConDate
  3464                                  ;
  3465                                  ;	Description:	This routine handles the DATE command.
  3466                                  ;
  3467                                  ;-----------------------------------------------------------------------------------------------------------------------
  3468                                  ConDate			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  3468                              <1> ConDate :
  3468 000000ED BB00090000          <1>  mov ebx,%1
  3468 000000F2 B009                <1>  mov al,eReadRealTimeClock
  3468 000000F4 CD30                <1>  int _svc
  3469                                  			putDateString	  wsConsoleDateTime, wzConsoleOutBuffer	;format date string
  3469 000000F6 BB00090000          <1>  mov ebx,%1
  3469 000000FB BAB0080000          <1>  mov edx,%2
  3469 00000100 B007                <1>  mov al,ePutDateString
  3469 00000102 CD30                <1>  int _svc
  3470                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  3470 00000104 BAB0080000          <1>  mov edx,%1
  3470 00000109 B000                <1>  mov al,ePutConsoleString
  3470 0000010B CD30                <1>  int _svc
  3471                                  			putConsoleString  czNewLine				;write newline to console
  3471 0000010D BA[9B020000]        <1>  mov edx,%1
  3471 00000112 B000                <1>  mov al,ePutConsoleString
  3471 00000114 CD30                <1>  int _svc
  3472 00000116 C3                      			ret							;return
  3473                                  ;-----------------------------------------------------------------------------------------------------------------------
  3474                                  ;
  3475                                  ;	Routine:	ConExit
  3476                                  ;
  3477                                  ;	Description:	This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3478                                  ;
  3479                                  ;-----------------------------------------------------------------------------------------------------------------------
  3480                                  ConExit			resetSystem						;issue system reset
  3480                              <1> ConExit :
  3480 00000117 B006                <1>  mov al,eResetSystem
  3480 00000119 CD30                <1>  int _svc
  3481 0000011B C3                      			ret							;return
  3482                                  ;-----------------------------------------------------------------------------------------------------------------------
  3483                                  ;
  3484                                  ;	Routine:	ConMem
  3485                                  ;
  3486                                  ;	Description:	This routine handles the MEMORY command and its MEM alias.
  3487                                  ;
  3488                                  ;	Input:		wzConsoleInBuffer contains parameter(s)
  3489                                  ;
  3490                                  ;-----------------------------------------------------------------------------------------------------------------------
  3491 0000011C 53                      ConMem			push	ebx						;save non-volatile regs
  3492 0000011D 56                      			push	esi						;
  3493 0000011E 57                      			push	edi						;
  3494                                  ;
  3495                                  ;			update the source address if a parameter is given
  3496                                  ;
  3497 0000011F BA10080000              			mov	edx,wzConsoleInBuffer				;console input buffer address (params)
  3498 00000124 BB60080000              			mov	ebx,wzConsoleToken				;console command token address
  3499 00000129 E864FFFFFF              			call	ConTakeToken					;take first param as token
  3500 0000012E 803D6008000000          			cmp	byte [wzConsoleToken],0				;token found?
  3501 00000135 740E                    			je	.10						;no, branch
  3502 00000137 BA60080000              			mov	edx,wzConsoleToken				;first param as token address
  3503                                  
  3504                                  			hexadecimalToUnsigned					;convert string token to unsigned
  3504 0000013C B00C                <1>  mov al,eHexadecimalToUnsigned
  3504 0000013E CD30                <1>  int _svc
  3505                                  
  3506 00000140 A300080000              			mov	[wfConsoleMemAddr],eax				;save console memory address
  3507                                  ;
  3508                                  ;			setup source address and row count
  3509                                  ;
  3510 00000145 8B3500080000            .10			mov	esi,[wfConsoleMemAddr]				;source memory address
  3511 0000014B 31C9                    			xor	ecx,ecx						;zero register
  3512 0000014D B110                    			mov	cl,16						;row count
  3513                                  ;
  3514                                  ;			start the row with the source address in hexadecimal
  3515                                  ;
  3516 0000014F 51                      .20			push	ecx						;save remaining rows
  3517 00000150 BFB0080000              			mov	edi,wzConsoleOutBuffer				;output buffer address
  3518 00000155 89FA                    			mov	edx,edi						;output buffer address
  3519 00000157 89F1                    			mov	ecx,esi						;console memory address
  3520                                  
  3521                                  			unsignedToHexadecimal					;convert unsigned address to hex string
  3521 00000159 B00B                <1>  mov al,eUnsignedToHexadecimal
  3521 0000015B CD30                <1>  int _svc
  3522                                  
  3523 0000015D 83C708                  			add	edi,8						;end of memory addr hexnum
  3524 00000160 B020                    			mov	al,' '						;ascii space
  3525 00000162 AA                      			stosb							;store delimiter
  3526                                  ;
  3527                                  ;			output 16 ASCII hexadecimal byte values for the row
  3528                                  ;
  3529 00000163 31C9                    			xor	ecx,ecx						;zero register
  3530 00000165 B110                    			mov	cl,16						;loop count
  3531 00000167 51                      .30			push	ecx						;save loop count
  3532 00000168 AC                      			lodsb							;memory byte
  3533 00000169 88C4                    			mov	ah,al						;memory byte
  3534 0000016B C0E804                  			shr	al,4						;high-order in bits 3-0
  3535 0000016E 0C30                    			or	al,30h						;apply ascii numeric zone
  3536 00000170 3C3A                    			cmp	al,3ah						;numeric range?
  3537 00000172 7202                    			jb	.40						;yes, skip ahead
  3538 00000174 0407                    			add	al,7						;adjust ascii for 'A'-'F'
  3539 00000176 AA                      .40			stosb							;store ascii hexadecimal of high-order
  3540 00000177 88E0                    			mov	al,ah						;low-order in bits 3-0
  3541 00000179 240F                    			and	al,0fh						;mask out high-order bits
  3542 0000017B 0C30                    			or	al,30h						;apply ascii numeric zone
  3543 0000017D 3C3A                    			cmp	al,3ah						;numeric range?
  3544 0000017F 7202                    			jb	.50						;yes, skip ahead
  3545 00000181 0407                    			add	al,7						;adjust ascii for 'A'-'F'
  3546 00000183 AA                      .50			stosb							;store ascii hexadecimal of low-order
  3547 00000184 B020                    			mov	al,' '						;ascii space
  3548 00000186 AA                      			stosb							;store ascii space delimiter
  3549 00000187 59                      			pop	ecx						;loop count
  3550 00000188 E2DD                    			loop	.30						;next
  3551                                  ;
  3552                                  ;			output printable ASCII character section for the row
  3553                                  ;
  3554 0000018A 83EE10                  			sub	esi,16						;reset source pointer
  3555 0000018D B110                    			mov	cl,16						;loop count
  3556 0000018F AC                      .60			lodsb							;source byte
  3557 00000190 3C20                    			cmp	al,32						;printable? (low-range test)
  3558 00000192 7204                    			jb	.70						;no, skip ahead
  3559 00000194 3C80                    			cmp	al,128						;printable? (high-range test)
  3560 00000196 7202                    			jb	.80						;yes, skip ahead
  3561 00000198 B020                    .70			mov	al,' '						;display space instead of printable
  3562 0000019A AA                      .80			stosb							;store printable ascii byte
  3563 0000019B E2F2                    			loop	.60						;next source byte
  3564 0000019D 30C0                    			xor	al,al						;nul-terminator
  3565 0000019F AA                      			stosb							;terminate output line
  3566                                  ;
  3567                                  ;			display constructed output buffer and newline
  3568                                  ;
  3569                                  			putConsoleString wzConsoleOutBuffer			;display constructed output
  3569 000001A0 BAB0080000          <1>  mov edx,%1
  3569 000001A5 B000                <1>  mov al,ePutConsoleString
  3569 000001A7 CD30                <1>  int _svc
  3570                                  			putConsoleString czNewLine				;display new line
  3570 000001A9 BA[9B020000]        <1>  mov edx,%1
  3570 000001AE B000                <1>  mov al,ePutConsoleString
  3570 000001B0 CD30                <1>  int _svc
  3571                                  ;
  3572                                  ;			repeat until all lines displayed and preserve source address
  3573                                  ;
  3574 000001B2 59                      			pop	ecx						;remaining rows
  3575 000001B3 E29A                    			loop	.20						;next row
  3576 000001B5 893500080000            			mov	[wfConsoleMemAddr],esi				;update console memory address
  3577 000001BB 5F                      			pop	edi						;restore regs
  3578 000001BC 5E                      			pop	esi						;
  3579 000001BD 5B                      			pop	ebx						;
  3580 000001BE C3                      			ret							;return
  3581                                  ;-----------------------------------------------------------------------------------------------------------------------
  3582                                  ;
  3583                                  ;	Routine:	ConTime
  3584                                  ;
  3585                                  ;	Description:	This routine Handles the TIME command.
  3586                                  ;
  3587                                  ;-----------------------------------------------------------------------------------------------------------------------
  3588                                  ConTime			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  3588                              <1> ConTime :
  3588 000001BF BB00090000          <1>  mov ebx,%1
  3588 000001C4 B009                <1>  mov al,eReadRealTimeClock
  3588 000001C6 CD30                <1>  int _svc
  3589                                  			putTimeString	  wsConsoleDateTime,wzConsoleOutBuffer	;format time string
  3589 000001C8 BB00090000          <1>  mov ebx,%1
  3589 000001CD BAB0080000          <1>  mov edx,%2
  3589 000001D2 B008                <1>  mov al,ePutTimeString
  3589 000001D4 CD30                <1>  int _svc
  3590                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  3590 000001D6 BAB0080000          <1>  mov edx,%1
  3590 000001DB B000                <1>  mov al,ePutConsoleString
  3590 000001DD CD30                <1>  int _svc
  3591                                  			putConsoleString  czNewLine				;write newline to console
  3591 000001DF BA[9B020000]        <1>  mov edx,%1
  3591 000001E4 B000                <1>  mov al,ePutConsoleString
  3591 000001E6 CD30                <1>  int _svc
  3592 000001E8 C3                      			ret							;return
  3593                                  ;-----------------------------------------------------------------------------------------------------------------------
  3594                                  ;
  3595                                  ;	Routine:	ConVersion
  3596                                  ;
  3597                                  ;	Description:	This routine handles the VERSION command and its alias, VER.
  3598                                  ;
  3599                                  ;-----------------------------------------------------------------------------------------------------------------------
  3600                                  ConVersion		putConsoleString czTitle				;display version message
  3600                              <1> ConVersion :
  3600 000001E9 BA[69020000]        <1>  mov edx,%1
  3600 000001EE B000                <1>  mov al,ePutConsoleString
  3600 000001F0 CD30                <1>  int _svc
  3601 000001F2 C3                      			ret							;return
  3602                                  ;-----------------------------------------------------------------------------------------------------------------------
  3603                                  ;
  3604                                  ;	Tables
  3605                                  ;
  3606                                  ;-----------------------------------------------------------------------------------------------------------------------
  3607                                  										;---------------------------------------
  3608                                  										;  Command Jump Table
  3609                                  										;---------------------------------------
  3610                                  tConJmpTbl		equ	$						;command jump table
  3611 000001F3 17010000                			dd	ConExit		- ConCode			;shutdown command routine offset
  3612 000001F7 E9010000                			dd	ConVersion	- ConCode			;version command routine offset
  3613 000001FB 1C010000                			dd	ConMem		- ConCode			;memory command routine offset
  3614 000001FF E8000000                			dd	ConClear	- ConCode			;clear command routine offset
  3615 00000203 ED000000                			dd	ConDate		- ConCode			;date command routine offset
  3616 00000207 17010000                			dd	ConExit		- ConCode			;exit command routine offset
  3617 0000020B 17010000                			dd	ConExit		- ConCode			;quit command routine offset
  3618 0000020F BF010000                			dd	ConTime		- ConCode			;time command routine offset
  3619 00000213 E8000000                			dd	ConClear	- ConCode			;cls command routine offset
  3620 00000217 1C010000                			dd	ConMem		- ConCode			;mem command routine offset
  3621 0000021B E9010000                			dd	ConVersion	- ConCode			;ver command routine offset
  3622                                  ECONJMPTBLL		equ	($-tConJmpTbl)					;table length
  3623                                  ECONJMPTBLCNT		equ	ECONJMPTBLL/4					;table entries
  3624                                  										;---------------------------------------
  3625                                  										;  Command Name Table
  3626                                  										;---------------------------------------
  3627                                  tConCmdTbl		equ	$						;command name table
  3628 0000021F 0953485554444F574E-     			db	9,"SHUTDOWN",0					;shutdown command
  3628 00000228 00                 
  3629 00000229 0856455253494F4E00      			db	8,"VERSION",0					;version command
  3630 00000232 074D454D4F525900        			db	7,"MEMORY",0					;memory command
  3631 0000023A 06434C45415200          			db	6,"CLEAR",0					;clear command
  3632 00000241 054441544500            			db	5,"DATE",0					;date command
  3633 00000247 054558495400            			db	5,"EXIT",0					;exit command
  3634 0000024D 055155495400            			db	5,"QUIT",0					;quit command
  3635 00000253 0554494D4500            			db	5,"TIME",0					;time command
  3636 00000259 04434C5300              			db	4,"CLS",0					;cls command
  3637 0000025E 044D454D00              			db	4,"MEM",0					;mem command
  3638 00000263 0456455200              			db	4,"VER",0					;ver command
  3639 00000268 00                      			db	0						;end of table
  3640                                  ;-----------------------------------------------------------------------------------------------------------------------
  3641                                  ;
  3642                                  ;	Constants
  3643                                  ;
  3644                                  ;-----------------------------------------------------------------------------------------------------------------------
  3645 00000269 437573746F6D204F70-     czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  3645 00000272 65726174696E672053-
  3645 0000027B 797374656D20312E30-
  3645 00000284 0D0A00             
  3646 00000287 3A00                    czPrompt		db	":",0						;prompt string
  3647 00000289 556E6B6E6F776E2063-     czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  3647 00000292 6F6D6D616E640D0A00 
  3648 0000029B 0D0A00                  czNewLine		db	13,10,0						;new line string
  3649 0000029E 00<rept>                			times	4094-($-$$) db 0h				;zero fill to end of section
  3650 00000FFE 55AA                    			db	055h,0AAh					;end of section
  3651                                  %endif
  3652                                  %ifdef BUILDDISK
  3653                                  ;-----------------------------------------------------------------------------------------------------------------------
  3654                                  ;
  3655                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  3656                                  ;
  3657                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3658                                  ;
  3659                                  ;-----------------------------------------------------------------------------------------------------------------------
  3660                                  section			unused							;unused disk space
  3661                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  3662                                  %endif
