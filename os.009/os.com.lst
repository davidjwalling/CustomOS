     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.009
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support reading the real-time clock and new
     8                                  ;                       "date" and "time" and other related commands.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.01, May 1 2017
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKEYF...        Keyboard status flags
   164                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   165                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   166                                  ;       EMSG...         Message identifers
   167                                  ;
   168                                  ;=======================================================================================================================
   169                                  ;-----------------------------------------------------------------------------------------------------------------------
   170                                  ;
   171                                  ;       Hardware-Defined Values
   172                                  ;
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   177                                  ;
   178                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   179                                  ;       for CGA, EGA, VGA and compatible video modes.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   183                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   184                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   185                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ;
   188                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   189                                  ;
   190                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   191                                  ;
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   194                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   195                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   196                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   197                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  ;
   200                                  ;       8042 Keyboard Controller                                                EKEYB...
   201                                  ;
   202                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   203                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   204                                  ;
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  EKEYBPORTDATA           equ     060h                                            ;data port
   207                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   208                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   209                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   210                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   211                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   212                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   213                                                                                                                  ;---------------------------------------
   214                                                                                                                  ;       Keyboard Scan Codes
   215                                                                                                                  ;---------------------------------------
   216                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   217                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   218                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   219                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   220                                  EKEYBSLASH              equ     035h                                            ;slash
   221                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   222                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   223                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   224                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   225                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   226                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   227                                  EKEYBUP                 equ     080h                                            ;up
   228                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   229                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   230                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   231                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   232                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   233                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   234                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   235                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   236                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   237                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   238                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   239                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   240                                  ;-----------------------------------------------------------------------------------------------------------------------
   241                                  ;
   242                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   243                                  ;
   244                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   245                                  ;       external devices and signals a hardware interrupt to the CPU.
   246                                  ;
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   249                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   250                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   251                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   252                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  ;
   255                                  ;       8253 Programmable Interval Timer                                        EPIT...
   256                                  ;
   257                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   258                                  ;       approximately 18.2 times per second.
   259                                  ;
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  ;
   264                                  ;       x86 CPU Architecture                                                    ;EX86...
   265                                  ;
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   271                                  ;
   272                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   273                                  ;
   274                                  ;-----------------------------------------------------------------------------------------------------------------------
   275                                  ERTCREGPORT             equ     70h                                             ;register select port
   276                                  ERTCDATAPORT            equ     71h                                             ;data port
   277                                  ERTCSECONDREG           equ     00h                                             ;second
   278                                  ERTCMINUTEREG           equ     02h                                             ;minute
   279                                  ERTCHOURREG             equ     04h                                             ;hour
   280                                  ERTCWEEKDAYREG          equ     06h                                             ;weekday
   281                                  ERTCDAYREG              equ     07h                                             ;day
   282                                  ERTCMONTHREG            equ     08h                                             ;month
   283                                  ERTCYEARREG             equ     09h                                             ;year of the century
   284                                  ERTCSTATUSREG           equ     0bh                                             ;status
   285                                  ERTCCENTURYREG          equ     32h                                             ;century
   286                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   287                                  ;-----------------------------------------------------------------------------------------------------------------------
   288                                  ;
   289                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   290                                  ;
   291                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   292                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   293                                  ;
   294                                  ;       0.......        Segment is not present in memory (triggers int 11)
   295                                  ;       1.......        Segment is present in memory
   296                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   297                                  ;       ...0....        Segment is a system segment
   298                                  ;       ...00010                Local Descriptor Table
   299                                  ;       ...00101                Task Gate
   300                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   301                                  ;       ...01100                Call Gate (386)
   302                                  ;       ...01110                Interrupt Gate (386)
   303                                  ;       ...01111                Trap Gate (386)
   304                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   305                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   306                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   307                                  ;
   308                                  ;-----------------------------------------------------------------------------------------------------------------------
   309                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   310                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   311                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   312                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   313                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   314                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   315                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   316                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   317                                  ;-----------------------------------------------------------------------------------------------------------------------
   318                                  ;
   319                                  ;       Firmware-Defined Values
   320                                  ;
   321                                  ;-----------------------------------------------------------------------------------------------------------------------
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;
   324                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   325                                  ;
   326                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   327                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   328                                  ;
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   331                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   332                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   333                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   334                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   335                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   336                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   337                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   338                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   339                                  ;-----------------------------------------------------------------------------------------------------------------------
   340                                  ;
   341                                  ;       Standards-Based Values
   342                                  ;
   343                                  ;-----------------------------------------------------------------------------------------------------------------------
   344                                  ;-----------------------------------------------------------------------------------------------------------------------
   345                                  ;
   346                                  ;       ASCII                                                                   EASCII...
   347                                  ;
   348                                  ;-----------------------------------------------------------------------------------------------------------------------
   349                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   350                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   351                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   352                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   353                                  EASCIISPACE             equ     020h                                            ;space
   354                                  EASCIIUPPERA            equ     041h                                            ;'A'
   355                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   356                                  EASCIILOWERA            equ     061h                                            ;'a'
   357                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   358                                  EASCIITILDE             equ     07Eh                                            ;'~'
   359                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   360                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   361                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   362                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   363                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   364                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   365                                  EASCIICASE              equ     00100000b                                       ;case bit
   366                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   367                                  ;-----------------------------------------------------------------------------------------------------------------------
   368                                  ;
   369                                  ;       Operating System Values
   370                                  ;
   371                                  ;-----------------------------------------------------------------------------------------------------------------------
   372                                  ;-----------------------------------------------------------------------------------------------------------------------
   373                                  ;
   374                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   375                                  ;
   376                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   377                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   378                                  ;
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   381                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   382                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   383                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   384                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   385                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   386                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   387                                  ;-----------------------------------------------------------------------------------------------------------------------
   388                                  ;       Console Constants                                                       ECON...
   389                                  ;-----------------------------------------------------------------------------------------------------------------------
   390                                  ECONCOLS                equ     80                                              ;columns per row
   391                                  ECONROWS                equ     24                                              ;console rows
   392                                  ECONOIAROW              equ     24                                              ;operator information area row
   393                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   394                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   395                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   396                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   397                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   398                                  ;-----------------------------------------------------------------------------------------------------------------------
   399                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   400                                  ;-----------------------------------------------------------------------------------------------------------------------
   401                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   402                                  EGDTCGA                 equ     020h                                            ;cga video selector
   403                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   404                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   405                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   406                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   407                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   408                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   409                                  ;-----------------------------------------------------------------------------------------------------------------------
   410                                  ;       Keyboard Flags                                                          EKEYF...
   411                                  ;-----------------------------------------------------------------------------------------------------------------------
   412                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   413                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   414                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   415                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   416                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   417                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   418                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   419                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   420                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   421                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   422                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   423                                  ;-----------------------------------------------------------------------------------------------------------------------
   424                                  ;       Kernel Constants                                                        EKRN...
   425                                  ;-----------------------------------------------------------------------------------------------------------------------
   426                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   427                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   428                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   429                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   430                                  ;-----------------------------------------------------------------------------------------------------------------------
   431                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   432                                  ;-----------------------------------------------------------------------------------------------------------------------
   433                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   434                                  ;-----------------------------------------------------------------------------------------------------------------------
   435                                  ;       Message Identifiers                                                     EMSG...
   436                                  ;-----------------------------------------------------------------------------------------------------------------------
   437                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   438                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   439                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   440                                  ;=======================================================================================================================
   441                                  ;
   442                                  ;       Structures
   443                                  ;
   444                                  ;=======================================================================================================================
   445                                  ;-----------------------------------------------------------------------------------------------------------------------
   446                                  ;
   447                                  ;       DATETIME
   448                                  ;
   449                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   450                                  ;
   451                                  ;-----------------------------------------------------------------------------------------------------------------------
   452                                  struc                   DATETIME
   453 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   454 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   455 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   456 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   457 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   458 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   459 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   460 00000007 <res 00000001>          .century                resb    1                                               ;century
   461                                  EDATETIMELEN            equ     ($-.second)
   462                                  endstruc
   463                                  ;-----------------------------------------------------------------------------------------------------------------------
   464                                  ;
   465                                  ;       MQUEUE
   466                                  ;
   467                                  ;       The MQUEUE structure maps memory used for a message queue.
   468                                  ;
   469                                  ;-----------------------------------------------------------------------------------------------------------------------
   470                                  struc                   MQUEUE
   471 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   472 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   473 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   474                                  endstruc
   475                                  ;-----------------------------------------------------------------------------------------------------------------------
   476                                  ;
   477                                  ;       OSDATA
   478                                  ;
   479                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   480                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   481                                  ;
   482                                  ;-----------------------------------------------------------------------------------------------------------------------
   483                                  struc                   OSDATA
   484 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   485 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   486 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   487 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   488 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   489 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   490 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   491 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   492 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   493 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   494 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   495 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   496 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   497 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   498 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   499 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   500 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   501 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   502 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   503 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   504 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   505 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   506 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   507 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   508 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   509 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   510 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   511 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   512 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   513 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   514 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   515 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   516 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   517 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   518 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   519 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   520 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   521 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   522 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   523 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   524 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   525 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   526 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   527 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   528 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   529 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   530 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   531 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   532 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   533 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   534 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   535 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   536 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   537 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   538 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   539 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   540 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   541 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   542 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   543 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   544 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   545 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   546 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   547 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   548 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   549 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   550 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   551 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   552 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   553 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   554 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   555 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   556 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   557 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   558 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   559 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   560 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   561 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   562 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   563 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   564 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   565 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   566 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   567 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   568 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   569 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   570 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   571 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   572 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   573 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   574 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   575 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   576 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   577 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   578 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   579 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   580 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   581 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   582 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   583 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   584 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   585                                  ;-----------------------------------------------------------------------------------------------------------------------
   586                                  ;
   587                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   588                                  ;
   589                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   590                                  ;
   591                                  ;-----------------------------------------------------------------------------------------------------------------------
   592                                  ECONDATA                equ     ($)
   593 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   594 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   595 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   596 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   597 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   598 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   599 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   600 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   601 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   602 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   603 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   604 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   605 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   606 0000085C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   607 000008AC <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   608 000008FC <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   609                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   610                                  ;-----------------------------------------------------------------------------------------------------------------------
   611                                  ;
   612                                  ;       End of OS Variables
   613                                  ;
   614                                  ;-----------------------------------------------------------------------------------------------------------------------
   615                                  endstruc
   616                                  ;-----------------------------------------------------------------------------------------------------------------------
   617                                  ;
   618                                  ;       Macros
   619                                  ;
   620                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   621                                  ;
   622                                  ;-----------------------------------------------------------------------------------------------------------------------
   623                                  %macro                  mint    1
   624                                  _%1                     equ     ($-$$) / EX86DESCLEN
   625                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   626                                  %endmacro
   627                                  %macro                  mtrap   1
   628                                  _%1                     equ     ($-$$) / EX86DESCLEN
   629                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   630                                  %endmacro
   631                                  %macro                  menter  1
   632                                  ?%1                     equ     ($-$$)
   633                                  %endmacro
   634                                  %macro                  tsvce   1
   635                                  e%1                     equ     ($-tsvc)/4
   636                                                          dd      %1
   637                                  %endmacro
   638                                  %ifdef BUILDBOOT
   639                                  ;=======================================================================================================================
   640                                  ;
   641                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   642                                  ;
   643                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   644                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   645                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   646                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   647                                  ;
   648                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   649                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   650                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   651                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   652                                  ;       immediately followed by a disk parameter table.
   653                                  ;
   654                                  ;=======================================================================================================================
   655                                                          cpu     8086                                            ;assume minimal CPU
   656                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   657                                                          bits    16                                              ;16-bit code at power-up
   658                                  %ifdef BUILDPREP
   659                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   660                                  %else
   661                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   662                                  %endif
   663                                  ;-----------------------------------------------------------------------------------------------------------------------
   664                                  ;
   665                                  ;       Disk Parameter Table
   666                                  ;
   667                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   668                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   669                                  ;
   670                                  ;-----------------------------------------------------------------------------------------------------------------------
   671                                                          db      "CustomOS"                                      ;eight-byte label
   672                                  cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   673                                  cbClusterSectors        db      1                                               ;sectors per cluster
   674                                  cwReservedSectors       dw      1                                               ;reserved sectors
   675                                  cbFatCount              db      2                                               ;file allocation table copies
   676                                  cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   677                                  cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   678                                  cbDiskType              db      0F0h                                            ;1.44MB
   679                                  cwFatSectors            dw      9                                               ;sectors per FAT copy
   680                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   681                                  cwTrackSectors          dw      18                                              ;sectors per track (as word)
   682                                  cwDiskSides             dw      2                                               ;sides per disk
   683                                  cwSpecialSectors        dw      0                                               ;special sectors
   684                                  ;
   685                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   686                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   687                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   688                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   689                                  ;       given several possible starting values for CS:IP.
   690                                  ;
   691                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   692                                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   693                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   694                                  .20                     pop     ax                                              ;AX =      7c21     c21    21
   695                                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   696                                                          mov     cl,4                                            ;shift count
   697                                                          shr     ax,cl                                           ;AX =       7c0      c0     0
   698                                                          mov     bx,cs                                           ;BX =         0     700   7c0
   699                                                          add     bx,ax                                           ;BX =       7c0     7c0   7c0
   700                                  ;
   701                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   702                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   703                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   704                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   705                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   706                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   707                                  ;
   708                                                          sub     bx,16                                           ;BX = 07b0
   709                                                          mov     ds,bx                                           ;DS = 07b0 = psp
   710                                                          mov     es,bx                                           ;ES = 07b0 = psp
   711                                                          mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   712                                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   713                                  ;
   714                                  ;       Our boot addressability is now set up according to the following diagram.
   715                                  ;
   716                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   717                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   718                                  ;                               |  256 = 100h bytes                             |
   719                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   720                                  ;                               |  Boot Sector (vstart=0100h)                   |
   721                                  ;                               |  1 sector = 512 = 200h bytes                  |
   722                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   723                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   724                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   725                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   726                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   727                                  ;                               |  2 sectors = 1024 = 400h bytes
   728                                  ;                       009400  +-----------------------------------------------+ DS:1900
   729                                  ;
   730                                  ;       On entry, DL indicates the drive being booted from.
   731                                  ;
   732                                                          mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   733                                  ;
   734                                  ;       Compute directory i/o buffer address.
   735                                  ;
   736                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   737                                                          mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   738                                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   739                                                          mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   740                                  ;
   741                                  ;       Compute segment where os.com will be loaded.
   742                                  ;
   743                                                          shr     ax,cl                                           ;AX = 0150
   744                                                          add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   745                                                          sub     ax,16                                           ;AX = 08f0
   746                                                          mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   747                                  ;
   748                                  ;       Set the video mode to 80 column, 25 row, text.
   749                                  ;
   750                                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   751                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   752                                  ;
   753                                  ;       Write a message to the console so we know we have our addressability established.
   754                                  ;
   755                                                          mov     si,czLoadMsg                                    ;loading message
   756                                                          call    BootPrint                                       ;display loader message
   757                                  ;
   758                                  ;       Initialize the number of directory sectors to search.
   759                                  ;
   760                                                          mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   761                                                          mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   762                                  ;
   763                                  ;       Compute number of directory sectors and initialize overhead count.
   764                                  ;
   765                                                          mov     cx,ax                                           ;CX = 00e0 = 224 entries
   766                                                          mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   767                                                          div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   768                                                          mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   769                                  ;
   770                                  ;       Compute directory entries per sector.
   771                                  ;
   772                                                          xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   773                                                          div     cx                                              ;AX = 0010 = entries per dir sector
   774                                                          mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   775                                  ;
   776                                  ;       Compute first logical directory sector and update overhead count.
   777                                  ;
   778                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   779                                                          mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   780                                                          add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   781                                                          add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   782                                                          mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   783                                                          add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   784                                  ;
   785                                  ;       Read directory sector.
   786                                  ;
   787                                  .30                     mov     al,1                                            ;sector count
   788                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 01
   789                                                          mov     bx,[wwDirBuffer]                                ;BX = 1500
   790                                                          call    ReadSector                                      ;read sector into es:bx
   791                                  ;
   792                                  ;       Setup variables to search this directory sector.
   793                                  ;
   794                                                          mov     ax,[wwEntriesLeft]                              ;directory entries to search
   795                                                          cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   796                                                          jna     .40                                             ;no, continue
   797                                                          mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   798                                  .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   799                                                          mov     si,cbKernelProgram                              ;program name
   800                                                          mov     di,[wwDirBuffer]                                ;DI = 1500
   801                                  ;
   802                                  ;       Loop through directory sectors searching for kernel program.
   803                                  ;
   804                                  .50                     push    si                                              ;save kernel name address
   805                                                          push    di                                              ;save dir i/o buffer address
   806                                                          mov     cx,11                                           ;length of 8+3 name
   807                                                          cld                                                     ;forward strings
   808                                                          repe    cmpsb                                           ;compare entry name
   809                                                          pop     di                                              ;restore dir i/o buffer address
   810                                                          pop     si                                              ;restore kernel name address
   811                                                          je      .60                                             ;exit loop if found
   812                                                          add     di,[cwEntryLen]                                 ;point to next dir entry
   813                                                          dec     ax                                              ;decrement remaining entries
   814                                                          jnz     .50                                             ;next entry
   815                                  ;
   816                                  ;       Repeat search if we are not at the end of the directory.
   817                                  ;
   818                                                          inc     word [wwLogicalSector]                          ;increment logical sector
   819                                                          cmp     word [wwEntriesLeft],0                          ;done with directory?
   820                                                          jne     .30                                             ;no, get next sector
   821                                                          mov     si,czNoKernel                                   ;missing kernel message
   822                                                          jmp     BootExit                                        ;display message and exit
   823                                  ;
   824                                  ;       If we find the kernel program in the directory, read the FAT.
   825                                  ;
   826                                  .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   827                                                          mov     [wwLogicalSector],ax                            ;start past boot sector
   828                                                          mov     ax,[cwFatSectors]                               ;AX = 0009
   829                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 09
   830                                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   831                                                          call    ReadSector                                      ;read FAT into buffer
   832                                  ;
   833                                  ;       Get the starting cluster of the kernel program and target address.
   834                                  ;
   835                                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   836                                                          les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   837                                  ;
   838                                  ;       Read each program cluster into RAM.
   839                                  ;
   840                                  .70                     push    ax                                              ;save cluster nbr
   841                                                          sub     ax,2                                            ;AX = cluster nbr base 0
   842                                                          mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   843                                                          mov     [wbReadCount],cl                                ;save sectors to read
   844                                                          xor     ch,ch                                           ;CX = sectors per cluster
   845                                                          mul     cx                                              ;DX:AX = logical cluster sector
   846                                                          add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   847                                                          mov     [wwLogicalSector],ax                            ;save logical sector nbr
   848                                                          call    ReadSector                                      ;read sectors into ES:BX
   849                                  ;
   850                                  ;       Update buffer pointer for next cluster.
   851                                  ;
   852                                                          mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   853                                                          xor     ah,ah                                           ;AX = sectors per cluster
   854                                                          mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   855                                                          add     bx,ax                                           ;BX = next cluster target address
   856                                                          pop     ax                                              ;AX = restore cluster nbr
   857                                  ;
   858                                  ;       Compute next cluster number.
   859                                  ;
   860                                                          mov     cx,ax                                           ;CX = cluster nbr
   861                                                          mov     di,ax                                           ;DI = cluster nbr
   862                                                          shr     ax,1                                            ;AX = cluster/2
   863                                                          mov     dx,ax                                           ;DX = cluster/2
   864                                                          add     ax,dx                                           ;AX = 2*(cluster/2)
   865                                                          add     ax,dx                                           ;AX = 3*(cluster/2)
   866                                                          and     di,1                                            ;get low bit
   867                                                          add     di,ax                                           ;add one if cluster is odd
   868                                                          add     di,EBOOTFATBASE                                 ;add FAT buffer address
   869                                                          mov     ax,[di]                                         ;get cluster bytes
   870                                  ;
   871                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   872                                  ;
   873                                                          test    cl,1                                            ;is cluster odd?
   874                                                          jz      .80                                             ;no, skip ahead
   875                                                          mov     cl,4                                            ;shift count
   876                                                          shr     ax,cl                                           ;shift nybble low
   877                                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   878                                                          cmp     ax,0FFFh                                        ;end of chain?
   879                                                          jne     .70                                             ;no, continue
   880                                  ;
   881                                  ;       Transfer control to the operating system program.
   882                                  ;
   883                                                          db      0EAh                                            ;jmp seg:offset
   884                                  wwLoadOffset            dw      0100h                                           ;kernel entry offset
   885                                  wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   886                                  ;
   887                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   888                                  ;
   889                                  ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   890                                                          mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   891                                                          mov     cx,ax                                           ;CX = sectors per cylinder
   892                                                          mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   893                                                          div     cx                                              ;AX = cylinder; DX = cyl sector
   894                                                          mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   895                                                          mov     ax,dx                                           ;AX = cyl sector
   896                                                          div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   897                                                          inc     ah                                              ;AH = sector (1,2,3,...)
   898                                                          mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   899                                  ;
   900                                  ;       Try maxtries times to read sector.
   901                                  ;
   902                                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   903                                  .10                     push    bx                                              ;save buffer address
   904                                                          push    cx                                              ;save retry count
   905                                                          mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   906                                                          mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   907                                                          mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   908                                                          int     EBIOSINTDISKETTE                                ;read sector
   909                                                          pop     cx                                              ;restore retry count
   910                                                          pop     bx                                              ;restore buffer address
   911                                                          jnc     BootReturn                                      ;skip ahead if done
   912                                                          loop    .10                                             ;retry
   913                                  ;
   914                                  ;       Handle disk error: convert to ASCII and store in error string.
   915                                  ;
   916                                                          mov     al,ah                                           ;AL = bios error code
   917                                                          xor     ah,ah                                           ;AX = bios error code
   918                                                          mov     dl,16                                           ;divisor for base 16
   919                                                          div     dl                                              ;AL = hi order, AH = lo order
   920                                                          or      ax,03030h                                       ;apply ASCII zone bits
   921                                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   922                                                          jb      .20                                             ;continue if numeral
   923                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   924                                  .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   925                                                          jb      .30                                             ;continue if numeral
   926                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   927                                  .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   928                                                          mov     si,czErrorMsg                                   ;error message address
   929                                  BootExit                call    BootPrint                                       ;display messge to console
   930                                  ;
   931                                  ;       Wait for a key press.
   932                                  ;
   933                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   934                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   935                                                          jnz     .20                                             ;continue if key pressed
   936                                                          sti                                                     ;enable maskable interrupts
   937                                                          hlt                                                     ;wait for interrupt
   938                                                          jmp     .10                                             ;repeat
   939                                  ;
   940                                  ;       Reset the system.
   941                                  ;
   942                                  .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   943                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   944                                  .30                     sti                                                     ;enable maskable interrupts
   945                                                          hlt                                                     ;stop until reset, int, nmi
   946                                                          jmp     .30                                             ;loop until restart kicks in
   947                                  ;
   948                                  ;       Display text message.
   949                                  ;
   950                                  BootPrint               cld                                                     ;forward strings
   951                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
   952                                                          test    al,al                                           ;end of string?
   953                                                          jz      BootReturn                                      ;... yes, exit our loop
   954                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   955                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   956                                                          jmp     .10                                             ;repeat until done
   957                                  BootReturn              ret                                                     ;return
   958                                  ;-----------------------------------------------------------------------------------------------------------------------
   959                                  ;
   960                                  ;       Constants
   961                                  ;
   962                                  ;-----------------------------------------------------------------------------------------------------------------------
   963                                                          align   2
   964                                  cwEntryLen              dw      32                                              ;length of directory entry
   965                                  cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   966                                  czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   967                                  czErrorMsg              db      "Disk error "                                   ;error message
   968                                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   969                                  czNoKernel              db      "OS missing",0                                  ;missing kernel message
   970                                  ;-----------------------------------------------------------------------------------------------------------------------
   971                                  ;
   972                                  ;       Work Areas
   973                                  ;
   974                                  ;-----------------------------------------------------------------------------------------------------------------------
   975                                                          align   2
   976                                  wwDirBuffer             dw      0                                               ;directory i/o buffer address
   977                                  wwEntriesLeft           dw      0                                               ;directory entries to search
   978                                  wwOverhead              dw      0                                               ;overhead sectors
   979                                  wwSectorEntries         dw      0                                               ;directory entries per sector
   980                                  wwLogicalSector         dw      0                                               ;current logical sector
   981                                  wwReadCountCommand      equ     $                                               ;read count and command
   982                                  wbReadCount             db      0                                               ;sectors to read
   983                                  cbReadCommand           db      2                                               ;BIOS read disk fn code
   984                                  wwDriveHead             equ     $                                               ;drive, head (word)
   985                                  wbDrive                 db      0                                               ;drive
   986                                  wbHead                  db      0                                               ;head
   987                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   988                                                          db      0                                               ;sector
   989                                  wbTrack                 db      0                                               ;track
   990                                                          times   510-($-$$) db 0h                                ;zero fill to end of sector
   991                                                          db      055h,0AAh                                       ;end of sector signature
   992                                  %endif
   993                                  %ifdef BUILDPREP
   994                                  ;=======================================================================================================================
   995                                  ;
   996                                  ;       Diskette Preparation Code
   997                                  ;
   998                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   999                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1000                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1001                                  ;
  1002                                  ;=======================================================================================================================
  1003                                  ;
  1004                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1005                                  ;
  1006                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1007                                                          call    BootPrint                                       ;display message
  1008                                  ;
  1009                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1010                                  ;
  1011                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1012                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1013                                                          jnz     .20                                             ;continue if key pressed
  1014                                                          sti                                                     ;enable interrupts
  1015                                                          hlt                                                     ;wait for interrupt
  1016                                                          jmp     .10                                             ;repeat
  1017                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1018                                                          je      .30                                             ;yes, branch
  1019                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1020                                                          jne     .10                                             ;no, repeat
  1021                                                          jmp     .120                                            ;yes, exit program
  1022                                  ;
  1023                                  ;       Display writing-sector message and patch the JMP instruction.
  1024                                  ;
  1025                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1026                                                          call    BootPrint                                       ;display message
  1027                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1028                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1029                                                          mov     [bx],ax                                         ;update the JMP instruction
  1030                                  ;
  1031                                  ;       Try to read the boot sector.
  1032                                  ;
  1033                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1034                                  .40                     push    cx                                              ;save remaining tries
  1035                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1036                                                          mov     dx,0                                            ;head zero, drive zero
  1037                                                          mov     cx,1                                            ;track zero, sector one
  1038                                                          mov     ax,0201h                                        ;read one sector
  1039                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1040                                                          pop     cx                                              ;restore remaining retries
  1041                                                          jnc     .50                                             ;skip ahead if successful
  1042                                                          loop    .40                                             ;try again
  1043                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1044                                                          jmp     .70                                             ;branch to error routine
  1045                                  ;
  1046                                  ;       Copy diskette parms from input buffer to output buffer.
  1047                                  ;
  1048                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1049                                                          add     si,11                                           ;skip over JMP and system ID
  1050                                                          mov     di,Boot                                         ;output buffer address
  1051                                                          add     di,11                                           ;skip over JMP and system ID
  1052                                                          mov     cx,19                                           ;length of diskette parameters
  1053                                                          cld                                                     ;forward string copies
  1054                                                          rep     movsb                                           ;copy diskette parameters
  1055                                  ;
  1056                                  ;       Try to write boot sector to diskette.
  1057                                  ;
  1058                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1059                                  .60                     push    cx                                              ;save remaining tries
  1060                                                          mov     bx,Boot                                         ;output buffer address
  1061                                                          mov     dx,0                                            ;head zero, drive zero
  1062                                                          mov     cx,1                                            ;track zero, sector one
  1063                                                          mov     ax,0301h                                        ;write one sector
  1064                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1065                                                          pop     cx                                              ;restore remaining retries
  1066                                                          jnc     .100                                            ;skip ahead if successful
  1067                                                          loop    .60                                             ;try again
  1068                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1069                                  ;
  1070                                  ;       Convert the error code to ASCII and display the error message.
  1071                                  ;
  1072                                  .70                     push    ax                                              ;save error code
  1073                                                          mov     al,ah                                           ;copy error code
  1074                                                          mov     ah,0                                            ;AX = error code
  1075                                                          mov     dl,10h                                          ;hexadecimal divisor
  1076                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1077                                                          or      ax,03030h                                       ;add ASCII zone digits
  1078                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1079                                                          jb      .80                                             ;yes, continue
  1080                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1081                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1082                                                          jb      .90                                             ;yes, continue
  1083                                                          add     al,7                                            ;no, make ASCII
  1084                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1085                                                          call    BootPrint                                       ;write error message
  1086                                                          pop     ax                                              ;restore error code
  1087                                  ;
  1088                                  ;       Display the completion message.
  1089                                  ;
  1090                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1091                                                          mov     al,ah                                           ;BIOS return code
  1092                                                          cmp     al,0                                            ;success?
  1093                                                          je      .110                                            ;yes, continue
  1094                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1095                                                          cmp     al,1                                            ;disk parameter error?
  1096                                                          je      .110                                            ;yes, continue
  1097                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1098                                                          cmp     al,2                                            ;address mark not found?
  1099                                                          je      .110                                            ;yes, continue
  1100                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1101                                                          cmp     al,3                                            ;protected disk?
  1102                                                          je      .110                                            ;yes, continue
  1103                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1104                                                          cmp     al,6                                            ;diskette removed?
  1105                                                          je      .110                                            ;yes, continue
  1106                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1107                                                          cmp     al,80H                                          ;drive timed out?
  1108                                                          je      .110                                            ;yes, continue
  1109                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1110                                  .110                    call    BootPrint                                       ;display result message
  1111                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1112                                                          int     021h                                            ;terminate DOS program
  1113                                                          ret                                                     ;return (should not execute)
  1114                                  ;-----------------------------------------------------------------------------------------------------------------------
  1115                                  ;
  1116                                  ;       Diskette Preparation Messages
  1117                                  ;
  1118                                  ;-----------------------------------------------------------------------------------------------------------------------
  1119                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1120                                                          db      13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1121                                                          db      13,10
  1122                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1123                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1124                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1125                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1126                                                          db      13,10,0
  1127                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1128                                                          db      13,10,0
  1129                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1130                                                          db      13,10,0
  1131                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1132                                                          db      13,10,0
  1133                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1134                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1135                                                          db      13,10,0
  1136                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1137                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1138                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1139                                                          db      13,10,"and retry."
  1140                                                          db      13,10,0
  1141                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1142                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1143                                                          db      13,10,"using another diskette."
  1144                                                          db      13,10,0
  1145                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1146                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1147                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1148                                                          db      13,10,0
  1149                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1150                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1151                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1152                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1153                                                          db      13,10,"is properly inserted in the diskette drive."
  1154                                                          db      13,10,0
  1155                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1156                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1157                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1158                                                          db      13,10,0
  1159                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1160                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1161                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1162                                                          db      13,10,0
  1163                                  wcPrepInBuf             equ     $
  1164                                  %endif
  1165                                  %ifdef BUILDDISK
  1166                                  ;=======================================================================================================================
  1167                                  ;
  1168                                  ;       File Allocation Tables
  1169                                  ;
  1170                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1171                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1172                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1173                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1174                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1175                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1176                                  ;       the last cluster in the chain.
  1177                                  ;
  1178                                  ;       Every three bytes encode two FAT entries as follows:
  1179                                  ;
  1180                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1181                                  ;
  1182                                  ;=======================================================================================================================
  1183                                  ;-----------------------------------------------------------------------------------------------------------------------
  1184                                  ;
  1185                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1186                                  ;
  1187                                  ;-----------------------------------------------------------------------------------------------------------------------
  1188                                  section                 fat1                                                    ;first copy of FAT
  1189                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1190                                                          db      005h,060h,000h, 007h,080h,000h
  1191                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1192                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1193                                                          db      011h,020h,001h, 013h,040h,001h
  1194                                                          db      015h,060h,001h, 017h,080h,001h
  1195                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1196                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1197                                                          db      021h,020h,002h, 023h,040h,002h
  1198                                                          db      025h,060h,002h, 027h,080h,002h
  1199                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1200                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1201                                  ;-----------------------------------------------------------------------------------------------------------------------
  1202                                  ;
  1203                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1204                                  ;
  1205                                  ;-----------------------------------------------------------------------------------------------------------------------
  1206                                  section                 fat2                                                    ;second copy of FAT
  1207                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1208                                                          db      005h,060h,000h, 007h,080h,000h
  1209                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1210                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1211                                                          db      011h,020h,001h, 013h,040h,001h
  1212                                                          db      015h,060h,001h, 017h,080h,001h
  1213                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1214                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1215                                                          db      021h,020h,002h, 023h,040h,002h
  1216                                                          db      025h,060h,002h, 027h,080h,002h
  1217                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1218                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1219                                  ;-----------------------------------------------------------------------------------------------------------------------
  1220                                  ;
  1221                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1222                                  ;
  1223                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1224                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1225                                  ;       copy.
  1226                                  ;
  1227                                  ;-----------------------------------------------------------------------------------------------------------------------
  1228                                  section                 dir                                                     ;diskette directory
  1229                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1230                                                          db      020h                                            ;attribute (archive bit set)
  1231                                                          times   10 db 0                                         ;unused
  1232                                                          dw      0h                                              ;time
  1233                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1234                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1235                                                          dw      2                                               ;first cluster
  1236                                                          dd      05400h                                          ;file size
  1237                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1238                                  %endif
  1239                                  %ifdef BUILDCOM
  1240                                  ;=======================================================================================================================
  1241                                  ;
  1242                                  ;       OS.COM
  1243                                  ;
  1244                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1245                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1246                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1247                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1248                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1249                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1250                                  ;
  1251                                  ;       Our loader addressability is set up according to the following diagram.
  1252                                  ;
  1253                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1254                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1255                                  ;                               |  256 = 100h bytes                             |
  1256                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1257                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1258                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1259                                  ;                       007e00  +-----------------------------------------------+
  1260                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1261                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1262                                  ;                               |                                               |
  1263                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1264                                  ;                               |                                               |
  1265                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1266                                  ;                               |  Loader Code                                  |
  1267                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1268                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1269                                  ;
  1270                                  ;=======================================================================================================================
  1271                                  ;-----------------------------------------------------------------------------------------------------------------------
  1272                                  ;
  1273                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1274                                  ;
  1275                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1276                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1277                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1278                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1279                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1280                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1281                                  ;       disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1282                                  ;       registers.
  1283                                  ;
  1284                                  ;-----------------------------------------------------------------------------------------------------------------------
  1285                                                          cpu     8086                                            ;assume minimal CPU
  1286                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1287                                                          bits    16                                              ;this is 16-bit code
  1288 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1289 00000001 1F                                              pop     ds                                              ;...as our data segment
  1290 00000002 0E                                              push    cs                                              ;use the code segment
  1291 00000003 07                                              pop     es                                              ;...as our extra segment
  1292                                  ;
  1293                                  ;       Write a message to the console so we know we have our addressability established.
  1294                                  ;
  1295 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1296 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1297                                  ;
  1298                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1299                                  ;
  1300 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1301 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1302 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1303 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1304                                                          cpu     386                                             ;allow 80386 instructions
  1305 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1306 00000017 E89600                                          call    PutTTYString                                    ;display message
  1307                                  ;
  1308                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1309                                  ;
  1310 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1311 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1312 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1313 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1314 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1315 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1316 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1317 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1318 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1319 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1320                                  ;
  1321                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1322                                  ;
  1323 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1324 00000038 07                                              pop     es                                              ;... as target segment
  1325 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1326 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1327 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1328 00000041 FC                                              cld                                                     ;forward strings
  1329 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1330 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1331 00000047 E86600                                          call    PutTTYString                                    ;display message
  1332                                  ;
  1333                                  ;       Switch to protected mode.
  1334                                  ;
  1335 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1336 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1337 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1338 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1339 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1340 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1341 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1342 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1343 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1344 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1345 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1346                                  ;
  1347                                  ;       Enable hardware and maskable interrupts.
  1348                                  ;
  1349 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1350 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1351 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1352 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1353                                  ;
  1354                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1355                                  ;
  1356 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1357 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1358 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1359                                  ;-----------------------------------------------------------------------------------------------------------------------
  1360                                  ;
  1361                                  ;       Routine:        LoaderExit
  1362                                  ;
  1363                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1364                                  ;
  1365                                  ;       In:             DS:SI   string address
  1366                                  ;
  1367                                  ;-----------------------------------------------------------------------------------------------------------------------
  1368 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1369                                  ;
  1370                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1371                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1372                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1373                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1374                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1375                                  ;
  1376 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1377 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1378 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1379 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1380 00000085 F4                                              hlt                                                     ;wait for interrupt
  1381 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1382                                  ;
  1383                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1384                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1385                                  ;       HLT until the system resets.
  1386                                  ;
  1387 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1388 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1389 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1390 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1391 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1392                                  ;-----------------------------------------------------------------------------------------------------------------------
  1393                                  ;
  1394                                  ;       Routine:        GetCPUType
  1395                                  ;
  1396                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1397                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1398                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1399                                  ;
  1400                                  ;       Out:            AX      0 = 808x, v20, etc.
  1401                                  ;                               1 = 80186
  1402                                  ;                               2 = 80286
  1403                                  ;                               3 = 80386
  1404                                  ;
  1405                                  ;-----------------------------------------------------------------------------------------------------------------------
  1406 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1407 00000092 B120                                            mov     cl,32                                           ;shift count
  1408 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1409 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1410 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1411                                                          cpu     186
  1412 0000009A 54                                              push    sp                                              ;save stack pointer
  1413 0000009B 59                                              pop     cx                                              ;...into cx
  1414 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1415 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1416                                                          cpu     286
  1417 000000A0 40                                              inc     ax                                              ;AX = 2
  1418 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1419 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1420 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1421 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1422 000000AE 40                                              inc     ax                                              ;AX = 3
  1423 000000AF C3                      .10                     ret                                                     ;return
  1424                                  ;-----------------------------------------------------------------------------------------------------------------------
  1425                                  ;
  1426                                  ;       Routine:        PutTTYString
  1427                                  ;
  1428                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1429                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1430                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1431                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1432                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1433                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1434                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1435                                  ;                       to LODSB is not needed.
  1436                                  ;
  1437                                  ;       In:             DS:SI   address of string
  1438                                  ;
  1439                                  ;       Out:            DF      0
  1440                                  ;                       ZF      1
  1441                                  ;                       AL      0
  1442                                  ;
  1443                                  ;-----------------------------------------------------------------------------------------------------------------------
  1444 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1445 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1446 000000B2 84C0                                            test    al,al                                           ;end of string?
  1447 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1448 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1449 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1450 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1451 000000BC C3                      .20                     ret                                                     ;return
  1452                                  ;-----------------------------------------------------------------------------------------------------------------------
  1453                                  ;
  1454                                  ;       Loader Data
  1455                                  ;
  1456                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1457                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1458                                  ;
  1459                                  ;-----------------------------------------------------------------------------------------------------------------------
  1460 000000BD 90                                              align   2
  1461 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1462 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1463 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1464 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1465 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1465 000000D1 74696E672073797374-
  1465 000000DA 656D20726571756972-
  1465 000000E3 657320616E20693338-
  1465 000000EC 36206F72206C617465-
  1465 000000F5 722070726F63657373-
  1465 000000FE 6F722E0D0A         
  1466 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1466 0000010C 65737320616E79206B-
  1466 00000115 657920746F20726573-
  1466 0000011E 746172742074686520-
  1466 00000127 636F6D70757465722E-
  1466 00000130 0D0A00             
  1467 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1468 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1468 00000145 7265640D0A00       
  1469 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1469 00000154 616465640D0A00     
  1470 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1470 00000164 4F530D0A00         
  1471 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1472                                  ;=======================================================================================================================
  1473                                  ;
  1474                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1475                                  ;
  1476                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1477                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1478                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1479                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1480                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1481                                  ;
  1482                                  ;=======================================================================================================================
  1483                                  ;=======================================================================================================================
  1484                                  ;
  1485                                  ;       Kernel Tables
  1486                                  ;
  1487                                  ;=======================================================================================================================
  1488                                  ;-----------------------------------------------------------------------------------------------------------------------
  1489                                  ;
  1490                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1491                                  ;
  1492                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1493                                  ;       first descriptor must be all nulls.
  1494                                  ;
  1495                                  ;       6   5         4         3         2         1         0
  1496                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1497                                  ;       ----------------------------------------------------------------
  1498                                  ;       h......hffffmmmma......ab......................bn..............n
  1499                                  ;       00000000                        all areas have base addresses below 2^24
  1500                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1501                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1502                                  ;                   1001                present, ring-0, selector
  1503                                  ;
  1504                                  ;       h...h   hi-order base address (bits 24-31)
  1505                                  ;       ffff    flags
  1506                                  ;       mmmm    hi-order limit (bits 16-19)
  1507                                  ;       a...a   access
  1508                                  ;       b...b   lo-order base address (bits 0-23)
  1509                                  ;       n...n   lo-order limit (bits 0-15)
  1510                                  ;
  1511                                  ;-----------------------------------------------------------------------------------------------------------------------
  1512                                  section                 gdt                                                     ;global descriptor table
  1513 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1514 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1515 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1516 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1517 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1518 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1519 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1520 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1521 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1522 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1523 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1524 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1525 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1526 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1527 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1528                                  ;-----------------------------------------------------------------------------------------------------------------------
  1529                                  ;
  1530                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1531                                  ;
  1532                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1533                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1534                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1535                                  ;
  1536                                  ;       6   5         4         3         2         1         0
  1537                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1538                                  ;       ----------------------------------------------------------------
  1539                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1540                                  ;
  1541                                  ;       h...h   high-order offset (bits 16-31)
  1542                                  ;       P       present (0=unused interrupt)
  1543                                  ;       zz      descriptor privilege level
  1544                                  ;       S       storage segment (must be zero for IDT)
  1545                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1546                                  ;       S...S   handling code selector in GDT
  1547                                  ;       l...l   lo-order offset (bits 0-15)
  1548                                  ;
  1549                                  ;-----------------------------------------------------------------------------------------------------------------------
  1550                                  section                 idt                                                     ;interrupt descriptor table
  1551                                                          mint    dividebyzero                                    ;00 divide by zero
  1551                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1551 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1552                                                          mint    singlestep                                      ;01 single step
  1552                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1552 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1553                                                          mint    nmi                                             ;02 non-maskable
  1553                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1553 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1554                                                          mint    break                                           ;03 break
  1554                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1554 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1555                                                          mint    into                                            ;04 into
  1555                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1555 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1556                                                          mint    bounds                                          ;05 bounds
  1556                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1556 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1557                                                          mint    badopcode                                       ;06 bad op code
  1557                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1557 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1558                                                          mint    nocoproc                                        ;07 no coprocessor
  1558                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1558 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1559                                                          mint    doublefault                                     ;08 double-fault
  1559                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1559 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1560                                                          mint    operand                                         ;09 operand
  1560                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1560 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1561                                                          mint    badtss                                          ;0a bad TSS
  1561                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1561 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1562                                                          mint    notpresent                                      ;0b not-present
  1562                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1562 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1563                                                          mint    stacklimit                                      ;0c stack limit
  1563                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1563 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1564                                                          mint    protection                                      ;0d general protection fault
  1564                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1564 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1565                                                          mint    int14                                           ;0e (reserved)
  1565                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1565 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1566                                                          mint    int15                                           ;0f (reserved)
  1566                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1566 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1567                                                          mint    coproccalc                                      ;10 (reserved)
  1567                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1567 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1568                                                          mint    int17                                           ;11 (reserved)
  1568                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1568 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1569                                                          mint    int18                                           ;12 (reserved)
  1569                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1569 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1570                                                          mint    int19                                           ;13 (reserved)
  1570                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1570 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1571                                                          mint    int20                                           ;14 (reserved)
  1571                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1571 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1572                                                          mint    int21                                           ;15 (reserved)
  1572                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1572 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1573                                                          mint    int22                                           ;16 (reserved)
  1573                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1573 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1574                                                          mint    int23                                           ;17 (reserved)
  1574                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1574 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1575                                                          mint    int24                                           ;18 (reserved)
  1575                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1575 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1576                                                          mint    int25                                           ;19 (reserved)
  1576                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1576 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1577                                                          mint    int26                                           ;1a (reserved)
  1577                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1577 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1578                                                          mint    int27                                           ;1b (reserved)
  1578                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1578 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1579                                                          mint    int28                                           ;1c (reserved)
  1579                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1579 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1580                                                          mint    int29                                           ;1d (reserved)
  1580                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1580 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1581                                                          mint    int30                                           ;1e (reserved)
  1581                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1581 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1582                                                          mint    int31                                           ;1f (reserved)
  1582                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1582 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1583                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1583                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1583 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1584                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1584                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1584 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1585                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1585                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1585 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1586                                                          mtrap   com2                                            ;23 IRQ3 com2
  1586                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1586 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1587                                                          mtrap   com1                                            ;24 IRQ4 com1
  1587                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1587 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1588                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1588                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1588 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1589                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1589                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1589 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1590                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1590                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1590 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1591                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1591                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1591 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1592                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1592                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1592 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1593                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1593                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1593 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1594                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1594                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1594 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1595                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1595                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1595 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1596                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1596                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1596 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1597                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1597                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1597 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1598                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1598                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1598 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1599                                                          mtrap   svc                                             ;30 OS services
  1599                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1599 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1600 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1601                                  ;=======================================================================================================================
  1602                                  ;
  1603                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1604                                  ;
  1605                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1606                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1607                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1608                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1609                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1610                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1611                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1612                                  ;
  1613                                  ;=======================================================================================================================
  1614                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1615                                                          cpu     386                                             ;allow 80386 instructions
  1616                                                          bits    32                                              ;this is 32-bit code
  1617                                  ;=======================================================================================================================
  1618                                  ;
  1619                                  ;       CPU Interrupt Handlers
  1620                                  ;
  1621                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1622                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1623                                  ;
  1624                                  ;=======================================================================================================================
  1625                                  ;-----------------------------------------------------------------------------------------------------------------------
  1626                                  ;
  1627                                  ;       INT0    Divide By Zero
  1628                                  ;
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                                          menter  dividebyzero                                    ;divide by zero
  1630                              <1> ?%1 equ ($-$$)
  1631 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1632 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1633 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1634                                  ;-----------------------------------------------------------------------------------------------------------------------
  1635                                  ;
  1636                                  ;       INT1    Single Step
  1637                                  ;
  1638                                  ;-----------------------------------------------------------------------------------------------------------------------
  1639                                                          menter  singlestep                                      ;single step
  1639                              <1> ?%1 equ ($-$$)
  1640 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1641 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1642 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1643                                  ;-----------------------------------------------------------------------------------------------------------------------
  1644                                  ;
  1645                                  ;       INT2    Non-Maskable Interrupt
  1646                                  ;
  1647                                  ;-----------------------------------------------------------------------------------------------------------------------
  1648                                                          menter  nmi                                             ;non-maskable
  1648                              <1> ?%1 equ ($-$$)
  1649 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1650 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1651 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1652                                  ;-----------------------------------------------------------------------------------------------------------------------
  1653                                  ;
  1654                                  ;       INT3    Break
  1655                                  ;
  1656                                  ;-----------------------------------------------------------------------------------------------------------------------
  1657                                                          menter  break                                           ;break
  1657                              <1> ?%1 equ ($-$$)
  1658 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1659 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1660 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1661                                  ;-----------------------------------------------------------------------------------------------------------------------
  1662                                  ;
  1663                                  ;       INT4    Into
  1664                                  ;
  1665                                  ;-----------------------------------------------------------------------------------------------------------------------
  1666                                                          menter  into                                            ;into
  1666                              <1> ?%1 equ ($-$$)
  1667 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1668 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1669 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1670                                  ;-----------------------------------------------------------------------------------------------------------------------
  1671                                  ;
  1672                                  ;       INT5    Bounds
  1673                                  ;
  1674                                  ;-----------------------------------------------------------------------------------------------------------------------
  1675                                                          menter  bounds                                          ;bounds
  1675                              <1> ?%1 equ ($-$$)
  1676 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1677 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1678 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1679                                  ;-----------------------------------------------------------------------------------------------------------------------
  1680                                  ;
  1681                                  ;       INT6    Bad Operation Code
  1682                                  ;
  1683                                  ;-----------------------------------------------------------------------------------------------------------------------
  1684                                                          menter  badopcode                                       ;bad opcode interrupt
  1684                              <1> ?%1 equ ($-$$)
  1685 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1686 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1687 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1688                                  ;-----------------------------------------------------------------------------------------------------------------------
  1689                                  ;
  1690                                  ;       INT7    No Coprocessor
  1691                                  ;
  1692                                  ;-----------------------------------------------------------------------------------------------------------------------
  1693                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1693                              <1> ?%1 equ ($-$$)
  1694 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1695 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1696 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1697                                  ;-----------------------------------------------------------------------------------------------------------------------
  1698                                  ;
  1699                                  ;       INT8    Double Fault
  1700                                  ;
  1701                                  ;-----------------------------------------------------------------------------------------------------------------------
  1702                                                          menter  doublefault                                     ;doublefault interrupt
  1702                              <1> ?%1 equ ($-$$)
  1703 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1704 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1705 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                  ;
  1708                                  ;       INT9    Operand
  1709                                  ;
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                                          menter  operand                                         ;operand interrupt
  1711                              <1> ?%1 equ ($-$$)
  1712 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1713 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1714 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1715                                  ;-----------------------------------------------------------------------------------------------------------------------
  1716                                  ;
  1717                                  ;       INT10   Bad Task State Segment
  1718                                  ;
  1719                                  ;-----------------------------------------------------------------------------------------------------------------------
  1720                                                          menter  badtss                                          ;bad TSS interrupt
  1720                              <1> ?%1 equ ($-$$)
  1721 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1722 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1723 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1724                                  ;-----------------------------------------------------------------------------------------------------------------------
  1725                                  ;
  1726                                  ;       INT11   Not Present
  1727                                  ;
  1728                                  ;-----------------------------------------------------------------------------------------------------------------------
  1729                                                          menter  notpresent                                      ;not present interrupt
  1729                              <1> ?%1 equ ($-$$)
  1730 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1731 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1732 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1733                                  ;-----------------------------------------------------------------------------------------------------------------------
  1734                                  ;
  1735                                  ;       INT12   Stack Limit
  1736                                  ;
  1737                                  ;-----------------------------------------------------------------------------------------------------------------------
  1738                                                          menter  stacklimit                                      ;stack limit interrupt
  1738                              <1> ?%1 equ ($-$$)
  1739 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1740 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1741 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1742                                  ;-----------------------------------------------------------------------------------------------------------------------
  1743                                  ;
  1744                                  ;       INT13   General Protection Fault
  1745                                  ;
  1746                                  ;-----------------------------------------------------------------------------------------------------------------------
  1747                                                          menter  protection                                      ;protection fault interrupt
  1747                              <1> ?%1 equ ($-$$)
  1748 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1749 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1750 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1751                                  ;-----------------------------------------------------------------------------------------------------------------------
  1752                                  ;
  1753                                  ;       INT14   Reserved
  1754                                  ;
  1755                                  ;-----------------------------------------------------------------------------------------------------------------------
  1756                                                          menter  int14                                           ;(reserved)
  1756                              <1> ?%1 equ ($-$$)
  1757 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1758 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1759 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1760                                  ;-----------------------------------------------------------------------------------------------------------------------
  1761                                  ;
  1762                                  ;       INT15   Reserved
  1763                                  ;
  1764                                  ;-----------------------------------------------------------------------------------------------------------------------
  1765                                                          menter  int15                                           ;(reserved)
  1765                              <1> ?%1 equ ($-$$)
  1766 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1767 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1768 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1769                                  ;-----------------------------------------------------------------------------------------------------------------------
  1770                                  ;
  1771                                  ;       INT16   Coprocessor Calculation
  1772                                  ;
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                                          menter  coproccalc                                      ;coprocessor calculation
  1774                              <1> ?%1 equ ($-$$)
  1775 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1776 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1777 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1778                                  ;-----------------------------------------------------------------------------------------------------------------------
  1779                                  ;
  1780                                  ;       INT17   Reserved
  1781                                  ;
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                                          menter  int17                                           ;(reserved)
  1783                              <1> ?%1 equ ($-$$)
  1784 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1785 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1786 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                  ;
  1789                                  ;       INT18   Reserved
  1790                                  ;
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                                          menter  int18                                           ;(reserved)
  1792                              <1> ?%1 equ ($-$$)
  1793 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1794 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1795 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                  ;
  1798                                  ;       INT19   Reserved
  1799                                  ;
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                                          menter  int19                                           ;(reserved)
  1801                              <1> ?%1 equ ($-$$)
  1802 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1803 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1804 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                  ;
  1807                                  ;       INT20   Reserved
  1808                                  ;
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                                          menter  int20                                           ;(reserved)
  1810                              <1> ?%1 equ ($-$$)
  1811 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1812 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1813 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                  ;
  1816                                  ;       INT21   Reserved
  1817                                  ;
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                                          menter  int21                                           ;(reserved)
  1819                              <1> ?%1 equ ($-$$)
  1820 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1821 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1822 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                  ;
  1825                                  ;       INT22   Reserved
  1826                                  ;
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                                          menter  int22                                           ;(reserved)
  1828                              <1> ?%1 equ ($-$$)
  1829 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1830 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1831 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                  ;
  1834                                  ;       INT23   Reserved
  1835                                  ;
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                                          menter  int23                                           ;(reserved)
  1837                              <1> ?%1 equ ($-$$)
  1838 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1839 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1840 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                  ;
  1843                                  ;       INT24   Reserved
  1844                                  ;
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                                          menter  int24                                           ;(reserved)
  1846                              <1> ?%1 equ ($-$$)
  1847 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1848 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1849 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                  ;
  1852                                  ;       INT25   Reserved
  1853                                  ;
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                                          menter  int25                                           ;(reserved)
  1855                              <1> ?%1 equ ($-$$)
  1856 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1857 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1858 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                  ;
  1861                                  ;       INT26   Reserved
  1862                                  ;
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                                          menter  int26                                           ;(reserved)
  1864                              <1> ?%1 equ ($-$$)
  1865 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1866 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1867 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                  ;
  1870                                  ;       INT27   Reserved
  1871                                  ;
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                                          menter  int27                                           ;(reserved)
  1873                              <1> ?%1 equ ($-$$)
  1874 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1875 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1876 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                  ;
  1879                                  ;       INT28   Reserved
  1880                                  ;
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                                          menter  int28                                           ;(reserved)
  1882                              <1> ?%1 equ ($-$$)
  1883 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1884 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1885 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                  ;
  1888                                  ;       INT29   Reserved
  1889                                  ;
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                                          menter  int29                                           ;(reserved)
  1891                              <1> ?%1 equ ($-$$)
  1892 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1893 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1894 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                  ;
  1897                                  ;       INT30   Reserved
  1898                                  ;
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                                          menter  int30                                           ;(reserved)
  1900                              <1> ?%1 equ ($-$$)
  1901 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1902 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1903 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1904                                  ;-----------------------------------------------------------------------------------------------------------------------
  1905                                  ;
  1906                                  ;       INT31   Reserved
  1907                                  ;
  1908                                  ;-----------------------------------------------------------------------------------------------------------------------
  1909                                                          menter  int31                                           ;(reserved)
  1909                              <1> ?%1 equ ($-$$)
  1910 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1911 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1912 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                  ;
  1915                                  ;       Routine:        ReportInterrupt
  1916                                  ;
  1917                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1918                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1919                                  ;
  1920                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  1921                                  ;                       [esp+12]        cs                                      stored by interrupt call
  1922                                  ;                       [esp+8]         eip                                     stored by interrupt call
  1923                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  1924                                  ;                       [esp+0]         error message address                   stored by push instructions
  1925                                  ;
  1926                                  ;       Out:            N/A             This routine does not exit.
  1927                                  ;
  1928                                  ;-----------------------------------------------------------------------------------------------------------------------
  1929 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1930 00000154 06                                              push    es                                              ;save ES at time of interrupt
  1931 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1932 00000156 89E5                                            mov     ebp,esp                                         ;ebp --> [EDI]
  1933                                  ;
  1934                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1935                                  ;
  1936                                  ;                       [ebp+56]        eflags
  1937                                  ;                       [ebp+52]        cs
  1938                                  ;                       [ebp+48]        eip
  1939                                  ;                       [ebp+44]        interrupt number (0-31)
  1940                                  ;                       [ebp+40]        error message address
  1941                                  ;                       [ebp+36]        ds
  1942                                  ;                       [ebp+32]        es
  1943                                  ;                       [ebp+28]        eax
  1944                                  ;                       [ebp+24]        ecx
  1945                                  ;                       [ebp+20]        edx
  1946                                  ;                       [ebp+16]        ebx
  1947                                  ;                       [ebp+12]        esp
  1948                                  ;                       [ebp+8]         ebp
  1949                                  ;                       [ebp+4]         esi
  1950                                  ;                       [ebp+0]         edi
  1951                                  ;
  1952 00000158 0E                                              push    cs                                              ;load code selector ...
  1953 00000159 1F                                              pop     ds                                              ;... into DS
  1954 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  1955 0000015C 07                                              pop     es                                              ;... into ES
  1956                                  ;
  1957                                  ;       Display the interrupt report boundary box
  1958                                  ;
  1959 0000015D B10D                                            mov     cl,13                                           ;column
  1960 0000015F B506                                            mov     ch,6                                            ;row
  1961 00000161 B232                                            mov     dl,50                                           ;width
  1962 00000163 B608                                            mov     dh,8                                            ;height
  1963 00000165 B707                                            mov     bh,07h                                          ;attribute
  1964 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  1965                                  ;
  1966                                  ;       Display the report header
  1967                                  ;
  1968 0000016C B10F                                            mov     cl,15                                           ;column
  1969 0000016E B507                                            mov     ch,7                                            ;row
  1970 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  1971 00000175 E8630E0000                                      call    SetConsoleString                                ;draw text string
  1972                                  ;
  1973                                  ;       Display the interrupt description label
  1974                                  ;
  1975 0000017A B10F                                            mov     cl,15                                           ;column
  1976 0000017C B508                                            mov     ch,8                                            ;row
  1977 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  1978 00000183 E8550E0000                                      call    SetConsoleString                                ;draw text string
  1979                                  ;
  1980                                  ;       Display the interrupt number
  1981                                  ;
  1982 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  1983 0000018B B11A                                            mov     cl,26                                           ;column
  1984 0000018D B508                                            mov     ch,8                                            ;row
  1985 0000018F E8630B0000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  1986                                  ;
  1987                                  ;       Display the interrupt name
  1988                                  ;
  1989 00000194 B11D                                            mov     cl,29                                           ;column
  1990 00000196 B508                                            mov     ch,8                                            ;row
  1991 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  1992 0000019B E83D0E0000                                      call    SetConsoleString                                ;display interrupt description
  1993                                  ;
  1994                                  ;       Display the register values header
  1995                                  ;
  1996 000001A0 B10F                                            mov     cl,15                                           ;column
  1997 000001A2 B50A                                            mov     ch,10                                           ;row
  1998 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  1999 000001A9 E82F0E0000                                      call    SetConsoleString                                ;draw text string
  2000                                  ;
  2001                                  ;       Display the EAX register label and value
  2002                                  ;
  2003 000001AE B10F                                            mov     cl,15                                           ;column
  2004 000001B0 B50B                                            mov     ch,11                                           ;row
  2005 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  2006 000001B7 E8210E0000                                      call    SetConsoleString                                ;draw label
  2007 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2008 000001BF B113                                            mov     cl,19                                           ;column
  2009 000001C1 B50B                                            mov     ch,11                                           ;row
  2010 000001C3 E8550B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2011                                  ;
  2012                                  ;       Display the ECX register label and value
  2013                                  ;
  2014 000001C8 B10F                                            mov     cl,15                                           ;column
  2015 000001CA B50C                                            mov     ch,12                                           ;row
  2016 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2017 000001D1 E8070E0000                                      call    SetConsoleString                                ;draw label
  2018 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2019 000001D9 B113                                            mov     cl,19                                           ;column
  2020 000001DB B50C                                            mov     ch,12                                           ;row
  2021 000001DD E83B0B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2022                                  ;
  2023                                  ;       Display the EDX register label and value
  2024                                  ;
  2025 000001E2 B10F                                            mov     cl,15                                           ;column
  2026 000001E4 B50D                                            mov     ch,13                                           ;row
  2027 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2028 000001EB E8ED0D0000                                      call    SetConsoleString                                ;draw label
  2029 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2030 000001F3 B113                                            mov     cl,19                                           ;column
  2031 000001F5 B50D                                            mov     ch,13                                           ;row
  2032 000001F7 E8210B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2033                                  ;
  2034                                  ;       Display the EBX register label and value
  2035                                  ;
  2036 000001FC B10F                                            mov     cl,15                                           ;column
  2037 000001FE B50E                                            mov     ch,14                                           ;row
  2038 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2039 00000205 E8D30D0000                                      call    SetConsoleString                                ;draw label
  2040 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2041 0000020D B113                                            mov     cl,19                                           ;column
  2042 0000020F B50E                                            mov     ch,14                                           ;row
  2043 00000211 E8070B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2044                                  ;
  2045                                  ;       Display the ESI register label and value
  2046                                  ;
  2047 00000216 B11D                                            mov     cl,29                                           ;column
  2048 00000218 B50B                                            mov     ch,11                                           ;row
  2049 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2050 0000021F E8B90D0000                                      call    SetConsoleString                                ;draw label
  2051 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2052 00000227 B121                                            mov     cl,33                                           ;column
  2053 00000229 B50B                                            mov     ch,11                                           ;row
  2054 0000022B E8ED0A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2055                                  ;
  2056                                  ;       Display the EDI register label and value
  2057                                  ;
  2058 00000230 B11D                                            mov     cl,29                                           ;column
  2059 00000232 B50C                                            mov     ch,12                                           ;row
  2060 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2061 00000239 E89F0D0000                                      call    SetConsoleString                                ;draw label
  2062 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2063 00000241 B121                                            mov     cl,33                                           ;column
  2064 00000243 B50C                                            mov     ch,12                                           ;row
  2065 00000245 E8D30A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2066                                  ;
  2067                                  ;       Display the EBP register label and value
  2068                                  ;
  2069 0000024A B11D                                            mov     cl,29                                           ;column
  2070 0000024C B50D                                            mov     ch,13                                           ;row
  2071 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2072 00000253 E8850D0000                                      call    SetConsoleString                                ;draw label
  2073 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2074 0000025B B121                                            mov     cl,33                                           ;column
  2075 0000025D B50D                                            mov     ch,13                                           ;row
  2076 0000025F E8B90A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2077                                  ;
  2078                                  ;       Display the DS register label and value
  2079                                  ;
  2080 00000264 B12A                                            mov     cl,42                                           ;column
  2081 00000266 B50B                                            mov     ch,11                                           ;row
  2082 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2083 0000026D E86B0D0000                                      call    SetConsoleString                                ;draw label
  2084 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2085 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2086 00000278 B12E                                            mov     cl,46                                           ;column
  2087 0000027A B50B                                            mov     ch,11                                           ;row
  2088 0000027C E8AC0A0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2089                                  ;
  2090                                  ;       Display the ES register label and value
  2091                                  ;
  2092 00000281 B12A                                            mov     cl,42                                           ;column
  2093 00000283 B50C                                            mov     ch,12                                           ;row
  2094 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2095 0000028A E84E0D0000                                      call    SetConsoleString                                ;draw label
  2096 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2097 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2098 00000295 B12E                                            mov     cl,46                                           ;column
  2099 00000297 B50C                                            mov     ch,12                                           ;row
  2100 00000299 E88F0A0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2101                                  ;
  2102                                  ;       Display the SS register label and value
  2103                                  ;
  2104 0000029E B12A                                            mov     cl,42                                           ;column
  2105 000002A0 B50D                                            mov     ch,13                                           ;row
  2106 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2107 000002A7 E8310D0000                                      call    SetConsoleString                                ;draw label
  2108 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2109 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2110 000002B1 B12E                                            mov     cl,46                                           ;column
  2111 000002B3 B50D                                            mov     ch,13                                           ;row
  2112 000002B5 E8730A0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2113                                  ;
  2114                                  ;       Display the CS register lable and value
  2115                                  ;
  2116 000002BA B12A                                            mov     cl,42                                           ;column
  2117 000002BC B50E                                            mov     ch,14                                           ;row
  2118 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2119 000002C3 E8150D0000                                      call    SetConsoleString                                ;draw label
  2120 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2121 000002CA 668B4534                                        mov     ax,[ebp+52]                                     ;CS
  2122 000002CE B12E                                            mov     cl,46                                           ;column
  2123 000002D0 B50E                                            mov     ch,14                                           ;row
  2124 000002D2 E8560A0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2125                                  ;
  2126                                  ;       Display the EFLAGS register label and value
  2127                                  ;
  2128 000002D7 B133                                            mov     cl,51                                           ;column
  2129 000002D9 B50B                                            mov     ch,11                                           ;row
  2130 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2131 000002E0 E8F80C0000                                      call    SetConsoleString                                ;draw label
  2132 000002E5 8B4538                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2133 000002E8 B137                                            mov     cl,55                                           ;column
  2134 000002EA B50B                                            mov     ch,11                                           ;row
  2135 000002EC E82C0A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2136                                  ;
  2137                                  ;       Display the ESP register label and value
  2138                                  ;
  2139 000002F1 B133                                            mov     cl,51                                           ;column
  2140 000002F3 B50D                                            mov     ch,13                                           ;row
  2141 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2142 000002FA E8DE0C0000                                      call    SetConsoleString                                ;draw label
  2143 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2144 00000302 B137                                            mov     cl,55                                           ;column
  2145 00000304 B50D                                            mov     ch,13                                           ;row
  2146 00000306 E8120A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2147                                  ;
  2148                                  ;       Display the EIP register label and value
  2149                                  ;
  2150 0000030B B133                                            mov     cl,51                                           ;column
  2151 0000030D B50E                                            mov     ch,14                                           ;row
  2152 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2153 00000314 E8C40C0000                                      call    SetConsoleString                                ;draw label
  2154 00000319 8B4530                                          mov     eax,[ebp+48]                                    ;EIP
  2155 0000031C B137                                            mov     cl,55                                           ;column
  2156 0000031E B50E                                            mov     ch,14                                           ;row
  2157 00000320 E8F8090000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2158                                  ;
  2159                                  ;       Halt and loop until reset
  2160                                  ;
  2161 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2162 00000326 F4                                              hlt                                                     ;halt processor
  2163 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2164                                  ;-----------------------------------------------------------------------------------------------------------------------
  2165                                  ;
  2166                                  ;       Processor Interrupt Name Strings
  2167                                  ;
  2168                                  ;-----------------------------------------------------------------------------------------------------------------------
  2169 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2169 00000332 6279207A65726F00   
  2170 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2170 00000343 657000             
  2171 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2171 0000034F 626C6520696E746572-
  2171 00000358 7275707400         
  2172 0000035D 427265616B00            czIntBreak              db      "Break",0
  2173 00000363 496E746F00              czIntInto               db      "Into",0
  2174 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2175 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2175 00000378 74696F6E20436F6465-
  2175 00000381 00                 
  2176 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2176 0000038B 6573736F7200       
  2177 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2177 0000039A 756C7400           
  2178 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2179 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2179 000003AF 537461746520536567-
  2179 000003B8 6D656E7400         
  2180 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2180 000003C6 6E7400             
  2181 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2181 000003D2 697400             
  2182 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2182 000003DE 726F74656374696F6E-
  2182 000003E7 204661756C7400     
  2183 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2183 000003F7 6F722043616C63756C-
  2183 00000400 6174696F6E00       
  2184 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2185                                  ;-----------------------------------------------------------------------------------------------------------------------
  2186                                  ;
  2187                                  ;       Processor Interrupt Handling Strings
  2188                                  ;
  2189                                  ;-----------------------------------------------------------------------------------------------------------------------
  2190 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2190 00000418 6C65642070726F6365-
  2190 00000421 73736F7220696E7465-
  2190 0000042A 727275707420686173-
  2190 00000433 206F63637572726564-
  2190 0000043C 3A00               
  2191 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2191 00000447 202300             
  2192 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2192 00000453 206174207468652074-
  2192 0000045C 696D65206F66207468-
  2192 00000465 6520696E7465727275-
  2192 0000046E 70743A00           
  2193 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2194 00000477 4543583A00              czIntECX                db      "ECX:",0
  2195 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2196 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2197 00000486 4553493A00              czIntESI                db      "ESI:",0
  2198 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2199 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2200 00000495 4553503A00              czIntESP                db      "ESP:",0
  2201 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2202 0000049F 2045533A00              czIntES                 db      " ES:",0
  2203 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2204 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2205 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2206 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2207                                  ;-----------------------------------------------------------------------------------------------------------------------
  2208                                  ;
  2209                                  ;       Routine:        DrawTextDialogBox
  2210                                  ;
  2211                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2212                                  ;
  2213                                  ;       In:             CL      upper left column (0-79)
  2214                                  ;                       CH      upper left row (0-24)
  2215                                  ;                       DL      column width, excluding border
  2216                                  ;                       DH      row height, excluding border
  2217                                  ;                       BH      color attribute
  2218                                  ;
  2219                                  ;-----------------------------------------------------------------------------------------------------------------------
  2220 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2221 000004B9 56                                              push    esi                                             ;
  2222 000004BA 57                                              push    edi                                             ;
  2223 000004BB 06                                              push    es                                              ;
  2224 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2225 000004BE 07                                              pop     es                                              ;... into ES
  2226                                  ;
  2227                                  ;       Compute target display offset
  2228                                  ;
  2229 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2230 000004C1 88E8                                            mov     al,ch                                           ;row
  2231 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2232 000004C5 F6E4                                            mul     ah                                              ;row offset
  2233 000004C7 00C8                                            add     al,cl                                           ;add column
  2234 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2235 000004CC 00C8                                            add     al,cl                                           ;add column
  2236 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2237 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2238                                  ;
  2239                                  ;       Display top border row
  2240                                  ;
  2241 000004D3 57                                              push    edi                                             ;save target row offset
  2242 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2243 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2244 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2245 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2246 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2247 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2248 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2249 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2250 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2251 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2252 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2253                                  ;
  2254                                  ;       Display dialog box body rows
  2255                                  ;
  2256 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2257 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2258 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2259 000004F3 57                                              push    edi                                             ;save target row offset
  2260 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2261 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2262 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2263 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2264 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2265 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2266 00000500 F366AB                                          rep     stosw                                           ;display row
  2267 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2268 00000505 66AB                                            stosw                                                   ;display character and attribute
  2269 00000507 5F                                              pop     edi                                             ;restore target row offset
  2270 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2271 0000050E 59                                              pop     ecx                                             ;remaining rows
  2272 0000050F E2E1                                            loop    .10                                             ;next row
  2273                                  ;
  2274                                  ;       Display bottom border row
  2275                                  ;
  2276 00000511 57                                              push    edi                                             ;save target row offset
  2277 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2278 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2279 00000516 66AB                                            stosw                                                   ;display character and attribute
  2280 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2281 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2282 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2283 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2284 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2285 00000523 66AB                                            stosw                                                   ;display character and attribute
  2286 00000525 5F                                              pop     edi                                             ;restore target row offset
  2287 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2288                                  ;
  2289                                  ;       Restore and return
  2290                                  ;
  2291 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2292 0000052D 5F                                              pop     edi                                             ;
  2293 0000052E 5E                                              pop     esi                                             ;
  2294 0000052F 59                                              pop     ecx                                             ;
  2295 00000530 C3                                              ret                                                     ;return
  2296                                  ;=======================================================================================================================
  2297                                  ;
  2298                                  ;       Hardware Device Interupts
  2299                                  ;
  2300                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2301                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2302                                  ;       (BX=2028h).
  2303                                  ;
  2304                                  ;=======================================================================================================================
  2305                                  ;-----------------------------------------------------------------------------------------------------------------------
  2306                                  ;
  2307                                  ;       IRQ0    Clock Tick Interrupt
  2308                                  ;
  2309                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2310                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2311                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2312                                  ;
  2313                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2314                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2315                                  ;
  2316                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2317                                  ;       zero, the floppy disk motors are turned off.
  2318                                  ;
  2319                                  ;-----------------------------------------------------------------------------------------------------------------------
  2320                                                          menter  clocktick                                       ;clock tick interrupt
  2320                              <1> ?%1 equ ($-$$)
  2321 00000531 50                                              push    eax                                             ;save modified regs
  2322 00000532 52                                              push    edx                                             ;
  2323 00000533 1E                                              push    ds                                              ;
  2324                                  ;
  2325                                  ;       Update the clock tick count and the elapsed days as needed.
  2326                                  ;
  2327 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2328 00000536 1F                                              pop     ds                                              ;... into data segment register
  2329 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2330 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2331 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2332 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2333 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2334 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2335 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2336                                  ;
  2337                                  ;       Decrement floppy disk motor timeout.
  2338                                  ;
  2339 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2340 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2341 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2342 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2343                                  ;
  2344                                  ;       Turn off the floppy disk motor if appropriate.
  2345                                  ;
  2346 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2347 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2348 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2349 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2350 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2351 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2352 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2353 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2354 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2355 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2356 00000577 EE                                              out     dx,al                                           ;turn motor off
  2357                                  ;
  2358                                  ;       Signal the end of the hardware interrupt.
  2359                                  ;
  2360 00000578 E89A0A0000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2361                                  ;
  2362                                  ;       Restore and return.
  2363                                  ;
  2364 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2365 0000057E 5A                                              pop     edx                                             ;
  2366 0000057F 58                                              pop     eax                                             ;
  2367 00000580 CF                                              iretd                                                   ;return
  2368                                  ;-----------------------------------------------------------------------------------------------------------------------
  2369                                  ;
  2370                                  ;       IRQ1    Keyboard Interrupt
  2371                                  ;
  2372                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2373                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2374                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2375                                  ;       ALL modified registers upon return.
  2376                                  ;
  2377                                  ;-----------------------------------------------------------------------------------------------------------------------
  2378                                                          menter  keyboard                                        ;keyboard interrrupt
  2378                              <1> ?%1 equ ($-$$)
  2379 00000581 50                                              push    eax                                             ;save non-volatile regs
  2380 00000582 53                                              push    ebx                                             ;
  2381 00000583 51                                              push    ecx                                             ;
  2382 00000584 56                                              push    esi                                             ;
  2383 00000585 1E                                              push    ds                                              ;
  2384 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2385 00000588 1F                                              pop     ds                                              ;... into data segment register
  2386 00000589 30C0                                            xor     al,al                                           ;zero
  2387 0000058B A205080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2388 00000590 A206080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2389 00000595 A207080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2390 0000059A A208080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2391 0000059F A209080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2392 000005A4 A20A080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2393 000005A9 B020                                            mov     al,' '                                          ;space
  2394 000005AB A20B080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2395 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2396 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2397 000005B4 200504080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2398 000005BA 8A1D02080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2399 000005C0 8A3D03080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2400 000005C6 E8010B0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2401 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2402 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2403 000005D3 A205080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2404 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2405 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2406 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2407 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2408 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2409 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2410 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2411 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2412 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2413 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2414 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2415 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2416 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2417 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2418 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2419 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2420 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2421 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2422 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2423 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2424 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2425 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2426 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2427 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2428 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2429 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2430 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2431 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2432 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2433 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2434 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2435 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2436 00000654 E8730A0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2437 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2438 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2439 00000661 A206080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2440 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2441 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2442 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2443 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2444 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2445 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2446 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2447 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2448 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2449 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2450 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2451 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2452 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2453 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2454 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2455 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2456 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2457 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2458 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2459 0000069C E82B0A0000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2460 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2461 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2462 000006A9 A207080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2463 000006AE E8190A0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2464 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2465 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2466 000006BB A208080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2467 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2468 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2469 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2470 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2471 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2472 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2473 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2474 000006D1 E8C7090000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2475 000006D6 881D02080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2476 000006DC 883D03080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2477 000006E2 E8AE060000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2478 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2479 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2480 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2481 000006F1 E8D6090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2482 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2483 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2484 000006FE A206080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2485 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2486 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2487 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2488 0000070E E8B9090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2489 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2490 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2491 0000071B A207080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2492 00000720 E8A7090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2493 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2494 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2495 0000072D A208080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2496 00000732 E895090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2497 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2498 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2499 0000073F A209080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2500 00000744 E883090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2501 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2502 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2503 0000074D A20A080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2504 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2505 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2506 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2507 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2508 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2509 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2510 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2511 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2512 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2513 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2514 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2515 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2516 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2517 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2518 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2519 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2520 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2521 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2522 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2523 00000787 A20B080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2524 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2525 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2526 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2527 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2528 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2529 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2530 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2531 000007A4 50                                              push    eax                                             ;save codes
  2532 000007A5 E88E070000                                      call    PutMessage                                      ;put message to console
  2533 000007AA 58                                              pop     eax                                             ;restore codes
  2534 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2535 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2536 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2537 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2538 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2539 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2540 000007BD E876070000                                      call    PutMessage                                      ;put message to console
  2541 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2542 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2543 000007C6 080504080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2544 000007CC E86C050000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2545 000007D1 E841080000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2546 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2547 000007D7 5E                                              pop     esi                                             ;
  2548 000007D8 59                                              pop     ecx                                             ;
  2549 000007D9 5B                                              pop     ebx                                             ;
  2550 000007DA 58                                              pop     eax                                             ;
  2551 000007DB CF                                              iretd                                                   ;return
  2552                                  ;-----------------------------------------------------------------------------------------------------------------------
  2553                                  ;       Scan-Code to ASCII Translation Tables
  2554                                  ;-----------------------------------------------------------------------------------------------------------------------
  2555 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2556 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2557 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2558 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2559 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2560 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2561 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2562 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2563 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2564 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2565 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2566 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2567 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2568 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2569 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2570 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2571 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2572 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2573 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2574 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2575 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2576 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2577 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2578 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2579 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2580 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2581 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2582 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2583 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2584 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2585 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2586 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2587                                  ;-----------------------------------------------------------------------------------------------------------------------
  2588                                  ;
  2589                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2590                                  ;
  2591                                  ;-----------------------------------------------------------------------------------------------------------------------
  2592                                                          menter  iochannel                                       ;secondary 8259A cascade
  2592                              <1> ?%1 equ ($-$$)
  2593 000008DC 50                                              push    eax                                             ;save modified regs
  2594 000008DD EB3F                                            jmp     hwint                                           ;end interrupt and return
  2595                                  ;-----------------------------------------------------------------------------------------------------------------------
  2596                                  ;
  2597                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2598                                  ;
  2599                                  ;-----------------------------------------------------------------------------------------------------------------------
  2600                                                          menter  com2                                            ;serial port 2 interrupt
  2600                              <1> ?%1 equ ($-$$)
  2601 000008DF 50                                              push    eax                                             ;save modified regs
  2602 000008E0 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2603                                  ;-----------------------------------------------------------------------------------------------------------------------
  2604                                  ;
  2605                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2606                                  ;
  2607                                  ;-----------------------------------------------------------------------------------------------------------------------
  2608                                                          menter  com1                                            ;serial port 1 interrupt
  2608                              <1> ?%1 equ ($-$$)
  2609 000008E2 50                                              push    eax                                             ;save modified regs
  2610 000008E3 EB39                                            jmp     hwint                                           ;end interrupt and return
  2611                                  ;-----------------------------------------------------------------------------------------------------------------------
  2612                                  ;
  2613                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2614                                  ;
  2615                                  ;-----------------------------------------------------------------------------------------------------------------------
  2616                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2616                              <1> ?%1 equ ($-$$)
  2617 000008E5 50                                              push    eax                                             ;save modified regs
  2618 000008E6 EB36                                            jmp     hwint                                           ;end interrupt and return
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  ;
  2621                                  ;       IRQ6    Diskette Hardware Interrupt
  2622                                  ;
  2623                                  ;-----------------------------------------------------------------------------------------------------------------------
  2624                                                          menter  diskette                                        ;floppy disk interrupt
  2624                              <1> ?%1 equ ($-$$)
  2625 000008E8 50                                              push    eax                                             ;save non-volatile regs
  2626 000008E9 1E                                              push    ds                                              ;
  2627 000008EA 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2628 000008EC 1F                                              pop     ds                                              ;... into DS register
  2629 000008ED A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2630 000008F2 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2631 000008F4 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2632 000008F9 1F                                              pop     ds                                              ;restore non-volatile regs
  2633 000008FA EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2634                                  ;-----------------------------------------------------------------------------------------------------------------------
  2635                                  ;
  2636                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2637                                  ;
  2638                                  ;-----------------------------------------------------------------------------------------------------------------------
  2639                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2639                              <1> ?%1 equ ($-$$)
  2640 000008FC 50                                              push    eax                                             ;save modified regs
  2641 000008FD EB1F                                            jmp     hwint                                           ;end interrupt and return
  2642                                  ;-----------------------------------------------------------------------------------------------------------------------
  2643                                  ;
  2644                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2645                                  ;
  2646                                  ;-----------------------------------------------------------------------------------------------------------------------
  2647                                                          menter  rtclock                                         ;real-time clock interrupt
  2647                              <1> ?%1 equ ($-$$)
  2648 000008FF 50                                              push    eax                                             ;save modified regs
  2649 00000900 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2650                                  ;-----------------------------------------------------------------------------------------------------------------------
  2651                                  ;
  2652                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2653                                  ;
  2654                                  ;-----------------------------------------------------------------------------------------------------------------------
  2655                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2655                              <1> ?%1 equ ($-$$)
  2656 00000902 50                                              push    eax                                             ;save modified regs
  2657 00000903 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2658                                  ;-----------------------------------------------------------------------------------------------------------------------
  2659                                  ;
  2660                                  ;       IRQ10   Reserved Hardware Interrupt
  2661                                  ;
  2662                                  ;-----------------------------------------------------------------------------------------------------------------------
  2663                                                          menter  irq10                                           ;reserved
  2663                              <1> ?%1 equ ($-$$)
  2664 00000905 50                                              push    eax                                             ;save modified regs
  2665 00000906 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2666                                  ;-----------------------------------------------------------------------------------------------------------------------
  2667                                  ;
  2668                                  ;       IRQ11   Reserved Hardware Interrupt
  2669                                  ;
  2670                                  ;-----------------------------------------------------------------------------------------------------------------------
  2671                                                          menter  irq11                                           ;reserved
  2671                              <1> ?%1 equ ($-$$)
  2672 00000908 50                                              push    eax                                             ;save modified regs
  2673 00000909 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2674                                  ;-----------------------------------------------------------------------------------------------------------------------
  2675                                  ;
  2676                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2677                                  ;
  2678                                  ;-----------------------------------------------------------------------------------------------------------------------
  2679                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2679                              <1> ?%1 equ ($-$$)
  2680 0000090B 50                                              push    eax                                             ;save modified regs
  2681 0000090C EB09                                            jmp     hwwint                                          ;end interrupt and return
  2682                                  ;-----------------------------------------------------------------------------------------------------------------------
  2683                                  ;
  2684                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2685                                  ;
  2686                                  ;-----------------------------------------------------------------------------------------------------------------------
  2687                                                          menter  coprocessor                                     ;coprocessor interrupt
  2687                              <1> ?%1 equ ($-$$)
  2688 0000090E 50                                              push    eax                                             ;save modified regs
  2689 0000090F EB06                                            jmp     hwwint                                          ;end interrupt and return
  2690                                  ;-----------------------------------------------------------------------------------------------------------------------
  2691                                  ;
  2692                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2693                                  ;
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2695                              <1> ?%1 equ ($-$$)
  2696 00000911 50                                              push    eax                                             ;save modified regs
  2697 00000912 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2698                                  ;-----------------------------------------------------------------------------------------------------------------------
  2699                                  ;
  2700                                  ;       IRQ15   Reserved Hardware Interrupt
  2701                                  ;
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703                                                          menter  irq15                                           ;reserved
  2703                              <1> ?%1 equ ($-$$)
  2704 00000914 50                                              push    eax                                             ;save modified regs
  2705 00000915 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                  ;
  2708                                  ;       Exit from hardware interrupt
  2709                                  ;
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711 00000917 E801070000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2712 0000091C EB05                                            jmp     hwint90                                         ;skip ahead
  2713 0000091E E8F4060000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2714 00000923 58                      hwint90                 pop     eax                                             ;restore modified regs
  2715 00000924 CF                                              iretd                                                   ;return from interrupt
  2716                                  ;-----------------------------------------------------------------------------------------------------------------------
  2717                                  ;
  2718                                  ;       INT 30h Operating System Software Service Interrupt
  2719                                  ;
  2720                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2721                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2722                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2723                                  ;       the entry address of the specific function from a table.
  2724                                  ;
  2725                                  ;-----------------------------------------------------------------------------------------------------------------------
  2726                                                          menter  svc
  2726                              <1> ?%1 equ ($-$$)
  2727 00000925 3C15                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2728 00000927 730D                                            jae     svc90                                           ;yes, skip ahead
  2729 00000929 0FB6C0                                          movzx   eax,al                                          ;function
  2730 0000092C C1E002                                          shl     eax,2                                           ;offset into table
  2731 0000092F 2EFF90[37090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2732 00000936 CF                      svc90                   iretd                                                   ;return from interrupt
  2733                                  ;-----------------------------------------------------------------------------------------------------------------------
  2734                                  ;
  2735                                  ;       Service Request Table
  2736                                  ;
  2737                                  ;
  2738                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2739                                  ;
  2740                                  ;-----------------------------------------------------------------------------------------------------------------------
  2741                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2741                              <1> tsvc :
  2741                              <1> e%1 equ ($-tsvc)/4
  2741 00000937 [600F0000]          <1>  dd %1
  2742                                                          tsvce   CompareMemory                                   ;compare memory
  2742                              <1> e%1 equ ($-tsvc)/4
  2742 0000093B [B00B0000]          <1>  dd %1
  2743                                                          tsvce   GetConsoleString                                ;get string input
  2743                              <1> e%1 equ ($-tsvc)/4
  2743 0000093F [110C0000]          <1>  dd %1
  2744                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2744                              <1> e%1 equ ($-tsvc)/4
  2744 00000943 [99090000]          <1>  dd %1
  2745                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2745                              <1> e%1 equ ($-tsvc)/4
  2745 00000947 [ED0F0000]          <1>  dd %1
  2746                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2746                              <1> e%1 equ ($-tsvc)/4
  2746 0000094B [2F0E0000]          <1>  dd %1
  2747                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2747                              <1> e%1 equ ($-tsvc)/4
  2747 0000094F [B4090000]          <1>  dd %1
  2748                                                          tsvce   PutDayString                                    ;put DD string
  2748                              <1> e%1 equ ($-tsvc)/4
  2748 00000953 [F5090000]          <1>  dd %1
  2749                                                          tsvce   PutHourString                                   ;put hh string
  2749                              <1> e%1 equ ($-tsvc)/4
  2749 00000957 [030A0000]          <1>  dd %1
  2750                                                          tsvce   PutMinuteString                                 ;put mm string
  2750                              <1> e%1 equ ($-tsvc)/4
  2750 0000095B [110A0000]          <1>  dd %1
  2751                                                          tsvce   PutMonthString                                  ;put MM string
  2751                              <1> e%1 equ ($-tsvc)/4
  2751 0000095F [1F0A0000]          <1>  dd %1
  2752                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2752                              <1> e%1 equ ($-tsvc)/4
  2752 00000963 [2D0A0000]          <1>  dd %1
  2753                                                          tsvce   PutSecondString                                 ;put ss string
  2753                              <1> e%1 equ ($-tsvc)/4
  2753 00000967 [510A0000]          <1>  dd %1
  2754                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2754                              <1> e%1 equ ($-tsvc)/4
  2754 0000096B [5E0A0000]          <1>  dd %1
  2755                                                          tsvce   PutWeekdayString                                ;put weekday string
  2755                              <1> e%1 equ ($-tsvc)/4
  2755 0000096F [930A0000]          <1>  dd %1
  2756                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2756                              <1> e%1 equ ($-tsvc)/4
  2756 00000973 [A10A0000]          <1>  dd %1
  2757                                                          tsvce   PutYearString                                   ;put YYYY string
  2757                              <1> e%1 equ ($-tsvc)/4
  2757 00000977 [C40A0000]          <1>  dd %1
  2758                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2758                              <1> e%1 equ ($-tsvc)/4
  2758 0000097B [23100000]          <1>  dd %1
  2759                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2759                              <1> e%1 equ ($-tsvc)/4
  2759 0000097F [8E100000]          <1>  dd %1
  2760                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2760                              <1> e%1 equ ($-tsvc)/4
  2760 00000983 [5F0E0000]          <1>  dd %1
  2761                                                          tsvce   UpperCaseString                                 ;upper-case string
  2761                              <1> e%1 equ ($-tsvc)/4
  2761 00000987 [CD0B0000]          <1>  dd %1
  2762                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2763                                  ;-----------------------------------------------------------------------------------------------------------------------
  2764                                  ;
  2765                                  ;       Service Request Macros
  2766                                  ;
  2767                                  ;       These macros provide positional parameterization of service request calls.
  2768                                  ;
  2769                                  ;-----------------------------------------------------------------------------------------------------------------------
  2770                                  %macro                  clearConsoleScreen 0
  2771                                                          mov     al,eClearConsoleScreen                          ;function code
  2772                                                          int     _svc                                            ;invoke OS service
  2773                                  %endmacro
  2774                                  %macro                  compareMemory 0
  2775                                                          mov     al,eCompareMemory                               ;function code
  2776                                                          int     _svc                                            ;invoke OS service
  2777                                  %endmacro
  2778                                  %macro                  getConsoleString 4
  2779                                                          mov     edx,%1                                          ;buffer address
  2780                                                          mov     ecx,%2                                          ;max characters
  2781                                                          mov     bh,%3                                           ;echo indicator
  2782                                                          mov     bl,%4                                           ;terminator
  2783                                                          mov     al,eGetConsoleString                            ;function code
  2784                                                          int     _svc                                            ;invoke OS service
  2785                                  %endmacro
  2786                                  %macro                  isLeapYear 1
  2787                                                          mov     ebx,%1                                          ;DATETIME addr
  2788                                                          mov     al,eIsLeapYear                                  ;function code
  2789                                                          int     _svc                                            ;invoke OS service
  2790                                  %endmacro
  2791                                  %macro                  placeCursor 0
  2792                                                          mov     al,ePlaceCursor                                 ;function code
  2793                                                          int     _svc                                            ;invoke OS service
  2794                                  %endmacro
  2795                                  %macro                  putConsoleString 1
  2796                                                          mov     edx,%1                                          ;string address
  2797                                                          mov     al,ePutConsoleString                            ;function code
  2798                                                          int     _svc                                            ;invoke OS service
  2799                                  %endmacro
  2800                                  %macro                  putDateString 0
  2801                                                          mov     al,ePutDateString                               ;function code
  2802                                                          int     _svc                                            ;invoke OS service
  2803                                  %endmacro
  2804                                  %macro                  putDateString 2
  2805                                                          mov     ebx,%1                                          ;DATETIME addr
  2806                                                          mov     edx,%2                                          ;output buffer addr
  2807                                                          mov     al,ePutDateString                               ;function code
  2808                                                          int     _svc                                            ;invoke OS service
  2809                                  %endmacro
  2810                                  %macro                  putDayString 2
  2811                                                          mov     ebx,%1                                          ;DATETIME addr
  2812                                                          mov     edx,%2                                          ;output buffer addr
  2813                                                          mov     al,ePutDayString                                ;function code
  2814                                                          int     _svc                                            ;invoke OS service
  2815                                  %endmacro
  2816                                  %macro                  putHourString 2
  2817                                                          mov     ebx,%1                                          ;DATETIME addr
  2818                                                          mov     edx,%2                                          ;output buffer addr
  2819                                                          mov     al,ePutHourString                               ;function code
  2820                                                          int     _svc                                            ;invoke OS service
  2821                                  %endmacro
  2822                                  %macro                  putMinuteString 2
  2823                                                          mov     ebx,%1                                          ;DATETIME addr
  2824                                                          mov     edx,%2                                          ;output buffer addr
  2825                                                          mov     al,ePutMinuteString                             ;function code
  2826                                                          int     _svc                                            ;invoke OS service
  2827                                  %endmacro
  2828                                  %macro                  putMonthString 2
  2829                                                          mov     ebx,%1                                          ;DATETIME addr
  2830                                                          mov     edx,%2                                          ;output buffer addr
  2831                                                          mov     al,ePutMonthString                              ;function code
  2832                                                          int     _svc                                            ;invoke OS service
  2833                                  %endmacro
  2834                                  %macro                  putMonthNameString 2
  2835                                                          mov     ebx,%1                                          ;DATETIME addr
  2836                                                          mov     edx,%2                                          ;output buffer addr
  2837                                                          mov     al,ePutMonthNameString                          ;function code
  2838                                                          int     _svc                                            ;invoke OS service
  2839                                  %endmacro
  2840                                  %macro                  putSecondString 2
  2841                                                          mov     ebx,%1                                          ;DATETIME addr
  2842                                                          mov     edx,%2                                          ;output buffer addr
  2843                                                          mov     al,ePutSecondString                             ;function code
  2844                                                          int     _svc                                            ;invoke OS service
  2845                                  %endmacro
  2846                                  %macro                  putTimeString 0
  2847                                                          mov     al,ePutTimeString                               ;function code
  2848                                                          int     _svc                                            ;invoke OS service
  2849                                  %endmacro
  2850                                  %macro                  putTimeString 2
  2851                                                          mov     ebx,%1                                          ;DATETIME addr
  2852                                                          mov     edx,%2                                          ;output buffer addr
  2853                                                          mov     al,ePutTimeString                               ;function code
  2854                                                          int     _svc                                            ;invoke OS service
  2855                                  %endmacro
  2856                                  %macro                  putWeekdayString 2
  2857                                                          mov     ebx,%1                                          ;DATETIME addr
  2858                                                          mov     edx,%2                                          ;output buffer addr
  2859                                                          mov     al,ePutWeekdayString                            ;function code
  2860                                                          int     _svc                                            ;invoke OS service
  2861                                  %endmacro
  2862                                  %macro                  putWeekdayNameString 2
  2863                                                          mov     ebx,%1                                          ;DATETIME addr
  2864                                                          mov     edx,%2                                          ;output buffer addr
  2865                                                          mov     al,ePutWeekdayNameString                        ;function code
  2866                                                          int     _svc                                            ;invoke OS service
  2867                                  %endmacro
  2868                                  %macro                  putYearString 2
  2869                                                          mov     ebx,%1                                          ;DATETIME addr
  2870                                                          mov     edx,%2                                          ;output buffer addr
  2871                                                          mov     al,ePutYearString                               ;function code
  2872                                                          int     _svc                                            ;invoke OS service
  2873                                  %endmacro
  2874                                  %macro                  readRealTimeClock 0
  2875                                                          mov     al,eReadRealTimeClock                           ;function code
  2876                                                          int     _svc                                            ;invoke OS service
  2877                                  %endmacro
  2878                                  %macro                  readRealTimeClock 1
  2879                                                          mov     ebx,%1                                          ;DATETIME addr
  2880                                                          mov     al,eReadRealTimeClock                           ;function code
  2881                                                          int     _svc                                            ;invoke OS service
  2882                                  %endmacro
  2883                                  %macro                  resetSystem 0
  2884                                                          mov     al,eResetSystem                                 ;function code
  2885                                                          int     _svc                                            ;invoke OS service
  2886                                  %endmacro
  2887                                  %macro                  unsignedToDecimalString 0
  2888                                                          mov     al,eUnsignedToDecimalString                     ;function code
  2889                                                          int     _svc                                            ;invoke OS service
  2890                                  %endmacro
  2891                                  %macro                  upperCaseString 0
  2892                                                          mov     al,eUpperCaseString                             ;function code
  2893                                                          int     _svc                                            ;invoke OS service
  2894                                  %endmacro
  2895                                  ;=======================================================================================================================
  2896                                  ;
  2897                                  ;       Kernel Function Library
  2898                                  ;
  2899                                  ;=======================================================================================================================
  2900                                  ;=======================================================================================================================
  2901                                  ;
  2902                                  ;       Date and Time Helper Routines
  2903                                  ;
  2904                                  ;       GetYear
  2905                                  ;       IsLeapYear
  2906                                  ;       PutDateString
  2907                                  ;       PutDayString
  2908                                  ;       PutHourString
  2909                                  ;       PutMinuteString
  2910                                  ;       PutMonthString
  2911                                  ;       PutMonthNameString
  2912                                  ;       PutSecondString
  2913                                  ;       PutTimeString
  2914                                  ;       PutWeekdayString
  2915                                  ;       PutWeekdayNameString
  2916                                  ;       PutYearString
  2917                                  ;
  2918                                  ;=======================================================================================================================
  2919                                  ;-----------------------------------------------------------------------------------------------------------------------
  2920                                  ;
  2921                                  ;       Routine:        GetYear
  2922                                  ;
  2923                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  2924                                  ;
  2925                                  ;       In:             DS:EBX  DATETIME address
  2926                                  ;
  2927                                  ;       Out:            ECX     year
  2928                                  ;
  2929                                  ;-----------------------------------------------------------------------------------------------------------------------
  2930 0000098B 0FB64B07                GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  2931 0000098F 6BC964                                          imul    ecx,100                                         ;century * 100
  2932 00000992 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  2933 00000996 01C1                                            add     ecx,eax                                         ;year (YYYY)
  2934 00000998 C3                                              ret                                                     ;return
  2935                                  ;-----------------------------------------------------------------------------------------------------------------------
  2936                                  ;
  2937                                  ;       Routine:        IsLeapYear
  2938                                  ;
  2939                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  2940                                  ;
  2941                                  ;       In:             DS:EBX  DATETIME ADDRESS
  2942                                  ;
  2943                                  ;       Out:            ECX     0 = not a leap year
  2944                                  ;                               1 = leap year
  2945                                  ;
  2946                                  ;-----------------------------------------------------------------------------------------------------------------------
  2947 00000999 E8EDFFFFFF              IsLeapYear              call    GetYear                                         ;ECX = YYYY
  2948 0000099E 89C8                                            mov     eax,ecx                                         ;EAX = YYYY
  2949 000009A0 31C9                                            xor     ecx,ecx                                         ;assume not leap year
  2950 000009A2 A803                                            test    al,00000011b                                    ;multiple of four?
  2951 000009A4 750D                                            jnz     .no                                             ;no, branch
  2952 000009A6 B264                                            mov     dl,100                                          ;divisor
  2953 000009A8 F6F2                                            div     dl                                              ;divide by 100
  2954 000009AA 84E4                                            test    ah,ah                                           ;multiple of 100?
  2955 000009AC 7504                                            jnz     .yes                                            ;yes, branch
  2956 000009AE A803                                            test    al,00000011b                                    ;multiple of 400?
  2957 000009B0 7501                                            jnz     .no                                             ;no, branch
  2958 000009B2 41                      .yes                    inc     ecx                                             ;indicate leap
  2959 000009B3 C3                      .no                     ret                                                     ;return
  2960                                  ;-----------------------------------------------------------------------------------------------------------------------
  2961                                  ;
  2962                                  ;       Routine:        PutDateString
  2963                                  ;
  2964                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  2965                                  ;                       structure at ds:ebx.
  2966                                  ;
  2967                                  ;       In:             DS:EBX  DATETIME address
  2968                                  ;                       DS:EDX  output buffer address
  2969                                  ;
  2970                                  ;-----------------------------------------------------------------------------------------------------------------------
  2971 000009B4 51                      PutDateString           push    ecx                                             ;save non-volatile regs
  2972 000009B5 57                                              push    edi                                             ;
  2973 000009B6 06                                              push    es                                              ;
  2974 000009B7 1E                                              push    ds                                              ;store data selector ...
  2975 000009B8 07                                              pop     es                                              ;... in extra segment reg
  2976 000009B9 89D7                                            mov     edi,edx                                         ;output buffer address
  2977 000009BB B10A                                            mov     cl,10                                           ;divisor
  2978 000009BD BA30302F00                                      mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  2979 000009C2 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month
  2980 000009C6 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  2981 000009C8 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  2982 000009CA FC                                              cld                                                     ;forward strings
  2983 000009CB AB                                              stosd                                                   ;store "mm/"nul
  2984 000009CC 4F                                              dec     edi                                             ;address of terminator
  2985 000009CD 0FB64304                                        movzx   eax,byte [ebx+DATETIME.day]                     ;day
  2986 000009D1 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  2987 000009D3 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  2988 000009D5 AB                                              stosd                                                   ;store "dd/"nul
  2989 000009D6 4F                                              dec     edi                                             ;address of terminator
  2990 000009D7 0FB64307                                        movzx   eax,byte [ebx+DATETIME.century]                 ;century
  2991 000009DB F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  2992 000009DD 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  2993 000009DF AB                                              stosd                                                   ;store "cc/"null
  2994 000009E0 4F                                              dec     edi                                             ;address of terminator
  2995 000009E1 4F                                              dec     edi                                             ;address of delimiter
  2996 000009E2 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  2997 000009E6 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  2998 000009E8 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  2999 000009EA AA                                              stosb                                                   ;store quotient
  3000 000009EB 88E0                                            mov     al,ah                                           ;remainder
  3001 000009ED AA                                              stosb                                                   ;store remainder
  3002 000009EE 30C0                                            xor     al,al                                           ;null terminator
  3003 000009F0 AA                                              stosb                                                   ;store terminator
  3004 000009F1 07                                              pop     es                                              ;restore non-volatile regs
  3005 000009F2 5F                                              pop     edi                                             ;
  3006 000009F3 59                                              pop     ecx                                             ;
  3007 000009F4 C3                                              ret                                                     ;return
  3008                                  ;-----------------------------------------------------------------------------------------------------------------------
  3009                                  ;
  3010                                  ;       Routine:        PutDayString
  3011                                  ;
  3012                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3013                                  ;                       structure at ds:ebx.
  3014                                  ;
  3015                                  ;       In:             DS:EBX  DATETIME address
  3016                                  ;                       DS:EDX  output buffer address
  3017                                  ;
  3018                                  ;-----------------------------------------------------------------------------------------------------------------------
  3019 000009F5 51                      PutDayString            push    ecx                                             ;save non-volatile regs
  3020 000009F6 0FB64B04                                        movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3021 000009FA B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3022 000009FC E85E040000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3023 00000A01 59                                              pop     ecx                                             ;
  3024 00000A02 C3                                              ret                                                     ;return
  3025                                  ;-----------------------------------------------------------------------------------------------------------------------
  3026                                  ;
  3027                                  ;       Routine:        PutHourString
  3028                                  ;
  3029                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3030                                  ;                       structure at ds:ebx.
  3031                                  ;
  3032                                  ;       In:             DS:EBX  DATETIME address
  3033                                  ;                       DS:EDX  output buffer address
  3034                                  ;
  3035                                  ;-----------------------------------------------------------------------------------------------------------------------
  3036 00000A03 51                      PutHourString           push    ecx                                             ;save non-volatile regs
  3037 00000A04 0FB64B02                                        movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3038 00000A08 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3039 00000A0A E850040000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3040 00000A0F 59                                              pop     ecx                                             ;
  3041 00000A10 C3                                              ret                                                     ;return
  3042                                  ;-----------------------------------------------------------------------------------------------------------------------
  3043                                  ;
  3044                                  ;       Routine:        PutMinuteString
  3045                                  ;
  3046                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3047                                  ;                       structure at ds:ebx.
  3048                                  ;
  3049                                  ;       In:             DS:EBX  DATETIME address
  3050                                  ;                       DS:EDX  output buffer address
  3051                                  ;
  3052                                  ;-----------------------------------------------------------------------------------------------------------------------
  3053 00000A11 51                      PutMinuteString         push    ecx                                             ;save non-volatile regs
  3054 00000A12 0FB64B01                                        movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3055 00000A16 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3056 00000A18 E842040000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3057 00000A1D 59                                              pop     ecx                                             ;
  3058 00000A1E C3                                              ret                                                     ;return
  3059                                  ;-----------------------------------------------------------------------------------------------------------------------
  3060                                  ;
  3061                                  ;       Routine:        PutMonthString
  3062                                  ;
  3063                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3064                                  ;                       structure at ds:ebx.
  3065                                  ;
  3066                                  ;       In:             DS:EBX  DATETIME address
  3067                                  ;                       DS:EDX  output buffer address
  3068                                  ;
  3069                                  ;-----------------------------------------------------------------------------------------------------------------------
  3070 00000A1F 51                      PutMonthString          push    ecx                                             ;save non-volatile regs
  3071 00000A20 0FB64B05                                        movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3072 00000A24 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3073 00000A26 E834040000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3074 00000A2B 59                                              pop     ecx                                             ;
  3075 00000A2C C3                                              ret                                                     ;return
  3076                                  ;-----------------------------------------------------------------------------------------------------------------------
  3077                                  ;
  3078                                  ;       Routine:        PutMonthNameString
  3079                                  ;
  3080                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3081                                  ;                       structure at ds:ebx.
  3082                                  ;
  3083                                  ;       In:             DS:EBX  DATETIME address
  3084                                  ;                       DS:EDX  output buffer address
  3085                                  ;
  3086                                  ;-----------------------------------------------------------------------------------------------------------------------
  3087 00000A2D 56                      PutMonthNameString      push    esi                                             ;save non-volatile regs
  3088 00000A2E 57                                              push    edi                                             ;
  3089 00000A2F 1E                                              push    ds                                              ;
  3090 00000A30 06                                              push    es                                              ;
  3091 00000A31 1E                                              push    ds                                              ;load data selector ...
  3092 00000A32 07                                              pop     es                                              ;... into extra segment
  3093 00000A33 89D7                                            mov     edi,edx                                         ;output buffer address
  3094 00000A35 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3095 00000A39 48                                              dec     eax                                             ;month (0-11)
  3096 00000A3A C1E002                                          shl     eax,2                                           ;offset into month name lookup table
  3097 00000A3D 0E                                              push    cs                                              ;load code selector ...
  3098 00000A3E 1F                                              pop     ds                                              ;... into data segment
  3099 00000A3F 8BB0[800B0000]                                  mov     esi,[tMonthNames+eax]                           ;month name address
  3100 00000A45 FC                                              cld                                                     ;forward strings
  3101 00000A46 AC                      .10                     lodsb                                                   ;name character
  3102 00000A47 AA                                              stosb                                                   ;store in output buffer
  3103 00000A48 84C0                                            test    al,al                                           ;end of string?
  3104 00000A4A 75FA                                            jnz     .10                                             ;no, continue
  3105 00000A4C 07                                              pop     es                                              ;restore non-volatile regs
  3106 00000A4D 1F                                              pop     ds                                              ;
  3107 00000A4E 5F                                              pop     edi                                             ;
  3108 00000A4F 5E                                              pop     esi                                             ;
  3109 00000A50 C3                                              ret                                                     ;return
  3110                                  ;-----------------------------------------------------------------------------------------------------------------------
  3111                                  ;
  3112                                  ;       Routine:        PutSecondString
  3113                                  ;
  3114                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3115                                  ;                       structure at ds:ebx.
  3116                                  ;
  3117                                  ;       In:             DS:EBX  DATETIME address
  3118                                  ;                       DS:EDX  output buffer address
  3119                                  ;
  3120                                  ;-----------------------------------------------------------------------------------------------------------------------
  3121 00000A51 51                      PutSecondString         push    ecx                                             ;save non-volatile regs
  3122 00000A52 0FB60B                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3123 00000A55 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3124 00000A57 E803040000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3125 00000A5C 59                                              pop     ecx                                             ;
  3126 00000A5D C3                                              ret                                                     ;return
  3127                                  ;-----------------------------------------------------------------------------------------------------------------------
  3128                                  ;
  3129                                  ;       Routine:        PutTimeString
  3130                                  ;
  3131                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3132                                  ;                       structure at ds:ebx.
  3133                                  ;
  3134                                  ;       In:             DS:EBX  DATETIME address
  3135                                  ;                       DS:EDX  output buffer address
  3136                                  ;
  3137                                  ;-----------------------------------------------------------------------------------------------------------------------
  3138 00000A5E 51                      PutTimeString           push    ecx                                             ;save non-volatile regs
  3139 00000A5F 57                                              push    edi                                             ;
  3140 00000A60 06                                              push    es                                              ;
  3141 00000A61 1E                                              push    ds                                              ;store data selector ...
  3142 00000A62 07                                              pop     es                                              ;... in extra segment reg
  3143 00000A63 89D7                                            mov     edi,edx                                         ;output buffer address
  3144 00000A65 B10A                                            mov     cl,10                                           ;divisor
  3145 00000A67 BA30303A00                                      mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3146 00000A6C 0FB64302                                        movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3147 00000A70 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3148 00000A72 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3149 00000A74 FC                                              cld                                                     ;forward strings
  3150 00000A75 AB                                              stosd                                                   ;store "mm/"nul
  3151 00000A76 4F                                              dec     edi                                             ;address of terminator
  3152 00000A77 0FB64301                                        movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3153 00000A7B F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3154 00000A7D 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3155 00000A7F AB                                              stosd                                                   ;store "dd/"nul
  3156 00000A80 4F                                              dec     edi                                             ;address of terminator
  3157 00000A81 0FB603                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3158 00000A84 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3159 00000A86 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3160 00000A88 AA                                              stosb                                                   ;store quotient
  3161 00000A89 88E0                                            mov     al,ah                                           ;remainder
  3162 00000A8B AA                                              stosb                                                   ;store remainder
  3163 00000A8C 30C0                                            xor     al,al                                           ;null terminator
  3164 00000A8E AA                                              stosb                                                   ;store terminator
  3165 00000A8F 07                                              pop     es                                              ;restore non-volatile regs
  3166 00000A90 5F                                              pop     edi                                             ;
  3167 00000A91 59                                              pop     ecx                                             ;
  3168 00000A92 C3                                              ret                                                     ;return
  3169                                  ;-----------------------------------------------------------------------------------------------------------------------
  3170                                  ;
  3171                                  ;       Routine:        PutWeekdayString
  3172                                  ;
  3173                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3174                                  ;                       structure at ds:ebx.
  3175                                  ;
  3176                                  ;       In:             DS:EBX  DATETIME address
  3177                                  ;                       DS:EDX  output buffer address
  3178                                  ;
  3179                                  ;-----------------------------------------------------------------------------------------------------------------------
  3180 00000A93 51                      PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3181 00000A94 0FB64B03                                        movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3182 00000A98 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3183 00000A9A E8C0030000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3184 00000A9F 59                                              pop     ecx                                             ;
  3185 00000AA0 C3                                              ret                                                     ;return
  3186                                  ;-----------------------------------------------------------------------------------------------------------------------
  3187                                  ;
  3188                                  ;       Routine:        PutWeekdayNameString
  3189                                  ;
  3190                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3191                                  ;                       structure at ds:ebx.
  3192                                  ;
  3193                                  ;       In:             DS:EBX  DATETIME address
  3194                                  ;                       DS:EDX  output buffer address
  3195                                  ;
  3196                                  ;-----------------------------------------------------------------------------------------------------------------------
  3197 00000AA1 56                      PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3198 00000AA2 57                                              push    edi                                             ;
  3199 00000AA3 1E                                              push    ds                                              ;
  3200 00000AA4 06                                              push    es                                              ;
  3201 00000AA5 1E                                              push    ds                                              ;load data selector ...
  3202 00000AA6 07                                              pop     es                                              ;... into extra segment
  3203 00000AA7 89D7                                            mov     edi,edx                                         ;output buffer address
  3204 00000AA9 0FB64303                                        movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3205 00000AAD C1E002                                          shl     eax,2                                           ;offset into day name lookup table
  3206 00000AB0 0E                                              push    cs                                              ;load code selector ...
  3207 00000AB1 1F                                              pop     ds                                              ;... into data segment
  3208 00000AB2 8BB0[640B0000]                                  mov     esi,[tDayNames+eax]                             ;day name address
  3209 00000AB8 FC                                              cld                                                     ;forward strings
  3210 00000AB9 AC                      .10                     lodsb                                                   ;name character
  3211 00000ABA AA                                              stosb                                                   ;store in output buffer
  3212 00000ABB 84C0                                            test    al,al                                           ;end of string?
  3213 00000ABD 75FA                                            jnz     .10                                             ;no, continue
  3214 00000ABF 07                                              pop     es                                              ;restore non-volatile regs
  3215 00000AC0 1F                                              pop     ds                                              ;
  3216 00000AC1 5F                                              pop     edi                                             ;
  3217 00000AC2 5E                                              pop     esi                                             ;
  3218 00000AC3 C3                                              ret                                                     ;return
  3219                                  ;-----------------------------------------------------------------------------------------------------------------------
  3220                                  ;
  3221                                  ;       Routine:        PutYearString
  3222                                  ;
  3223                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3224                                  ;                       structure at ds:ebx.
  3225                                  ;
  3226                                  ;       In:             DS:EBX  DATETIME address
  3227                                  ;                       DS:EDX  output buffer address
  3228                                  ;
  3229                                  ;-----------------------------------------------------------------------------------------------------------------------
  3230 00000AC4 51                      PutYearString           push    ecx                                             ;save non-volatile regs
  3231 00000AC5 E8C1FEFFFF                                      call    GetYear                                         ;ECX = YYYY
  3232 00000ACA B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3233 00000ACC E88E030000                                      call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3234 00000AD1 59                                              pop     ecx                                             ;restore non-volatile regs
  3235 00000AD2 C3                                              ret                                                     ;return
  3236                                  ;-----------------------------------------------------------------------------------------------------------------------
  3237                                  ;
  3238                                  ;       Day Names
  3239                                  ;
  3240                                  ;-----------------------------------------------------------------------------------------------------------------------
  3241 00000AD3 53756E64617900          czSunday                db      "Sunday",0
  3242 00000ADA 4D6F6E64617900          czMonday                db      "Monday",0
  3243 00000AE1 5475657364617900        czTuesday               db      "Tuesday",0
  3244 00000AE9 5765646E6573646179-     czWednesday             db      "Wednesday",0
  3244 00000AF2 00                 
  3245 00000AF3 546875727364617900      czThursday              db      "Thursday",0
  3246 00000AFC 46726964617900          czFriday                db      "Friday",0
  3247 00000B03 536174757264617900      czSaturday              db      "Saturday",0
  3248                                  ;-----------------------------------------------------------------------------------------------------------------------
  3249                                  ;
  3250                                  ;       Month Names
  3251                                  ;
  3252                                  ;-----------------------------------------------------------------------------------------------------------------------
  3253 00000B0C 4A616E7561727900        czJanuary               db      "January",0
  3254 00000B14 466562727561727900      czFebruary              db      "February",0
  3255 00000B1D 4D6172636800            czMarch                 db      "March",0
  3256 00000B23 417072696C00            czApril                 db      "April",0
  3257 00000B29 4D617900                czMay                   db      "May",0
  3258 00000B2D 4A756E6500              czJune                  db      "June",0
  3259 00000B32 4A756C7900              czJuly                  db      "July",0
  3260 00000B37 41756775737400          czAugust                db      "August",0
  3261 00000B3E 53657074656D626572-     czSeptember             db      "September",0
  3261 00000B47 00                 
  3262 00000B48 4F63746F62657200        czOctober               db      "October",0
  3263 00000B50 4E6F76656D62657200      czNovember              db      "November",0
  3264 00000B59 446563656D62657200      czDecember              db      "December",0
  3265                                  ;-----------------------------------------------------------------------------------------------------------------------
  3266                                  ;
  3267                                  ;       Day Names Lookup Table
  3268                                  ;
  3269                                  ;-----------------------------------------------------------------------------------------------------------------------
  3270 00000B62 90<rept>                                        align   4
  3271                                  tDayNames               equ     $
  3272 00000B64 [D30A0000]                                      dd      czSunday
  3273 00000B68 [DA0A0000]                                      dd      czMonday
  3274 00000B6C [E10A0000]                                      dd      czTuesday
  3275 00000B70 [E90A0000]                                      dd      czWednesday
  3276 00000B74 [F30A0000]                                      dd      czThursday
  3277 00000B78 [FC0A0000]                                      dd      czFriday
  3278 00000B7C [030B0000]                                      dd      czSaturday
  3279                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3280                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3281                                  ;-----------------------------------------------------------------------------------------------------------------------
  3282                                  ;
  3283                                  ;       Month Names Lookup Table
  3284                                  ;
  3285                                  ;-----------------------------------------------------------------------------------------------------------------------
  3286                                                          align   4
  3287                                  tMonthNames             equ     $
  3288 00000B80 [0C0B0000]                                      dd      czJanuary
  3289 00000B84 [140B0000]                                      dd      czFebruary
  3290 00000B88 [1D0B0000]                                      dd      czMarch
  3291 00000B8C [230B0000]                                      dd      czApril
  3292 00000B90 [290B0000]                                      dd      czMay
  3293 00000B94 [2D0B0000]                                      dd      czJune
  3294 00000B98 [320B0000]                                      dd      czJuly
  3295 00000B9C [370B0000]                                      dd      czAugust
  3296 00000BA0 [3E0B0000]                                      dd      czSeptember
  3297 00000BA4 [480B0000]                                      dd      czOctober
  3298 00000BA8 [500B0000]                                      dd      czNovember
  3299 00000BAC [590B0000]                                      dd      czDecember
  3300                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3301                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3302                                  ;=======================================================================================================================
  3303                                  ;
  3304                                  ;       String Helper Routines
  3305                                  ;
  3306                                  ;       CompareMemory
  3307                                  ;       UpperCaseString
  3308                                  ;
  3309                                  ;=======================================================================================================================
  3310                                  ;-----------------------------------------------------------------------------------------------------------------------
  3311                                  ;
  3312                                  ;       Routine:        CompareMemory
  3313                                  ;
  3314                                  ;       Description:    This routine compares two byte arrays.
  3315                                  ;
  3316                                  ;       In:             DS:EDX  first source address
  3317                                  ;                       DS:EBX  second source address
  3318                                  ;                       ECX     comparison length
  3319                                  ;
  3320                                  ;       Out:            EDX     first source address
  3321                                  ;                       EBX     second source address
  3322                                  ;                       ECX     0       array 1 = array 2
  3323                                  ;                               <0      array 1 < array 2
  3324                                  ;                               >0      array 1 > array 2
  3325                                  ;
  3326                                  ;-----------------------------------------------------------------------------------------------------------------------
  3327 00000BB0 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  3328 00000BB1 57                                              push    edi                                             ;
  3329 00000BB2 06                                              push    es                                              ;
  3330 00000BB3 1E                                              push    ds                                              ;copy DS
  3331 00000BB4 07                                              pop     es                                              ;... to ES
  3332 00000BB5 89D6                                            mov     esi,edx                                         ;first source address
  3333 00000BB7 89DF                                            mov     edi,ebx                                         ;second source address
  3334 00000BB9 FC                                              cld                                                     ;forward strings
  3335 00000BBA F3A6                                            rep     cmpsb                                           ;compare bytes
  3336 00000BBC B000                                            mov     al,0                                            ;default result
  3337 00000BBE 7406                                            jz      .10                                             ;branch if arrays equal
  3338 00000BC0 B001                                            mov     al,1                                            ;positive result
  3339 00000BC2 7302                                            jnc     .10                                             ;branch if target > source
  3340 00000BC4 B0FF                                            mov     al,-1                                           ;negative result
  3341 00000BC6 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  3342 00000BC9 07                                              pop     es                                              ;restore non-volatile regs
  3343 00000BCA 5F                                              pop     edi                                             ;
  3344 00000BCB 5E                                              pop     esi                                             ;
  3345 00000BCC C3                                              ret                                                     ;return
  3346                                  ;-----------------------------------------------------------------------------------------------------------------------
  3347                                  ;
  3348                                  ;       Routine:        UpperCaseString
  3349                                  ;
  3350                                  ;       Description:    This routine places all characters in the given string to upper case.
  3351                                  ;
  3352                                  ;       In:             DS:EDX  string address
  3353                                  ;
  3354                                  ;       Out:            EDX     string address
  3355                                  ;
  3356                                  ;-----------------------------------------------------------------------------------------------------------------------
  3357 00000BCD 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  3358 00000BCE 89D6                                            mov     esi,edx                                         ;string address
  3359 00000BD0 FC                                              cld                                                     ;forward strings
  3360 00000BD1 AC                      .10                     lodsb                                                   ;string character
  3361 00000BD2 84C0                                            test    al,al                                           ;null?
  3362 00000BD4 740F                                            jz      .20                                             ;yes, skip ahead
  3363 00000BD6 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3364 00000BD8 72F7                                            jb      .10                                             ;no, continue
  3365 00000BDA 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3366 00000BDC 77F3                                            ja      .10                                             ;no, continue
  3367 00000BDE 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  3368 00000BE0 8846FF                                          mov     [esi-1],al                                      ;upper character
  3369 00000BE3 EBEC                                            jmp     .10                                             ;continue
  3370 00000BE5 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  3371 00000BE6 C3                                              ret                                                     ;return
  3372                                  ;=======================================================================================================================
  3373                                  ;
  3374                                  ;       Console Helper Routines
  3375                                  ;
  3376                                  ;       FirstConsoleColumn
  3377                                  ;       GetConsoleChar
  3378                                  ;       GetConsoleString
  3379                                  ;       NextConsoleColumn
  3380                                  ;       NextConsoleRow
  3381                                  ;       PreviousConsoleColumn
  3382                                  ;       PutConsoleChar
  3383                                  ;       PutConsoleHexByte
  3384                                  ;       PutConsoleHexDword
  3385                                  ;       PutConsoleHexWord
  3386                                  ;       PutConsoleOIAChar
  3387                                  ;       PutConsoleOIAShift
  3388                                  ;       PutConsoleString
  3389                                  ;       Yield
  3390                                  ;
  3391                                  ;=======================================================================================================================
  3392                                  ;-----------------------------------------------------------------------------------------------------------------------
  3393                                  ;
  3394                                  ;       Routine:        FirstConsoleColumn
  3395                                  ;
  3396                                  ;       Description:    This routine resets the console column to start of the row.
  3397                                  ;
  3398                                  ;       In:             DS      OS data selector
  3399                                  ;
  3400                                  ;-----------------------------------------------------------------------------------------------------------------------
  3401 00000BE7 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  3402 00000BE9 A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  3403 00000BEE C3                                              ret                                                     ;return
  3404                                  ;-----------------------------------------------------------------------------------------------------------------------
  3405                                  ;
  3406                                  ;       Routine:        GetConsoleChar
  3407                                  ;
  3408                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  3409                                  ;
  3410                                  ;       Out:            AL      ASCII character code
  3411                                  ;                       AH      keyboard scan code
  3412                                  ;
  3413                                  ;-----------------------------------------------------------------------------------------------------------------------
  3414 00000BEF E868020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  3415 00000BF4 E80A030000              GetConsoleChar          call    GetMessage                                      ;get the next message
  3416 00000BF9 09C0                                            or      eax,eax                                         ;do we have a message?
  3417 00000BFB 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  3418 00000BFD 50                                              push    eax                                             ;save key codes
  3419 00000BFE 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  3420 00000C03 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  3421 00000C08 58                                              pop     eax                                             ;restore key codes
  3422 00000C09 75E9                                            jne     GetConsoleChar                                  ;no, try again
  3423 00000C0B 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  3424 00000C10 C3                                              ret                                                     ;return
  3425                                  ;-----------------------------------------------------------------------------------------------------------------------
  3426                                  ;
  3427                                  ;       Routine:        GetConsoleString
  3428                                  ;
  3429                                  ;       Description:    This routine accepts keyboard input into a buffer.
  3430                                  ;
  3431                                  ;       In:             DS:EDX  target buffer address
  3432                                  ;                       ECX     maximum number of characters to accept
  3433                                  ;                       BH      echo to terminal
  3434                                  ;                       BL      terminating character
  3435                                  ;
  3436                                  ;-----------------------------------------------------------------------------------------------------------------------
  3437 00000C11 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  3438 00000C12 56                                              push    esi                                             ;
  3439 00000C13 57                                              push    edi                                             ;
  3440 00000C14 06                                              push    es                                              ;
  3441 00000C15 1E                                              push    ds                                              ;load data segment selector ...
  3442 00000C16 07                                              pop     es                                              ;... into extra segment register
  3443 00000C17 89D7                                            mov     edi,edx                                         ;edi = target buffer
  3444 00000C19 51                                              push    ecx                                             ;save maximum characters
  3445 00000C1A 30C0                                            xor     al,al                                           ;zero register
  3446 00000C1C FC                                              cld                                                     ;forward strings
  3447 00000C1D F3AA                                            rep     stosb                                           ;zero fill buffer
  3448 00000C1F 59                                              pop     ecx                                             ;maximum characters
  3449 00000C20 89D7                                            mov     edi,edx                                         ;edi = target buffer
  3450 00000C22 89D6                                            mov     esi,edx                                         ;esi = target buffer
  3451 00000C24 E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  3452 00000C26 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  3453 00000C2B 38D8                                            cmp     al,bl                                           ;is this the terminator?
  3454 00000C2D 7445                                            je      .50                                             ;yes, exit
  3455 00000C2F 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  3456 00000C31 7521                                            jne     .30                                             ;no, skip ahead
  3457 00000C33 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  3458 00000C35 74EF                                            je      .20                                             ;yes, get next character
  3459 00000C37 4F                                              dec     edi                                             ;backup target pointer
  3460 00000C38 C60700                                          mov     byte [edi],0                                    ;zero previous character
  3461 00000C3B 41                                              inc     ecx                                             ;increment remaining chars
  3462 00000C3C F6C701                                          test    bh,1                                            ;echo to console?
  3463 00000C3F 74E5                                            jz      .20                                             ;no, get next character
  3464 00000C41 E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  3465 00000C46 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3466 00000C48 E891000000                                      call    PutConsoleChar                                  ;write space to console
  3467 00000C4D E89B030000                                      call    PlaceCursor                                     ;position the cursor
  3468 00000C52 EBD2                                            jmp     .20                                             ;get next character
  3469 00000C54 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  3470 00000C56 72CE                                            jb      .20                                             ;no, get another character
  3471 00000C58 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  3472 00000C5A 77CA                                            ja      .20                                             ;no, get another character
  3473 00000C5C AA                                              stosb                                                   ;store character in buffer
  3474 00000C5D F6C701                                          test    bh,1                                            ;echo to console?
  3475 00000C60 740F                                            jz      .40                                             ;no, skip ahead
  3476 00000C62 E877000000                                      call    PutConsoleChar                                  ;write character to console
  3477 00000C67 E810000000                                      call    NextConsoleColumn                               ;advance console position
  3478 00000C6C E87C030000                                      call    PlaceCursor                                     ;position the cursor
  3479 00000C71 49                      .40                     dec     ecx                                             ;decrement remaining chars
  3480 00000C72 EBB0                                            jmp     .10                                             ;next
  3481 00000C74 30C0                    .50                     xor     al,al                                           ;null
  3482 00000C76 AA                                              stosb                                                   ;terminate buffer
  3483 00000C77 07                                              pop     es                                              ;restore non-volatile regs
  3484 00000C78 5F                                              pop     edi                                             ;
  3485 00000C79 5E                                              pop     esi                                             ;
  3486 00000C7A 59                                              pop     ecx                                             ;
  3487 00000C7B C3                                              ret                                                     ;return
  3488                                  ;-----------------------------------------------------------------------------------------------------------------------
  3489                                  ;
  3490                                  ;       Routine:        NextConsoleColumn
  3491                                  ;
  3492                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  3493                                  ;                       incremented if the end of the current row is reached.
  3494                                  ;
  3495                                  ;       In:             DS      OS data selector
  3496                                  ;
  3497                                  ;-----------------------------------------------------------------------------------------------------------------------
  3498 00000C7C A000080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  3499 00000C81 FEC0                                            inc     al                                              ;increment column
  3500 00000C83 A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  3501 00000C88 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  3502 00000C8A 720A                                            jb      .10                                             ;no, skip ahead
  3503 00000C8C E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  3504 00000C91 E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  3505 00000C96 C3                      .10                     ret                                                     ;return
  3506                                  ;-----------------------------------------------------------------------------------------------------------------------
  3507                                  ;
  3508                                  ;       Routine:        NextConsoleRow
  3509                                  ;
  3510                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  3511                                  ;
  3512                                  ;       In:             DS      OS data selector
  3513                                  ;
  3514                                  ;-----------------------------------------------------------------------------------------------------------------------
  3515 00000C97 A001080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  3516 00000C9C FEC0                                            inc     al                                              ;increment row
  3517 00000C9E A201080000                                      mov     [wbConsoleRow],al                               ;save row
  3518 00000CA3 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  3519 00000CA5 7211                                            jb      .10                                             ;no, skip ahead
  3520 00000CA7 E8EF020000                                      call    ScrollConsoleRow                                ;scroll up one row
  3521 00000CAC A001080000                                      mov     al,[wbConsoleRow]                               ;row
  3522 00000CB1 FEC8                                            dec     al                                              ;decrement row
  3523 00000CB3 A201080000                                      mov     [wbConsoleRow],al                               ;save row
  3524 00000CB8 C3                      .10                     ret                                                     ;return
  3525                                  ;-----------------------------------------------------------------------------------------------------------------------
  3526                                  ;
  3527                                  ;       Routine:        PreviousConsoleColumn
  3528                                  ;
  3529                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3530                                  ;                       the column is set to the last position in the row and the row is decremented.
  3531                                  ;
  3532                                  ;       In:             DS      OS data selector
  3533                                  ;
  3534                                  ;-----------------------------------------------------------------------------------------------------------------------
  3535 00000CB9 A000080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3536 00000CBE 08C0                                            or      al,al                                           ;start of row?
  3537 00000CC0 7514                                            jnz     .10                                             ;no, skip ahead
  3538 00000CC2 8A2501080000                                    mov     ah,[wbConsoleRow]                               ;current row
  3539 00000CC8 08E4                                            or      ah,ah                                           ;top of screen?
  3540 00000CCA 7411                                            jz      .20                                             ;yes, exit with no change
  3541 00000CCC FECC                                            dec     ah                                              ;decrement row
  3542 00000CCE 882501080000                                    mov     [wbConsoleRow],ah                               ;save row
  3543 00000CD4 B050                                            mov     al,ECONCOLS                                     ;set maximum column
  3544 00000CD6 FEC8                    .10                     dec     al                                              ;decrement column
  3545 00000CD8 A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  3546 00000CDD C3                      .20                     ret                                                     ;return
  3547                                  ;-----------------------------------------------------------------------------------------------------------------------
  3548                                  ;
  3549                                  ;       Routine:        PutConsoleChar
  3550                                  ;
  3551                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3552                                  ;
  3553                                  ;       In:             AL      ASCII character
  3554                                  ;                       DS      OS data selector
  3555                                  ;
  3556                                  ;-----------------------------------------------------------------------------------------------------------------------
  3557 00000CDE 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3558 00000CDF 06                                              push    es                                              ;
  3559 00000CE0 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3560 00000CE2 07                                              pop     es                                              ;... into extra segment reg
  3561 00000CE3 8A0D00080000                                    mov     cl,[wbConsoleColumn]                            ;column
  3562 00000CE9 8A2D01080000                                    mov     ch,[wbConsoleRow]                               ;row
  3563 00000CEF E8D3020000                                      call    SetConsoleChar                                  ;put character at row, column
  3564 00000CF4 07                                              pop     es                                              ;restore non-volatile regs
  3565 00000CF5 59                                              pop     ecx                                             ;
  3566 00000CF6 C3                                              ret                                                     ;return
  3567                                  ;-----------------------------------------------------------------------------------------------------------------------
  3568                                  ;
  3569                                  ;       Routine:        PutConsoleHexByte
  3570                                  ;
  3571                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3572                                  ;
  3573                                  ;       In:             AL      byte value
  3574                                  ;                       CL      column
  3575                                  ;                       CH      row
  3576                                  ;                       DS      OS data selector
  3577                                  ;                       ES      CGA selector
  3578                                  ;
  3579                                  ;-----------------------------------------------------------------------------------------------------------------------
  3580 00000CF7 53                      PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  3581 00000CF8 88C3                                            mov     bl,al                                           ;save byte value
  3582 00000CFA C0E804                                          shr     al,4                                            ;hi-order nybble
  3583 00000CFD 0C30                                            or      al,030h                                         ;apply ASCII zone
  3584 00000CFF 3C3A                                            cmp     al,03ah                                         ;numeric?
  3585 00000D01 7202                                            jb      .10                                             ;yes, skip ahead
  3586 00000D03 0407                                            add     al,7                                            ;add ASCII offset for alpha
  3587 00000D05 E8BD020000              .10                     call    SetConsoleChar                                  ;display ASCII character
  3588 00000D0A 88D8                                            mov     al,bl                                           ;byte value
  3589 00000D0C 240F                                            and     al,0fh                                          ;lo-order nybble
  3590 00000D0E 0C30                                            or      al,30h                                          ;apply ASCII zone
  3591 00000D10 3C3A                                            cmp     al,03ah                                         ;numeric?
  3592 00000D12 7202                                            jb      .20                                             ;yes, skip ahead
  3593 00000D14 0407                                            add     al,7                                            ;add ASCII offset for alpha
  3594 00000D16 E8AC020000              .20                     call    SetConsoleChar                                  ;display ASCII character
  3595 00000D1B 5B                                              pop     ebx                                             ;restore non-volatile regs
  3596 00000D1C C3                                              ret                                                     ;return
  3597                                  ;-----------------------------------------------------------------------------------------------------------------------
  3598                                  ;
  3599                                  ;       Routine:        PutConsoleHexDword
  3600                                  ;
  3601                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3602                                  ;
  3603                                  ;       In:             EAX     value
  3604                                  ;                       CL      column
  3605                                  ;                       CH      row
  3606                                  ;                       DS      OS data selector
  3607                                  ;                       ES      CGA selector
  3608                                  ;
  3609                                  ;-----------------------------------------------------------------------------------------------------------------------
  3610 00000D1D 50                      PutConsoleHexDword      push    eax
  3611 00000D1E C1E810                                          shr     eax,16
  3612 00000D21 E807000000                                      call    PutConsoleHexWord
  3613 00000D26 58                                              pop     eax
  3614 00000D27 E801000000                                      call    PutConsoleHexWord
  3615 00000D2C C3                                              ret
  3616                                  ;-----------------------------------------------------------------------------------------------------------------------
  3617                                  ;
  3618                                  ;       Routine:        PutConsoleHexWord
  3619                                  ;
  3620                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3621                                  ;
  3622                                  ;       In:             EAX     value
  3623                                  ;                       CL      column
  3624                                  ;                       CH      row
  3625                                  ;                       DS      OS data selector
  3626                                  ;                       ES      CGA selector
  3627                                  ;
  3628                                  ;-----------------------------------------------------------------------------------------------------------------------
  3629 00000D2D 50                      PutConsoleHexWord       push    eax
  3630 00000D2E C1E808                                          shr     eax,8
  3631 00000D31 E8C1FFFFFF                                      call    PutConsoleHexByte
  3632 00000D36 58                                              pop     eax
  3633 00000D37 E8BBFFFFFF                                      call    PutConsoleHexByte
  3634 00000D3C C3                                              ret
  3635                                  ;-----------------------------------------------------------------------------------------------------------------------
  3636                                  ;
  3637                                  ;       Routine:        PutConsoleOIAChar
  3638                                  ;
  3639                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3640                                  ;
  3641                                  ;       In:             DS      OS data selector
  3642                                  ;
  3643                                  ;-----------------------------------------------------------------------------------------------------------------------
  3644 00000D3D 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3645 00000D3E 51                                              push    ecx                                             ;
  3646 00000D3F 56                                              push    esi                                             ;
  3647 00000D40 1E                                              push    ds                                              ;
  3648 00000D41 06                                              push    es                                              ;
  3649 00000D42 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3650 00000D44 1F                                              pop     ds                                              ;... into data segment register
  3651 00000D45 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3652 00000D47 07                                              pop     es                                              ;... into extra segment register
  3653 00000D48 BE05080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  3654 00000D4D B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  3655 00000D4F B300                                            mov     bl,0                                            ;starting column
  3656 00000D51 B906000000                                      mov     ecx,6                                           ;maximum scan codes
  3657 00000D56 51                      .10                     push    ecx                                             ;save remaining count
  3658 00000D57 89D9                                            mov     ecx,ebx                                         ;row, column
  3659 00000D59 AC                                              lodsb                                                   ;read scan code
  3660 00000D5A 08C0                                            or      al,al                                           ;scan code present?
  3661 00000D5C 7407                                            jz      .20                                             ;no, skip ahead
  3662 00000D5E E894FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  3663 00000D63 EB0E                                            jmp     .30                                             ;continue
  3664 00000D65 B020                    .20                     mov     al,' '                                          ;ASCII space
  3665 00000D67 E85B020000                                      call    SetConsoleChar                                  ;display space
  3666 00000D6C B020                                            mov     al,' '                                          ;ASCII space
  3667 00000D6E E854020000                                      call    SetConsoleChar                                  ;display space
  3668 00000D73 80C302                  .30                     add     bl,2                                            ;next column (+2)
  3669 00000D76 59                                              pop     ecx                                             ;restore remaining
  3670 00000D77 E2DD                                            loop    .10                                             ;next code
  3671 00000D79 A00B080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  3672 00000D7E 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  3673 00000D80 720D                                            jb      .40                                             ;no, skip ahead
  3674 00000D82 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  3675 00000D84 7709                                            ja      .40                                             ;no, skip ahead
  3676 00000D86 88FD                                            mov     ch,bh                                           ;OIA row
  3677 00000D88 B128                                            mov     cl,40                                           ;character display column
  3678 00000D8A E838020000                                      call    SetConsoleChar                                  ;display ASCII character
  3679 00000D8F 07                      .40                     pop     es                                              ;restore non-volatile regs
  3680 00000D90 1F                                              pop     ds                                              ;
  3681 00000D91 5E                                              pop     esi                                             ;
  3682 00000D92 59                                              pop     ecx                                             ;
  3683 00000D93 5B                                              pop     ebx                                             ;
  3684 00000D94 C3                                              ret                                                     ;return
  3685                                  ;-----------------------------------------------------------------------------------------------------------------------
  3686                                  ;
  3687                                  ;       Routine:        PutConsoleOIAShift
  3688                                  ;
  3689                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3690                                  ;
  3691                                  ;       In:             BL      shift flags
  3692                                  ;                       BH      lock flags
  3693                                  ;                       DS      OS data selector
  3694                                  ;
  3695                                  ;-----------------------------------------------------------------------------------------------------------------------
  3696 00000D95 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3697 00000D96 06                                              push    es                                              ;
  3698 00000D97 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3699 00000D99 07                                              pop     es                                              ;... into ES register
  3700 00000D9A B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  3701 00000D9C B020                                            mov     al,EASCIISPACE                                  ;space is default character
  3702 00000D9E F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3703 00000DA1 7402                                            jz      .10                                             ;no, skip ahead
  3704 00000DA3 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3705 00000DA5 B10E                    .10                     mov     cl,14                                           ;indicator column
  3706 00000DA7 E81B020000                                      call    SetConsoleChar                                  ;display ASCII character
  3707 00000DAC B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3708 00000DAE F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3709 00000DB1 7402                                            jz      .20                                             ;no, skip ahead
  3710 00000DB3 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3711 00000DB5 B140                    .20                     mov     cl,64                                           ;indicator column
  3712 00000DB7 E80B020000                                      call    SetConsoleChar                                  ;display ASCII character
  3713 00000DBC B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3714 00000DBE F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3715 00000DC1 7402                                            jz      .30                                             ;no, skip ahead
  3716 00000DC3 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3717 00000DC5 B10F                    .30                     mov     cl,15                                           ;indicator column
  3718 00000DC7 E8FB010000                                      call    SetConsoleChar                                  ;display ASCII character
  3719 00000DCC B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3720 00000DCE F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3721 00000DD1 7402                                            jz      .40                                             ;no, skip ahead
  3722 00000DD3 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3723 00000DD5 B13F                    .40                     mov     cl,63                                           ;indicator column
  3724 00000DD7 E8EB010000                                      call    SetConsoleChar                                  ;display ASCII character
  3725 00000DDC B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3726 00000DDE F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3727 00000DE1 7402                                            jz      .50                                             ;no, skip ahead
  3728 00000DE3 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  3729 00000DE5 B110                    .50                     mov     cl,16                                           ;indicator column
  3730 00000DE7 E8DB010000                                      call    SetConsoleChar                                  ;display ASCII character
  3731 00000DEC B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3732 00000DEE F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3733 00000DF1 7402                                            jz      .60                                             ;no, skip ahead
  3734 00000DF3 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  3735 00000DF5 B13E                    .60                     mov     cl,62                                           ;indicator column
  3736 00000DF7 E8CB010000                                      call    SetConsoleChar                                  ;display ASCII character
  3737 00000DFC B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3738 00000DFE F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3739 00000E01 7402                                            jz      .70                                             ;no, skip ahead
  3740 00000E03 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3741 00000E05 B14E                    .70                     mov     cl,78                                           ;indicator column
  3742 00000E07 E8BB010000                                      call    SetConsoleChar                                  ;display ASCII character
  3743 00000E0C B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3744 00000E0E F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3745 00000E11 7402                                            jz      .80                                             ;no, skip ahead
  3746 00000E13 B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  3747 00000E15 B14D                    .80                     mov     cl,77                                           ;indicator column
  3748 00000E17 E8AB010000                                      call    SetConsoleChar                                  ;display ASCII character
  3749 00000E1C B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3750 00000E1E F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3751 00000E21 7402                                            jz      .90                                             ;no, skip ahead
  3752 00000E23 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3753 00000E25 B14C                    .90                     mov     cl,76                                           ;indicator column
  3754 00000E27 E89B010000                                      call    SetConsoleChar                                  ;display ASCII character
  3755 00000E2C 07                                              pop     es                                              ;restore non-volatile regs
  3756 00000E2D 59                                              pop     ecx                                             ;
  3757 00000E2E C3                                              ret                                                     ;return
  3758                                  ;-----------------------------------------------------------------------------------------------------------------------
  3759                                  ;
  3760                                  ;       Routine:        PutConsoleString
  3761                                  ;
  3762                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3763                                  ;                       console position as needed.
  3764                                  ;
  3765                                  ;       In:             EDX     source address
  3766                                  ;                       DS      OS data selector
  3767                                  ;
  3768                                  ;-----------------------------------------------------------------------------------------------------------------------
  3769 00000E2F 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  3770 00000E30 89D6                                            mov     esi,edx                                         ;source address
  3771 00000E32 FC                                              cld                                                     ;forward strings
  3772 00000E33 AC                      .10                     lodsb                                                   ;ASCII character
  3773 00000E34 08C0                                            or      al,al                                           ;end of string?
  3774 00000E36 7422                                            jz      .40                                             ;yes, skip ahead
  3775 00000E38 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  3776 00000E3A 7507                                            jne     .20                                             ;no, skip ahead
  3777 00000E3C E8A6FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  3778 00000E41 EBF0                                            jmp     .10                                             ;next character
  3779 00000E43 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3780 00000E45 7507                                            jne     .30                                             ;no, skip ahead
  3781 00000E47 E84BFEFFFF                                      call    NextConsoleRow                                  ;move to next row
  3782 00000E4C EBE5                                            jmp     .10                                             ;next character
  3783 00000E4E E88BFEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  3784 00000E53 E824FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  3785 00000E58 EBD9                                            jmp     .10                                             ;next character
  3786 00000E5A 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  3787 00000E5B C3                                              ret                                                     ;return
  3788                                  ;-----------------------------------------------------------------------------------------------------------------------
  3789                                  ;
  3790                                  ;       Routine:        Yield
  3791                                  ;
  3792                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3793                                  ;
  3794                                  ;-----------------------------------------------------------------------------------------------------------------------
  3795 00000E5C FB                      Yield                   sti                                                     ;enable maskagle interrupts
  3796 00000E5D F4                                              hlt                                                     ;halt until external interrupt
  3797 00000E5E C3                                              ret                                                     ;return
  3798                                  ;=======================================================================================================================
  3799                                  ;
  3800                                  ;       Data-Type Conversion Helper Routines
  3801                                  ;
  3802                                  ;       UnsignedToDecimalString
  3803                                  ;
  3804                                  ;=======================================================================================================================
  3805                                  ;-----------------------------------------------------------------------------------------------------------------------
  3806                                  ;
  3807                                  ;       Routine:        UnsignedToDecimalString
  3808                                  ;
  3809                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  3810                                  ;
  3811                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  3812                                  ;                                               bit 1: 1 = include comma grouping delimiters
  3813                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  3814                                  ;                       ECX     32-bit binary
  3815                                  ;                       DS:EDX  output buffer address
  3816                                  ;
  3817                                  ;-----------------------------------------------------------------------------------------------------------------------
  3818 00000E5F 53                      UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  3819 00000E60 51                                              push    ecx                                             ;
  3820 00000E61 57                                              push    edi                                             ;
  3821 00000E62 06                                              push    es                                              ;
  3822 00000E63 1E                                              push    ds                                              ;load data selector
  3823 00000E64 07                                              pop     es                                              ;... into extra segment reg
  3824 00000E65 89D7                                            mov     edi,edx                                         ;output buffer address
  3825 00000E67 80E70F                                          and     bh,00001111b                                    ;zero internal flags
  3826 00000E6A 89CA                                            mov     edx,ecx                                         ;binary
  3827 00000E6C B900CA9A3B                                      mov     ecx,1000000000                                  ;10^9 divisor
  3828 00000E71 E871000000                                      call    .30                                             ;divide and store
  3829 00000E76 B900E1F505                                      mov     ecx,100000000                                   ;10^8 divisor
  3830 00000E7B E855000000                                      call    .10                                             ;divide and store
  3831 00000E80 B980969800                                      mov     ecx,10000000                                    ;10^7 divisor
  3832 00000E85 E85D000000                                      call    .30                                             ;divide and store
  3833 00000E8A B940420F00                                      mov     ecx,1000000                                     ;10^6 divisor
  3834 00000E8F E853000000                                      call    .30                                             ;divide and store
  3835 00000E94 B9A0860100                                      mov     ecx,100000                                      ;10^5 divisor
  3836 00000E99 E837000000                                      call    .10                                             ;divide and store
  3837 00000E9E B910270000                                      mov     ecx,10000                                       ;10^4 divisor
  3838 00000EA3 E83F000000                                      call    .30                                             ;divide and store
  3839 00000EA8 B9E8030000                                      mov     ecx,1000                                        ;10^3 divisor
  3840 00000EAD E835000000                                      call    .30                                             ;divide and store
  3841 00000EB2 B964000000                                      mov     ecx,100                                         ;10^2 divisor
  3842 00000EB7 E819000000                                      call    .10                                             ;divide and store
  3843 00000EBC B90A000000                                      mov     ecx,10                                          ;10^2 divisor
  3844 00000EC1 E821000000                                      call    .30                                             ;divide and store
  3845 00000EC6 89D0                                            mov     eax,edx                                         ;10^1 remainder
  3846 00000EC8 E827000000                                      call    .40                                             ;store
  3847 00000ECD 30C0                                            xor     al,al                                           ;null terminator
  3848 00000ECF AA                                              stosb
  3849 00000ED0 07                                              pop     es                                              ;restore non-volatile regs
  3850 00000ED1 5F                                              pop     edi                                             ;
  3851 00000ED2 59                                              pop     ecx                                             ;
  3852 00000ED3 5B                                              pop     ebx                                             ;
  3853 00000ED4 C3                                              ret                                                     ;return
  3854 00000ED5 F6C702                  .10                     test    bh,00000010b                                    ;comma group delims?
  3855 00000ED8 740D                                            jz      .30                                             ;no, branch
  3856 00000EDA F6C701                                          test    bh,00000001b                                    ;trim leading zeros?
  3857 00000EDD 7405                                            jz      .20                                             ;no, store delim
  3858 00000EDF F6C710                                          test    bh,00010000b                                    ;non-zero found?
  3859 00000EE2 7403                                            jz      .30                                             ;no, branch
  3860 00000EE4 B02C                    .20                     mov     al,','                                          ;delimiter
  3861 00000EE6 AA                                              stosb                                                   ;store delimiter
  3862 00000EE7 89D0                    .30                     mov     eax,edx                                         ;lo-orer dividend
  3863 00000EE9 31D2                                            xor     edx,edx                                         ;zero hi-order
  3864 00000EEB F7F1                                            div     ecx                                             ;divide by power of 10
  3865 00000EED 84C0                                            test    al,al                                           ;zero?
  3866 00000EEF 7407                                            jz      .50                                             ;yes, branch
  3867 00000EF1 80CF10                                          or      bh,00010000b                                    ;non-zero found
  3868 00000EF4 0C30                    .40                     or      al,30h                                          ;ASCII zone
  3869 00000EF6 AA                                              stosb                                                   ;store digit
  3870 00000EF7 C3                                              ret                                                     ;return
  3871 00000EF8 F6C701                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  3872 00000EFB 74F7                                            jz      .40                                             ;no, store and continue
  3873 00000EFD F6C710                                          test    bh,00010000b                                    ;non-zero found?
  3874 00000F00 75F2                                            jnz     .40                                             ;yes, store and continue
  3875 00000F02 C3                                              ret                                                     ;return
  3876                                  ;=======================================================================================================================
  3877                                  ;
  3878                                  ;       Message Queue Helper Routines
  3879                                  ;
  3880                                  ;       GetMessage
  3881                                  ;       PutMessage
  3882                                  ;
  3883                                  ;=======================================================================================================================
  3884                                  ;-----------------------------------------------------------------------------------------------------------------------
  3885                                  ;
  3886                                  ;       Routine:        GetMessage
  3887                                  ;
  3888                                  ;       Description:    This routine reads and removes a message from the message queue.
  3889                                  ;
  3890                                  ;       Out:            EAX     lo-order message data
  3891                                  ;                       EDX     hi-order message data
  3892                                  ;
  3893                                  ;                       CY      0 = message read
  3894                                  ;                               1 = no message to read
  3895                                  ;
  3896                                  ;-----------------------------------------------------------------------------------------------------------------------
  3897 00000F03 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  3898 00000F04 51                                              push    ecx                                             ;
  3899 00000F05 1E                                              push    ds                                              ;
  3900 00000F06 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  3901 00000F08 1F                                              pop     ds                                              ;... into data segment register
  3902 00000F09 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  3903 00000F0F 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  3904 00000F11 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3905 00000F14 09D0                                            or      eax,edx                                         ;is queue empty?
  3906 00000F16 F9                                              stc                                                     ;assume queue is emtpy
  3907 00000F17 741B                                            jz      .20                                             ;yes, skip ahead
  3908 00000F19 31C9                                            xor     ecx,ecx                                         ;store zero
  3909 00000F1B 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  3910 00000F1D 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3911 00000F20 83C308                                          add     ebx,8                                           ;next queue element
  3912 00000F23 81E3FC030000                                    and     ebx,03fch                                       ;at end of queue?
  3913 00000F29 7502                                            jnz     .10                                             ;no, skip ahead
  3914 00000F2B B308                                            mov     bl,8                                            ;reset to 1st entry
  3915 00000F2D 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3916 00000F33 F8                                              clc                                                     ;indicate message read
  3917 00000F34 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  3918 00000F35 59                                              pop     ecx                                             ;
  3919 00000F36 5B                                              pop     ebx                                             ;
  3920 00000F37 C3                                              ret                                                     ;return
  3921                                  ;-----------------------------------------------------------------------------------------------------------------------
  3922                                  ;
  3923                                  ;       Routine:        PutMessage
  3924                                  ;
  3925                                  ;       Description:    This routine adda a message to the message queue.
  3926                                  ;
  3927                                  ;       In:             ECX     hi-order data word
  3928                                  ;                       EDX     lo-order data word
  3929                                  ;
  3930                                  ;       Out:            CY      0 = success
  3931                                  ;                               1 = fail: queue is full
  3932                                  ;
  3933                                  ;-----------------------------------------------------------------------------------------------------------------------
  3934 00000F38 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  3935 00000F39 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  3936 00000F3B 1F                                              pop     ds                                              ;... into data segment register
  3937 00000F3C A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  3938 00000F41 833800                                          cmp     dword [eax],0                                   ;is queue full?
  3939 00000F44 F9                                              stc                                                     ;assume failure
  3940 00000F45 7517                                            jne     .20                                             ;yes, cannot store
  3941 00000F47 8910                                            mov     [eax],edx                                       ;store lo-order data
  3942 00000F49 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  3943 00000F4C 83C008                                          add     eax,8                                           ;next queue element adr
  3944 00000F4F 25FC030000                                      and     eax,03fch                                       ;at end of queue?
  3945 00000F54 7502                                            jnz     .10                                             ;no, skip ahead
  3946 00000F56 B008                                            mov     al,8                                            ;reset to top of queue
  3947 00000F58 A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3948 00000F5D F8                                              clc                                                     ;indicate success
  3949 00000F5E 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  3950 00000F5F C3                                              ret                                                     ;return
  3951                                  ;=======================================================================================================================
  3952                                  ;
  3953                                  ;       Memory-Mapped Video Routines
  3954                                  ;
  3955                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  3956                                  ;
  3957                                  ;       ClearConsoleScreen
  3958                                  ;       ScrollConsoleRow
  3959                                  ;       SetConsoleChar
  3960                                  ;       SetConsoleString
  3961                                  ;
  3962                                  ;=======================================================================================================================
  3963                                  ;-----------------------------------------------------------------------------------------------------------------------
  3964                                  ;
  3965                                  ;       Routine:        ClearConsoleScreen
  3966                                  ;
  3967                                  ;       Description:    This routine clears the console (CGA) screen.
  3968                                  ;
  3969                                  ;-----------------------------------------------------------------------------------------------------------------------
  3970 00000F60 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  3971 00000F61 57                                              push    edi                                             ;
  3972 00000F62 1E                                              push    ds                                              ;
  3973 00000F63 06                                              push    es                                              ;
  3974 00000F64 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  3975 00000F66 1F                                              pop     ds                                              ;... into DS register
  3976 00000F67 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3977 00000F69 07                                              pop     es                                              ;... into ES register
  3978 00000F6A B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  3979 00000F6F B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  3980 00000F74 31FF                                            xor     edi,edi                                         ;target offset
  3981 00000F76 FC                                              cld                                                     ;forward strings
  3982 00000F77 F3AB                                            rep     stosd                                           ;reset screen body
  3983 00000F79 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  3984 00000F7E B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  3985 00000F83 F3AB                                            rep     stosd                                           ;reset OIA line
  3986 00000F85 30C0                                            xor     al,al                                           ;zero register
  3987 00000F87 A201080000                                      mov     [wbConsoleRow],al                               ;reset console row
  3988 00000F8C A200080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  3989 00000F91 E857000000                                      call    PlaceCursor                                     ;place cursor at current position
  3990 00000F96 07                                              pop     es                                              ;restore non-volatile regs
  3991 00000F97 1F                                              pop     ds                                              ;
  3992 00000F98 5F                                              pop     edi                                             ;
  3993 00000F99 59                                              pop     ecx                                             ;
  3994 00000F9A C3                                              ret                                                     ;return
  3995                                  ;-----------------------------------------------------------------------------------------------------------------------
  3996                                  ;
  3997                                  ;       Routine:        ScrollConsoleRow
  3998                                  ;
  3999                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4000                                  ;
  4001                                  ;-----------------------------------------------------------------------------------------------------------------------
  4002 00000F9B 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4003 00000F9C 56                                              push    esi                                             ;
  4004 00000F9D 57                                              push    edi                                             ;
  4005 00000F9E 1E                                              push    ds                                              ;
  4006 00000F9F 06                                              push    es                                              ;
  4007 00000FA0 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4008 00000FA2 1F                                              pop     ds                                              ;... into DS
  4009 00000FA3 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4010 00000FA5 07                                              pop     es                                              ;... into ES
  4011 00000FA6 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4012 00000FAB BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4013 00000FB0 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  4014 00000FB2 FC                                              cld                                                     ;forward strings
  4015 00000FB3 F3A5                                            rep     movsd                                           ;move 24 lines up
  4016 00000FB5 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4017 00000FBA B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4018 00000FBF F3AB                                            rep     stosd                                           ;clear bottom row
  4019 00000FC1 07                                              pop     es                                              ;restore non-volatile regs
  4020 00000FC2 1F                                              pop     ds                                              ;
  4021 00000FC3 5F                                              pop     edi                                             ;
  4022 00000FC4 5E                                              pop     esi                                             ;
  4023 00000FC5 59                                              pop     ecx                                             ;
  4024 00000FC6 C3                                              ret                                                     ;return
  4025                                  ;-----------------------------------------------------------------------------------------------------------------------
  4026                                  ;
  4027                                  ;       Routine:        SetConsoleChar
  4028                                  ;
  4029                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4030                                  ;
  4031                                  ;       In:             AL      ASCII character
  4032                                  ;                       CL      column
  4033                                  ;                       CH      row
  4034                                  ;                       ES      CGA selector
  4035                                  ;
  4036                                  ;       Out:            EAX     last target address written (ES:)
  4037                                  ;                       CL      column + 1
  4038                                  ;
  4039                                  ;-----------------------------------------------------------------------------------------------------------------------
  4040 00000FC7 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  4041 00000FC9 0FB6C5                                          movzx   eax,ch                                          ;row
  4042 00000FCC B450                                            mov     ah,ECONCOLS                                     ;cols/row
  4043 00000FCE F6E4                                            mul     ah                                              ;row * cols/row
  4044 00000FD0 00C8                                            add     al,cl                                           ;add column
  4045 00000FD2 80D400                                          adc     ah,0                                            ;handle carry
  4046 00000FD5 D1E0                                            shl     eax,1                                           ;screen offset
  4047 00000FD7 268810                                          mov     [es:eax],dl                                     ;store character
  4048 00000FDA FEC1                                            inc     cl                                              ;next column
  4049 00000FDC C3                                              ret                                                     ;return
  4050                                  ;-----------------------------------------------------------------------------------------------------------------------
  4051                                  ;
  4052                                  ;       Routine:        SetConsoleString
  4053                                  ;
  4054                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4055                                  ;
  4056                                  ;       In:             ESI     source offset (DS:)
  4057                                  ;                       CL      column
  4058                                  ;                       CH      row
  4059                                  ;                       ES      CGA selector
  4060                                  ;
  4061                                  ;-----------------------------------------------------------------------------------------------------------------------
  4062 00000FDD 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  4063 00000FDE FC                                              cld                                                     ;forward strings
  4064 00000FDF AC                      .10                     lodsb                                                   ;next ASCII character
  4065 00000FE0 84C0                                            test    al,al                                           ;end of string?
  4066 00000FE2 7407                                            jz      .20                                             ;yes, branch
  4067 00000FE4 E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  4068 00000FE9 EBF4                                            jmp     .10                                             ;continue
  4069 00000FEB 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4070 00000FEC C3                                              ret                                                     ;return
  4071                                  ;=======================================================================================================================
  4072                                  ;
  4073                                  ;       Input/Output Routines
  4074                                  ;
  4075                                  ;       These routines read and/or write directly to ports.
  4076                                  ;
  4077                                  ;       PlaceCursor
  4078                                  ;       PutPrimaryEndOfInt
  4079                                  ;       PutSecondaryEndOfInt
  4080                                  ;       ReadRealTimeClock
  4081                                  ;       ResetSystem
  4082                                  ;       SetKeyboardLamps
  4083                                  ;       WaitForKeyInBuffer
  4084                                  ;       WaitForKeyOutBuffer
  4085                                  ;
  4086                                  ;=======================================================================================================================
  4087                                  ;-----------------------------------------------------------------------------------------------------------------------
  4088                                  ;
  4089                                  ;       Routine:        PlaceCursor
  4090                                  ;
  4091                                  ;       Description:    This routine positions the cursor on the console.
  4092                                  ;
  4093                                  ;       In:             DS      OS data selector
  4094                                  ;
  4095                                  ;-----------------------------------------------------------------------------------------------------------------------
  4096 00000FED 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  4097 00000FEE A001080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  4098 00000FF3 B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  4099 00000FF5 F6E4                                            mul     ah                                              ;row offset
  4100 00000FF7 020500080000                                    add     al,[wbConsoleColumn]                            ;add column
  4101 00000FFD 80D400                                          adc     ah,0                                            ;add overflow
  4102 00001000 89C1                                            mov     ecx,eax                                         ;screen offset
  4103 00001002 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4104 00001004 B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4105 00001006 B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4106 00001008 EE                                              out     dx,al                                           ;select register
  4107 00001009 42                                              inc     edx                                             ;data port
  4108 0000100A 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  4109 0000100C EE                                              out     dx,al                                           ;store hi-order loc
  4110 0000100D 4A                                              dec     edx                                             ;register select port
  4111 0000100E B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4112 00001010 EE                                              out     dx,al                                           ;select register
  4113 00001011 42                                              inc     edx                                             ;data port
  4114 00001012 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  4115 00001014 EE                                              out     dx,al                                           ;store lo-order loc
  4116 00001015 59                                              pop     ecx                                             ;restore non-volatile regs
  4117 00001016 C3                                              ret                                                     ;return
  4118                                  ;-----------------------------------------------------------------------------------------------------------------------
  4119                                  ;
  4120                                  ;       Routine:        PutPrimaryEndOfInt
  4121                                  ;
  4122                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4123                                  ;
  4124                                  ;-----------------------------------------------------------------------------------------------------------------------
  4125 00001017 FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4126 00001018 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4127 0000101A E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4128 0000101C C3                                              ret                                                     ;return
  4129                                  ;-----------------------------------------------------------------------------------------------------------------------
  4130                                  ;
  4131                                  ;       Routine:        PutSecondaryEndOfInt
  4132                                  ;
  4133                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4134                                  ;
  4135                                  ;-----------------------------------------------------------------------------------------------------------------------
  4136 0000101D FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4137 0000101E B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4138 00001020 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4139 00001022 C3                                              ret                                                     ;return
  4140                                  ;-----------------------------------------------------------------------------------------------------------------------
  4141                                  ;
  4142                                  ;       Routine:        ReadRealTimeClock
  4143                                  ;
  4144                                  ;       Description:    This routine gets current date time from the real-time clock.
  4145                                  ;
  4146                                  ;       In:             DS:EBX  DATETIME structure
  4147                                  ;
  4148                                  ;-----------------------------------------------------------------------------------------------------------------------
  4149 00001023 56                      ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4150 00001024 57                                              push    edi                                             ;
  4151 00001025 06                                              push    es                                              ;
  4152 00001026 1E                                              push    ds                                              ;store data selector ...
  4153 00001027 07                                              pop     es                                              ;... in es register
  4154 00001028 89DF                                            mov     edi,ebx                                         ;date-time structure
  4155 0000102A B000                                            mov     al,ERTCSECONDREG                                ;second register
  4156 0000102C E670                                            out     ERTCREGPORT,al                                  ;select second register
  4157 0000102E E471                                            in      al,ERTCDATAPORT                                 ;read second register
  4158 00001030 FC                                              cld                                                     ;forward strings
  4159 00001031 AA                                              stosb                                                   ;store second value
  4160 00001032 B002                                            mov     al,ERTCMINUTEREG                                ;minute register
  4161 00001034 E670                                            out     ERTCREGPORT,al                                  ;select minute register
  4162 00001036 E471                                            in      al,ERTCDATAPORT                                 ;read minute register
  4163 00001038 AA                                              stosb                                                   ;store minute value
  4164 00001039 B004                                            mov     al,ERTCHOURREG                                  ;hour register
  4165 0000103B E670                                            out     ERTCREGPORT,al                                  ;select hour register
  4166 0000103D E471                                            in      al,ERTCDATAPORT                                 ;read hour register
  4167 0000103F AA                                              stosb                                                   ;store hour value
  4168 00001040 B006                                            mov     al,ERTCWEEKDAYREG                               ;weekday register
  4169 00001042 E670                                            out     ERTCREGPORT,al                                  ;select weekday register
  4170 00001044 E471                                            in      al,ERTCDATAPORT                                 ;read weekday register
  4171 00001046 AA                                              stosb                                                   ;store weekday value
  4172 00001047 B007                                            mov     al,ERTCDAYREG                                   ;day register
  4173 00001049 E670                                            out     ERTCREGPORT,al                                  ;select day register
  4174 0000104B E471                                            in      al,ERTCDATAPORT                                 ;read day register
  4175 0000104D AA                                              stosb                                                   ;store day value
  4176 0000104E B008                                            mov     al,ERTCMONTHREG                                 ;month register
  4177 00001050 E670                                            out     ERTCREGPORT,al                                  ;select month register
  4178 00001052 E471                                            in      al,ERTCDATAPORT                                 ;read month register
  4179 00001054 AA                                              stosb                                                   ;store month value
  4180 00001055 B009                                            mov     al,ERTCYEARREG                                  ;year register
  4181 00001057 E670                                            out     ERTCREGPORT,al                                  ;select year register
  4182 00001059 E471                                            in      al,ERTCDATAPORT                                 ;read year register
  4183 0000105B AA                                              stosb                                                   ;store year value
  4184 0000105C B032                                            mov     al,ERTCCENTURYREG                               ;century register
  4185 0000105E E670                                            out     ERTCREGPORT,al                                  ;select century register
  4186 00001060 E471                                            in      al,ERTCDATAPORT                                 ;read century register
  4187 00001062 AA                                              stosb                                                   ;store century value
  4188 00001063 B00B                                            mov     al,ERTCSTATUSREG                                ;status register
  4189 00001065 E670                                            out     ERTCREGPORT,al                                  ;select status register
  4190 00001067 E471                                            in      al,ERTCDATAPORT                                 ;read status register
  4191 00001069 A804                                            test    al,ERTCBINARYVALS                               ;test if values are binary
  4192 0000106B 751D                                            jnz     .20                                             ;skip ahead if binary values
  4193 0000106D 89DE                                            mov     esi,ebx                                         ;date-time structure address
  4194 0000106F 89DF                                            mov     edi,ebx                                         ;date-time structure address
  4195 00001071 B908000000                                      mov     ecx,8                                           ;loop counter
  4196 00001076 AC                      .10                     lodsb                                                   ;BCD value
  4197 00001077 88C4                                            mov     ah,al                                           ;BCD value
  4198 00001079 240F                                            and     al,00001111b                                    ;low-order decimal zone
  4199 0000107B 80E4F0                                          and     ah,11110000b                                    ;hi-order decimal zone
  4200 0000107E D0EC                                            shr     ah,1                                            ;hi-order decimal * 8
  4201 00001080 00E0                                            add     al,ah                                           ;low-order + hi-order * 8
  4202 00001082 C0EC02                                          shr     ah,2                                            ;hi-order decimal * 2
  4203 00001085 00E0                                            add     al,ah                                           ;low-order + hi-order * 10
  4204 00001087 AA                                              stosb                                                   ;replace BCD with binary
  4205 00001088 E2EC                                            loop    .10                                             ;next value
  4206 0000108A 07                      .20                     pop     es                                              ;restore non-volatile regs
  4207 0000108B 5F                                              pop     edi                                             ;
  4208 0000108C 5E                                              pop     esi                                             ;
  4209 0000108D C3                                              ret                                                     ;return
  4210                                  ;-----------------------------------------------------------------------------------------------------------------------
  4211                                  ;
  4212                                  ;       Routine:        ResetSystem
  4213                                  ;
  4214                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4215                                  ;
  4216                                  ;       Out:            N/A     This routine does not return.
  4217                                  ;
  4218                                  ;-----------------------------------------------------------------------------------------------------------------------
  4219 0000108E B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4220 00001093 E2FE                                            loop    $                                               ;clear interrupts
  4221 00001095 B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4222 00001097 E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4223 00001099 FB                      .10                     sti                                                     ;enable maskable interrupts
  4224 0000109A F4                                              hlt                                                     ;halt until interrupt
  4225 0000109B EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  4226                                  ;-----------------------------------------------------------------------------------------------------------------------
  4227                                  ;
  4228                                  ;       Routine:        SetKeyboardLamps
  4229                                  ;
  4230                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4231                                  ;
  4232                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4233                                  ;
  4234                                  ;-----------------------------------------------------------------------------------------------------------------------
  4235 0000109D E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4236 000010A2 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4237 000010A4 E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  4238 000010A6 E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4239 000010AB E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4240 000010AD E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4241 000010B2 88F8                                            mov     al,bh                                           ;set/reset lamps value
  4242 000010B4 E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  4243 000010B6 E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4244 000010BB E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4245 000010BD C3                                              ret                                                     ;return
  4246                                  ;-----------------------------------------------------------------------------------------------------------------------
  4247                                  ;
  4248                                  ;       Routine:        WaitForKeyInBuffer
  4249                                  ;
  4250                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  4251                                  ;
  4252                                  ;       Out:            ZF      1 = Input buffer ready
  4253                                  ;                               0 = Input buffer not ready after timeout
  4254                                  ;
  4255                                  ;-----------------------------------------------------------------------------------------------------------------------
  4256 000010BE 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  4257 000010BF B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4258 000010C4 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4259 000010C6 A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  4260 000010C8 E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  4261 000010CA 59                                              pop     ecx                                             ;restore non-volatile regs
  4262 000010CB C3                                              ret                                                     ;return
  4263                                  ;-----------------------------------------------------------------------------------------------------------------------
  4264                                  ;
  4265                                  ;       Routine:        WaitForKeyOutBuffer
  4266                                  ;
  4267                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  4268                                  ;
  4269                                  ;       Out:            ZF      1 = Output buffer has data from controller
  4270                                  ;                               0 = Output buffer empty after timeout
  4271                                  ;
  4272                                  ;-----------------------------------------------------------------------------------------------------------------------
  4273 000010CC 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  4274 000010CD B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4275 000010D2 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4276 000010D4 A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  4277 000010D6 E1FA                                            loopz   .10                                             ;loop until output buffer bit
  4278 000010D8 59                                              pop     ecx                                             ;restore non-volatile regs
  4279 000010D9 C3                                              ret                                                     ;return
  4280                                  ;-----------------------------------------------------------------------------------------------------------------------
  4281                                  ;
  4282                                  ;       End of the Kernel Function Library
  4283                                  ;
  4284                                  ;-----------------------------------------------------------------------------------------------------------------------
  4285 000010DA 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  4286                                  ;=======================================================================================================================
  4287                                  ;
  4288                                  ;       Console Task
  4289                                  ;
  4290                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  4291                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  4292                                  ;       screen and responds to user commands.
  4293                                  ;
  4294                                  ;=======================================================================================================================
  4295                                  ;-----------------------------------------------------------------------------------------------------------------------
  4296                                  ;
  4297                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  4298                                  ;
  4299                                  ;       This is the stack for the console task. It supports 448 nested calls.
  4300                                  ;
  4301                                  ;-----------------------------------------------------------------------------------------------------------------------
  4302                                  section                 constack                                                ;console task stack
  4303 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  4304                                  ;-----------------------------------------------------------------------------------------------------------------------
  4305                                  ;
  4306                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  4307                                  ;
  4308                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  4309                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  4310                                  ;       16 descriptors. Six are initially defined.
  4311                                  ;
  4312                                  ;-----------------------------------------------------------------------------------------------------------------------
  4313                                  section                 conldt                                                  ;console local descriptors
  4314 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  4315 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  4316 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  4317 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  4318 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  4319 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  4320 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  4321                                  ;-----------------------------------------------------------------------------------------------------------------------
  4322                                  ;
  4323                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  4324                                  ;
  4325                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  4326                                  ;       segment. CS to console code.
  4327                                  ;
  4328                                  ;-----------------------------------------------------------------------------------------------------------------------
  4329                                  section                 contss                                                  ;console task state segment
  4330 00000000 00000000                                        dd      0                                               ;00 back-link tss
  4331 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  4332 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  4333 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  4334 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  4335 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  4336 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  4337 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  4338 00000020 00000000                                        dd      0                                               ;20 eip
  4339 00000024 00020000                                        dd      0200h                                           ;24 eflags
  4340 00000028 00000000                                        dd      0                                               ;28 eax
  4341 0000002C 00000000                                        dd      0                                               ;2c ecx
  4342 00000030 00000000                                        dd      0                                               ;30 edx
  4343 00000034 00000000                                        dd      0                                               ;34 ebx
  4344 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  4345 0000003C 00000000                                        dd      0                                               ;3c ebp
  4346 00000040 00000000                                        dd      0                                               ;40 esi
  4347 00000044 00000000                                        dd      0                                               ;44 edi
  4348 00000048 1C000000                                        dd      001Ch                                           ;48 es
  4349 0000004C 24000000                                        dd      0024h                                           ;4c cs
  4350 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  4351 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  4352 00000058 00000000                                        dd      0                                               ;58 fs
  4353 0000005C 00000000                                        dd      0                                               ;5c gs
  4354 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  4355 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  4356                                  ;-----------------------------------------------------------------------------------------------------------------------
  4357                                  ;
  4358                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  4359                                  ;
  4360                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  4361                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  4362                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  4363                                  ;       event.
  4364                                  ;
  4365                                  ;-----------------------------------------------------------------------------------------------------------------------
  4366                                  section                 conmque                                                 ;console message queue
  4367 00000000 08000000                                        dd      8                                               ;head pointer
  4368 00000004 08000000                                        dd      8                                               ;tail pointer
  4369 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  4370                                  ;-----------------------------------------------------------------------------------------------------------------------
  4371                                  ;
  4372                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  4373                                  ;
  4374                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  4375                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  4376                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  4377                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  4378                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  4379                                  ;       board input, echoing to the console screen and responding to user commands.
  4380                                  ;
  4381                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  4382                                  ;
  4383                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  4384                                  ;                               |  Real Mode Interrupt Vectors                  |
  4385                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  4386                                  ;                               |  Reserved BIOS Memory Area                    |
  4387                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  4388                                  ;                               |  Shared Kernel Memory Area                    |
  4389                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  4390                                  ;                               |  Global Descriptor Table (GDT)                |
  4391                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  4392                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  4393                                  ;                       002000  +-----------------------------------------------+
  4394                                  ;                               |  Interrupt Handlers                           |
  4395                                  ;                               |  Kernel Function Library                      |
  4396                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  4397                                  ;                               |  Console Task Stack Area                      |
  4398                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  4399                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  4400                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  4401                                  ;                               |  Console Task Task State Segment (TSS)        |
  4402                                  ;                       004800  +-----------------------------------------------+
  4403                                  ;                               |  Console Task Message Queue                   |
  4404                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  4405                                  ;                               |  Console Task Code                            |
  4406                                  ;                               |  Console Task Constants                       |
  4407                                  ;                       006000  +===============================================+
  4408                                  ;
  4409                                  ;-----------------------------------------------------------------------------------------------------------------------
  4410                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  4411 00000000 E86D000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  4412                                  
  4413                                                          clearConsoleScreen                                      ;clear the console screen
  4413 00000005 B000                <1>  mov al,eClearConsoleScreen
  4413 00000007 CD30                <1>  int _svc
  4414                                                          putConsoleString czTitle                                ;display startup message
  4414 00000009 BA[E8030000]        <1>  mov edx,%1
  4414 0000000E B005                <1>  mov al,ePutConsoleString
  4414 00000010 CD30                <1>  int _svc
  4415                                  .10                     putConsoleString czPrompt                               ;display input prompt
  4415                              <1> .10 :
  4415 00000012 BA[E6030000]        <1>  mov edx,%1
  4415 00000017 B005                <1>  mov al,ePutConsoleString
  4415 00000019 CD30                <1>  int _svc
  4416                                                          placeCursor                                             ;set CRT cursor location
  4416 0000001B B004                <1>  mov al,ePlaceCursor
  4416 0000001D CD30                <1>  int _svc
  4417                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  4417 0000001F BA0C080000          <1>  mov edx,%1
  4417 00000024 B94F000000          <1>  mov ecx,%2
  4417 00000029 B701                <1>  mov bh,%3
  4417 0000002B B30D                <1>  mov bl,%4
  4417 0000002D B002                <1>  mov al,eGetConsoleString
  4417 0000002F CD30                <1>  int _svc
  4418                                                          putConsoleString czNewLine                              ;newline
  4418 00000031 BA[E3030000]        <1>  mov edx,%1
  4418 00000036 B005                <1>  mov al,ePutConsoleString
  4418 00000038 CD30                <1>  int _svc
  4419                                  
  4420 0000003A BA0C080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  4421 0000003F BB5C080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  4422 00000044 E842000000                                      call    ConTakeToken                                    ;handle console input
  4423 00000049 BA5C080000                                      mov     edx,wzConsoleToken                              ;token buffer
  4424 0000004E E86D000000                                      call    ConDetermineCommand                             ;determine command number
  4425 00000053 83F814                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  4426 00000056 720B                                            jb      .20                                             ;yes, branch
  4427                                  
  4428                                                          putConsoleString czUnknownCommand                       ;display error message
  4428 00000058 BA[06040000]        <1>  mov edx,%1
  4428 0000005D B005                <1>  mov al,ePutConsoleString
  4428 0000005F CD30                <1>  int _svc
  4429                                  
  4430 00000061 EBAF                                            jmp     .10                                             ;next command
  4431 00000063 C1E002                  .20                     shl     eax,2                                           ;index into jump table
  4432 00000066 BA[F8020000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  4433 0000006B 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  4434 0000006E FFD0                                            call    eax                                             ;call command handler
  4435 00000070 EBA0                                            jmp     .10                                             ;next command
  4436                                  ;-----------------------------------------------------------------------------------------------------------------------
  4437                                  ;
  4438                                  ;       Routine:        ConInitializeData
  4439                                  ;
  4440                                  ;       Description:    This routine initializes console task variables.
  4441                                  ;
  4442                                  ;-----------------------------------------------------------------------------------------------------------------------
  4443 00000072 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  4444 00000073 57                                              push    edi                                             ;
  4445 00000074 06                                              push    es                                              ;
  4446                                  ;
  4447                                  ;       Initialize console work areas.
  4448                                  ;
  4449 00000075 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  4450 00000077 07                                              pop     es                                              ;... into extra segment register
  4451 00000078 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  4452 0000007D 30C0                                            xor     al,al                                           ;initialization value
  4453 0000007F B904010000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  4454 00000084 FC                                              cld                                                     ;forward strings
  4455 00000085 F3AA                                            rep     stosb                                           ;initialize data
  4456                                  ;
  4457                                  ;       Restore and return.
  4458                                  ;
  4459 00000087 07                                              pop     es                                              ;restore non-volatile regs
  4460 00000088 5F                                              pop     edi                                             ;
  4461 00000089 59                                              pop     ecx                                             ;
  4462 0000008A C3                                              ret                                                     ;return
  4463                                  ;-----------------------------------------------------------------------------------------------------------------------
  4464                                  ;
  4465                                  ;       Routine:        ConTakeToken
  4466                                  ;
  4467                                  ;       Description:    This routine extracts the next token from the given source buffer.
  4468                                  ;
  4469                                  ;       In:             DS:EDX  source buffer address
  4470                                  ;                       DS:EBX  target buffer address
  4471                                  ;
  4472                                  ;       Out:            DS:EDX  source buffer address
  4473                                  ;                       DS:EBX  target buffer address
  4474                                  ;
  4475                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  4476                                  ;
  4477                                  ;-----------------------------------------------------------------------------------------------------------------------
  4478 0000008B 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  4479 0000008C 57                                              push    edi                                             ;
  4480 0000008D 06                                              push    es                                              ;
  4481 0000008E 1E                                              push    ds                                              ;load data segment selector ...
  4482 0000008F 07                                              pop     es                                              ;... into extra segment reg
  4483 00000090 89D6                                            mov     esi,edx                                         ;source buffer address
  4484 00000092 89DF                                            mov     edi,ebx                                         ;target buffer address
  4485 00000094 C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  4486 00000097 FC                                              cld                                                     ;forward strings
  4487 00000098 AC                      .10                     lodsb                                                   ;load byte
  4488 00000099 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  4489 0000009B 74FB                                            je      .10                                             ;yes, continue
  4490 0000009D 84C0                                            test    al,al                                           ;end of line?
  4491 0000009F 7410                                            jz      .40                                             ;yes, branch
  4492 000000A1 AA                      .20                     stosb                                                   ;store byte
  4493 000000A2 AC                                              lodsb                                                   ;load byte
  4494 000000A3 84C0                                            test    al,al                                           ;end of line?
  4495 000000A5 740A                                            jz      .40                                             ;no, continue
  4496 000000A7 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  4497 000000A9 75F6                                            jne     .20                                             ;no, continue
  4498 000000AB AC                      .30                     lodsb                                                   ;load byte
  4499 000000AC 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  4500 000000AE 74FB                                            je      .30                                             ;yes, continue
  4501 000000B0 4E                                              dec     esi                                             ;pre-position
  4502 000000B1 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  4503 000000B4 89D7                                            mov     edi,edx                                         ;source buffer address
  4504 000000B6 AC                      .50                     lodsb                                                   ;remaining byte
  4505 000000B7 AA                                              stosb                                                   ;move to front of buffer
  4506 000000B8 84C0                                            test    al,al                                           ;end of line?
  4507 000000BA 75FA                                            jnz     .50                                             ;no, continue
  4508 000000BC 07                                              pop     es                                              ;restore non-volatile regs
  4509 000000BD 5F                                              pop     edi                                             ;
  4510 000000BE 5E                                              pop     esi                                             ;
  4511 000000BF C3                                              ret                                                     ;return
  4512                                  ;-----------------------------------------------------------------------------------------------------------------------
  4513                                  ;
  4514                                  ;       Routine:        ConDetermineCommand
  4515                                  ;
  4516                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  4517                                  ;
  4518                                  ;       input:          DS:EDX  command address
  4519                                  ;
  4520                                  ;       output:         EAX     >=0     = command nbr
  4521                                  ;                               0       = unknown command
  4522                                  ;
  4523                                  ;-----------------------------------------------------------------------------------------------------------------------
  4524 000000C0 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  4525 000000C1 51                                              push    ecx                                             ;
  4526 000000C2 56                                              push    esi                                             ;
  4527 000000C3 57                                              push    edi                                             ;
  4528                                  
  4529                                                          upperCaseString                                         ;upper-case string at EDX
  4529 000000C4 B014                <1>  mov al,eUpperCaseString
  4529 000000C6 CD30                <1>  int _svc
  4530                                  
  4531 000000C8 BE[48030000]                                    mov     esi,tConCmdTbl                                  ;commands table
  4532 000000CD 31FF                                            xor     edi,edi                                         ;intialize command number
  4533 000000CF FC                                              cld                                                     ;forward strings
  4534 000000D0 AC                      .10                     lodsb                                                   ;command length
  4535 000000D1 0FB6C8                                          movzx   ecx,al                                          ;command length
  4536 000000D4 E30D                                            jecxz   .20                                             ;branch if end of table
  4537 000000D6 89F3                                            mov     ebx,esi                                         ;table entry address
  4538 000000D8 01CE                                            add     esi,ecx                                         ;next table entry address
  4539                                  
  4540                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  4540 000000DA B001                <1>  mov al,eCompareMemory
  4540 000000DC CD30                <1>  int _svc
  4541                                  
  4542 000000DE E303                                            jecxz   .20                                             ;branch if equal
  4543 000000E0 47                                              inc     edi                                             ;increment command nbr
  4544 000000E1 EBED                                            jmp     .10                                             ;repeat
  4545 000000E3 89F8                    .20                     mov     eax,edi                                         ;command number
  4546 000000E5 5F                                              pop     edi                                             ;restore non-volatile regs
  4547 000000E6 5E                                              pop     esi                                             ;
  4548 000000E7 59                                              pop     ecx                                             ;
  4549 000000E8 5B                                              pop     ebx                                             ;
  4550 000000E9 C3                                              ret                                                     ;return
  4551                                  ;-----------------------------------------------------------------------------------------------------------------------
  4552                                  ;
  4553                                  ;       Routine:        ConClear
  4554                                  ;
  4555                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  4556                                  ;
  4557                                  ;-----------------------------------------------------------------------------------------------------------------------
  4558                                  ConClear                clearConsoleScreen                                      ;clear console screen
  4558                              <1> ConClear :
  4558 000000EA B000                <1>  mov al,eClearConsoleScreen
  4558 000000EC CD30                <1>  int _svc
  4559 000000EE C3                                              ret                                                     ;return
  4560                                  ;-----------------------------------------------------------------------------------------------------------------------
  4561                                  ;
  4562                                  ;       Routine:        ConDate
  4563                                  ;
  4564                                  ;       Description:    This routine handles the DATE command.
  4565                                  ;
  4566                                  ;-----------------------------------------------------------------------------------------------------------------------
  4567                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4567                              <1> ConDate :
  4567 000000EF BBFC080000          <1>  mov ebx,%1
  4567 000000F4 B011                <1>  mov al,eReadRealTimeClock
  4567 000000F6 CD30                <1>  int _svc
  4568                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  4568 000000F8 BBFC080000          <1>  mov ebx,%1
  4568 000000FD BAAC080000          <1>  mov edx,%2
  4568 00000102 B006                <1>  mov al,ePutDateString
  4568 00000104 CD30                <1>  int _svc
  4569                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4569 00000106 BAAC080000          <1>  mov edx,%1
  4569 0000010B B005                <1>  mov al,ePutConsoleString
  4569 0000010D CD30                <1>  int _svc
  4570                                                          putConsoleString  czNewLine                             ;write newline to console
  4570 0000010F BA[E3030000]        <1>  mov edx,%1
  4570 00000114 B005                <1>  mov al,ePutConsoleString
  4570 00000116 CD30                <1>  int _svc
  4571 00000118 C3                                              ret                                                     ;return
  4572                                  ;-----------------------------------------------------------------------------------------------------------------------
  4573                                  ;
  4574                                  ;       Routine:        ConDay
  4575                                  ;
  4576                                  ;       Description:    This routine handles the DAY command.
  4577                                  ;
  4578                                  ;-----------------------------------------------------------------------------------------------------------------------
  4579                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4579                              <1> ConDay :
  4579 00000119 BBFC080000          <1>  mov ebx,%1
  4579 0000011E B011                <1>  mov al,eReadRealTimeClock
  4579 00000120 CD30                <1>  int _svc
  4580                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  4580 00000122 BBFC080000          <1>  mov ebx,%1
  4580 00000127 BAAC080000          <1>  mov edx,%2
  4580 0000012C B007                <1>  mov al,ePutDayString
  4580 0000012E CD30                <1>  int _svc
  4581                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4581 00000130 BAAC080000          <1>  mov edx,%1
  4581 00000135 B005                <1>  mov al,ePutConsoleString
  4581 00000137 CD30                <1>  int _svc
  4582                                                          putConsoleString  czNewLine                             ;write newline to console
  4582 00000139 BA[E3030000]        <1>  mov edx,%1
  4582 0000013E B005                <1>  mov al,ePutConsoleString
  4582 00000140 CD30                <1>  int _svc
  4583 00000142 C3                                              ret                                                     ;return
  4584                                  ;-----------------------------------------------------------------------------------------------------------------------
  4585                                  ;
  4586                                  ;       Routine:        ConExit
  4587                                  ;
  4588                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  4589                                  ;
  4590                                  ;-----------------------------------------------------------------------------------------------------------------------
  4591                                  ConExit                 resetSystem                                             ;issue system reset
  4591                              <1> ConExit :
  4591 00000143 B012                <1>  mov al,eResetSystem
  4591 00000145 CD30                <1>  int _svc
  4592 00000147 C3                                              ret                                                     ;return
  4593                                  ;-----------------------------------------------------------------------------------------------------------------------
  4594                                  ;
  4595                                  ;       Routine:        ConHour
  4596                                  ;
  4597                                  ;       Description:    This routine Handles the HOUR command.
  4598                                  ;
  4599                                  ;-----------------------------------------------------------------------------------------------------------------------
  4600                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4600                              <1> ConHour :
  4600 00000148 BBFC080000          <1>  mov ebx,%1
  4600 0000014D B011                <1>  mov al,eReadRealTimeClock
  4600 0000014F CD30                <1>  int _svc
  4601                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  4601 00000151 BBFC080000          <1>  mov ebx,%1
  4601 00000156 BAAC080000          <1>  mov edx,%2
  4601 0000015B B008                <1>  mov al,ePutHourString
  4601 0000015D CD30                <1>  int _svc
  4602                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4602 0000015F BAAC080000          <1>  mov edx,%1
  4602 00000164 B005                <1>  mov al,ePutConsoleString
  4602 00000166 CD30                <1>  int _svc
  4603                                                          putConsoleString  czNewLine                             ;write newline to console
  4603 00000168 BA[E3030000]        <1>  mov edx,%1
  4603 0000016D B005                <1>  mov al,ePutConsoleString
  4603 0000016F CD30                <1>  int _svc
  4604 00000171 C3                                              ret                                                     ;return
  4605                                  ;-----------------------------------------------------------------------------------------------------------------------
  4606                                  ;
  4607                                  ;       Routine:        ConInt6
  4608                                  ;
  4609                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  4610                                  ;
  4611                                  ;-----------------------------------------------------------------------------------------------------------------------
  4612 00000172 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  4613 00000174 C3                                              ret                                                     ;return (not executed)
  4614                                  ;-----------------------------------------------------------------------------------------------------------------------
  4615                                  ;
  4616                                  ;       Routine:        ConMinute
  4617                                  ;
  4618                                  ;       Description:    This routine Handles the MINUTE command.
  4619                                  ;
  4620                                  ;-----------------------------------------------------------------------------------------------------------------------
  4621                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4621                              <1> ConMinute :
  4621 00000175 BBFC080000          <1>  mov ebx,%1
  4621 0000017A B011                <1>  mov al,eReadRealTimeClock
  4621 0000017C CD30                <1>  int _svc
  4622                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  4622 0000017E BBFC080000          <1>  mov ebx,%1
  4622 00000183 BAAC080000          <1>  mov edx,%2
  4622 00000188 B009                <1>  mov al,ePutMinuteString
  4622 0000018A CD30                <1>  int _svc
  4623                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4623 0000018C BAAC080000          <1>  mov edx,%1
  4623 00000191 B005                <1>  mov al,ePutConsoleString
  4623 00000193 CD30                <1>  int _svc
  4624                                                          putConsoleString  czNewLine                             ;write newline to console
  4624 00000195 BA[E3030000]        <1>  mov edx,%1
  4624 0000019A B005                <1>  mov al,ePutConsoleString
  4624 0000019C CD30                <1>  int _svc
  4625 0000019E C3                                              ret                                                     ;return
  4626                                  ;-----------------------------------------------------------------------------------------------------------------------
  4627                                  ;
  4628                                  ;       Routine:        ConMonth
  4629                                  ;
  4630                                  ;       Description:    This routine Handles the MONTH command.
  4631                                  ;
  4632                                  ;-----------------------------------------------------------------------------------------------------------------------
  4633                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4633                              <1> ConMonth :
  4633 0000019F BBFC080000          <1>  mov ebx,%1
  4633 000001A4 B011                <1>  mov al,eReadRealTimeClock
  4633 000001A6 CD30                <1>  int _svc
  4634                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  4634 000001A8 BBFC080000          <1>  mov ebx,%1
  4634 000001AD BAAC080000          <1>  mov edx,%2
  4634 000001B2 B00A                <1>  mov al,ePutMonthString
  4634 000001B4 CD30                <1>  int _svc
  4635                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4635 000001B6 BAAC080000          <1>  mov edx,%1
  4635 000001BB B005                <1>  mov al,ePutConsoleString
  4635 000001BD CD30                <1>  int _svc
  4636                                                          putConsoleString  czNewLine                             ;write newline to console
  4636 000001BF BA[E3030000]        <1>  mov edx,%1
  4636 000001C4 B005                <1>  mov al,ePutConsoleString
  4636 000001C6 CD30                <1>  int _svc
  4637 000001C8 C3                                              ret                                                     ;return
  4638                                  ;-----------------------------------------------------------------------------------------------------------------------
  4639                                  ;
  4640                                  ;       Routine:        ConMonthName
  4641                                  ;
  4642                                  ;       Description:    This routine Handles the MONTH.NAME command.
  4643                                  ;
  4644                                  ;-----------------------------------------------------------------------------------------------------------------------
  4645                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  4645                              <1> ConMonthName :
  4645 000001C9 BBFC080000          <1>  mov ebx,%1
  4645 000001CE B011                <1>  mov al,eReadRealTimeClock
  4645 000001D0 CD30                <1>  int _svc
  4646                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  4646 000001D2 BBFC080000          <1>  mov ebx,%1
  4646 000001D7 BAAC080000          <1>  mov edx,%2
  4646 000001DC B00B                <1>  mov al,ePutMonthNameString
  4646 000001DE CD30                <1>  int _svc
  4647                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  4647 000001E0 BAAC080000          <1>  mov edx,%1
  4647 000001E5 B005                <1>  mov al,ePutConsoleString
  4647 000001E7 CD30                <1>  int _svc
  4648                                                          putConsoleString   czNewLine                            ;write newline to console
  4648 000001E9 BA[E3030000]        <1>  mov edx,%1
  4648 000001EE B005                <1>  mov al,ePutConsoleString
  4648 000001F0 CD30                <1>  int _svc
  4649 000001F2 C3                                              ret                                                     ;return
  4650                                  ;-----------------------------------------------------------------------------------------------------------------------
  4651                                  ;
  4652                                  ;       Routine:        ConSecond
  4653                                  ;
  4654                                  ;       Description:    This routine Handles the SECOND command.
  4655                                  ;
  4656                                  ;-----------------------------------------------------------------------------------------------------------------------
  4657                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4657                              <1> ConSecond :
  4657 000001F3 BBFC080000          <1>  mov ebx,%1
  4657 000001F8 B011                <1>  mov al,eReadRealTimeClock
  4657 000001FA CD30                <1>  int _svc
  4658                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  4658 000001FC BBFC080000          <1>  mov ebx,%1
  4658 00000201 BAAC080000          <1>  mov edx,%2
  4658 00000206 B00C                <1>  mov al,ePutSecondString
  4658 00000208 CD30                <1>  int _svc
  4659                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4659 0000020A BAAC080000          <1>  mov edx,%1
  4659 0000020F B005                <1>  mov al,ePutConsoleString
  4659 00000211 CD30                <1>  int _svc
  4660                                                          putConsoleString  czNewLine                             ;write newline to console
  4660 00000213 BA[E3030000]        <1>  mov edx,%1
  4660 00000218 B005                <1>  mov al,ePutConsoleString
  4660 0000021A CD30                <1>  int _svc
  4661 0000021C C3                                              ret                                                     ;return
  4662                                  ;-----------------------------------------------------------------------------------------------------------------------
  4663                                  ;
  4664                                  ;       Routine:        ConTime
  4665                                  ;
  4666                                  ;       Description:    This routine Handles the TIME command.
  4667                                  ;
  4668                                  ;-----------------------------------------------------------------------------------------------------------------------
  4669                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4669                              <1> ConTime :
  4669 0000021D BBFC080000          <1>  mov ebx,%1
  4669 00000222 B011                <1>  mov al,eReadRealTimeClock
  4669 00000224 CD30                <1>  int _svc
  4670                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  4670 00000226 BBFC080000          <1>  mov ebx,%1
  4670 0000022B BAAC080000          <1>  mov edx,%2
  4670 00000230 B00D                <1>  mov al,ePutTimeString
  4670 00000232 CD30                <1>  int _svc
  4671                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4671 00000234 BAAC080000          <1>  mov edx,%1
  4671 00000239 B005                <1>  mov al,ePutConsoleString
  4671 0000023B CD30                <1>  int _svc
  4672                                                          putConsoleString  czNewLine                             ;write newline to console
  4672 0000023D BA[E3030000]        <1>  mov edx,%1
  4672 00000242 B005                <1>  mov al,ePutConsoleString
  4672 00000244 CD30                <1>  int _svc
  4673 00000246 C3                                              ret                                                     ;return
  4674                                  ;-----------------------------------------------------------------------------------------------------------------------
  4675                                  ;
  4676                                  ;       Routine:        ConWeekday
  4677                                  ;
  4678                                  ;       Description:    This routine handles the WEEKDAY command.
  4679                                  ;
  4680                                  ;-----------------------------------------------------------------------------------------------------------------------
  4681                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4681                              <1> ConWeekday :
  4681 00000247 BBFC080000          <1>  mov ebx,%1
  4681 0000024C B011                <1>  mov al,eReadRealTimeClock
  4681 0000024E CD30                <1>  int _svc
  4682                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  4682 00000250 BBFC080000          <1>  mov ebx,%1
  4682 00000255 BAAC080000          <1>  mov edx,%2
  4682 0000025A B00E                <1>  mov al,ePutWeekdayString
  4682 0000025C CD30                <1>  int _svc
  4683                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4683 0000025E BAAC080000          <1>  mov edx,%1
  4683 00000263 B005                <1>  mov al,ePutConsoleString
  4683 00000265 CD30                <1>  int _svc
  4684                                                          putConsoleString  czNewLine                             ;write newline to console
  4684 00000267 BA[E3030000]        <1>  mov edx,%1
  4684 0000026C B005                <1>  mov al,ePutConsoleString
  4684 0000026E CD30                <1>  int _svc
  4685 00000270 C3                                              ret                                                     ;return
  4686                                  ;-----------------------------------------------------------------------------------------------------------------------
  4687                                  ;
  4688                                  ;       Routine:        ConWeekdayName
  4689                                  ;
  4690                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  4691                                  ;
  4692                                  ;-----------------------------------------------------------------------------------------------------------------------
  4693                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  4693                              <1> ConWeekdayName :
  4693 00000271 BBFC080000          <1>  mov ebx,%1
  4693 00000276 B011                <1>  mov al,eReadRealTimeClock
  4693 00000278 CD30                <1>  int _svc
  4694                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  4694 0000027A BBFC080000          <1>  mov ebx,%1
  4694 0000027F BAAC080000          <1>  mov edx,%2
  4694 00000284 B00F                <1>  mov al,ePutWeekdayNameString
  4694 00000286 CD30                <1>  int _svc
  4695                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  4695 00000288 BAAC080000          <1>  mov edx,%1
  4695 0000028D B005                <1>  mov al,ePutConsoleString
  4695 0000028F CD30                <1>  int _svc
  4696                                                          putConsoleString     czNewLine                                  ;write newline to console
  4696 00000291 BA[E3030000]        <1>  mov edx,%1
  4696 00000296 B005                <1>  mov al,ePutConsoleString
  4696 00000298 CD30                <1>  int _svc
  4697 0000029A C3                                              ret                                                             ;return
  4698                                  ;-----------------------------------------------------------------------------------------------------------------------
  4699                                  ;
  4700                                  ;       Routine:        ConYear
  4701                                  ;
  4702                                  ;       Description:    This routine Handles the YEAR command.
  4703                                  ;
  4704                                  ;-----------------------------------------------------------------------------------------------------------------------
  4705                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4705                              <1> ConYear :
  4705 0000029B BBFC080000          <1>  mov ebx,%1
  4705 000002A0 B011                <1>  mov al,eReadRealTimeClock
  4705 000002A2 CD30                <1>  int _svc
  4706                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  4706 000002A4 BBFC080000          <1>  mov ebx,%1
  4706 000002A9 BAAC080000          <1>  mov edx,%2
  4706 000002AE B010                <1>  mov al,ePutYearString
  4706 000002B0 CD30                <1>  int _svc
  4707                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4707 000002B2 BAAC080000          <1>  mov edx,%1
  4707 000002B7 B005                <1>  mov al,ePutConsoleString
  4707 000002B9 CD30                <1>  int _svc
  4708                                                          putConsoleString  czNewLine                             ;write newline to console
  4708 000002BB BA[E3030000]        <1>  mov edx,%1
  4708 000002C0 B005                <1>  mov al,ePutConsoleString
  4708 000002C2 CD30                <1>  int _svc
  4709 000002C4 C3                                              ret                                                     ;return
  4710                                  ;-----------------------------------------------------------------------------------------------------------------------
  4711                                  ;
  4712                                  ;       Routine:        ConYearIsLeap
  4713                                  ;
  4714                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  4715                                  ;
  4716                                  ;-----------------------------------------------------------------------------------------------------------------------
  4717                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4717                              <1> ConYearIsLeap :
  4717 000002C5 BBFC080000          <1>  mov ebx,%1
  4717 000002CA B011                <1>  mov al,eReadRealTimeClock
  4717 000002CC CD30                <1>  int _svc
  4718                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  4718 000002CE BBFC080000          <1>  mov ebx,%1
  4718 000002D3 B003                <1>  mov al,eIsLeapYear
  4718 000002D5 CD30                <1>  int _svc
  4719                                  
  4720 000002D7 E30B                                            jecxz   .10                                             ;branch if not leap
  4721                                  
  4722                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  4722 000002D9 BA[18040000]        <1>  mov edx,%1
  4722 000002DE B005                <1>  mov al,ePutConsoleString
  4722 000002E0 CD30                <1>  int _svc
  4723                                  
  4724 000002E2 EB09                                            jmp     .20                                             ;continue
  4725                                  
  4726                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  4726                              <1> .10 :
  4726 000002E4 BA[33040000]        <1>  mov edx,%1
  4726 000002E9 B005                <1>  mov al,ePutConsoleString
  4726 000002EB CD30                <1>  int _svc
  4727 000002ED C3                      .20                     ret                                                     ;return
  4728                                  ;-----------------------------------------------------------------------------------------------------------------------
  4729                                  ;
  4730                                  ;       Routine:        ConVersion
  4731                                  ;
  4732                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  4733                                  ;
  4734                                  ;-----------------------------------------------------------------------------------------------------------------------
  4735                                  ConVersion              putConsoleString czTitle                                ;display version message
  4735                              <1> ConVersion :
  4735 000002EE BA[E8030000]        <1>  mov edx,%1
  4735 000002F3 B005                <1>  mov al,ePutConsoleString
  4735 000002F5 CD30                <1>  int _svc
  4736 000002F7 C3                                              ret                                                     ;return
  4737                                  ;-----------------------------------------------------------------------------------------------------------------------
  4738                                  ;
  4739                                  ;       Tables
  4740                                  ;
  4741                                  ;-----------------------------------------------------------------------------------------------------------------------
  4742                                                                                                                  ;---------------------------------------
  4743                                                                                                                  ;  Command Jump Table
  4744                                                                                                                  ;---------------------------------------
  4745                                  tConJmpTbl              equ     $                                               ;command jump table
  4746 000002F8 71020000                                        dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  4747 000002FC C5020000                                        dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  4748 00000300 C9010000                                        dd      ConMonthName    - ConCode                       ;month.name command routine offset
  4749 00000304 43010000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  4750 00000308 EE020000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  4751 0000030C 47020000                                        dd      ConWeekday      - ConCode                       ;weekday command routine offset
  4752 00000310 75010000                                        dd      ConMinute       - ConCode                       ;minute command routine offset
  4753 00000314 F3010000                                        dd      ConSecond       - ConCode                       ;second command routine offset
  4754 00000318 EA000000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  4755 0000031C 9F010000                                        dd      ConMonth        - ConCode                       ;month command routine offset
  4756 00000320 EF000000                                        dd      ConDate         - ConCode                       ;date command routine offset
  4757 00000324 43010000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  4758 00000328 48010000                                        dd      ConHour         - ConCode                       ;hour command routine offset
  4759 0000032C 72010000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  4760 00000330 43010000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  4761 00000334 1D020000                                        dd      ConTime         - ConCode                       ;time command routine offset
  4762 00000338 9B020000                                        dd      ConYear         - ConCode                       ;year command routine offset
  4763 0000033C EA000000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  4764 00000340 19010000                                        dd      ConDay          - ConCode                       ;day command routine offset
  4765 00000344 EE020000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  4766                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4767                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4768                                                                                                                  ;---------------------------------------
  4769                                                                                                                  ;  Command Name Table
  4770                                                                                                                  ;---------------------------------------
  4771                                  tConCmdTbl              equ     $                                               ;command name table
  4772 00000348 0D5745454B4441592E-                             db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  4772 00000351 4E414D4500         
  4773 00000356 0C594541522E49534C-                             db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  4773 0000035F 45415000           
  4774 00000363 0B4D4F4E54482E4E41-                             db      11,"MONTH.NAME",0                               ;month.name command
  4774 0000036C 4D4500             
  4775 0000036F 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  4775 00000378 00                 
  4776 00000379 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  4777 00000382 085745454B44415900                              db      8,"WEEKDAY",0                                   ;weekday command
  4778 0000038B 074D494E55544500                                db      7,"MINUTE",0                                    ;minute command
  4779 00000393 075345434F4E4400                                db      7,"SECOND",0                                    ;second command
  4780 0000039B 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  4781 000003A2 064D4F4E544800                                  db      6,"MONTH",0                                     ;month command
  4782 000003A9 054441544500                                    db      5,"DATE",0                                      ;date command
  4783 000003AF 054558495400                                    db      5,"EXIT",0                                      ;exit command
  4784 000003B5 05484F555200                                    db      5,"HOUR",0                                      ;hour command
  4785 000003BB 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  4786 000003C1 055155495400                                    db      5,"QUIT",0                                      ;quit command
  4787 000003C7 0554494D4500                                    db      5,"TIME",0                                      ;time command
  4788 000003CD 055945415200                                    db      5,"YEAR",0                                      ;year command
  4789 000003D3 04434C5300                                      db      4,"CLS",0                                       ;cls command
  4790 000003D8 0444415900                                      db      4,"DAY",0                                       ;day command
  4791 000003DD 0456455200                                      db      4,"VER",0                                       ;ver command
  4792 000003E2 00                                              db      0                                               ;end of table
  4793                                  ;-----------------------------------------------------------------------------------------------------------------------
  4794                                  ;
  4795                                  ;       Constants
  4796                                  ;
  4797                                  ;-----------------------------------------------------------------------------------------------------------------------
  4798 000003E3 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  4799 000003E6 3A00                    czPrompt                db      ":",0                                           ;prompt string
  4800 000003E8 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  4800 000003F1 65726174696E672053-
  4800 000003FA 797374656D20312E30-
  4800 00000403 0D0A00             
  4801 00000406 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  4801 0000040F 6F6D6D616E640D0A00 
  4802 00000418 546865207965617220-     czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  4802 00000421 69732061206C656170-
  4802 0000042A 20796561722E0D0A00 
  4803 00000433 546865207965617220-     czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  4803 0000043C 6973206E6F74206120-
  4803 00000445 6C6561702079656172-
  4803 0000044E 2E0D0A00           
  4804 00000452 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  4805                                  %endif
  4806                                  %ifdef BUILDDISK
  4807                                  ;-----------------------------------------------------------------------------------------------------------------------
  4808                                  ;
  4809                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  4810                                  ;
  4811                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4812                                  ;
  4813                                  ;-----------------------------------------------------------------------------------------------------------------------
  4814                                  section                 unused                                                  ;unused disk space
  4815                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  4816                                  %endif
  4817                                  ;=======================================================================================================================
  4818                                  ;
  4819                                  ;       End of Program Code
  4820                                  ;
  4821                                  ;=======================================================================================================================
