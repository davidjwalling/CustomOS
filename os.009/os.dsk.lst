     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.009
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support the "mem" and "memory" commands.
     8                                  ;
     9                                  ;       Revised:        January 1, 2019
    10                                  ;
    11                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    17                                  ;
    18                                  ;       Notice:         Copyright (C) 2010-2019 David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;       Assembly Directives
    24                                  ;
    25                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    34                                  %define BUILDBOOT                                                               ;... build the boot sector
    35                                  %define BUILDCOM                                                                ;... and the OS kernel
    36                                  %endif
    37                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    38                                  %define BUILDBOOT                                                               ;... also build the boot sector
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;       Conventions
    43                                  ;
    44                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    45                                  ;                       Logical tabs are set after every eight columns.
    46                                  ;                       Tabs are simulated using SPACE characters.
    47                                  ;                       For comments that span an entire line, comment text begins in column 9.
    48                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    49                                  ;                       Assembly operands begin in column 33.
    50                                  ;                       Inline comments begin in column 81.
    51                                  ;                       Lines should not extend beyond column 120.
    52                                  ;
    53                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    54                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    55                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    56                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    57                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    58                                  ;                       ouput buffers, respectively.
    59                                  ;
    60                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    61                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    62                                  ;
    63                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    64                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    65                                  ;                       Register names in comments are in upper case (EAX, EDI).
    66                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    67                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    68                                  ;                       register contents on entry and exit.
    69                                  ;
    70                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    71                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    72                                  ;                       The 2nd letter of the constant label indicates the storage type.
    73                                  ;
    74                                  ;                       cq......        constant quad-word (dq)
    75                                  ;                       cd......        constant double-word (dd)
    76                                  ;                       cw......        constant word (dw)
    77                                  ;                       cb......        constant byte (db)
    78                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    79                                  ;
    80                                  ;       Instructions:   32-bit instructions are generally favored.
    81                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    82                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    83                                  ;
    84                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    85                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    86                                  ;
    87                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    88                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    89                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    90                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    91                                  ;                       Octal literal values are avoided.
    92                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    93                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    94                                  ;
    95                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    96                                  ;                       Macro names describe an action and so DO begin with a verb.
    97                                  ;
    98                                  ;       Memory Use:     Operating system memory allocation is minimized.
    99                                  ;                       Buffers are kept to as small a size as practicable.
   100                                  ;                       Data and code intermingling is avoided wherever possible.
   101                                  ;
   102                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   103                                  ;                       Register names in source code are in lower case (eax, edx).
   104                                  ;
   105                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   106                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   107                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   108                                  ;
   109                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   110                                  ;                       Routine names begin with a verb (Get, Read, Load).
   111                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   112                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   113                                  ;                       function but begin with a leading underscore (_) character.
   114                                  ;
   115                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   116                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   117                                  ;
   118                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   119                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   120                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   121                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   122                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   123                                  ;
   124                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   125                                  ;                       The 2nd letter of the variable label indicates the storage type.
   126                                  ;
   127                                  ;                       wq......        variable quad-word (resq)
   128                                  ;                       wd......        variable double-word (resd)
   129                                  ;                       ww......        variable word (resw)
   130                                  ;                       wb......        variable byte (resb)
   131                                  ;                       ws......        writable structure
   132                                  ;
   133                                  ;-----------------------------------------------------------------------------------------------------------------------
   134                                  ;=======================================================================================================================
   135                                  ;
   136                                  ;       Equates
   137                                  ;
   138                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   139                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   140                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   141                                  ;       sets. Equates here are defined in the following groupings:
   142                                  ;
   143                                  ;       Hardware-Defined Values
   144                                  ;
   145                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   146                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   147                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   148                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   149                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   150                                  ;       EX86...         Intel x86 CPU architecture values
   151                                  ;
   152                                  ;       Firmware-Defined Values
   153                                  ;
   154                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   155                                  ;
   156                                  ;       Standards-Based Values
   157                                  ;
   158                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   159                                  ;
   160                                  ;       Operating System Values
   161                                  ;
   162                                  ;       EBOOT...        Boot sector and loader values
   163                                  ;       ECON...         Console values (dimensions and attributes)
   164                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   165                                  ;       EKEYF...        Keyboard status flags
   166                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   167                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   168                                  ;       EMSG...         Message identifers
   169                                  ;
   170                                  ;=======================================================================================================================
   171                                  ;-----------------------------------------------------------------------------------------------------------------------
   172                                  ;
   173                                  ;       Hardware-Defined Values
   174                                  ;
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;
   178                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   179                                  ;
   180                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   181                                  ;       for CGA, EGA, VGA and compatible video modes.
   182                                  ;
   183                                  ;-----------------------------------------------------------------------------------------------------------------------
   184                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   185                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   186                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   187                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   188                                  ;-----------------------------------------------------------------------------------------------------------------------
   189                                  ;
   190                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   191                                  ;
   192                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   193                                  ;
   194                                  ;-----------------------------------------------------------------------------------------------------------------------
   195                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   196                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   197                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   198                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   199                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   200                                  ;-----------------------------------------------------------------------------------------------------------------------
   201                                  ;
   202                                  ;       8042 Keyboard Controller                                                EKEYB...
   203                                  ;
   204                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   205                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   206                                  ;
   207                                  ;-----------------------------------------------------------------------------------------------------------------------
   208                                  EKEYBPORTDATA           equ     060h                                            ;data port
   209                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   210                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   211                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   212                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   213                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   214                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   215                                                                                                                  ;---------------------------------------
   216                                                                                                                  ;       Keyboard Scan Codes
   217                                                                                                                  ;---------------------------------------
   218                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   219                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   220                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   221                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   222                                  EKEYBSLASH              equ     035h                                            ;slash
   223                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   224                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   225                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   226                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   227                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   228                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   229                                  EKEYBUP                 equ     080h                                            ;up
   230                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   231                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   232                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   233                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   234                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   235                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   236                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   237                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   238                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   239                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   240                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   241                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   242                                  ;-----------------------------------------------------------------------------------------------------------------------
   243                                  ;
   244                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   245                                  ;
   246                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   247                                  ;       external devices and signals a hardware interrupt to the CPU.
   248                                  ;
   249                                  ;-----------------------------------------------------------------------------------------------------------------------
   250                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   251                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   252                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   253                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   254                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   255                                  ;-----------------------------------------------------------------------------------------------------------------------
   256                                  ;
   257                                  ;       8253 Programmable Interval Timer                                        EPIT...
   258                                  ;
   259                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   260                                  ;       approximately 18.2 times per second.
   261                                  ;
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  ;
   266                                  ;       x86 CPU Architecture                                                    ;EX86...
   267                                  ;
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   270                                  ;-----------------------------------------------------------------------------------------------------------------------
   271                                  ;
   272                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   273                                  ;
   274                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   275                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   276                                  ;
   277                                  ;       0.......        Segment is not present in memory (triggers int 11)
   278                                  ;       1.......        Segment is present in memory
   279                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   280                                  ;       ...0....        Segment is a system segment
   281                                  ;       ...00010                Local Descriptor Table
   282                                  ;       ...00101                Task Gate
   283                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   284                                  ;       ...01100                Call Gate (386)
   285                                  ;       ...01110                Interrupt Gate (386)
   286                                  ;       ...01111                Trap Gate (386)
   287                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   288                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   289                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   290                                  ;
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   293                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   294                                  ;-----------------------------------------------------------------------------------------------------------------------
   295                                  ;
   296                                  ;       Firmware-Defined Values
   297                                  ;
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  ;
   301                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   302                                  ;
   303                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   304                                  ;       BIOS interrupt supports several functions. The function code is typically passed in the AH register.
   305                                  ;
   306                                  ;-----------------------------------------------------------------------------------------------------------------------
   307                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   308                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   309                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   310                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   311                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   312                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   313                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   314                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   315                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   316                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   317                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   318                                  ;-----------------------------------------------------------------------------------------------------------------------
   319                                  ;
   320                                  ;       Standards-Based Values
   321                                  ;
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;-----------------------------------------------------------------------------------------------------------------------
   324                                  ;
   325                                  ;       ASCII                                                                   EASCII...
   326                                  ;
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   329                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   330                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   331                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   332                                  EASCIISPACE             equ     020h                                            ;space
   333                                  EASCIIUPPERA            equ     041h                                            ;'A'
   334                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   335                                  EASCIILOWERA            equ     061h                                            ;'a'
   336                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   337                                  EASCIITILDE             equ     07Eh                                            ;'~'
   338                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   339                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   340                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   341                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   342                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   343                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   344                                  EASCIICASE              equ     00100000b                                       ;case bit
   345                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  ;
   348                                  ;       Operating System Values
   349                                  ;
   350                                  ;-----------------------------------------------------------------------------------------------------------------------
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;
   353                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   354                                  ;
   355                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   356                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   357                                  ;
   358                                  ;-----------------------------------------------------------------------------------------------------------------------
   359                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   360                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   361                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   362                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   363                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   364                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   365                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   366                                  ;-----------------------------------------------------------------------------------------------------------------------
   367                                  ;       Console Constants                                                       ECON...
   368                                  ;-----------------------------------------------------------------------------------------------------------------------
   369                                  ECONCOLS                equ     80                                              ;columns per row
   370                                  ECONROWS                equ     24                                              ;console rows
   371                                  ECONOIAROW              equ     24                                              ;operator information area row
   372                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   373                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   374                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   375                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   376                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   377                                  ;-----------------------------------------------------------------------------------------------------------------------
   378                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   381                                  EGDTCGA                 equ     020h                                            ;cga video selector
   382                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   383                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   384                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   385                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   386                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   387                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   388                                  ;-----------------------------------------------------------------------------------------------------------------------
   389                                  ;       Keyboard Flags                                                          EKEYF...
   390                                  ;-----------------------------------------------------------------------------------------------------------------------
   391                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   392                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   393                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   394                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   395                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   396                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   397                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   398                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   399                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   400                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   401                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   402                                  ;-----------------------------------------------------------------------------------------------------------------------
   403                                  ;       Kernel Constants                                                        EKRN...
   404                                  ;-----------------------------------------------------------------------------------------------------------------------
   405                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   406                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   407                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   408                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   409                                  ;-----------------------------------------------------------------------------------------------------------------------
   410                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   411                                  ;-----------------------------------------------------------------------------------------------------------------------
   412                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   413                                  ;-----------------------------------------------------------------------------------------------------------------------
   414                                  ;       Message Identifiers                                                     EMSG...
   415                                  ;-----------------------------------------------------------------------------------------------------------------------
   416                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   417                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   418                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   419                                  ;=======================================================================================================================
   420                                  ;
   421                                  ;       Structures
   422                                  ;
   423                                  ;=======================================================================================================================
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  ;
   426                                  ;       MQUEUE
   427                                  ;
   428                                  ;       The MQUEUE structure maps memory used for a message queue.
   429                                  ;
   430                                  ;-----------------------------------------------------------------------------------------------------------------------
   431                                  struc                   MQUEUE
   432 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   433 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   434 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   435                                  endstruc
   436                                  ;-----------------------------------------------------------------------------------------------------------------------
   437                                  ;
   438                                  ;       OSDATA
   439                                  ;
   440                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   441                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   442                                  ;
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  struc                   OSDATA
   445 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   446 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   447 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   448 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   449 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   450 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   451 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   452 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   453 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   454 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   455 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   456 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   457 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   458 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   459 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   460 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   461 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   462 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   463 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   464 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   465 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   466 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   467 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   468 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   469 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   470 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   471 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   472 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   473 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   474 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   475 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   476 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   477 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   478 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   479 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   480 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   481 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   482 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   483 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   484 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   485 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   486 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   487 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   488 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   489 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   490 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   491 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   492 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   493 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   494 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   495 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   496 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   497 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   498 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   499 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   500 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   501 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   502 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   503 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   504 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   505 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   506 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   507 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   508 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   509 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   510 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   511 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   512 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   513 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   514 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   515 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   516 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   517 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   518 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   519 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   520 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   521 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   522 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   523 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   524 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   525 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   526 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   527 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   528 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   529 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   530 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   531 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   532 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   533 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   534 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   535 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   536 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   537 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   538 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   539 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   540 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   541 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   542 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   543 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   544 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   545 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   546                                  ;-----------------------------------------------------------------------------------------------------------------------
   547                                  ;
   548                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   549                                  ;
   550                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   551                                  ;
   552                                  ;-----------------------------------------------------------------------------------------------------------------------
   553                                  ECONDATA                equ     ($)
   554 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   555 00000804 <res 00000004>          wdConsolePanel          resd    1                                               ;console panel definition address
   556 00000808 <res 00000004>          wdConsoleField          resd    1                                               ;console field definition address
   557 0000080C <res 00000004>          wdConsoleInput          resd    1                                               ;console field input address
   558 00000810 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   559 00000860 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   560 000008B0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   561 00000900 <res 00000050>          wzConsoleMemBuf0        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx  ........
   562 00000950 <res 00000050>          wzConsoleMemBuf1        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   563 000009A0 <res 00000050>          wzConsoleMemBuf2        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   564 000009F0 <res 00000050>          wzConsoleMemBuf3        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   565 00000A40 <res 00000050>          wzConsoleMemBuf4        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx  ........
   566 00000A90 <res 00000050>          wzConsoleMemBuf5        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   567 00000AE0 <res 00000050>          wzConsoleMemBuf6        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   568 00000B30 <res 00000050>          wzConsoleMemBuf7        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   569 00000B80 <res 00000050>          wzConsoleMemBuf8        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx  ........
   570 00000BD0 <res 00000050>          wzConsoleMemBuf9        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   571 00000C20 <res 00000050>          wzConsoleMemBufA        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   572 00000C70 <res 00000050>          wzConsoleMemBufB        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   573 00000CC0 <res 00000050>          wzConsoleMemBufC        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx  ........
   574 00000D10 <res 00000050>          wzConsoleMemBufD        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   575 00000D60 <res 00000050>          wzConsoleMemBufE        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   576 00000DB0 <res 00000050>          wzConsoleMemBufF        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   577 00000E00 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   578 00000E01 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   579 00000E02 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   580 00000E03 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   581 00000E04 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   582 00000E05 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   583 00000E06 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   584 00000E07 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   585 00000E08 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   586 00000E09 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   587 00000E0A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   588 00000E0B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   589                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   590                                  ;-----------------------------------------------------------------------------------------------------------------------
   591                                  ;
   592                                  ;       End of OS Variables
   593                                  ;
   594                                  ;-----------------------------------------------------------------------------------------------------------------------
   595                                  endstruc
   596                                  ;-----------------------------------------------------------------------------------------------------------------------
   597                                  ;
   598                                  ;       Macros
   599                                  ;
   600                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   601                                  ;
   602                                  ;-----------------------------------------------------------------------------------------------------------------------
   603                                  %macro                  mint    1
   604                                  _%1                     equ     ($-$$) / EX86DESCLEN
   605                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   606                                  %endmacro
   607                                  %macro                  mtrap   1
   608                                  _%1                     equ     ($-$$) / EX86DESCLEN
   609                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   610                                  %endmacro
   611                                  %macro                  menter  1
   612                                  ?%1                     equ     ($-$$)
   613                                  %endmacro
   614                                  %macro                  tsvce   1
   615                                  e%1                     equ     ($-tsvc)/4
   616                                                          dd      %1
   617                                  %endmacro
   618                                  %ifdef BUILDBOOT
   619                                  ;=======================================================================================================================
   620                                  ;
   621                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   622                                  ;
   623                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   624                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   625                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   626                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   627                                  ;
   628                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   629                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   630                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   631                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   632                                  ;       immediately followed by a disk parameter table.
   633                                  ;
   634                                  ;=======================================================================================================================
   635                                                          cpu     8086                                            ;assume minimal CPU
   636                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   637                                                          bits    16                                              ;16-bit code at power-up
   638                                  %ifdef BUILDPREP
   639                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   640                                  %else
   641 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   642                                  %endif
   643                                  ;-----------------------------------------------------------------------------------------------------------------------
   644                                  ;
   645                                  ;       Disk Parameter Table
   646                                  ;
   647                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   648                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   649                                  ;
   650                                  ;-----------------------------------------------------------------------------------------------------------------------
   651 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   652 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   653 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   654 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   655 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   656 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   657 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   658 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   659 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   660                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   661 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   662 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   663 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   664                                  ;
   665                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   666                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   667                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   668                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   669                                  ;       given several possible starting values for CS:IP.
   670                                  ;
   671                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   672 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   673                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   674 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   675 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   676 00000025 B104                                            mov     cl,4                                            ;shift count
   677 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   678 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   679 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   680                                  ;
   681                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   682                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   683                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   684                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   685                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   686                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   687                                  ;
   688 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   689 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   690 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   691 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   692 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   693                                  ;
   694                                  ;       Our boot addressability is now set up according to the following diagram.
   695                                  ;
   696                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   697                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   698                                  ;                               |  256 = 100h bytes                             |
   699                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   700                                  ;                               |  Boot Sector (vstart=0100h)                   |
   701                                  ;                               |  1 sector = 512 = 200h bytes                  |
   702                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   703                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   704                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   705                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   706                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   707                                  ;                               |  2 sectors = 1024 = 400h bytes
   708                                  ;                       009400  +-----------------------------------------------+ DS:1900
   709                                  ;
   710                                  ;       On entry, DL indicates the drive being booted from.
   711                                  ;
   712 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   713                                  ;
   714                                  ;       Compute directory i/o buffer address.
   715                                  ;
   716 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   717 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   718 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   719 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   720                                  ;
   721                                  ;       Compute segment where os.com will be loaded.
   722                                  ;
   723 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   724 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   725 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   726 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   727                                  ;
   728                                  ;       Set the video mode to 80 column, 25 row, text.
   729                                  ;
   730 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   731 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   732                                  ;
   733                                  ;       Write a message to the console so we know we have our addressability established.
   734                                  ;
   735 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   736 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   737                                  ;
   738                                  ;       Initialize the number of directory sectors to search.
   739                                  ;
   740 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   741 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   742                                  ;
   743                                  ;       Compute number of directory sectors and initialize overhead count.
   744                                  ;
   745 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   746 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   747 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   748 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   749                                  ;
   750                                  ;       Compute directory entries per sector.
   751                                  ;
   752 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   753 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   754 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   755                                  ;
   756                                  ;       Compute first logical directory sector and update overhead count.
   757                                  ;
   758 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   759 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   760 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   761 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   762 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   763 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   764                                  ;
   765                                  ;       Read directory sector.
   766                                  ;
   767 0000008E B001                    .30                     mov     al,1                                            ;sector count
   768 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   769 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   770 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   771                                  ;
   772                                  ;       Setup variables to search this directory sector.
   773                                  ;
   774 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   775 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   776 000000A1 7603                                            jna     .40                                             ;no, continue
   777 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   778 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   779 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   780 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   781                                  ;
   782                                  ;       Loop through directory sectors searching for kernel program.
   783                                  ;
   784 000000B1 56                      .50                     push    si                                              ;save kernel name address
   785 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   786 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   787 000000B6 FC                                              cld                                                     ;forward strings
   788 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   789 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   790 000000BA 5E                                              pop     si                                              ;restore kernel name address
   791 000000BB 7418                                            je      .60                                             ;exit loop if found
   792 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   793 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   794 000000C2 75ED                                            jnz     .50                                             ;next entry
   795                                  ;
   796                                  ;       Repeat search if we are not at the end of the directory.
   797                                  ;
   798 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   799 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   800 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   801 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   802 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   803                                  ;
   804                                  ;       If we find the kernel program in the directory, read the FAT.
   805                                  ;
   806 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   807 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   808 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   809 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   810 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   811 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   812                                  ;
   813                                  ;       Get the starting cluster of the kernel program and target address.
   814                                  ;
   815 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   816 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   817                                  ;
   818                                  ;       Read each program cluster into RAM.
   819                                  ;
   820 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   821 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   822 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   823 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   824 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   825 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   826 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   827 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   828 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   829                                  ;
   830                                  ;       Update buffer pointer for next cluster.
   831                                  ;
   832 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   833 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   834 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   835 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   836 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   837                                  ;
   838                                  ;       Compute next cluster number.
   839                                  ;
   840 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   841 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   842 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   843 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   844 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   845 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   846 00000120 83E701                                          and     di,1                                            ;get low bit
   847 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   848 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   849 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   850                                  ;
   851                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   852                                  ;
   853 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   854 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   855 00000130 B104                                            mov     cl,4                                            ;shift count
   856 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   857 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   858 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   859 0000013A 75B2                                            jne     .70                                             ;no, continue
   860                                  ;
   861                                  ;       Transfer control to the operating system program.
   862                                  ;
   863 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   864 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   865 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   866                                  ;
   867                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   868                                  ;
   869 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   870 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   871 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   872 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   873 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   874 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   875 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   876 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   877 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   878 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   879                                  ;
   880                                  ;       Try maxtries times to read sector.
   881                                  ;
   882 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   883 00000160 53                      .10                     push    bx                                              ;save buffer address
   884 00000161 51                                              push    cx                                              ;save retry count
   885 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   886 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   887 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   888 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   889 0000016F 59                                              pop     cx                                              ;restore retry count
   890 00000170 5B                                              pop     bx                                              ;restore buffer address
   891 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   892 00000173 E2EB                                            loop    .10                                             ;retry
   893                                  ;
   894                                  ;       Handle disk error: convert to ASCII and store in error string.
   895                                  ;
   896 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   897 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   898 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   899 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   900 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   901 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   902 00000183 7203                                            jb      .20                                             ;continue if numeral
   903 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   904 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   905 0000018A 7203                                            jb      .30                                             ;continue if numeral
   906 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   907 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   908 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   909 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   910                                  ;
   911                                  ;       Wait for a key press.
   912                                  ;
   913 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   914 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   915 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   916 0000019E FB                                              sti                                                     ;enable maskable interrupts
   917 0000019F F4                                              hlt                                                     ;wait for interrupt
   918 000001A0 EBF6                                            jmp     .10                                             ;repeat
   919                                  ;
   920                                  ;       Reset the system.
   921                                  ;
   922 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   923 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   924 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   925 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   926 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   927                                  ;
   928                                  ;       Display text message.
   929                                  ;
   930 000001AA FC                      BootPrint               cld                                                     ;forward strings
   931 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   932 000001AC 84C0                                            test    al,al                                           ;end of string?
   933 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   934 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   935 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   936 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   937 000001B6 C3                      BootReturn              ret                                                     ;return
   938                                  ;-----------------------------------------------------------------------------------------------------------------------
   939                                  ;
   940                                  ;       Constants
   941                                  ;
   942                                  ;-----------------------------------------------------------------------------------------------------------------------
   943 000001B7 90                                              align   2
   944 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   945 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   945 000001C3 4F4D               
   946 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   946 000001CE 530D0A00           
   947 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   947 000001DB 7220               
   948 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   949 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   949 000001E9 6700               
   950                                  ;-----------------------------------------------------------------------------------------------------------------------
   951                                  ;
   952                                  ;       Work Areas
   953                                  ;
   954                                  ;-----------------------------------------------------------------------------------------------------------------------
   955 000001EB 90                                              align   2
   956 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   957 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   958 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   959 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   960 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   961                                  wwReadCountCommand      equ     $                                               ;read count and command
   962 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   963 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   964                                  wwDriveHead             equ     $                                               ;drive, head (word)
   965 000001F8 00                      wbDrive                 db      0                                               ;drive
   966 000001F9 00                      wbHead                  db      0                                               ;head
   967                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   968 000001FA 00                                              db      0                                               ;sector
   969 000001FB 00                      wbTrack                 db      0                                               ;track
   970 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   971 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   972                                  %endif
   973                                  %ifdef BUILDPREP
   974                                  ;=======================================================================================================================
   975                                  ;
   976                                  ;       Diskette Preparation Code
   977                                  ;
   978                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   979                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   980                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   981                                  ;
   982                                  ;=======================================================================================================================
   983                                  ;
   984                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   985                                  ;
   986                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   987                                                          call    BootPrint                                       ;display message
   988                                  ;
   989                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   990                                  ;
   991                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   992                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   993                                                          jnz     .20                                             ;continue if key pressed
   994                                                          sti                                                     ;enable interrupts
   995                                                          hlt                                                     ;wait for interrupt
   996                                                          jmp     .10                                             ;repeat
   997                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   998                                                          je      .30                                             ;yes, branch
   999                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1000                                                          jne     .10                                             ;no, repeat
  1001                                                          jmp     .120                                            ;yes, exit program
  1002                                  ;
  1003                                  ;       Display writing-sector message and patch the JMP instruction.
  1004                                  ;
  1005                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1006                                                          call    BootPrint                                       ;display message
  1007                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1008                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1009                                                          mov     [bx],ax                                         ;update the JMP instruction
  1010                                  ;
  1011                                  ;       Try to read the boot sector.
  1012                                  ;
  1013                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1014                                  .40                     push    cx                                              ;save remaining tries
  1015                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1016                                                          mov     dx,0                                            ;head zero, drive zero
  1017                                                          mov     cx,1                                            ;track zero, sector one
  1018                                                          mov     al,1                                            ;one sector
  1019                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1020                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1021                                                          pop     cx                                              ;restore remaining retries
  1022                                                          jnc     .50                                             ;skip ahead if successful
  1023                                                          loop    .40                                             ;try again
  1024                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1025                                                          jmp     .70                                             ;branch to error routine
  1026                                  ;
  1027                                  ;       Copy diskette parms from input buffer to output buffer.
  1028                                  ;
  1029                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1030                                                          add     si,11                                           ;skip over JMP and system ID
  1031                                                          mov     di,Boot                                         ;output buffer address
  1032                                                          add     di,11                                           ;skip over JMP and system ID
  1033                                                          mov     cx,19                                           ;length of diskette parameters
  1034                                                          cld                                                     ;forward string copies
  1035                                                          rep     movsb                                           ;copy diskette parameters
  1036                                  ;
  1037                                  ;       Try to write boot sector to diskette.
  1038                                  ;
  1039                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1040                                  .60                     push    cx                                              ;save remaining tries
  1041                                                          mov     bx,Boot                                         ;output buffer address
  1042                                                          mov     dx,0                                            ;head zero, drive zero
  1043                                                          mov     cx,1                                            ;track zero, sector one
  1044                                                          mov     al,1                                            ;one sector
  1045                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1046                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1047                                                          pop     cx                                              ;restore remaining retries
  1048                                                          jnc     .100                                            ;skip ahead if successful
  1049                                                          loop    .60                                             ;try again
  1050                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1051                                  ;
  1052                                  ;       Convert the error code to ASCII and display the error message.
  1053                                  ;
  1054                                  .70                     push    ax                                              ;save error code
  1055                                                          mov     al,ah                                           ;copy error code
  1056                                                          mov     ah,0                                            ;AX = error code
  1057                                                          mov     dl,10h                                          ;hexadecimal divisor
  1058                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1059                                                          or      ax,03030h                                       ;add ASCII zone digits
  1060                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1061                                                          jb      .80                                             ;yes, continue
  1062                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1063                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1064                                                          jb      .90                                             ;yes, continue
  1065                                                          add     al,7                                            ;no, make ASCII
  1066                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1067                                                          call    BootPrint                                       ;write error message
  1068                                                          pop     ax                                              ;restore error code
  1069                                  ;
  1070                                  ;       Display the completion message.
  1071                                  ;
  1072                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1073                                                          mov     al,ah                                           ;BIOS return code
  1074                                                          cmp     al,0                                            ;success?
  1075                                                          je      .110                                            ;yes, continue
  1076                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1077                                                          cmp     al,1                                            ;disk parameter error?
  1078                                                          je      .110                                            ;yes, continue
  1079                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1080                                                          cmp     al,2                                            ;address mark not found?
  1081                                                          je      .110                                            ;yes, continue
  1082                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1083                                                          cmp     al,3                                            ;protected disk?
  1084                                                          je      .110                                            ;yes, continue
  1085                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1086                                                          cmp     al,6                                            ;diskette removed?
  1087                                                          je      .110                                            ;yes, continue
  1088                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1089                                                          cmp     al,80H                                          ;drive timed out?
  1090                                                          je      .110                                            ;yes, continue
  1091                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1092                                  .110                    call    BootPrint                                       ;display result message
  1093                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1094                                                          int     021h                                            ;terminate DOS program
  1095                                                          ret                                                     ;return (should not execute)
  1096                                  ;-----------------------------------------------------------------------------------------------------------------------
  1097                                  ;
  1098                                  ;       Diskette Preparation Messages
  1099                                  ;
  1100                                  ;-----------------------------------------------------------------------------------------------------------------------
  1101                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1102                                                          db      13,10,"Copyright (C) 2010-2019 David J. Walling. All rights reserved."
  1103                                                          db      13,10
  1104                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1105                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1106                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1107                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1108                                                          db      13,10,0
  1109                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1110                                                          db      13,10,0
  1111                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1112                                                          db      13,10,0
  1113                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1114                                                          db      13,10,0
  1115                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1116                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1117                                                          db      13,10,0
  1118                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1119                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1120                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1121                                                          db      13,10,"and retry."
  1122                                                          db      13,10,0
  1123                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1124                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1125                                                          db      13,10,"using another diskette."
  1126                                                          db      13,10,0
  1127                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1128                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1129                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1130                                                          db      13,10,0
  1131                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1132                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1133                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1134                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1135                                                          db      13,10,"is properly inserted in the diskette drive."
  1136                                                          db      13,10,0
  1137                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1138                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1139                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1140                                                          db      13,10,0
  1141                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1142                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1143                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1144                                                          db      13,10,0
  1145                                  wcPrepInBuf             equ     $
  1146                                  %endif
  1147                                  %ifdef BUILDDISK
  1148                                  ;=======================================================================================================================
  1149                                  ;
  1150                                  ;       File Allocation Tables
  1151                                  ;
  1152                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1153                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1154                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1155                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1156                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1157                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1158                                  ;       the last cluster in the chain.
  1159                                  ;
  1160                                  ;       Every three bytes encode two FAT entries as follows:
  1161                                  ;
  1162                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1163                                  ;
  1164                                  ;=======================================================================================================================
  1165                                  ;-----------------------------------------------------------------------------------------------------------------------
  1166                                  ;
  1167                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1168                                  ;
  1169                                  ;-----------------------------------------------------------------------------------------------------------------------
  1170                                  section                 fat1                                                    ;first copy of FAT
  1171 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1172 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1173 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1174 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1175 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1176 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1177 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1178 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1179 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1180 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1181 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1182 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1183                                  ;-----------------------------------------------------------------------------------------------------------------------
  1184                                  ;
  1185                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1186                                  ;
  1187                                  ;-----------------------------------------------------------------------------------------------------------------------
  1188                                  section                 fat2                                                    ;second copy of FAT
  1189 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1190 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1191 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1192 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1193 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1194 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1195 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1196 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1197 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1198 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1199 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1200 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1201                                  ;-----------------------------------------------------------------------------------------------------------------------
  1202                                  ;
  1203                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1204                                  ;
  1205                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1206                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1207                                  ;       copy.
  1208                                  ;
  1209                                  ;-----------------------------------------------------------------------------------------------------------------------
  1210                                  section                 dir                                                     ;diskette directory
  1211 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1211 00000009 4F4D               
  1212 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1213 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1214 00000016 0000                                            dw      0h                                              ;time
  1215 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1216 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1217 0000001A 0200                                            dw      2                                               ;first cluster
  1218 0000001C 00540000                                        dd      05400h                                          ;file size
  1219 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1220                                  %endif
  1221                                  %ifdef BUILDCOM
  1222                                  ;=======================================================================================================================
  1223                                  ;
  1224                                  ;       OS.COM
  1225                                  ;
  1226                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1227                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1228                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1229                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1230                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1231                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1232                                  ;
  1233                                  ;       Our loader addressability is set up according to the following diagram.
  1234                                  ;
  1235                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1236                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1237                                  ;                               |  256 = 100h bytes                             |
  1238                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1239                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1240                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1241                                  ;                       007e00  +-----------------------------------------------+
  1242                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1243                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1244                                  ;                               |                                               |
  1245                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1246                                  ;                               |                                               |
  1247                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1248                                  ;                               |  Loader Code                                  |
  1249                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1250                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1251                                  ;
  1252                                  ;=======================================================================================================================
  1253                                  ;-----------------------------------------------------------------------------------------------------------------------
  1254                                  ;
  1255                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1256                                  ;
  1257                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1258                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1259                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1260                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1261                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1262                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1263                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1264                                  ;       registers.
  1265                                  ;
  1266                                  ;-----------------------------------------------------------------------------------------------------------------------
  1267                                                          cpu     8086                                            ;assume minimal CPU
  1268                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1269                                                          bits    16                                              ;this is 16-bit code
  1270 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1271 00000001 1F                                              pop     ds                                              ;...as our data segment
  1272 00000002 0E                                              push    cs                                              ;use the code segment
  1273 00000003 07                                              pop     es                                              ;...as our extra segment
  1274                                  ;
  1275                                  ;       Write a message to the console so we know we have our addressability established.
  1276                                  ;
  1277 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1278 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1279                                  ;
  1280                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1281                                  ;
  1282 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1283 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1284 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1285 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1286                                                          cpu     386                                             ;allow 80386 instructions
  1287 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1288 00000017 E89600                                          call    PutTTYString                                    ;display message
  1289                                  ;
  1290                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1291                                  ;
  1292 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1293 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1294 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1295 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1296 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1297 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1298 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1299 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1300 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1301 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1302                                  ;
  1303                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1304                                  ;
  1305 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1306 00000038 07                                              pop     es                                              ;... as target segment
  1307 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1308 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1309 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1310 00000041 FC                                              cld                                                     ;forward strings
  1311 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1312 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1313 00000047 E86600                                          call    PutTTYString                                    ;display message
  1314                                  ;
  1315                                  ;       Switch to protected mode.
  1316                                  ;
  1317 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1318 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1319 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1320 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1321 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1322 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1323 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1324 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1325 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1326 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1327 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1328                                  ;
  1329                                  ;       Enable hardware and maskable interrupts.
  1330                                  ;
  1331 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1332 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1333 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1334 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1335                                  ;
  1336                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1337                                  ;
  1338 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1339 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1340 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1341                                  ;-----------------------------------------------------------------------------------------------------------------------
  1342                                  ;
  1343                                  ;       Routine:        LoaderExit
  1344                                  ;
  1345                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1346                                  ;
  1347                                  ;       In:             DS:SI   string address
  1348                                  ;
  1349                                  ;-----------------------------------------------------------------------------------------------------------------------
  1350 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1351                                  ;
  1352                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1353                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1354                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1355                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1356                                  ;       The STI instruction enables maskable interrupts, including the keyboard. The CPU assures that the
  1357                                  ;       instruction immediately following STI will be executed before any interrupt is serviced.
  1358                                  ;
  1359 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1360 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1361 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1362 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1363 00000085 F4                                              hlt                                                     ;wait for interrupt
  1364 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1365                                  ;
  1366                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1367                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1368                                  ;       HLT until the system resets.
  1369                                  ;
  1370 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1371 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1372 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1373 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1374 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1375                                  ;-----------------------------------------------------------------------------------------------------------------------
  1376                                  ;
  1377                                  ;       Routine:        GetCPUType
  1378                                  ;
  1379                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1380                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1381                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1382                                  ;
  1383                                  ;       Out:            AX      0 = 808x, v20, etc.
  1384                                  ;                               1 = 80186
  1385                                  ;                               2 = 80286
  1386                                  ;                               3 = 80386
  1387                                  ;
  1388                                  ;-----------------------------------------------------------------------------------------------------------------------
  1389 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1390 00000092 B120                                            mov     cl,32                                           ;shift count
  1391 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1392 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1393 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1394                                                          cpu     186
  1395 0000009A 54                                              push    sp                                              ;save stack pointer
  1396 0000009B 59                                              pop     cx                                              ;...into cx
  1397 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1398 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1399                                                          cpu     286
  1400 000000A0 40                                              inc     ax                                              ;AX = 2
  1401 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1402 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1403 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1404 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1405 000000AE 40                                              inc     ax                                              ;AX = 3
  1406 000000AF C3                      .10                     ret                                                     ;return
  1407                                  ;-----------------------------------------------------------------------------------------------------------------------
  1408                                  ;
  1409                                  ;       Routine:        PutTTYString
  1410                                  ;
  1411                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1412                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1413                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1414                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1415                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1416                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1417                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1418                                  ;                       to LODSB is not needed.
  1419                                  ;
  1420                                  ;       In:             DS:SI   address of string
  1421                                  ;
  1422                                  ;       Out:            DF      0
  1423                                  ;                       ZF      1
  1424                                  ;                       AL      0
  1425                                  ;
  1426                                  ;-----------------------------------------------------------------------------------------------------------------------
  1427 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1428 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1429 000000B2 84C0                                            test    al,al                                           ;end of string?
  1430 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1431 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1432 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1433 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1434 000000BC C3                      .20                     ret                                                     ;return
  1435                                  ;-----------------------------------------------------------------------------------------------------------------------
  1436                                  ;
  1437                                  ;       Loader Data
  1438                                  ;
  1439                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1440                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1441                                  ;
  1442                                  ;-----------------------------------------------------------------------------------------------------------------------
  1443 000000BD 90                                              align   2
  1444 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1445 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1446 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1447 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1448 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1448 000000D1 74696E672073797374-
  1448 000000DA 656D20726571756972-
  1448 000000E3 657320616E20693338-
  1448 000000EC 36206F72206C617465-
  1448 000000F5 722070726F63657373-
  1448 000000FE 6F722E0D0A         
  1449 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1449 0000010C 65737320616E79206B-
  1449 00000115 657920746F20726573-
  1449 0000011E 746172742074686520-
  1449 00000127 636F6D70757465722E-
  1449 00000130 0D0A00             
  1450 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1451 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1451 00000145 7265640D0A00       
  1452 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1452 00000154 616465640D0A00     
  1453 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1453 00000164 4F530D0A00         
  1454 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1455                                  ;=======================================================================================================================
  1456                                  ;
  1457                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1458                                  ;
  1459                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1460                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1461                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1462                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1463                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1464                                  ;
  1465                                  ;=======================================================================================================================
  1466                                  ;=======================================================================================================================
  1467                                  ;
  1468                                  ;       Kernel Tables
  1469                                  ;
  1470                                  ;=======================================================================================================================
  1471                                  ;-----------------------------------------------------------------------------------------------------------------------
  1472                                  ;
  1473                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1474                                  ;
  1475                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1476                                  ;       first descriptor must be all nulls.
  1477                                  ;
  1478                                  ;       6   5         4         3         2         1         0
  1479                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1480                                  ;       ----------------------------------------------------------------
  1481                                  ;       h......hffffmmmma......ab......................bn..............n
  1482                                  ;
  1483                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1484                                  ;               ffff                                                            flags
  1485                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1486                                  ;                       a......a                                                access
  1487                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1488                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1489                                  ;
  1490                                  ;       00000000                                                                all areas have base addresses below 2^24
  1491                                  ;               0...                                                            single-byte size granularity
  1492                                  ;               1...                                                            4-kilobyte size granularity
  1493                                  ;               .0..                                                            16-bit default for code segments
  1494                                  ;               .1..                                                            32-bit default for code segments
  1495                                  ;               ..0.                                                            intel-reserved; should be zero
  1496                                  ;               ...0                                                            available for operating system use
  1497                                  ;                   0000                                                        segment is less than 2^16 in size
  1498                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1499                                  ;                       1.......                                                segment is present in memory
  1500                                  ;                       .00.....                                                segment is of privilege level 0
  1501                                  ;                       ...0....                                                segment is of system or gate type
  1502                                  ;                       ...00010                                                local decriptor table (LDT)
  1503                                  ;                       ...01001                                                task state segment (TSS) available
  1504                                  ;                       ...01011                                                task state segment (TSS) busy
  1505                                  ;                       ...10...                                                data segment
  1506                                  ;                       ...10011                                                writable data (accessed)
  1507                                  ;                       ...11...                                                code segment
  1508                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1509                                  ;
  1510                                  ;-----------------------------------------------------------------------------------------------------------------------
  1511                                  section                 gdt                                                     ;global descriptor table
  1512 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1513 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1514 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1515 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1516 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1517 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1518 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1519 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1520 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1521 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1522 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1523 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1524 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1525 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1526 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1527                                  ;-----------------------------------------------------------------------------------------------------------------------
  1528                                  ;
  1529                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1530                                  ;
  1531                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1532                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1533                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1534                                  ;
  1535                                  ;       6   5         4         3         2         1         0
  1536                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1537                                  ;       ----------------------------------------------------------------
  1538                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1539                                  ;
  1540                                  ;       h...h   high-order offset (bits 16-31)
  1541                                  ;       P       present (0=unused interrupt)
  1542                                  ;       zz      descriptor privilege level
  1543                                  ;       S       storage segment (must be zero for IDT)
  1544                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1545                                  ;       S...S   handling code selector in GDT
  1546                                  ;       l...l   lo-order offset (bits 0-15)
  1547                                  ;
  1548                                  ;-----------------------------------------------------------------------------------------------------------------------
  1549                                  section                 idt                                                     ;interrupt descriptor table
  1550                                                          mtrap   dividebyzero                                    ;00 divide by zero
  1550                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1550 00000000 00004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1551                                                          mtrap   singlestep                                      ;01 single step
  1551                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1551 00000008 0C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1552                                                          mtrap   nmi                                             ;02 non-maskable
  1552                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1552 00000010 18004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1553                                                          mtrap   break                                           ;03 break
  1553                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1553 00000018 24004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1554                                                          mtrap   into                                            ;04 into
  1554                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1554 00000020 30004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1555                                                          mtrap   bounds                                          ;05 bounds
  1555                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1555 00000028 3C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1556                                                          mtrap   badopcode                                       ;06 bad op code
  1556                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1556 00000030 48004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1557                                                          mtrap   nocoproc                                        ;07 no coprocessor
  1557                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1557 00000038 54004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1558                                                          mtrap   doublefault                                     ;08 double-fault
  1558                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1558 00000040 60004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1559                                                          mtrap   operand                                         ;09 operand
  1559                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1559 00000048 6C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1560                                                          mtrap   badtss                                          ;0a bad TSS
  1560                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1560 00000050 78004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1561                                                          mtrap   notpresent                                      ;0b not-present
  1561                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1561 00000058 84004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1562                                                          mtrap   stacklimit                                      ;0c stack limit
  1562                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1562 00000060 90004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1563                                                          mtrap   protection                                      ;0d general protection fault
  1563                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1563 00000068 9C004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1564                                                          mtrap   int14                                           ;0e (reserved)
  1564                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1564 00000070 A8004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1565                                                          mtrap   int15                                           ;0f (reserved)
  1565                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1565 00000078 B4004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1566                                                          mtrap   coproccalc                                      ;10 (reserved)
  1566                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1566 00000080 C0004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1567                                                          mtrap   int17                                           ;11 (reserved)
  1567                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1567 00000088 CC004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1568                                                          mtrap   int18                                           ;12 (reserved)
  1568                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1568 00000090 D5004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1569                                                          mtrap   int19                                           ;13 (reserved)
  1569                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1569 00000098 DE004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1570                                                          mtrap   int20                                           ;14 (reserved)
  1570                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1570 000000A0 E7004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1571                                                          mtrap   int21                                           ;15 (reserved)
  1571                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1571 000000A8 F0004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1572                                                          mtrap   int22                                           ;16 (reserved)
  1572                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1572 000000B0 F9004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1573                                                          mtrap   int23                                           ;17 (reserved)
  1573                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1573 000000B8 02014800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1574                                                          mtrap   int24                                           ;18 (reserved)
  1574                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1574 000000C0 0B014800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1575                                                          mtrap   int25                                           ;19 (reserved)
  1575                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1575 000000C8 14014800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1576                                                          mtrap   int26                                           ;1a (reserved)
  1576                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1576 000000D0 1D014800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1577                                                          mtrap   int27                                           ;1b (reserved)
  1577                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1577 000000D8 26014800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1578                                                          mtrap   int28                                           ;1c (reserved)
  1578                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1578 000000E0 2F014800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1579                                                          mtrap   int29                                           ;1d (reserved)
  1579                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1579 000000E8 38014800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1580                                                          mtrap   int30                                           ;1e (reserved)
  1580                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1580 000000F0 41014800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1581                                                          mtrap   int31                                           ;1f (reserved)
  1581                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1581 000000F8 4A014800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1582                                                          mint    clocktick                                       ;20 IRQ0 clock tick
  1582                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1582 00000100 31054800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1583                                                          mint    keyboard                                        ;21 IRQ1 keyboard
  1583                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1583 00000108 82054800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1584                                                          mint    iochannel                                       ;22 IRQ2 second 8259A cascade
  1584                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1584 00000110 DE084800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1585                                                          mint    com2                                            ;23 IRQ3 com2
  1585                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1585 00000118 E1084800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1586                                                          mint    com1                                            ;24 IRQ4 com1
  1586                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1586 00000120 E4084800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1587                                                          mint    lpt2                                            ;25 IRQ5 lpt2
  1587                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1587 00000128 E7084800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1588                                                          mint    diskette                                        ;26 IRQ6 diskette
  1588                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1588 00000130 EA084800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1589                                                          mint    lpt1                                            ;27 IRQ7 lpt1
  1589                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1589 00000138 04094800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1590                                                          mint    rtclock                                         ;28 IRQ8 real-time clock
  1590                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1590 00000140 07094800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1591                                                          mint    retrace                                         ;29 IRQ9 CGA vertical retrace
  1591                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1591 00000148 0A094800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1592                                                          mint    irq10                                           ;2a IRQA (reserved)
  1592                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1592 00000150 0D094800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1593                                                          mint    irq11                                           ;2b IRQB (reserved)
  1593                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1593 00000158 10094800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1594                                                          mint    ps2mouse                                        ;2c IRQC ps/2 mouse
  1594                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1594 00000160 13094800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1595                                                          mint    coprocessor                                     ;2d IRQD coprocessor
  1595                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1595 00000168 16094800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1596                                                          mint    fixeddisk                                       ;2e IRQE fixed disk
  1596                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1596 00000170 19094800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1597                                                          mint    irq15                                           ;2f IRQF (reserved)
  1597                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1597 00000178 1C094800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1598                                                          mtrap   svc                                             ;30 OS services
  1598                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1598 00000180 2E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1599 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1600                                  ;=======================================================================================================================
  1601                                  ;
  1602                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1603                                  ;
  1604                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1605                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1606                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1607                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1608                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1609                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1610                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1611                                  ;
  1612                                  ;=======================================================================================================================
  1613                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1614                                                          cpu     386                                             ;allow 80386 instructions
  1615                                                          bits    32                                              ;this is 32-bit code
  1616                                  ;=======================================================================================================================
  1617                                  ;
  1618                                  ;       CPU Interrupt Handlers
  1619                                  ;
  1620                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1621                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1622                                  ;
  1623                                  ;=======================================================================================================================
  1624                                  ;-----------------------------------------------------------------------------------------------------------------------
  1625                                  ;
  1626                                  ;       INT0    Divide By Zero
  1627                                  ;
  1628                                  ;-----------------------------------------------------------------------------------------------------------------------
  1629                                                          menter  dividebyzero                                    ;divide by zero
  1629                              <1> ?%1 equ ($-$$)
  1630 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1631 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1632 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1633                                  ;-----------------------------------------------------------------------------------------------------------------------
  1634                                  ;
  1635                                  ;       INT1    Single Step
  1636                                  ;
  1637                                  ;-----------------------------------------------------------------------------------------------------------------------
  1638                                                          menter  singlestep                                      ;single step
  1638                              <1> ?%1 equ ($-$$)
  1639 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1640 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1641 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1642                                  ;-----------------------------------------------------------------------------------------------------------------------
  1643                                  ;
  1644                                  ;       INT2    Non-Maskable Interrupt
  1645                                  ;
  1646                                  ;-----------------------------------------------------------------------------------------------------------------------
  1647                                                          menter  nmi                                             ;non-maskable
  1647                              <1> ?%1 equ ($-$$)
  1648 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1649 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1650 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1651                                  ;-----------------------------------------------------------------------------------------------------------------------
  1652                                  ;
  1653                                  ;       INT3    Break
  1654                                  ;
  1655                                  ;-----------------------------------------------------------------------------------------------------------------------
  1656                                                          menter  break                                           ;break
  1656                              <1> ?%1 equ ($-$$)
  1657 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1658 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1659 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1660                                  ;-----------------------------------------------------------------------------------------------------------------------
  1661                                  ;
  1662                                  ;       INT4    Into
  1663                                  ;
  1664                                  ;-----------------------------------------------------------------------------------------------------------------------
  1665                                                          menter  into                                            ;into
  1665                              <1> ?%1 equ ($-$$)
  1666 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1667 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1668 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1669                                  ;-----------------------------------------------------------------------------------------------------------------------
  1670                                  ;
  1671                                  ;       INT5    Bounds
  1672                                  ;
  1673                                  ;-----------------------------------------------------------------------------------------------------------------------
  1674                                                          menter  bounds                                          ;bounds
  1674                              <1> ?%1 equ ($-$$)
  1675 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1676 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1677 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1678                                  ;-----------------------------------------------------------------------------------------------------------------------
  1679                                  ;
  1680                                  ;       INT6    Bad Operation Code
  1681                                  ;
  1682                                  ;-----------------------------------------------------------------------------------------------------------------------
  1683                                                          menter  badopcode                                       ;bad opcode interrupt
  1683                              <1> ?%1 equ ($-$$)
  1684 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1685 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1686 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1687                                  ;-----------------------------------------------------------------------------------------------------------------------
  1688                                  ;
  1689                                  ;       INT7    No Coprocessor
  1690                                  ;
  1691                                  ;-----------------------------------------------------------------------------------------------------------------------
  1692                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1692                              <1> ?%1 equ ($-$$)
  1693 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1694 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1695 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1696                                  ;-----------------------------------------------------------------------------------------------------------------------
  1697                                  ;
  1698                                  ;       INT8    Double Fault
  1699                                  ;
  1700                                  ;-----------------------------------------------------------------------------------------------------------------------
  1701                                                          menter  doublefault                                     ;doublefault interrupt
  1701                              <1> ?%1 equ ($-$$)
  1702 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1703 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1704 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1705                                  ;-----------------------------------------------------------------------------------------------------------------------
  1706                                  ;
  1707                                  ;       INT9    Operand
  1708                                  ;
  1709                                  ;-----------------------------------------------------------------------------------------------------------------------
  1710                                                          menter  operand                                         ;operand interrupt
  1710                              <1> ?%1 equ ($-$$)
  1711 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1712 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1713 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1714                                  ;-----------------------------------------------------------------------------------------------------------------------
  1715                                  ;
  1716                                  ;       INT10   Bad Task State Segment
  1717                                  ;
  1718                                  ;-----------------------------------------------------------------------------------------------------------------------
  1719                                                          menter  badtss                                          ;bad TSS interrupt
  1719                              <1> ?%1 equ ($-$$)
  1720 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1721 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1722 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1723                                  ;-----------------------------------------------------------------------------------------------------------------------
  1724                                  ;
  1725                                  ;       INT11   Not Present
  1726                                  ;
  1727                                  ;-----------------------------------------------------------------------------------------------------------------------
  1728                                                          menter  notpresent                                      ;not present interrupt
  1728                              <1> ?%1 equ ($-$$)
  1729 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1730 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1731 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1732                                  ;-----------------------------------------------------------------------------------------------------------------------
  1733                                  ;
  1734                                  ;       INT12   Stack Limit
  1735                                  ;
  1736                                  ;-----------------------------------------------------------------------------------------------------------------------
  1737                                                          menter  stacklimit                                      ;stack limit interrupt
  1737                              <1> ?%1 equ ($-$$)
  1738 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1739 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1740 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1741                                  ;-----------------------------------------------------------------------------------------------------------------------
  1742                                  ;
  1743                                  ;       INT13   General Protection Fault
  1744                                  ;
  1745                                  ;-----------------------------------------------------------------------------------------------------------------------
  1746                                                          menter  protection                                      ;protection fault interrupt
  1746                              <1> ?%1 equ ($-$$)
  1747 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1748 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1749 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1750                                  ;-----------------------------------------------------------------------------------------------------------------------
  1751                                  ;
  1752                                  ;       INT14   Reserved
  1753                                  ;
  1754                                  ;-----------------------------------------------------------------------------------------------------------------------
  1755                                                          menter  int14                                           ;(reserved)
  1755                              <1> ?%1 equ ($-$$)
  1756 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1757 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1758 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1759                                  ;-----------------------------------------------------------------------------------------------------------------------
  1760                                  ;
  1761                                  ;       INT15   Reserved
  1762                                  ;
  1763                                  ;-----------------------------------------------------------------------------------------------------------------------
  1764                                                          menter  int15                                           ;(reserved)
  1764                              <1> ?%1 equ ($-$$)
  1765 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1766 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1767 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1768                                  ;-----------------------------------------------------------------------------------------------------------------------
  1769                                  ;
  1770                                  ;       INT16   Coprocessor Calculation
  1771                                  ;
  1772                                  ;-----------------------------------------------------------------------------------------------------------------------
  1773                                                          menter  coproccalc                                      ;coprocessor calculation
  1773                              <1> ?%1 equ ($-$$)
  1774 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1775 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1776 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1777                                  ;-----------------------------------------------------------------------------------------------------------------------
  1778                                  ;
  1779                                  ;       INT17   Reserved
  1780                                  ;
  1781                                  ;-----------------------------------------------------------------------------------------------------------------------
  1782                                                          menter  int17                                           ;(reserved)
  1782                              <1> ?%1 equ ($-$$)
  1783 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1784 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1785 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1786                                  ;-----------------------------------------------------------------------------------------------------------------------
  1787                                  ;
  1788                                  ;       INT18   Reserved
  1789                                  ;
  1790                                  ;-----------------------------------------------------------------------------------------------------------------------
  1791                                                          menter  int18                                           ;(reserved)
  1791                              <1> ?%1 equ ($-$$)
  1792 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1793 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1794 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                  ;
  1797                                  ;       INT19   Reserved
  1798                                  ;
  1799                                  ;-----------------------------------------------------------------------------------------------------------------------
  1800                                                          menter  int19                                           ;(reserved)
  1800                              <1> ?%1 equ ($-$$)
  1801 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1802 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1803 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1804                                  ;-----------------------------------------------------------------------------------------------------------------------
  1805                                  ;
  1806                                  ;       INT20   Reserved
  1807                                  ;
  1808                                  ;-----------------------------------------------------------------------------------------------------------------------
  1809                                                          menter  int20                                           ;(reserved)
  1809                              <1> ?%1 equ ($-$$)
  1810 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1811 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1812 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1813                                  ;-----------------------------------------------------------------------------------------------------------------------
  1814                                  ;
  1815                                  ;       INT21   Reserved
  1816                                  ;
  1817                                  ;-----------------------------------------------------------------------------------------------------------------------
  1818                                                          menter  int21                                           ;(reserved)
  1818                              <1> ?%1 equ ($-$$)
  1819 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1820 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1821 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1822                                  ;-----------------------------------------------------------------------------------------------------------------------
  1823                                  ;
  1824                                  ;       INT22   Reserved
  1825                                  ;
  1826                                  ;-----------------------------------------------------------------------------------------------------------------------
  1827                                                          menter  int22                                           ;(reserved)
  1827                              <1> ?%1 equ ($-$$)
  1828 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1829 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1830 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1831                                  ;-----------------------------------------------------------------------------------------------------------------------
  1832                                  ;
  1833                                  ;       INT23   Reserved
  1834                                  ;
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                                          menter  int23                                           ;(reserved)
  1836                              <1> ?%1 equ ($-$$)
  1837 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1838 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1839 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                  ;
  1842                                  ;       INT24   Reserved
  1843                                  ;
  1844                                  ;-----------------------------------------------------------------------------------------------------------------------
  1845                                                          menter  int24                                           ;(reserved)
  1845                              <1> ?%1 equ ($-$$)
  1846 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1847 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1848 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1849                                  ;-----------------------------------------------------------------------------------------------------------------------
  1850                                  ;
  1851                                  ;       INT25   Reserved
  1852                                  ;
  1853                                  ;-----------------------------------------------------------------------------------------------------------------------
  1854                                                          menter  int25                                           ;(reserved)
  1854                              <1> ?%1 equ ($-$$)
  1855 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1856 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1857 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1858                                  ;-----------------------------------------------------------------------------------------------------------------------
  1859                                  ;
  1860                                  ;       INT26   Reserved
  1861                                  ;
  1862                                  ;-----------------------------------------------------------------------------------------------------------------------
  1863                                                          menter  int26                                           ;(reserved)
  1863                              <1> ?%1 equ ($-$$)
  1864 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1865 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1866 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1867                                  ;-----------------------------------------------------------------------------------------------------------------------
  1868                                  ;
  1869                                  ;       INT27   Reserved
  1870                                  ;
  1871                                  ;-----------------------------------------------------------------------------------------------------------------------
  1872                                                          menter  int27                                           ;(reserved)
  1872                              <1> ?%1 equ ($-$$)
  1873 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1874 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1875 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1876                                  ;-----------------------------------------------------------------------------------------------------------------------
  1877                                  ;
  1878                                  ;       INT28   Reserved
  1879                                  ;
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                                          menter  int28                                           ;(reserved)
  1881                              <1> ?%1 equ ($-$$)
  1882 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1883 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1884 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1885                                  ;-----------------------------------------------------------------------------------------------------------------------
  1886                                  ;
  1887                                  ;       INT29   Reserved
  1888                                  ;
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                                          menter  int29                                           ;(reserved)
  1890                              <1> ?%1 equ ($-$$)
  1891 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1892 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1893 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                  ;
  1896                                  ;       INT30   Reserved
  1897                                  ;
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                                          menter  int30                                           ;(reserved)
  1899                              <1> ?%1 equ ($-$$)
  1900 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1901 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1902 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                  ;
  1905                                  ;       INT31   Reserved
  1906                                  ;
  1907                                  ;-----------------------------------------------------------------------------------------------------------------------
  1908                                                          menter  int31                                           ;(reserved)
  1908                              <1> ?%1 equ ($-$$)
  1909 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1910 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1911 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                  ;
  1914                                  ;       Routine:        ReportInterrupt
  1915                                  ;
  1916                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1917                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1918                                  ;
  1919                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  1920                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  1921                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  1922                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1923                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1924                                  ;
  1925                                  ;       Out:            N/A             This routine does not exit.
  1926                                  ;
  1927                                  ;-----------------------------------------------------------------------------------------------------------------------
  1928 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1929 00000154 06                                              push    es                                              ;save ES at time of interrupt
  1930 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1931 00000156 89E5                                            mov     ebp,esp                                         ;EBP --> [EDI]
  1932                                  ;
  1933                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1934                                  ;
  1935                                  ;                       [EBP+56]        EFLAGS
  1936                                  ;                       [EBP+52]        CS
  1937                                  ;                       [EBP+48]        EIP
  1938                                  ;                       [EBP+44]        interrupt number (0-31)
  1939                                  ;                       [EBP+40]        error message address
  1940                                  ;                       [EBP+36]        DS
  1941                                  ;                       [EBP+32]        ES
  1942                                  ;                       [EBP+28]        EAX
  1943                                  ;                       [EBP+24]        ECX
  1944                                  ;                       [EBP+20]        EDX
  1945                                  ;                       [EBP+16]        EBX
  1946                                  ;                       [EBP+12]        ESP
  1947                                  ;                       [EBP+8]         EBP
  1948                                  ;                       [EBP+4]         ESI
  1949                                  ;                       [EBP+0]         EDI
  1950                                  ;
  1951 00000158 0E                                              push    cs                                              ;load code selector ...
  1952 00000159 1F                                              pop     ds                                              ;... into DS
  1953 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  1954 0000015C 07                                              pop     es                                              ;... into ES
  1955                                  ;
  1956                                  ;       Display the interrupt report boundary box
  1957                                  ;
  1958 0000015D B10D                                            mov     cl,13                                           ;column
  1959 0000015F B506                                            mov     ch,6                                            ;row
  1960 00000161 B232                                            mov     dl,50                                           ;width
  1961 00000163 B608                                            mov     dh,8                                            ;height
  1962 00000165 B707                                            mov     bh,07h                                          ;attribute
  1963 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  1964                                  ;
  1965                                  ;       Display the report header
  1966                                  ;
  1967 0000016C B10F                                            mov     cl,15                                           ;column
  1968 0000016E B507                                            mov     ch,7                                            ;row
  1969 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  1970 00000175 E8C10A0000                                      call    SetConsoleString                                ;draw text string
  1971                                  ;
  1972                                  ;       Display the interrupt description label
  1973                                  ;
  1974 0000017A B10F                                            mov     cl,15                                           ;column
  1975 0000017C B508                                            mov     ch,8                                            ;row
  1976 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  1977 00000183 E8B30A0000                                      call    SetConsoleString                                ;draw text string
  1978                                  ;
  1979                                  ;       Display the interrupt number
  1980                                  ;
  1981 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  1982 0000018B B11A                                            mov     cl,26                                           ;column
  1983 0000018D B508                                            mov     ch,8                                            ;row
  1984 0000018F E8C7080000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  1985                                  ;
  1986                                  ;       Display the interrupt name
  1987                                  ;
  1988 00000194 B11D                                            mov     cl,29                                           ;column
  1989 00000196 B508                                            mov     ch,8                                            ;row
  1990 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  1991 0000019B E89B0A0000                                      call    SetConsoleString                                ;display interrupt description
  1992                                  ;
  1993                                  ;       Display the register values header
  1994                                  ;
  1995 000001A0 B10F                                            mov     cl,15                                           ;column
  1996 000001A2 B50A                                            mov     ch,10                                           ;row
  1997 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  1998 000001A9 E88D0A0000                                      call    SetConsoleString                                ;draw text string
  1999                                  ;
  2000                                  ;       Display the EAX register label and value
  2001                                  ;
  2002 000001AE B10F                                            mov     cl,15                                           ;column
  2003 000001B0 B50B                                            mov     ch,11                                           ;row
  2004 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  2005 000001B7 E87F0A0000                                      call    SetConsoleString                                ;draw label
  2006 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2007 000001BF B113                                            mov     cl,19                                           ;column
  2008 000001C1 B50B                                            mov     ch,11                                           ;row
  2009 000001C3 E8AD080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2010                                  ;
  2011                                  ;       Display the ECX register label and value
  2012                                  ;
  2013 000001C8 B10F                                            mov     cl,15                                           ;column
  2014 000001CA B50C                                            mov     ch,12                                           ;row
  2015 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2016 000001D1 E8650A0000                                      call    SetConsoleString                                ;draw label
  2017 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2018 000001D9 B113                                            mov     cl,19                                           ;column
  2019 000001DB B50C                                            mov     ch,12                                           ;row
  2020 000001DD E893080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2021                                  ;
  2022                                  ;       Display the EDX register label and value
  2023                                  ;
  2024 000001E2 B10F                                            mov     cl,15                                           ;column
  2025 000001E4 B50D                                            mov     ch,13                                           ;row
  2026 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2027 000001EB E84B0A0000                                      call    SetConsoleString                                ;draw label
  2028 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2029 000001F3 B113                                            mov     cl,19                                           ;column
  2030 000001F5 B50D                                            mov     ch,13                                           ;row
  2031 000001F7 E879080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2032                                  ;
  2033                                  ;       Display the EBX register label and value
  2034                                  ;
  2035 000001FC B10F                                            mov     cl,15                                           ;column
  2036 000001FE B50E                                            mov     ch,14                                           ;row
  2037 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2038 00000205 E8310A0000                                      call    SetConsoleString                                ;draw label
  2039 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2040 0000020D B113                                            mov     cl,19                                           ;column
  2041 0000020F B50E                                            mov     ch,14                                           ;row
  2042 00000211 E85F080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2043                                  ;
  2044                                  ;       Display the ESI register label and value
  2045                                  ;
  2046 00000216 B11D                                            mov     cl,29                                           ;column
  2047 00000218 B50B                                            mov     ch,11                                           ;row
  2048 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2049 0000021F E8170A0000                                      call    SetConsoleString                                ;draw label
  2050 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2051 00000227 B121                                            mov     cl,33                                           ;column
  2052 00000229 B50B                                            mov     ch,11                                           ;row
  2053 0000022B E845080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2054                                  ;
  2055                                  ;       Display the EDI register label and value
  2056                                  ;
  2057 00000230 B11D                                            mov     cl,29                                           ;column
  2058 00000232 B50C                                            mov     ch,12                                           ;row
  2059 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2060 00000239 E8FD090000                                      call    SetConsoleString                                ;draw label
  2061 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2062 00000241 B121                                            mov     cl,33                                           ;column
  2063 00000243 B50C                                            mov     ch,12                                           ;row
  2064 00000245 E82B080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2065                                  ;
  2066                                  ;       Display the EBP register label and value
  2067                                  ;
  2068 0000024A B11D                                            mov     cl,29                                           ;column
  2069 0000024C B50D                                            mov     ch,13                                           ;row
  2070 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2071 00000253 E8E3090000                                      call    SetConsoleString                                ;draw label
  2072 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2073 0000025B B121                                            mov     cl,33                                           ;column
  2074 0000025D B50D                                            mov     ch,13                                           ;row
  2075 0000025F E811080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2076                                  ;
  2077                                  ;       Display the DS register label and value
  2078                                  ;
  2079 00000264 B12A                                            mov     cl,42                                           ;column
  2080 00000266 B50B                                            mov     ch,11                                           ;row
  2081 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2082 0000026D E8C9090000                                      call    SetConsoleString                                ;draw label
  2083 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2084 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2085 00000278 B12E                                            mov     cl,46                                           ;column
  2086 0000027A B50B                                            mov     ch,11                                           ;row
  2087 0000027C E804080000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2088                                  ;
  2089                                  ;       Display the ES register label and value
  2090                                  ;
  2091 00000281 B12A                                            mov     cl,42                                           ;column
  2092 00000283 B50C                                            mov     ch,12                                           ;row
  2093 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2094 0000028A E8AC090000                                      call    SetConsoleString                                ;draw label
  2095 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2096 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2097 00000295 B12E                                            mov     cl,46                                           ;column
  2098 00000297 B50C                                            mov     ch,12                                           ;row
  2099 00000299 E8E7070000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2100                                  ;
  2101                                  ;       Display the SS register label and value
  2102                                  ;
  2103 0000029E B12A                                            mov     cl,42                                           ;column
  2104 000002A0 B50D                                            mov     ch,13                                           ;row
  2105 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2106 000002A7 E88F090000                                      call    SetConsoleString                                ;draw label
  2107 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2108 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2109 000002B1 B12E                                            mov     cl,46                                           ;column
  2110 000002B3 B50D                                            mov     ch,13                                           ;row
  2111 000002B5 E8CB070000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2112                                  ;
  2113                                  ;       Display the CS register lable and value
  2114                                  ;
  2115 000002BA B12A                                            mov     cl,42                                           ;column
  2116 000002BC B50E                                            mov     ch,14                                           ;row
  2117 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2118 000002C3 E873090000                                      call    SetConsoleString                                ;draw label
  2119 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2120 000002CA 668B4534                                        mov     ax,[ebp+52]                                     ;CS
  2121 000002CE B12E                                            mov     cl,46                                           ;column
  2122 000002D0 B50E                                            mov     ch,14                                           ;row
  2123 000002D2 E8AE070000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2124                                  ;
  2125                                  ;       Display the EFLAGS register label and value
  2126                                  ;
  2127 000002D7 B133                                            mov     cl,51                                           ;column
  2128 000002D9 B50B                                            mov     ch,11                                           ;row
  2129 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2130 000002E0 E856090000                                      call    SetConsoleString                                ;draw label
  2131 000002E5 8B4538                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2132 000002E8 B137                                            mov     cl,55                                           ;column
  2133 000002EA B50B                                            mov     ch,11                                           ;row
  2134 000002EC E884070000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2135                                  ;
  2136                                  ;       Display the ESP register label and value
  2137                                  ;
  2138 000002F1 B133                                            mov     cl,51                                           ;column
  2139 000002F3 B50D                                            mov     ch,13                                           ;row
  2140 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2141 000002FA E83C090000                                      call    SetConsoleString                                ;draw label
  2142 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2143 00000302 B137                                            mov     cl,55                                           ;column
  2144 00000304 B50D                                            mov     ch,13                                           ;row
  2145 00000306 E86A070000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2146                                  ;
  2147                                  ;       Display the EIP register label and value
  2148                                  ;
  2149 0000030B B133                                            mov     cl,51                                           ;column
  2150 0000030D B50E                                            mov     ch,14                                           ;row
  2151 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2152 00000314 E822090000                                      call    SetConsoleString                                ;draw label
  2153 00000319 8B4530                                          mov     eax,[ebp+48]                                    ;EIP lo-order 32-bits
  2154 0000031C B137                                            mov     cl,55                                           ;column
  2155 0000031E B50E                                            mov     ch,14                                           ;row
  2156 00000320 E850070000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2157                                  ;
  2158                                  ;       Halt and loop until reset
  2159                                  ;
  2160 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2161 00000326 F4                                              hlt                                                     ;halt processor
  2162 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2163                                  ;-----------------------------------------------------------------------------------------------------------------------
  2164                                  ;
  2165                                  ;       Processor Interrupt Name Strings
  2166                                  ;
  2167                                  ;-----------------------------------------------------------------------------------------------------------------------
  2168 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2168 00000332 6279207A65726F00   
  2169 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2169 00000343 657000             
  2170 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2170 0000034F 626C6520696E746572-
  2170 00000358 7275707400         
  2171 0000035D 427265616B00            czIntBreak              db      "Break",0
  2172 00000363 496E746F00              czIntInto               db      "Into",0
  2173 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2174 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2174 00000378 74696F6E20436F6465-
  2174 00000381 00                 
  2175 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2175 0000038B 6573736F7200       
  2176 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2176 0000039A 756C7400           
  2177 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2178 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2178 000003AF 537461746520536567-
  2178 000003B8 6D656E7400         
  2179 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2179 000003C6 6E7400             
  2180 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2180 000003D2 697400             
  2181 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2181 000003DE 726F74656374696F6E-
  2181 000003E7 204661756C7400     
  2182 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2182 000003F7 6F722043616C63756C-
  2182 00000400 6174696F6E00       
  2183 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2184                                  ;-----------------------------------------------------------------------------------------------------------------------
  2185                                  ;
  2186                                  ;       Processor Interrupt Handling Strings
  2187                                  ;
  2188                                  ;-----------------------------------------------------------------------------------------------------------------------
  2189 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2189 00000418 6C65642070726F6365-
  2189 00000421 73736F7220696E7465-
  2189 0000042A 727275707420686173-
  2189 00000433 206F63637572726564-
  2189 0000043C 3A00               
  2190 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2190 00000447 202300             
  2191 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2191 00000453 206174207468652074-
  2191 0000045C 696D65206F66207468-
  2191 00000465 6520696E7465727275-
  2191 0000046E 70743A00           
  2192 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2193 00000477 4543583A00              czIntECX                db      "ECX:",0
  2194 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2195 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2196 00000486 4553493A00              czIntESI                db      "ESI:",0
  2197 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2198 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2199 00000495 4553503A00              czIntESP                db      "ESP:",0
  2200 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2201 0000049F 2045533A00              czIntES                 db      " ES:",0
  2202 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2203 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2204 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2205 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2206                                  ;-----------------------------------------------------------------------------------------------------------------------
  2207                                  ;
  2208                                  ;       Routine:        DrawTextDialogBox
  2209                                  ;
  2210                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2211                                  ;
  2212                                  ;       In:             CL      upper left column (0-79)
  2213                                  ;                       CH      upper left row (0-24)
  2214                                  ;                       DL      column width, excluding border
  2215                                  ;                       DH      row height, excluding border
  2216                                  ;                       BH      color attribute
  2217                                  ;
  2218                                  ;-----------------------------------------------------------------------------------------------------------------------
  2219 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2220 000004B9 56                                              push    esi                                             ;
  2221 000004BA 57                                              push    edi                                             ;
  2222 000004BB 06                                              push    es                                              ;
  2223 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2224 000004BE 07                                              pop     es                                              ;... into ES
  2225                                  ;
  2226                                  ;       Compute target display offset
  2227                                  ;
  2228 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2229 000004C1 88E8                                            mov     al,ch                                           ;row
  2230 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2231 000004C5 F6E4                                            mul     ah                                              ;row offset
  2232 000004C7 00C8                                            add     al,cl                                           ;add column
  2233 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2234 000004CC 00C8                                            add     al,cl                                           ;add column
  2235 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2236 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2237                                  ;
  2238                                  ;       Display top border row
  2239                                  ;
  2240 000004D3 57                                              push    edi                                             ;save target row offset
  2241 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2242 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2243 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2244 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2245 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2246 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2247 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2248 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2249 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2250 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2251 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2252                                  ;
  2253                                  ;       Display dialog box body rows
  2254                                  ;
  2255 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2256 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2257 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2258 000004F3 57                                              push    edi                                             ;save target row offset
  2259 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2260 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2261 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2262 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2263 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2264 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2265 00000500 F366AB                                          rep     stosw                                           ;display row
  2266 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2267 00000505 66AB                                            stosw                                                   ;display character and attribute
  2268 00000507 5F                                              pop     edi                                             ;restore target row offset
  2269 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2270 0000050E 59                                              pop     ecx                                             ;remaining rows
  2271 0000050F E2E1                                            loop    .10                                             ;next row
  2272                                  ;
  2273                                  ;       Display bottom border row
  2274                                  ;
  2275 00000511 57                                              push    edi                                             ;save target row offset
  2276 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2277 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2278 00000516 66AB                                            stosw                                                   ;display character and attribute
  2279 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2280 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2281 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2282 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2283 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2284 00000523 66AB                                            stosw                                                   ;display character and attribute
  2285 00000525 5F                                              pop     edi                                             ;restore target row offset
  2286 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2287                                  ;
  2288                                  ;       Restore and return
  2289                                  ;
  2290 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2291 0000052D 5F                                              pop     edi                                             ;
  2292 0000052E 5E                                              pop     esi                                             ;
  2293 0000052F 59                                              pop     ecx                                             ;
  2294 00000530 C3                                              ret                                                     ;return
  2295                                  ;=======================================================================================================================
  2296                                  ;
  2297                                  ;       Hardware Device Interupts
  2298                                  ;
  2299                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2300                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2301                                  ;       (BX=2028h).
  2302                                  ;
  2303                                  ;=======================================================================================================================
  2304                                  ;-----------------------------------------------------------------------------------------------------------------------
  2305                                  ;
  2306                                  ;       IRQ0    Clock Tick Interrupt
  2307                                  ;
  2308                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2309                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2310                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2311                                  ;
  2312                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2313                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2314                                  ;
  2315                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2316                                  ;       zero, the floppy disk motors are turned off.
  2317                                  ;
  2318                                  ;-----------------------------------------------------------------------------------------------------------------------
  2319                                                          menter  clocktick                                       ;clock tick interrupt
  2319                              <1> ?%1 equ ($-$$)
  2320 00000531 50                                              push    eax                                             ;save non-volatile regs
  2321 00000532 52                                              push    edx                                             ;
  2322 00000533 1E                                              push    ds                                              ;
  2323                                  ;
  2324                                  ;       End the interrupt.
  2325                                  ;
  2326 00000534 E83C070000                                      call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2327                                  ;
  2328                                  ;       Update the clock tick count and the elapsed days as needed.
  2329                                  ;
  2330 00000539 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2331 0000053B 1F                                              pop     ds                                              ;... into data segment register
  2332 0000053C A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2333 00000541 40                                              inc     eax                                             ;increment clock ticks
  2334 00000542 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2335 00000547 7208                                            jb      irq0.10                                         ;no, skip ahead
  2336 00000549 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2337 0000054F 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2338 00000551 A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2339                                  ;
  2340                                  ;       Decrement floppy disk motor timeout.
  2341                                  ;
  2342 00000556 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2343 0000055D 741E                                            je      irq0.20                                         ;yes, skip ahead
  2344 0000055F FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2345 00000565 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2346                                  ;
  2347                                  ;       Turn off the floppy disk motor if appropriate.
  2348                                  ;
  2349 00000567 FB                                              sti                                                     ;enable maskable interrupts
  2350 00000568 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2351 0000056A B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2352 0000056C EC                                              in      al,dx                                           ;FDC main status byte
  2353 0000056D A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2354 0000056F 75F7                                            jnz     irq0.15                                         ;wait while busy
  2355 00000571 B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2356 00000573 A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2357 00000578 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2358 0000057A B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2359 0000057C EE                                              out     dx,al                                           ;turn motor off
  2360                                  ;
  2361                                  ;       Enable maskable interrupts.
  2362                                  ;
  2363 0000057D FB                      irq0.20                 sti                                                     ;enable maskable interrupts
  2364                                  ;
  2365                                  ;       Restore and return.
  2366                                  ;
  2367 0000057E 1F                                              pop     ds                                              ;restore modified regs
  2368 0000057F 5A                                              pop     edx                                             ;
  2369 00000580 58                                              pop     eax                                             ;
  2370 00000581 CF                                              iretd                                                   ;return
  2371                                  ;-----------------------------------------------------------------------------------------------------------------------
  2372                                  ;
  2373                                  ;       IRQ1    Keyboard Interrupt
  2374                                  ;
  2375                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2376                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2377                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2378                                  ;       ALL modified registers upon return.
  2379                                  ;
  2380                                  ;-----------------------------------------------------------------------------------------------------------------------
  2381                                                          menter  keyboard                                        ;keyboard interrrupt
  2381                              <1> ?%1 equ ($-$$)
  2382 00000582 50                                              push    eax                                             ;save non-volatile regs
  2383 00000583 53                                              push    ebx                                             ;
  2384 00000584 51                                              push    ecx                                             ;
  2385 00000585 56                                              push    esi                                             ;
  2386 00000586 1E                                              push    ds                                              ;
  2387                                  ;
  2388                                  ;       End the interrupt.
  2389                                  ;
  2390 00000587 E8E9060000                                      call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2391                                  ;
  2392                                  ;       Handle keyboard scan-codes.
  2393                                  ;
  2394 0000058C 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2395 0000058E 1F                                              pop     ds                                              ;... into data segment register
  2396 0000058F 30C0                                            xor     al,al                                           ;zero
  2397 00000591 A2050E0000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2398 00000596 A2060E0000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2399 0000059B A2070E0000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2400 000005A0 A2080E0000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2401 000005A5 A2090E0000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2402 000005AA A20A0E0000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2403 000005AF B020                                            mov     al,' '                                          ;space
  2404 000005B1 A20B0E0000                                      mov     [wbConsoleChar],al                              ;set character to space
  2405 000005B6 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2406 000005B8 F6D0                                            not     al                                              ;controller timeout mask
  2407 000005BA 2005040E0000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2408 000005C0 8A1D020E0000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2409 000005C6 8A3D030E0000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2410 000005CC E8EC060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2411 000005D1 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2412 000005D7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2413 000005D9 A2050E0000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2414 000005DE 88C4                                            mov     ah,al                                           ;copy scan code 0
  2415 000005E0 B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2416 000005E2 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2417 000005E5 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2418 000005EB 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2419 000005EE 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2420 000005F4 B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2421 000005F6 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2422 000005F9 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2423 000005FF 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2424 00000602 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2425 00000608 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2426 0000060A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2427 0000060D 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2428 00000613 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2429 00000616 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2430 0000061C B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2431 0000061E 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2432 00000621 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2433 00000627 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2434 0000062A 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2435 00000630 B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2436 00000632 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2437 00000635 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2438 0000063B B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2439 0000063D 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2440 00000640 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2441 00000646 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2442 00000648 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2443 0000064B 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2444 00000651 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2445 00000654 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2446 0000065A E85E060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2447 0000065F 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2448 00000665 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2449 00000667 A2060E0000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2450 0000066C 88C4                                            mov     ah,al                                           ;copy scan code 1
  2451 0000066E B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2452 00000670 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2453 00000673 7456                                            je      irq1.30                                         ;yes, set flag
  2454 00000675 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2455 00000678 7455                                            je      irq1.40                                         ;yes, reset flag
  2456 0000067A B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2457 0000067C 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2458 0000067F 744A                                            je      irq1.30                                         ;yes, set flag
  2459 00000681 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2460 00000684 7449                                            je      irq1.40                                         ;yes, reset flag
  2461 00000686 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2462 00000689 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2463 0000068F 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2464 00000692 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2465 00000698 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2466 0000069B 7405                                            je      irq1.10                                         ;yes, continue
  2467 0000069D 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2468 000006A0 7524                                            jne     irq1.20                                         ;no, skip ahead
  2469 000006A2 E816060000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2470 000006A7 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2471 000006AD E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2472 000006AF A2070E0000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2473 000006B4 E804060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2474 000006B9 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2475 000006BF E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2476 000006C1 A2080E0000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2477 000006C6 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2478 000006CB 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2479 000006CD EB0D                                            jmp     irq1.60                                         ;skip ahead
  2480 000006CF F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2481 000006D1 20C3                                            and     bl,al                                           ;reset shift flag
  2482 000006D3 EB07                                            jmp     irq1.60                                         ;skip ahead
  2483 000006D5 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2484 000006D7 E8B2050000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2485 000006DC 881D020E0000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2486 000006E2 883D030E0000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2487 000006E8 E800040000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2488 000006ED E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2489 000006F2 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2490 000006F5 7563                                            jne     irq1.80                                         ;no continue
  2491 000006F7 E8C1050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2492 000006FC 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2493 00000702 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2494 00000704 A2060E0000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2495 00000709 88C4                                            mov     ah,al                                           ;copy scan code 1
  2496 0000070B 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2497 0000070E 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2498 00000714 E8A4050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2499 00000719 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2500 0000071F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2501 00000721 A2070E0000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2502 00000726 E892050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2503 0000072B 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2504 00000731 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2505 00000733 A2080E0000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2506 00000738 E880050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2507 0000073D 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2508 00000743 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2509 00000745 A2090E0000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2510 0000074A E86E050000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2511 0000074F 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2512 00000751 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2513 00000753 A20A0E0000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2514 00000758 EB78                                            jmp     irq1.150                                        ;continue
  2515 0000075A 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2516 0000075C F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2517 0000075F 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2518 00000761 BE[DE070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2519 00000766 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2520 00000769 7405                                            jz      irq1.90                                         ;no, skip ahead
  2521 0000076B BE[5E080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2522 00000770 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2523 00000773 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2524 00000777 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2525 0000077A 7411                                            jz      irq1.100                                        ;no skip ahead
  2526 0000077C 88C1                                            mov     cl,al                                           ;copy ASCII code
  2527 0000077E 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2528 00000781 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2529 00000784 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2530 00000786 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2531 00000789 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2532 0000078B 3420                                            xor     al,EASCIICASE                                   ;switch case
  2533 0000078D A20B0E0000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2534 00000792 BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2535 00000797 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2536 0000079A 7405                                            jz      irq1.120                                        ;no, skip ahead
  2537 0000079C BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2538 000007A1 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2539 000007A6 09C2                                            or      edx,eax                                         ;msg id and codes
  2540 000007A8 31C9                                            xor     ecx,ecx                                         ;null param
  2541 000007AA 50                                              push    eax                                             ;save codes
  2542 000007AB E84D040000                                      call    PutMessage                                      ;put message to console
  2543 000007B0 58                                              pop     eax                                             ;restore codes
  2544 000007B1 84C0                                            test    al,al                                           ;ASCII translation?
  2545 000007B3 7413                                            jz      irq1.130                                        ;no, skip ahead
  2546 000007B5 BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2547 000007BA 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2548 000007BF 09C2                                            or      edx,eax                                         ;msg id and codes
  2549 000007C1 31C9                                            xor     ecx,ecx                                         ;null param
  2550 000007C3 E835040000                                      call    PutMessage                                      ;put message to console
  2551 000007C8 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2552 000007CA B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2553 000007CC 0805040E0000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2554 000007D2 E8BE020000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2555                                  ;
  2556                                  ;       Enable maskable interrupts.
  2557                                  ;
  2558 000007D7 FB                                              sti                                                     ;enable maskable interrupts
  2559                                  ;
  2560                                  ;       Restore and return.
  2561                                  ;
  2562 000007D8 1F                                              pop     ds                                              ;restore non-volatile regs
  2563 000007D9 5E                                              pop     esi                                             ;
  2564 000007DA 59                                              pop     ecx                                             ;
  2565 000007DB 5B                                              pop     ebx                                             ;
  2566 000007DC 58                                              pop     eax                                             ;
  2567 000007DD CF                                              iretd                                                   ;return
  2568                                  ;-----------------------------------------------------------------------------------------------------------------------
  2569                                  ;       Scan-Code to ASCII Translation Tables
  2570                                  ;-----------------------------------------------------------------------------------------------------------------------
  2571 000007DE 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2572 000007E6 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2573 000007EE 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2574 000007F6 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2575 000007FE 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2576 00000806 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2577 0000080E 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2578 00000816 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2579 0000081E 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2580 00000826 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2581 0000082E 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2582 00000836 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2583 0000083E 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2584 00000846 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2585 0000084E 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2586 00000856 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2587 0000085E 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2588 00000866 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2589 0000086E 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2590 00000876 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2591 0000087E 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2592 00000886 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2593 0000088E 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2594 00000896 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2595 0000089E 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2596 000008A6 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2597 000008AE 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2598 000008B6 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2599 000008BE 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2600 000008C6 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2601 000008CE 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2602 000008D6 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2603                                  ;-----------------------------------------------------------------------------------------------------------------------
  2604                                  ;
  2605                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2606                                  ;
  2607                                  ;-----------------------------------------------------------------------------------------------------------------------
  2608                                                          menter  iochannel                                       ;secondary 8259A cascade
  2608                              <1> ?%1 equ ($-$$)
  2609 000008DE 50                                              push    eax                                             ;save modified regs
  2610 000008DF EB45                                            jmp     hwint                                           ;end interrupt and return
  2611                                  ;-----------------------------------------------------------------------------------------------------------------------
  2612                                  ;
  2613                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2614                                  ;
  2615                                  ;-----------------------------------------------------------------------------------------------------------------------
  2616                                                          menter  com2                                            ;serial port 2 interrupt
  2616                              <1> ?%1 equ ($-$$)
  2617 000008E1 50                                              push    eax                                             ;save modified regs
  2618 000008E2 EB42                                            jmp     hwint                                           ;end interrupt and return
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  ;
  2621                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2622                                  ;
  2623                                  ;-----------------------------------------------------------------------------------------------------------------------
  2624                                                          menter  com1                                            ;serial port 1 interrupt
  2624                              <1> ?%1 equ ($-$$)
  2625 000008E4 50                                              push    eax                                             ;save modified regs
  2626 000008E5 EB3F                                            jmp     hwint                                           ;end interrupt and return
  2627                                  ;-----------------------------------------------------------------------------------------------------------------------
  2628                                  ;
  2629                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2630                                  ;
  2631                                  ;-----------------------------------------------------------------------------------------------------------------------
  2632                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2632                              <1> ?%1 equ ($-$$)
  2633 000008E7 50                                              push    eax                                             ;save modified regs
  2634 000008E8 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2635                                  ;-----------------------------------------------------------------------------------------------------------------------
  2636                                  ;
  2637                                  ;       IRQ6    Diskette Hardware Interrupt
  2638                                  ;
  2639                                  ;-----------------------------------------------------------------------------------------------------------------------
  2640                                                          menter  diskette                                        ;floppy disk interrupt
  2640                              <1> ?%1 equ ($-$$)
  2641 000008EA 50                                              push    eax                                             ;save non-volatile regs
  2642 000008EB 1E                                              push    ds                                              ;
  2643 000008EC E884030000                                      call    PutPrimaryEndOfInt                              ;end the interrupt
  2644 000008F1 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2645 000008F3 1F                                              pop     ds                                              ;... into DS register
  2646 000008F4 A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2647 000008F9 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2648 000008FB A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2649 00000900 FB                                              sti                                                     ;enable maskable interrupts
  2650 00000901 1F                                              pop     ds                                              ;restore non-volatile regs
  2651 00000902 58                                              pop     eax                                             ;
  2652 00000903 CF                                              iretd                                                   ;return from interrupt
  2653                                  ;-----------------------------------------------------------------------------------------------------------------------
  2654                                  ;
  2655                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2656                                  ;
  2657                                  ;-----------------------------------------------------------------------------------------------------------------------
  2658                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2658                              <1> ?%1 equ ($-$$)
  2659 00000904 50                                              push    eax                                             ;save modified regs
  2660 00000905 EB1F                                            jmp     hwint                                           ;end interrupt and return
  2661                                  ;-----------------------------------------------------------------------------------------------------------------------
  2662                                  ;
  2663                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2664                                  ;
  2665                                  ;-----------------------------------------------------------------------------------------------------------------------
  2666                                                          menter  rtclock                                         ;real-time clock interrupt
  2666                              <1> ?%1 equ ($-$$)
  2667 00000907 50                                              push    eax                                             ;save modified regs
  2668 00000908 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2669                                  ;-----------------------------------------------------------------------------------------------------------------------
  2670                                  ;
  2671                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2672                                  ;
  2673                                  ;-----------------------------------------------------------------------------------------------------------------------
  2674                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2674                              <1> ?%1 equ ($-$$)
  2675 0000090A 50                                              push    eax                                             ;save modified regs
  2676 0000090B EB12                                            jmp     hwwint                                          ;end interrupt and return
  2677                                  ;-----------------------------------------------------------------------------------------------------------------------
  2678                                  ;
  2679                                  ;       IRQ10   Reserved Hardware Interrupt
  2680                                  ;
  2681                                  ;-----------------------------------------------------------------------------------------------------------------------
  2682                                                          menter  irq10                                           ;reserved
  2682                              <1> ?%1 equ ($-$$)
  2683 0000090D 50                                              push    eax                                             ;save modified regs
  2684 0000090E EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2685                                  ;-----------------------------------------------------------------------------------------------------------------------
  2686                                  ;
  2687                                  ;       IRQ11   Reserved Hardware Interrupt
  2688                                  ;
  2689                                  ;-----------------------------------------------------------------------------------------------------------------------
  2690                                                          menter  irq11                                           ;reserved
  2690                              <1> ?%1 equ ($-$$)
  2691 00000910 50                                              push    eax                                             ;save modified regs
  2692 00000911 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2693                                  ;-----------------------------------------------------------------------------------------------------------------------
  2694                                  ;
  2695                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2696                                  ;
  2697                                  ;-----------------------------------------------------------------------------------------------------------------------
  2698                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2698                              <1> ?%1 equ ($-$$)
  2699 00000913 50                                              push    eax                                             ;save modified regs
  2700 00000914 EB09                                            jmp     hwwint                                          ;end interrupt and return
  2701                                  ;-----------------------------------------------------------------------------------------------------------------------
  2702                                  ;
  2703                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2704                                  ;
  2705                                  ;-----------------------------------------------------------------------------------------------------------------------
  2706                                                          menter  coprocessor                                     ;coprocessor interrupt
  2706                              <1> ?%1 equ ($-$$)
  2707 00000916 50                                              push    eax                                             ;save modified regs
  2708 00000917 EB06                                            jmp     hwwint                                          ;end interrupt and return
  2709                                  ;-----------------------------------------------------------------------------------------------------------------------
  2710                                  ;
  2711                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2712                                  ;
  2713                                  ;-----------------------------------------------------------------------------------------------------------------------
  2714                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2714                              <1> ?%1 equ ($-$$)
  2715 00000919 50                                              push    eax                                             ;save modified regs
  2716 0000091A EB03                                            jmp     hwwint                                          ;end interrupt and return
  2717                                  ;-----------------------------------------------------------------------------------------------------------------------
  2718                                  ;
  2719                                  ;       IRQ15   Reserved Hardware Interrupt
  2720                                  ;
  2721                                  ;-----------------------------------------------------------------------------------------------------------------------
  2722                                                          menter  irq15                                           ;reserved
  2722                              <1> ?%1 equ ($-$$)
  2723 0000091C 50                                              push    eax                                             ;save modified regs
  2724 0000091D EB00                                            jmp     hwwint                                          ;end interrupt and return
  2725                                  ;-----------------------------------------------------------------------------------------------------------------------
  2726                                  ;
  2727                                  ;       Exit from hardware interrupt
  2728                                  ;
  2729                                  ;-----------------------------------------------------------------------------------------------------------------------
  2730 0000091F E856030000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2731 00000924 EB05                                            jmp     hwint90                                         ;skip ahead
  2732 00000926 E84A030000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2733 0000092B FB                      hwint90                 sti                                                     ;enable maskable interrupts
  2734 0000092C 58                                              pop     eax                                             ;restore modified regs
  2735 0000092D CF                                              iretd                                                   ;return from interrupt
  2736                                  ;-----------------------------------------------------------------------------------------------------------------------
  2737                                  ;
  2738                                  ;       INT 30h Operating System Software Service Interrupt
  2739                                  ;
  2740                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2741                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2742                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2743                                  ;       the entry address of the specific function from a table.
  2744                                  ;
  2745                                  ;-----------------------------------------------------------------------------------------------------------------------
  2746                                                          menter  svc
  2746                              <1> ?%1 equ ($-$$)
  2747 0000092E 3C07                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2748 00000930 730D                                            jae     svc90                                           ;yes, skip ahead
  2749 00000932 0FB6C0                                          movzx   eax,al                                          ;function
  2750 00000935 C1E002                                          shl     eax,2                                           ;offset into table
  2751 00000938 2EFF90[40090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2752 0000093F CF                      svc90                   iretd                                                   ;return from interrupt
  2753                                  ;-----------------------------------------------------------------------------------------------------------------------
  2754                                  ;
  2755                                  ;       Service Request Table
  2756                                  ;
  2757                                  ;
  2758                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2759                                  ;
  2760                                  ;-----------------------------------------------------------------------------------------------------------------------
  2761                                  tsvc                    tsvce   CompareMemory                                   ;compare memory
  2761                              <1> tsvc :
  2761                              <1> e%1 equ ($-tsvc)/4
  2761 00000940 [5C090000]          <1>  dd %1
  2762                                                          tsvce   GetConsoleString                                ;get string input
  2762                              <1> e%1 equ ($-tsvc)/4
  2762 00000944 [B5090000]          <1>  dd %1
  2763                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2763                              <1> e%1 equ ($-tsvc)/4
  2763 00000948 [8A0B0000]          <1>  dd %1
  2764                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2764                              <1> e%1 equ ($-tsvc)/4
  2764 0000094C [4B0C0000]          <1>  dd %1
  2765                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2765                              <1> e%1 equ ($-tsvc)/4
  2765 00000950 [7F0C0000]          <1>  dd %1
  2766                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2766                              <1> e%1 equ ($-tsvc)/4
  2766 00000954 [A80B0000]          <1>  dd %1
  2767                                                          tsvce   UpperCaseString                                 ;upper-case string
  2767                              <1> e%1 equ ($-tsvc)/4
  2767 00000958 [79090000]          <1>  dd %1
  2768                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2769                                  ;-----------------------------------------------------------------------------------------------------------------------
  2770                                  ;
  2771                                  ;       Service Request Macros
  2772                                  ;
  2773                                  ;       These macros provide positional parameterization of service request calls.
  2774                                  ;
  2775                                  ;-----------------------------------------------------------------------------------------------------------------------
  2776                                  %macro                  compareMemory 0
  2777                                                          mov     al,eCompareMemory                               ;function code
  2778                                                          int     _svc                                            ;invoke OS service
  2779                                  %endmacro
  2780                                  %macro                  getConsoleString 0
  2781                                                          mov     al,eGetConsoleString                            ;function code
  2782                                                          int     _svc                                            ;invoke OS service
  2783                                  %endmacro
  2784                                  %macro                  hexadecimalToUnsigned 0
  2785                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2786                                                          int     _svc                                            ;invoke OS service
  2787                                  %endmacro
  2788                                  %macro                  placeCursor 0
  2789                                                          mov     al,ePlaceCursor                                 ;function code
  2790                                                          int     _svc                                            ;invoke OS service
  2791                                  %endmacro
  2792                                  %macro                  resetSystem 0
  2793                                                          mov     al,eResetSystem                                 ;function code
  2794                                                          int     _svc                                            ;invoke OS service
  2795                                  %endmacro
  2796                                  %macro                  unsignedToHexadecimal 0
  2797                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2798                                                          int     _svc                                            ;invoke OS service
  2799                                  %endmacro
  2800                                  %macro                  upperCaseString 0
  2801                                                          mov     al,eUpperCaseString                             ;function code
  2802                                                          int     _svc                                            ;invoke OS service
  2803                                  %endmacro
  2804                                  ;=======================================================================================================================
  2805                                  ;
  2806                                  ;       Kernel Function Library
  2807                                  ;
  2808                                  ;=======================================================================================================================
  2809                                  ;=======================================================================================================================
  2810                                  ;
  2811                                  ;       String Helper Routines
  2812                                  ;
  2813                                  ;       CompareMemory
  2814                                  ;       UpperCaseString
  2815                                  ;
  2816                                  ;=======================================================================================================================
  2817                                  ;-----------------------------------------------------------------------------------------------------------------------
  2818                                  ;
  2819                                  ;       Routine:        CompareMemory
  2820                                  ;
  2821                                  ;       Description:    This routine compares two byte arrays.
  2822                                  ;
  2823                                  ;       In:             DS:EDX  first source address
  2824                                  ;                       DS:EBX  second source address
  2825                                  ;                       ECX     comparison length
  2826                                  ;
  2827                                  ;       Out:            EDX     first source address
  2828                                  ;                       EBX     second source address
  2829                                  ;                       ECX     0       array 1 = array 2
  2830                                  ;                               <0      array 1 < array 2
  2831                                  ;                               >0      array 1 > array 2
  2832                                  ;
  2833                                  ;-----------------------------------------------------------------------------------------------------------------------
  2834 0000095C 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  2835 0000095D 57                                              push    edi                                             ;
  2836 0000095E 06                                              push    es                                              ;
  2837 0000095F 1E                                              push    ds                                              ;copy DS
  2838 00000960 07                                              pop     es                                              ;... to ES
  2839 00000961 89D6                                            mov     esi,edx                                         ;first source address
  2840 00000963 89DF                                            mov     edi,ebx                                         ;second source address
  2841 00000965 FC                                              cld                                                     ;forward strings
  2842 00000966 F3A6                                            rep     cmpsb                                           ;compare bytes
  2843 00000968 B000                                            mov     al,0                                            ;default result
  2844 0000096A 7406                                            jz      .10                                             ;branch if arrays equal
  2845 0000096C B001                                            mov     al,1                                            ;positive result
  2846 0000096E 7302                                            jnc     .10                                             ;branch if target > source
  2847 00000970 B0FF                                            mov     al,-1                                           ;negative result
  2848 00000972 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  2849 00000975 07                                              pop     es                                              ;restore non-volatile regs
  2850 00000976 5F                                              pop     edi                                             ;
  2851 00000977 5E                                              pop     esi                                             ;
  2852 00000978 C3                                              ret                                                     ;return
  2853                                  ;-----------------------------------------------------------------------------------------------------------------------
  2854                                  ;
  2855                                  ;       Routine:        UpperCaseString
  2856                                  ;
  2857                                  ;       Description:    This routine places all characters in the given string to upper case.
  2858                                  ;
  2859                                  ;       In:             DS:EDX  string address
  2860                                  ;
  2861                                  ;       Out:            EDX     string address
  2862                                  ;
  2863                                  ;-----------------------------------------------------------------------------------------------------------------------
  2864 00000979 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  2865 0000097A 89D6                                            mov     esi,edx                                         ;string address
  2866 0000097C FC                                              cld                                                     ;forward strings
  2867 0000097D AC                      .10                     lodsb                                                   ;string character
  2868 0000097E 84C0                                            test    al,al                                           ;null?
  2869 00000980 740F                                            jz      .20                                             ;yes, skip ahead
  2870 00000982 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2871 00000984 72F7                                            jb      .10                                             ;no, continue
  2872 00000986 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2873 00000988 77F3                                            ja      .10                                             ;no, continue
  2874 0000098A 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  2875 0000098C 8846FF                                          mov     [esi-1],al                                      ;upper character
  2876 0000098F EBEC                                            jmp     .10                                             ;continue
  2877 00000991 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  2878 00000992 C3                                              ret                                                     ;return
  2879                                  ;=======================================================================================================================
  2880                                  ;
  2881                                  ;       Console Helper Routines
  2882                                  ;
  2883                                  ;       GetConsoleChar
  2884                                  ;       GetConsoleString
  2885                                  ;       NextConsoleColumn
  2886                                  ;       PreviousConsoleColumn
  2887                                  ;       PutConsoleChar
  2888                                  ;       PutConsoleHexByte
  2889                                  ;       PutConsoleHexDword
  2890                                  ;       PutConsoleHexWord
  2891                                  ;       PutConsoleOIAChar
  2892                                  ;       PutConsoleOIAShift
  2893                                  ;       Yield
  2894                                  ;
  2895                                  ;=======================================================================================================================
  2896                                  ;-----------------------------------------------------------------------------------------------------------------------
  2897                                  ;
  2898                                  ;       Routine:        GetConsoleChar
  2899                                  ;
  2900                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2901                                  ;
  2902                                  ;       Out:            AL      ASCII character code
  2903                                  ;                       AH      keyboard scan code
  2904                                  ;
  2905                                  ;-----------------------------------------------------------------------------------------------------------------------
  2906 00000993 E8EF010000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2907 00000998 E82B020000              GetConsoleChar          call    GetMessage                                      ;get the next message
  2908 0000099D 09C0                                            or      eax,eax                                         ;do we have a message?
  2909 0000099F 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  2910 000009A1 50                                              push    eax                                             ;save key codes
  2911 000009A2 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  2912 000009A7 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2913 000009AC 58                                              pop     eax                                             ;restore key codes
  2914 000009AD 75E9                                            jne     GetConsoleChar                                  ;no, try again
  2915 000009AF 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  2916 000009B4 C3                                              ret                                                     ;return
  2917                                  ;-----------------------------------------------------------------------------------------------------------------------
  2918                                  ;
  2919                                  ;       Routine:        GetConsoleString
  2920                                  ;
  2921                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2922                                  ;
  2923                                  ;       In:             DS:EDX  target buffer address
  2924                                  ;                       ECX     maximum number of characters to accept
  2925                                  ;                       BH      echo to terminal
  2926                                  ;                       BL      terminating character
  2927                                  ;
  2928                                  ;-----------------------------------------------------------------------------------------------------------------------
  2929 000009B5 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  2930 000009B6 56                                              push    esi                                             ;
  2931 000009B7 57                                              push    edi                                             ;
  2932 000009B8 06                                              push    es                                              ;
  2933 000009B9 1E                                              push    ds                                              ;load data segment selector ...
  2934 000009BA 07                                              pop     es                                              ;... into extra segment register
  2935 000009BB 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2936 000009BD 51                                              push    ecx                                             ;save maximum characters
  2937 000009BE 30C0                                            xor     al,al                                           ;zero register
  2938 000009C0 FC                                              cld                                                     ;forward strings
  2939 000009C1 F3AA                                            rep     stosb                                           ;zero fill buffer
  2940 000009C3 59                                              pop     ecx                                             ;maximum characters
  2941 000009C4 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2942 000009C6 89D6                                            mov     esi,edx                                         ;esi = target buffer
  2943 000009C8 E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  2944 000009CA E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  2945 000009CF 38D8                                            cmp     al,bl                                           ;is this the terminator?
  2946 000009D1 7445                                            je      .50                                             ;yes, exit
  2947 000009D3 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2948 000009D5 7521                                            jne     .30                                             ;no, skip ahead
  2949 000009D7 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  2950 000009D9 74EF                                            je      .20                                             ;yes, get next character
  2951 000009DB 4F                                              dec     edi                                             ;backup target pointer
  2952 000009DC C60700                                          mov     byte [edi],0                                    ;zero previous character
  2953 000009DF 41                                              inc     ecx                                             ;increment remaining chars
  2954 000009E0 F6C701                                          test    bh,1                                            ;echo to console?
  2955 000009E3 74E5                                            jz      .20                                             ;no, get next character
  2956 000009E5 E847000000                                      call    PreviousConsoleColumn                           ;backup console position
  2957 000009EA B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2958 000009EC E851000000                                      call    PutConsoleChar                                  ;write space to console
  2959 000009F1 E855020000                                      call    PlaceCursor                                     ;position the cursor
  2960 000009F6 EBD2                                            jmp     .20                                             ;get next character
  2961 000009F8 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2962 000009FA 72CE                                            jb      .20                                             ;no, get another character
  2963 000009FC 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2964 000009FE 77CA                                            ja      .20                                             ;no, get another character
  2965 00000A00 AA                                              stosb                                                   ;store character in buffer
  2966 00000A01 F6C701                                          test    bh,1                                            ;echo to console?
  2967 00000A04 740F                                            jz      .40                                             ;no, skip ahead
  2968 00000A06 E837000000                                      call    PutConsoleChar                                  ;write character to console
  2969 00000A0B E810000000                                      call    NextConsoleColumn                               ;advance console position
  2970 00000A10 E836020000                                      call    PlaceCursor                                     ;position the cursor
  2971 00000A15 49                      .40                     dec     ecx                                             ;decrement remaining chars
  2972 00000A16 EBB0                                            jmp     .10                                             ;next
  2973 00000A18 30C0                    .50                     xor     al,al                                           ;null
  2974 00000A1A AA                                              stosb                                                   ;terminate buffer
  2975 00000A1B 07                                              pop     es                                              ;restore non-volatile regs
  2976 00000A1C 5F                                              pop     edi                                             ;
  2977 00000A1D 5E                                              pop     esi                                             ;
  2978 00000A1E 59                                              pop     ecx                                             ;
  2979 00000A1F C3                                              ret                                                     ;return
  2980                                  ;-----------------------------------------------------------------------------------------------------------------------
  2981                                  ;
  2982                                  ;       Routine:        NextConsoleColumn
  2983                                  ;
  2984                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2985                                  ;                       incremented if the end of the current row is reached.
  2986                                  ;
  2987                                  ;       In:             DS      OS data selector
  2988                                  ;
  2989                                  ;-----------------------------------------------------------------------------------------------------------------------
  2990 00000A20 A0000E0000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2991 00000A25 3C4F                                            cmp     al,ECONCOLS-1                                   ;end of row?
  2992 00000A27 7307                                            jnb     .10
  2993 00000A29 FEC0                                            inc     al
  2994 00000A2B A2000E0000                                      mov     [wbConsoleColumn],al
  2995 00000A30 C3                      .10                     ret                                                     ;return
  2996                                  ;-----------------------------------------------------------------------------------------------------------------------
  2997                                  ;
  2998                                  ;       Routine:        PreviousConsoleColumn
  2999                                  ;
  3000                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3001                                  ;                       the column is set to the last position in the row and the row is decremented.
  3002                                  ;
  3003                                  ;       In:             DS      OS data selector
  3004                                  ;
  3005                                  ;-----------------------------------------------------------------------------------------------------------------------
  3006 00000A31 A0000E0000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3007 00000A36 08C0                                            or      al,al                                           ;start of row?
  3008 00000A38 7407                                            jz      .10
  3009 00000A3A FEC8                                            dec     al
  3010 00000A3C A2000E0000                                      mov     [wbConsoleColumn],al
  3011 00000A41 C3                      .10                     ret                                                     ;return
  3012                                  ;-----------------------------------------------------------------------------------------------------------------------
  3013                                  ;
  3014                                  ;       Routine:        PutConsoleChar
  3015                                  ;
  3016                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3017                                  ;
  3018                                  ;       In:             AL      ASCII character
  3019                                  ;                       DS      OS data selector
  3020                                  ;
  3021                                  ;-----------------------------------------------------------------------------------------------------------------------
  3022 00000A42 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3023 00000A43 06                                              push    es                                              ;
  3024 00000A44 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3025 00000A46 07                                              pop     es                                              ;... into extra segment reg
  3026 00000A47 8A0D000E0000                                    mov     cl,[wbConsoleColumn]                            ;column
  3027 00000A4D 8A2D010E0000                                    mov     ch,[wbConsoleRow]                               ;row
  3028 00000A53 E8CD010000                                      call    SetConsoleChar                                  ;put character at row, column
  3029 00000A58 07                                              pop     es                                              ;restore non-volatile regs
  3030 00000A59 59                                              pop     ecx                                             ;
  3031 00000A5A C3                                              ret                                                     ;return
  3032                                  ;-----------------------------------------------------------------------------------------------------------------------
  3033                                  ;
  3034                                  ;       Routine:        PutConsoleHexByte
  3035                                  ;
  3036                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3037                                  ;
  3038                                  ;       In:             AL      byte value
  3039                                  ;                       CL      column
  3040                                  ;                       CH      row
  3041                                  ;                       DS      OS data selector
  3042                                  ;                       ES      CGA selector
  3043                                  ;
  3044                                  ;-----------------------------------------------------------------------------------------------------------------------
  3045 00000A5B 50                      PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  3046 00000A5C C0E804                                          shr     al,4                                            ;hi-order nybble
  3047 00000A5F E803000000                                      call    .10                                             ;make ASCII and store
  3048 00000A64 58                                              pop     eax                                             ;byte value
  3049 00000A65 240F                                            and     al,0Fh                                          ;lo-order nybble
  3050 00000A67 0C30                    .10                     or      al,030h                                         ;apply ASCII zone
  3051 00000A69 3C3A                                            cmp     al,03Ah                                         ;numeric?
  3052 00000A6B 7202                                            jb      .20                                             ;yes, skip ahead
  3053 00000A6D 0407                                            add     al,7                                            ;add ASCII offset for alpha
  3054 00000A6F E8B1010000              .20                     call    SetConsoleChar                                  ;display ASCII character
  3055 00000A74 C3                                              ret                                                     ;return
  3056                                  ;-----------------------------------------------------------------------------------------------------------------------
  3057                                  ;
  3058                                  ;       Routine:        PutConsoleHexDword
  3059                                  ;
  3060                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3061                                  ;
  3062                                  ;       In:             EAX     value
  3063                                  ;                       CL      column
  3064                                  ;                       CH      row
  3065                                  ;                       DS      OS data selector
  3066                                  ;                       ES      CGA selector
  3067                                  ;
  3068                                  ;-----------------------------------------------------------------------------------------------------------------------
  3069 00000A75 50                      PutConsoleHexDword      push    eax
  3070 00000A76 C1E810                                          shr     eax,16
  3071 00000A79 E807000000                                      call    PutConsoleHexWord
  3072 00000A7E 58                                              pop     eax
  3073 00000A7F E801000000                                      call    PutConsoleHexWord
  3074 00000A84 C3                                              ret
  3075                                  ;-----------------------------------------------------------------------------------------------------------------------
  3076                                  ;
  3077                                  ;       Routine:        PutConsoleHexWord
  3078                                  ;
  3079                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3080                                  ;
  3081                                  ;       In:             EAX     value
  3082                                  ;                       CL      column
  3083                                  ;                       CH      row
  3084                                  ;                       DS      OS data selector
  3085                                  ;                       ES      CGA selector
  3086                                  ;
  3087                                  ;-----------------------------------------------------------------------------------------------------------------------
  3088 00000A85 50                      PutConsoleHexWord       push    eax
  3089 00000A86 C1E808                                          shr     eax,8
  3090 00000A89 E8CDFFFFFF                                      call    PutConsoleHexByte
  3091 00000A8E 58                                              pop     eax
  3092 00000A8F E8C7FFFFFF                                      call    PutConsoleHexByte
  3093 00000A94 C3                                              ret
  3094                                  ;-----------------------------------------------------------------------------------------------------------------------
  3095                                  ;
  3096                                  ;       Routine:        PutConsoleOIAChar
  3097                                  ;
  3098                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3099                                  ;
  3100                                  ;       In:             DS      OS data selector
  3101                                  ;
  3102                                  ;-----------------------------------------------------------------------------------------------------------------------
  3103 00000A95 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3104 00000A96 51                                              push    ecx                                             ;
  3105 00000A97 56                                              push    esi                                             ;
  3106 00000A98 1E                                              push    ds                                              ;
  3107 00000A99 06                                              push    es                                              ;
  3108 00000A9A 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3109 00000A9C 1F                                              pop     ds                                              ;... into data segment register
  3110 00000A9D 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3111 00000A9F 07                                              pop     es                                              ;... into extra segment register
  3112 00000AA0 BE050E0000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  3113 00000AA5 B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  3114 00000AA7 B300                                            mov     bl,0                                            ;starting column
  3115 00000AA9 B906000000                                      mov     ecx,6                                           ;maximum scan codes
  3116 00000AAE 51                      .10                     push    ecx                                             ;save remaining count
  3117 00000AAF 89D9                                            mov     ecx,ebx                                         ;row, column
  3118 00000AB1 AC                                              lodsb                                                   ;read scan code
  3119 00000AB2 08C0                                            or      al,al                                           ;scan code present?
  3120 00000AB4 7407                                            jz      .20                                             ;no, skip ahead
  3121 00000AB6 E8A0FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  3122 00000ABB EB0E                                            jmp     .30                                             ;continue
  3123 00000ABD B020                    .20                     mov     al,' '                                          ;ASCII space
  3124 00000ABF E861010000                                      call    SetConsoleChar                                  ;display space
  3125 00000AC4 B020                                            mov     al,' '                                          ;ASCII space
  3126 00000AC6 E85A010000                                      call    SetConsoleChar                                  ;display space
  3127 00000ACB 80C302                  .30                     add     bl,2                                            ;next column (+2)
  3128 00000ACE 59                                              pop     ecx                                             ;restore remaining
  3129 00000ACF E2DD                                            loop    .10                                             ;next code
  3130 00000AD1 A00B0E0000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  3131 00000AD6 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  3132 00000AD8 720D                                            jb      .40                                             ;no, skip ahead
  3133 00000ADA 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  3134 00000ADC 7709                                            ja      .40                                             ;no, skip ahead
  3135 00000ADE 88FD                                            mov     ch,bh                                           ;OIA row
  3136 00000AE0 B128                                            mov     cl,40                                           ;character display column
  3137 00000AE2 E83E010000                                      call    SetConsoleChar                                  ;display ASCII character
  3138 00000AE7 07                      .40                     pop     es                                              ;restore non-volatile regs
  3139 00000AE8 1F                                              pop     ds                                              ;
  3140 00000AE9 5E                                              pop     esi                                             ;
  3141 00000AEA 59                                              pop     ecx                                             ;
  3142 00000AEB 5B                                              pop     ebx                                             ;
  3143 00000AEC C3                                              ret                                                     ;return
  3144                                  ;-----------------------------------------------------------------------------------------------------------------------
  3145                                  ;
  3146                                  ;       Routine:        PutConsoleOIAShift
  3147                                  ;
  3148                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3149                                  ;
  3150                                  ;       In:             BL      shift flags
  3151                                  ;                       BH      lock flags
  3152                                  ;                       DS      OS data selector
  3153                                  ;
  3154                                  ;-----------------------------------------------------------------------------------------------------------------------
  3155 00000AED 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3156 00000AEE 06                                              push    es                                              ;
  3157 00000AEF 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3158 00000AF1 07                                              pop     es                                              ;... into ES register
  3159 00000AF2 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  3160 00000AF4 B020                                            mov     al,EASCIISPACE                                  ;space is default character
  3161 00000AF6 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3162 00000AF9 7402                                            jz      .10                                             ;no, skip ahead
  3163 00000AFB B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3164 00000AFD B10E                    .10                     mov     cl,14                                           ;indicator column
  3165 00000AFF E821010000                                      call    SetConsoleChar                                  ;display ASCII character
  3166 00000B04 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3167 00000B06 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3168 00000B09 7402                                            jz      .20                                             ;no, skip ahead
  3169 00000B0B B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3170 00000B0D B140                    .20                     mov     cl,64                                           ;indicator column
  3171 00000B0F E811010000                                      call    SetConsoleChar                                  ;display ASCII character
  3172 00000B14 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3173 00000B16 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3174 00000B19 7402                                            jz      .30                                             ;no, skip ahead
  3175 00000B1B B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3176 00000B1D B10F                    .30                     mov     cl,15                                           ;indicator column
  3177 00000B1F E801010000                                      call    SetConsoleChar                                  ;display ASCII character
  3178 00000B24 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3179 00000B26 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3180 00000B29 7402                                            jz      .40                                             ;no, skip ahead
  3181 00000B2B B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3182 00000B2D B13F                    .40                     mov     cl,63                                           ;indicator column
  3183 00000B2F E8F1000000                                      call    SetConsoleChar                                  ;display ASCII character
  3184 00000B34 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3185 00000B36 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3186 00000B39 7402                                            jz      .50                                             ;no, skip ahead
  3187 00000B3B B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  3188 00000B3D B110                    .50                     mov     cl,16                                           ;indicator column
  3189 00000B3F E8E1000000                                      call    SetConsoleChar                                  ;display ASCII character
  3190 00000B44 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3191 00000B46 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3192 00000B49 7402                                            jz      .60                                             ;no, skip ahead
  3193 00000B4B B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  3194 00000B4D B13E                    .60                     mov     cl,62                                           ;indicator column
  3195 00000B4F E8D1000000                                      call    SetConsoleChar                                  ;display ASCII character
  3196 00000B54 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3197 00000B56 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3198 00000B59 7402                                            jz      .70                                             ;no, skip ahead
  3199 00000B5B B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3200 00000B5D B14E                    .70                     mov     cl,78                                           ;indicator column
  3201 00000B5F E8C1000000                                      call    SetConsoleChar                                  ;display ASCII character
  3202 00000B64 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3203 00000B66 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3204 00000B69 7402                                            jz      .80                                             ;no, skip ahead
  3205 00000B6B B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  3206 00000B6D B14D                    .80                     mov     cl,77                                           ;indicator column
  3207 00000B6F E8B1000000                                      call    SetConsoleChar                                  ;display ASCII character
  3208 00000B74 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3209 00000B76 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3210 00000B79 7402                                            jz      .90                                             ;no, skip ahead
  3211 00000B7B B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3212 00000B7D B14C                    .90                     mov     cl,76                                           ;indicator column
  3213 00000B7F E8A1000000                                      call    SetConsoleChar                                  ;display ASCII character
  3214 00000B84 07                                              pop     es                                              ;restore non-volatile regs
  3215 00000B85 59                                              pop     ecx                                             ;
  3216 00000B86 C3                                              ret                                                     ;return
  3217                                  ;-----------------------------------------------------------------------------------------------------------------------
  3218                                  ;
  3219                                  ;       Routine:        Yield
  3220                                  ;
  3221                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3222                                  ;
  3223                                  ;-----------------------------------------------------------------------------------------------------------------------
  3224 00000B87 FB                      Yield                   sti                                                     ;enable maskagle interrupts
  3225 00000B88 F4                                              hlt                                                     ;halt until external interrupt
  3226 00000B89 C3                                              ret                                                     ;return
  3227                                  ;=======================================================================================================================
  3228                                  ;
  3229                                  ;       Data-Type Conversion Helper Routines
  3230                                  ;
  3231                                  ;       HexadecimalToUnsigned
  3232                                  ;       UnsignedToHexadecimal
  3233                                  ;
  3234                                  ;=======================================================================================================================
  3235                                  ;-----------------------------------------------------------------------------------------------------------------------
  3236                                  ;
  3237                                  ;       Routine:        HexadecimalToUnsigned
  3238                                  ;
  3239                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3240                                  ;
  3241                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  3242                                  ;
  3243                                  ;       Output:         EAX     unsigned integer value
  3244                                  ;
  3245                                  ;-----------------------------------------------------------------------------------------------------------------------
  3246 00000B8A 56                      HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  3247 00000B8B 89D6                                            mov     esi,edx                                         ;source address
  3248 00000B8D 31D2                                            xor     edx,edx                                         ;zero register
  3249 00000B8F AC                      .10                     lodsb                                                   ;source byte
  3250 00000B90 84C0                                            test    al,al                                           ;end of string?
  3251 00000B92 7410                                            jz      .30                                             ;yes, branch
  3252 00000B94 3C39                                            cmp     al,'9'                                          ;hexadecimal?
  3253 00000B96 7602                                            jna     .20                                             ;no, skip ahead
  3254 00000B98 2C37                                            sub     al,037h                                         ;'A' = 41h, less 37h = 0Ah
  3255 00000B9A 83E00F                  .20                     and     eax,00Fh                                        ;remove ascii zone
  3256 00000B9D C1E204                                          shl     edx,4                                           ;previous total x 16
  3257 00000BA0 01C2                                            add     edx,eax                                         ;add prior value x 16
  3258 00000BA2 EBEB                                            jmp     .10                                             ;next
  3259 00000BA4 89D0                    .30                     mov     eax,edx                                         ;result
  3260 00000BA6 5E                                              pop     esi                                             ;restore non-volatile regs
  3261 00000BA7 C3                                              ret                                                     ;return
  3262                                  ;-----------------------------------------------------------------------------------------------------------------------
  3263                                  ;
  3264                                  ;       Routine:        UnsignedToHexadecimal
  3265                                  ;
  3266                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  3267                                  ;
  3268                                  ;       Input:          DS:EDX  output buffer address
  3269                                  ;                       ECX     32-bit binary
  3270                                  ;
  3271                                  ;-----------------------------------------------------------------------------------------------------------------------
  3272 00000BA8 57                      UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  3273 00000BA9 89D7                                            mov     edi,edx                                         ;output buffer address
  3274 00000BAB 89CA                                            mov     edx,ecx                                         ;32-bit unsigned
  3275 00000BAD 31C9                                            xor     ecx,ecx                                         ;zero register
  3276 00000BAF B108                                            mov     cl,8                                            ;nybble count
  3277 00000BB1 C1C204                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  3278 00000BB4 88D0                                            mov     al,dl                                           ;????bbbb
  3279 00000BB6 240F                                            and     al,00Fh                                         ;mask out bits 4-7
  3280 00000BB8 0C30                                            or      al,030h                                         ;mask in ascii zone
  3281 00000BBA 3C3A                                            cmp     al,03Ah                                         ;A through F?
  3282 00000BBC 7202                                            jb      .20                                             ;no, skip ahead
  3283 00000BBE 0407                                            add     al,7                                            ;41h through 46h
  3284 00000BC0 AA                      .20                     stosb                                                   ;store hexnum
  3285 00000BC1 E2EE                                            loop    .10                                             ;next nybble
  3286 00000BC3 30C0                                            xor     al,al                                           ;zero reg
  3287 00000BC5 AA                                              stosb                                                   ;null terminate
  3288 00000BC6 5F                                              pop     edi                                             ;restore non-volatile regs
  3289 00000BC7 C3                                              ret                                                     ;return
  3290                                  ;=======================================================================================================================
  3291                                  ;
  3292                                  ;       Message Queue Helper Routines
  3293                                  ;
  3294                                  ;       GetMessage
  3295                                  ;       PutMessage
  3296                                  ;
  3297                                  ;=======================================================================================================================
  3298                                  ;-----------------------------------------------------------------------------------------------------------------------
  3299                                  ;
  3300                                  ;       Routine:        GetMessage
  3301                                  ;
  3302                                  ;       Description:    This routine reads and removes a message from the message queue.
  3303                                  ;
  3304                                  ;       Out:            EAX     lo-order message data
  3305                                  ;                       EDX     hi-order message data
  3306                                  ;
  3307                                  ;                       CY      0 = message read
  3308                                  ;                               1 = no message to read
  3309                                  ;
  3310                                  ;-----------------------------------------------------------------------------------------------------------------------
  3311 00000BC8 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  3312 00000BC9 51                                              push    ecx                                             ;
  3313 00000BCA 1E                                              push    ds                                              ;
  3314 00000BCB 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  3315 00000BCD 1F                                              pop     ds                                              ;... into data segment register
  3316 00000BCE 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  3317 00000BD4 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  3318 00000BD6 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3319 00000BD9 09D0                                            or      eax,edx                                         ;is queue empty?
  3320 00000BDB F9                                              stc                                                     ;assume queue is emtpy
  3321 00000BDC 741B                                            jz      .20                                             ;yes, skip ahead
  3322 00000BDE 31C9                                            xor     ecx,ecx                                         ;store zero
  3323 00000BE0 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  3324 00000BE2 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3325 00000BE5 83C308                                          add     ebx,8                                           ;next queue element
  3326 00000BE8 81E3FC030000                                    and     ebx,03FCh                                       ;at end of queue?
  3327 00000BEE 7502                                            jnz     .10                                             ;no, skip ahead
  3328 00000BF0 B308                                            mov     bl,8                                            ;reset to 1st entry
  3329 00000BF2 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3330 00000BF8 F8                                              clc                                                     ;indicate message read
  3331 00000BF9 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  3332 00000BFA 59                                              pop     ecx                                             ;
  3333 00000BFB 5B                                              pop     ebx                                             ;
  3334 00000BFC C3                                              ret                                                     ;return
  3335                                  ;-----------------------------------------------------------------------------------------------------------------------
  3336                                  ;
  3337                                  ;       Routine:        PutMessage
  3338                                  ;
  3339                                  ;       Description:    This routine adda a message to the message queue.
  3340                                  ;
  3341                                  ;       In:             ECX     hi-order data word
  3342                                  ;                       EDX     lo-order data word
  3343                                  ;
  3344                                  ;       Out:            CY      0 = success
  3345                                  ;                               1 = fail: queue is full
  3346                                  ;
  3347                                  ;-----------------------------------------------------------------------------------------------------------------------
  3348 00000BFD 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  3349 00000BFE 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  3350 00000C00 1F                                              pop     ds                                              ;... into data segment register
  3351 00000C01 A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  3352 00000C06 833800                                          cmp     dword [eax],0                                   ;is queue full?
  3353 00000C09 F9                                              stc                                                     ;assume failure
  3354 00000C0A 7517                                            jne     .20                                             ;yes, cannot store
  3355 00000C0C 8910                                            mov     [eax],edx                                       ;store lo-order data
  3356 00000C0E 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  3357 00000C11 83C008                                          add     eax,8                                           ;next queue element adr
  3358 00000C14 25FC030000                                      and     eax,03FCh                                       ;at end of queue?
  3359 00000C19 7502                                            jnz     .10                                             ;no, skip ahead
  3360 00000C1B B008                                            mov     al,8                                            ;reset to top of queue
  3361 00000C1D A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3362 00000C22 F8                                              clc                                                     ;indicate success
  3363 00000C23 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  3364 00000C24 C3                                              ret                                                     ;return
  3365                                  ;=======================================================================================================================
  3366                                  ;
  3367                                  ;       Memory-Mapped Video Routines
  3368                                  ;
  3369                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  3370                                  ;
  3371                                  ;       SetConsoleChar
  3372                                  ;       SetConsoleString
  3373                                  ;
  3374                                  ;=======================================================================================================================
  3375                                  ;-----------------------------------------------------------------------------------------------------------------------
  3376                                  ;
  3377                                  ;       Routine:        SetConsoleChar
  3378                                  ;
  3379                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3380                                  ;
  3381                                  ;       In:             AL      ASCII character
  3382                                  ;                       CL      column
  3383                                  ;                       CH      row
  3384                                  ;                       ES      CGA selector
  3385                                  ;
  3386                                  ;       Out:            EAX     last target address written (ES:)
  3387                                  ;                       CL      column + 1
  3388                                  ;
  3389                                  ;-----------------------------------------------------------------------------------------------------------------------
  3390 00000C25 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  3391 00000C27 0FB6C5                                          movzx   eax,ch                                          ;row
  3392 00000C2A B450                                            mov     ah,ECONCOLS                                     ;cols/row
  3393 00000C2C F6E4                                            mul     ah                                              ;row * cols/row
  3394 00000C2E 00C8                                            add     al,cl                                           ;add column
  3395 00000C30 80D400                                          adc     ah,0                                            ;handle carry
  3396 00000C33 D1E0                                            shl     eax,1                                           ;screen offset
  3397 00000C35 268810                                          mov     [es:eax],dl                                     ;store character
  3398 00000C38 FEC1                                            inc     cl                                              ;next column
  3399 00000C3A C3                                              ret                                                     ;return
  3400                                  ;-----------------------------------------------------------------------------------------------------------------------
  3401                                  ;
  3402                                  ;       Routine:        SetConsoleString
  3403                                  ;
  3404                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  3405                                  ;
  3406                                  ;       In:             ESI     source offset (DS:)
  3407                                  ;                       CL      column
  3408                                  ;                       CH      row
  3409                                  ;                       ES      CGA selector
  3410                                  ;
  3411                                  ;-----------------------------------------------------------------------------------------------------------------------
  3412 00000C3B 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  3413 00000C3C FC                                              cld                                                     ;forward strings
  3414 00000C3D AC                      .10                     lodsb                                                   ;next ASCII character
  3415 00000C3E 84C0                                            test    al,al                                           ;end of string?
  3416 00000C40 7407                                            jz      .20                                             ;yes, branch
  3417 00000C42 E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  3418 00000C47 EBF4                                            jmp     .10                                             ;continue
  3419 00000C49 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  3420 00000C4A C3                                              ret                                                     ;return
  3421                                  ;=======================================================================================================================
  3422                                  ;
  3423                                  ;       Input/Output Routines
  3424                                  ;
  3425                                  ;       These routines read and/or write directly to ports.
  3426                                  ;
  3427                                  ;       PlaceCursor
  3428                                  ;       PutPrimaryEndOfInt
  3429                                  ;       PutSecondaryEndOfInt
  3430                                  ;       ResetSystem
  3431                                  ;       SetKeyboardLamps
  3432                                  ;       WaitForKeyInBuffer
  3433                                  ;       WaitForKeyOutBuffer
  3434                                  ;
  3435                                  ;=======================================================================================================================
  3436                                  ;-----------------------------------------------------------------------------------------------------------------------
  3437                                  ;
  3438                                  ;       Routine:        PlaceCursor
  3439                                  ;
  3440                                  ;       Description:    This routine positions the cursor on the console.
  3441                                  ;
  3442                                  ;       In:             DS      OS data selector
  3443                                  ;
  3444                                  ;-----------------------------------------------------------------------------------------------------------------------
  3445 00000C4B 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  3446 00000C4C A0010E0000                                      mov     al,[wbConsoleRow]                               ;AL = row
  3447 00000C51 B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  3448 00000C53 F6E4                                            mul     ah                                              ;row offset
  3449 00000C55 0205000E0000                                    add     al,[wbConsoleColumn]                            ;add column
  3450 00000C5B 80D400                                          adc     ah,0                                            ;add overflow
  3451 00000C5E 89C1                                            mov     ecx,eax                                         ;screen offset
  3452 00000C60 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3453 00000C62 B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3454 00000C64 B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3455 00000C66 EE                                              out     dx,al                                           ;select register
  3456 00000C67 42                                              inc     edx                                             ;data port
  3457 00000C68 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  3458 00000C6A EE                                              out     dx,al                                           ;store hi-order loc
  3459 00000C6B 4A                                              dec     edx                                             ;register select port
  3460 00000C6C B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3461 00000C6E EE                                              out     dx,al                                           ;select register
  3462 00000C6F 42                                              inc     edx                                             ;data port
  3463 00000C70 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  3464 00000C72 EE                                              out     dx,al                                           ;store lo-order loc
  3465 00000C73 59                                              pop     ecx                                             ;restore non-volatile regs
  3466 00000C74 C3                                              ret                                                     ;return
  3467                                  ;-----------------------------------------------------------------------------------------------------------------------
  3468                                  ;
  3469                                  ;       Routine:        PutPrimaryEndOfInt
  3470                                  ;
  3471                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3472                                  ;
  3473                                  ;-----------------------------------------------------------------------------------------------------------------------
  3474 00000C75 B020                    PutPrimaryEndOfInt      mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3475 00000C77 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3476 00000C79 C3                                              ret                                                     ;return
  3477                                  ;-----------------------------------------------------------------------------------------------------------------------
  3478                                  ;
  3479                                  ;       Routine:        PutSecondaryEndOfInt
  3480                                  ;
  3481                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3482                                  ;
  3483                                  ;-----------------------------------------------------------------------------------------------------------------------
  3484 00000C7A B020                    PutSecondaryEndOfInt    mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3485 00000C7C E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3486 00000C7E C3                                              ret                                                     ;return
  3487                                  ;-----------------------------------------------------------------------------------------------------------------------
  3488                                  ;
  3489                                  ;       Routine:        ResetSystem
  3490                                  ;
  3491                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3492                                  ;
  3493                                  ;       Out:            N/A     This routine does not return.
  3494                                  ;
  3495                                  ;-----------------------------------------------------------------------------------------------------------------------
  3496 00000C7F B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3497 00000C84 E2FE                                            loop    $                                               ;clear interrupts
  3498 00000C86 B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3499 00000C88 E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3500 00000C8A FB                      .10                     sti                                                     ;enable maskable interrupts
  3501 00000C8B F4                                              hlt                                                     ;halt until interrupt
  3502 00000C8C EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  3503                                  ;-----------------------------------------------------------------------------------------------------------------------
  3504                                  ;
  3505                                  ;       Routine:        SetKeyboardLamps
  3506                                  ;
  3507                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3508                                  ;
  3509                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3510                                  ;
  3511                                  ;-----------------------------------------------------------------------------------------------------------------------
  3512 00000C8E E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3513 00000C93 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3514 00000C95 E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  3515 00000C97 E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3516 00000C9C E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3517 00000C9E E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3518 00000CA3 88F8                                            mov     al,bh                                           ;set/reset lamps value
  3519 00000CA5 E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  3520 00000CA7 E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3521 00000CAC E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3522 00000CAE C3                                              ret                                                     ;return
  3523                                  ;-----------------------------------------------------------------------------------------------------------------------
  3524                                  ;
  3525                                  ;       Routine:        WaitForKeyInBuffer
  3526                                  ;
  3527                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3528                                  ;
  3529                                  ;       Out:            ZF      1 = Input buffer ready
  3530                                  ;                               0 = Input buffer not ready after timeout
  3531                                  ;
  3532                                  ;-----------------------------------------------------------------------------------------------------------------------
  3533 00000CAF 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3534 00000CB0 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3535 00000CB5 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3536 00000CB7 A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  3537 00000CB9 E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  3538 00000CBB 59                                              pop     ecx                                             ;restore non-volatile regs
  3539 00000CBC C3                                              ret                                                     ;return
  3540                                  ;-----------------------------------------------------------------------------------------------------------------------
  3541                                  ;
  3542                                  ;       Routine:        WaitForKeyOutBuffer
  3543                                  ;
  3544                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3545                                  ;
  3546                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3547                                  ;                               0 = Output buffer empty after timeout
  3548                                  ;
  3549                                  ;-----------------------------------------------------------------------------------------------------------------------
  3550 00000CBD 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3551 00000CBE B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3552 00000CC3 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3553 00000CC5 A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  3554 00000CC7 E1FA                                            loopz   .10                                             ;loop until output buffer bit
  3555 00000CC9 59                                              pop     ecx                                             ;restore non-volatile regs
  3556 00000CCA C3                                              ret                                                     ;return
  3557                                  ;-----------------------------------------------------------------------------------------------------------------------
  3558                                  ;
  3559                                  ;       End of the Kernel Function Library
  3560                                  ;
  3561                                  ;-----------------------------------------------------------------------------------------------------------------------
  3562 00000CCB 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  3563                                  ;=======================================================================================================================
  3564                                  ;
  3565                                  ;       Console Task
  3566                                  ;
  3567                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3568                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3569                                  ;       screen and responds to user commands.
  3570                                  ;
  3571                                  ;=======================================================================================================================
  3572                                  ;-----------------------------------------------------------------------------------------------------------------------
  3573                                  ;
  3574                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3575                                  ;
  3576                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3577                                  ;
  3578                                  ;-----------------------------------------------------------------------------------------------------------------------
  3579                                  section                 constack                                                ;console task stack
  3580 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  3581                                  ;-----------------------------------------------------------------------------------------------------------------------
  3582                                  ;
  3583                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3584                                  ;
  3585                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3586                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3587                                  ;       16 descriptors. Six are initially defined.
  3588                                  ;
  3589                                  ;-----------------------------------------------------------------------------------------------------------------------
  3590                                  section                 conldt                                                  ;console local descriptors
  3591 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  3592 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  3593 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  3594 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  3595 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  3596 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  3597 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  3598                                  ;-----------------------------------------------------------------------------------------------------------------------
  3599                                  ;
  3600                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3601                                  ;
  3602                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3603                                  ;       segment. CS to console code.
  3604                                  ;
  3605                                  ;-----------------------------------------------------------------------------------------------------------------------
  3606                                  section                 contss                                                  ;console task state segment
  3607 00000000 00000000                                        dd      0                                               ;00 back-link tss
  3608 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  3609 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  3610 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  3611 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  3612 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  3613 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  3614 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  3615 00000020 00000000                                        dd      0                                               ;20 eip
  3616 00000024 00020000                                        dd      0200h                                           ;24 eflags
  3617 00000028 00000000                                        dd      0                                               ;28 eax
  3618 0000002C 00000000                                        dd      0                                               ;2c ecx
  3619 00000030 00000000                                        dd      0                                               ;30 edx
  3620 00000034 00000000                                        dd      0                                               ;34 ebx
  3621 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  3622 0000003C 00000000                                        dd      0                                               ;3c ebp
  3623 00000040 00000000                                        dd      0                                               ;40 esi
  3624 00000044 00000000                                        dd      0                                               ;44 edi
  3625 00000048 1C000000                                        dd      001Ch                                           ;48 es
  3626 0000004C 24000000                                        dd      0024h                                           ;4c cs
  3627 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  3628 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  3629 00000058 00000000                                        dd      0                                               ;58 fs
  3630 0000005C 00000000                                        dd      0                                               ;5c gs
  3631 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3632 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  3633                                  ;-----------------------------------------------------------------------------------------------------------------------
  3634                                  ;
  3635                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3636                                  ;
  3637                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3638                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3639                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3640                                  ;       event.
  3641                                  ;
  3642                                  ;-----------------------------------------------------------------------------------------------------------------------
  3643                                  section                 conmque                                                 ;console message queue
  3644 00000000 08000000                                        dd      8                                               ;head pointer
  3645 00000004 08000000                                        dd      8                                               ;tail pointer
  3646 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  3647                                  ;-----------------------------------------------------------------------------------------------------------------------
  3648                                  ;
  3649                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3650                                  ;
  3651                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3652                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3653                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3654                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3655                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3656                                  ;       board input, echoing to the console screen and responding to user commands.
  3657                                  ;
  3658                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3659                                  ;
  3660                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3661                                  ;                               |  Real Mode Interrupt Vectors                  |
  3662                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3663                                  ;                               |  Reserved BIOS Memory Area                    |
  3664                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3665                                  ;                               |  Shared Kernel Memory Area                    |
  3666                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3667                                  ;                               |  Global Descriptor Table (GDT)                |
  3668                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3669                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3670                                  ;                       002000  +-----------------------------------------------+
  3671                                  ;                               |  Interrupt Handlers                           |
  3672                                  ;                               |  Kernel Function Library                      |
  3673                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3674                                  ;                               |  Console Task Stack Area                      |
  3675                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3676                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3677                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3678                                  ;                               |  Console Task Task State Segment (TSS)        |
  3679                                  ;                       004800  +-----------------------------------------------+
  3680                                  ;                               |  Console Task Message Queue                   |
  3681                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3682                                  ;                               |  Console Task Code                            |
  3683                                  ;                               |  Console Task Constants                       |
  3684                                  ;                       006000  +===============================================+
  3685                                  ;
  3686                                  ;-----------------------------------------------------------------------------------------------------------------------
  3687                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3688                                  ;
  3689                                  ;       Initialize console work areas to low values.
  3690                                  ;
  3691 00000000 BF00080000              ConCode                 mov     edi,ECONDATA                                    ;OS console data address
  3692 00000005 30C0                                            xor     al,al                                           ;initialization value
  3693 00000007 B90C060000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  3694 0000000C FC                                              cld                                                     ;forward strings
  3695 0000000D F3AA                                            rep     stosb                                           ;initialize data
  3696                                  ;
  3697                                  ;       Initialize the active panel variables.
  3698                                  ;
  3699 0000000F B8[3B020000]                                    mov     eax,czPnlCon001                                 ;initial console panel
  3700 00000014 A304080000                                      mov     [wdConsolePanel],eax                            ;save panel template address
  3701                                  ;
  3702                                  ;       Initialize the Operator Information Area (OIA) (This is done once).
  3703                                  ;
  3704 00000019 06                                              push    es                                              ;save non-volatile regs
  3705 0000001A 6A20                                            push    EGDTCGA                                         ;load CGA video selector...
  3706 0000001C 07                                              pop     es                                              ;...into extra segment reg
  3707 0000001D BF000F0000                                      mov     edi,ECONROWS*ECONROWBYTES                       ;target offset
  3708 00000022 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  3709 00000027 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  3710 0000002C F3AB                                            rep     stosd                                           ;reset OIA
  3711 0000002E 07                                              pop     es                                              ;restore non-volatile regs
  3712                                  ;
  3713                                  ;       Clear the console rows. (This is done after every attention key).
  3714                                  ;
  3715 0000002F 06                      .20                     push    es                                              ;save non-volatile regs
  3716 00000030 6A20                                            push    EGDTCGA                                         ;load CGA video selector...
  3717 00000032 07                                              pop     es                                              ;...into extra segment reg
  3718 00000033 31FF                                            xor     edi,edi                                         ;target offset
  3719 00000035 B9C0030000                                      mov     ecx,ECONROWS*ECONROWDWORDS                      ;double-words to clear
  3720 0000003A B820072007                                      mov     eax,ECONCLEARDWORD                              ;initialization value
  3721 0000003F F3AB                                            rep     stosd                                           ;reset screen body
  3722 00000041 07                                              pop     es                                              ;restore non-volatile regs
  3723                                  ;
  3724                                  ;       Reset the input field input address, row and column.
  3725                                  ;
  3726 00000042 31C0                                            xor     eax,eax                                         ;zero register
  3727 00000044 A308080000                                      mov     [wdConsoleField],eax                            ;zero field addr
  3728 00000049 A30C080000                                      mov     [wdConsoleInput],eax                            ;zero input addr
  3729 0000004E A2010E0000                                      mov     [wbConsoleRow],al                               ;zero console row
  3730 00000053 A2000E0000                                      mov     [wbConsoleColumn],al                            ;zero console column
  3731                                  ;
  3732                                  ;       Load the field address from the panel. Exit loop if address is null.
  3733                                  ;
  3734 00000058 8B1D04080000                                    mov     ebx,[wdConsolePanel]                            ;first field template addr
  3735 0000005E 8B33                    .30                     mov     esi,[ebx]                                       ;field value addr
  3736 00000060 85F6                                            test    esi,esi                                         ;end of panel?
  3737 00000062 746C                                            jz      .70                                             ;yes, exit loop
  3738                                  ;
  3739                                  ;       Load the field row, column, color and length.
  3740                                  ;
  3741 00000064 8A6B04                                          mov     ch,[ebx+4]                                      ;row
  3742 00000067 8A4B05                                          mov     cl,[ebx+5]                                      ;column
  3743 0000006A 8A7306                                          mov     dh,[ebx+6]                                      ;color
  3744 0000006D 8A5307                                          mov     dl,[ebx+7]                                      ;length
  3745                                  ;
  3746                                  ;       Test the row high-bit for input field indication.
  3747                                  ;
  3748 00000070 F6C580                                          test    ch,080h                                         ;input field?
  3749 00000073 7433                                            jz      .40                                             ;no, branch
  3750 00000075 80E57F                                          and     ch,07Fh                                         ;clear input field indicator
  3751                                  ;
  3752                                  ;       Save the row and column if this is the first input field.
  3753                                  ;
  3754 00000078 A0010E0000                                      mov     al,[wbConsoleRow]                               ;console row
  3755 0000007D 0A05000E0000                                    or      al,[wbConsoleColumn]                            ;already have an input field?
  3756 00000083 7523                                            jnz     .40                                             ;yes, branch
  3757 00000085 891D08080000                                    mov     [wdConsoleField],ebx                            ;save field template addr
  3758 0000008B 89350C080000                                    mov     [wdConsoleInput],esi                            ;update console input buffer
  3759 00000091 882D010E0000                                    mov     [wbConsoleRow],ch                               ;update console row
  3760 00000097 880D000E0000                                    mov     [wbConsoleColumn],cl                            ;update console column
  3761                                  ;
  3762                                  ;       Clear input field contents.
  3763                                  ;
  3764 0000009D 51                                              push    ecx                                             ;save row, col
  3765 0000009E 89F7                                            mov     edi,esi                                         ;target is field data addr
  3766 000000A0 30C0                                            xor     al,al                                           ;fill byte is NUL
  3767 000000A2 0FB6CA                                          movzx   ecx,dl                                          ;field length
  3768 000000A5 F3AA                                            rep     stosb                                           ;fill field with fill byte
  3769 000000A7 59                                              pop     ecx                                             ;restore row, col
  3770                                  ;
  3771                                  ;       Compute the target offset.
  3772                                  ;
  3773 000000A8 0FB6C5                  .40                     movzx   eax,ch                                          ;row
  3774 000000AB B450                                            mov     ah,ECONCOLS                                     ;columns per row
  3775 000000AD F6E4                                            mul     ah                                              ;row offset
  3776 000000AF 00C8                                            add     al,cl                                           ;add column
  3777 000000B1 80D400                                          adc     ah,0                                            ;handle overflow
  3778 000000B4 D1E0                                            shl     eax,1                                           ;two-bytes per column
  3779                                  ;
  3780                                  ;       Display the field contents. EAX = screen target offset, DL = length, DL = attributes
  3781                                  ;
  3782 000000B6 06                                              push    es                                              ;save non-volatile regs
  3783 000000B7 6A20                                            push    EGDTCGA                                         ;load CGA video selector...
  3784 000000B9 07                                              pop     es                                              ;...into extra segment reg
  3785 000000BA 89C7                                            mov     edi,eax                                         ;target offset
  3786 000000BC 0FB6CA                                          movzx   ecx,dl                                          ;length
  3787 000000BF 88F4                                            mov     ah,dh                                           ;color
  3788 000000C1 AC                      .50                     lodsb                                                   ;field character
  3789 000000C2 84C0                                            test    al,al                                           ;end of value?
  3790 000000C4 7404                                            jz      .60                                             ;yes, branch
  3791 000000C6 66AB                                            stosw                                                   ;store character and color
  3792 000000C8 E2F7                                            loop    .50                                             ;next character
  3793 000000CA 07                      .60                     pop     es                                              ;restore non-volatile regs
  3794                                  ;
  3795                                  ;       Next Field.
  3796                                  ;
  3797 000000CB 83C308                                          add     ebx,8                                           ;next field addr
  3798 000000CE EB8E                                            jmp     short .30                                       ;next field
  3799                                  ;
  3800                                  ;       Place the cursor at the input field.
  3801                                  ;
  3802 000000D0 8A25010E0000            .70                     mov     ah,[wbConsoleRow]                               ;field row
  3803 000000D6 A0000E0000                                      mov     al,[wbConsoleColumn]                            ;field column
  3804                                                          placeCursor                                             ;position the cursor
  3804 000000DB B003                <1>  mov al,ePlaceCursor
  3804 000000DD CD30                <1>  int _svc
  3805                                  ;
  3806                                  ;       Get command.
  3807                                  ;
  3808 000000DF 8B3508080000                                    mov     esi,[wdConsoleField]                            ;input field template addr
  3809 000000E5 8B150C080000                                    mov     edx,[wdConsoleInput]                            ;target buffer addr
  3810 000000EB 31C9                                            xor     ecx,ecx                                         ;zero register
  3811 000000ED 8A4E07                                          mov     cl,[esi+7]                                      ;maximum chars to accept
  3812 000000F0 B701                                            mov     bh,1                                            ;echo to terminal
  3813 000000F2 B30D                                            mov     bl,13                                           ;terminating character
  3814                                                          getConsoleString                                        ;accept keyboard input
  3814 000000F4 B001                <1>  mov al,eGetConsoleString
  3814 000000F6 CD30                <1>  int _svc
  3815                                  ;
  3816                                  ;       Take the first token entered.
  3817                                  ;
  3818 000000F8 8B150C080000                                    mov     edx,[wdConsoleInput]                            ;console input buffer addr
  3819 000000FE BB60080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  3820 00000103 E821000000                                      call    ConTakeToken                                    ;take first command token
  3821                                  ;
  3822                                  ;       Evaluate token.
  3823                                  ;
  3824 00000108 BA60080000                                      mov     edx,wzConsoleToken                              ;token buffer
  3825 0000010D E84C000000                                      call    ConDetermineCommand                             ;determine if this is a command
  3826 00000112 83F807                                          cmp     eax,ECONJMPTBLCNT                               ;command number in range?
  3827 00000115 730D                                            jnb     .80                                             ;no, branch
  3828 00000117 C1E002                                          shl     eax,2                                           ;convert number to array offset
  3829 0000011A BA[0B030000]                                    mov     edx,tConJmpTbl                                  ;command handler address table base
  3830 0000011F 8B0402                                          mov     eax,[edx+eax]                                   ;command handler address
  3831 00000122 FFD0                                            call    eax                                             ;handler command
  3832                                  ;
  3833                                  ;       Refresh Panel.
  3834                                  ;
  3835 00000124 E906FFFFFF              .80                      jmp     .20                                            ;refresh panel
  3836                                  ;-----------------------------------------------------------------------------------------------------------------------
  3837                                  ;
  3838                                  ;       Routine:        ConTakeToken
  3839                                  ;
  3840                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3841                                  ;
  3842                                  ;       In:             DS:EDX  source buffer address
  3843                                  ;                       DS:EBX  target buffer address
  3844                                  ;
  3845                                  ;       Out:            DS:EDX  source buffer address
  3846                                  ;                       DS:EBX  target buffer address
  3847                                  ;
  3848                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3849                                  ;
  3850                                  ;-----------------------------------------------------------------------------------------------------------------------
  3851 00000129 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  3852 0000012A 57                                              push    edi                                             ;
  3853 0000012B 06                                              push    es                                              ;
  3854 0000012C 1E                                              push    ds                                              ;load data segment selector ...
  3855 0000012D 07                                              pop     es                                              ;... into extra segment reg
  3856 0000012E 89D6                                            mov     esi,edx                                         ;source buffer address
  3857 00000130 89DF                                            mov     edi,ebx                                         ;target buffer address
  3858 00000132 C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3859 00000135 FC                                              cld                                                     ;forward strings
  3860 00000136 AC                      .10                     lodsb                                                   ;load byte
  3861 00000137 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3862 00000139 74FB                                            je      .10                                             ;yes, continue
  3863 0000013B 84C0                                            test    al,al                                           ;end of line?
  3864 0000013D 7410                                            jz      .40                                             ;yes, branch
  3865 0000013F AA                      .20                     stosb                                                   ;store byte
  3866 00000140 AC                                              lodsb                                                   ;load byte
  3867 00000141 84C0                                            test    al,al                                           ;end of line?
  3868 00000143 740A                                            jz      .40                                             ;no, continue
  3869 00000145 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3870 00000147 75F6                                            jne     .20                                             ;no, continue
  3871 00000149 AC                      .30                     lodsb                                                   ;load byte
  3872 0000014A 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3873 0000014C 74FB                                            je      .30                                             ;yes, continue
  3874 0000014E 4E                                              dec     esi                                             ;pre-position
  3875 0000014F C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3876 00000152 89D7                                            mov     edi,edx                                         ;source buffer address
  3877 00000154 AC                      .50                     lodsb                                                   ;remaining byte
  3878 00000155 AA                                              stosb                                                   ;move to front of buffer
  3879 00000156 84C0                                            test    al,al                                           ;end of line?
  3880 00000158 75FA                                            jnz     .50                                             ;no, continue
  3881 0000015A 07                                              pop     es                                              ;restore non-volatile regs
  3882 0000015B 5F                                              pop     edi                                             ;
  3883 0000015C 5E                                              pop     esi                                             ;
  3884 0000015D C3                                              ret                                                     ;return
  3885                                  ;-----------------------------------------------------------------------------------------------------------------------
  3886                                  ;
  3887                                  ;       Routine:        ConDetermineCommand
  3888                                  ;
  3889                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3890                                  ;
  3891                                  ;       input:          DS:EDX  command address
  3892                                  ;
  3893                                  ;       output:         EAX     >=0     = command nbr
  3894                                  ;                               0       = unknown command
  3895                                  ;
  3896                                  ;-----------------------------------------------------------------------------------------------------------------------
  3897 0000015E 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3898 0000015F 51                                              push    ecx                                             ;
  3899 00000160 56                                              push    esi                                             ;
  3900 00000161 57                                              push    edi                                             ;
  3901                                                          upperCaseString                                         ;upper-case string at EDX
  3901 00000162 B006                <1>  mov al,eUpperCaseString
  3901 00000164 CD30                <1>  int _svc
  3902 00000166 BE[27030000]                                    mov     esi,tConCmdTbl                                  ;commands table
  3903 0000016B 31FF                                            xor     edi,edi                                         ;intialize command number
  3904 0000016D FC                                              cld                                                     ;forward strings
  3905 0000016E AC                      .10                     lodsb                                                   ;command length
  3906 0000016F 0FB6C8                                          movzx   ecx,al                                          ;command length
  3907 00000172 E30D                                            jecxz   .20                                             ;branch if end of table
  3908 00000174 89F3                                            mov     ebx,esi                                         ;table entry address
  3909 00000176 01CE                                            add     esi,ecx                                         ;next table entry address
  3910                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3910 00000178 B000                <1>  mov al,eCompareMemory
  3910 0000017A CD30                <1>  int _svc
  3911 0000017C E303                                            jecxz   .20                                             ;branch if equal
  3912 0000017E 47                                              inc     edi                                             ;increment command nbr
  3913 0000017F EBED                                            jmp     .10                                             ;repeat
  3914 00000181 89F8                    .20                     mov     eax,edi                                         ;command number
  3915 00000183 5F                                              pop     edi                                             ;restore non-volatile regs
  3916 00000184 5E                                              pop     esi                                             ;
  3917 00000185 59                                              pop     ecx                                             ;
  3918 00000186 5B                                              pop     ebx                                             ;
  3919 00000187 C3                                              ret                                                     ;return
  3920                                  ;-----------------------------------------------------------------------------------------------------------------------
  3921                                  ;
  3922                                  ;       Routine:        ConExit
  3923                                  ;
  3924                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3925                                  ;
  3926                                  ;-----------------------------------------------------------------------------------------------------------------------
  3927                                  ConExit                 resetSystem                                             ;issue system reset
  3927                              <1> ConExit :
  3927 00000188 B004                <1>  mov al,eResetSystem
  3927 0000018A CD30                <1>  int _svc
  3928 0000018C C3                                              ret                                                     ;return
  3929                                  ;-----------------------------------------------------------------------------------------------------------------------
  3930                                  ;
  3931                                  ;       Routine:        ConInt6
  3932                                  ;
  3933                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  3934                                  ;
  3935                                  ;-----------------------------------------------------------------------------------------------------------------------
  3936 0000018D 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  3937 0000018F C3                                              ret                                                     ;return (not executed)
  3938                                  
  3939 00000190 B8[3B020000]            ConMain                 mov     eax,czPnlCon001                                 ;initial console panel
  3940 00000195 A304080000                                      mov     [wdConsolePanel],eax                            ;save panel template address
  3941 0000019A C3                                              ret
  3942                                  ;-----------------------------------------------------------------------------------------------------------------------
  3943                                  ;
  3944                                  ;       Routine:        ConMem
  3945                                  ;
  3946                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  3947                                  ;
  3948                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  3949                                  ;
  3950                                  ;-----------------------------------------------------------------------------------------------------------------------
  3951 0000019B 53                      ConMem                  push    ebx                                             ;save non-volatile regs
  3952 0000019C 56                                              push    esi                                             ;
  3953 0000019D 57                                              push    edi                                             ;
  3954                                  ;
  3955                                  ;       Update the source address if a parameter is given.
  3956                                  ;
  3957 0000019E BA10080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  3958 000001A3 BB60080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  3959 000001A8 E87CFFFFFF                                      call    ConTakeToken                                    ;take first param as token
  3960 000001AD 803D6008000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  3961 000001B4 740E                                            je      .10                                             ;no, branch
  3962 000001B6 BA60080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  3963                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  3963 000001BB B002                <1>  mov al,eHexadecimalToUnsigned
  3963 000001BD CD30                <1>  int _svc
  3964 000001BF A300080000                                      mov     [wdConsoleMemBase],eax                          ;save console memory address
  3965                                  ;
  3966                                  ;       Setup source address and row count.
  3967                                  ;
  3968 000001C4 8B3500080000            .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  3969 000001CA 31C9                                            xor     ecx,ecx                                         ;zero register
  3970 000001CC B110                                            mov     cl,16                                           ;row count
  3971 000001CE BB00090000                                      mov     ebx,wzConsoleMemBuf0                            ;output buffer address
  3972                                  ;
  3973                                  ;       Start the row with the source address in hexadecimal.
  3974                                  ;
  3975 000001D3 51                      .20                     push    ecx                                             ;save remaining rows
  3976 000001D4 89DF                                            mov     edi,ebx                                         ;output buffer address
  3977 000001D6 89FA                                            mov     edx,edi                                         ;output buffer address
  3978 000001D8 89F1                                            mov     ecx,esi                                         ;console memory address
  3979                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  3979 000001DA B005                <1>  mov al,eUnsignedToHexadecimal
  3979 000001DC CD30                <1>  int _svc
  3980 000001DE 83C708                                          add     edi,8                                           ;end of memory addr hexnum
  3981                                  ;
  3982                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  3983                                  ;
  3984 000001E1 31C9                                            xor     ecx,ecx                                         ;zero register
  3985 000001E3 B110                                            mov     cl,16                                           ;loop count
  3986 000001E5 51                      .30                     push    ecx                                             ;save loop count
  3987 000001E6 B020                                            mov     al,' '                                          ;ascii space
  3988 000001E8 AA                                              stosb                                                   ;store delimiter
  3989 000001E9 AC                                              lodsb                                                   ;memory byte
  3990 000001EA 88C4                                            mov     ah,al                                           ;memory byte
  3991 000001EC C0E804                                          shr     al,4                                            ;high-order in bits 3-0
  3992 000001EF 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  3993 000001F1 3C3A                                            cmp     al,3ah                                          ;numeric range?
  3994 000001F3 7202                                            jb      .40                                             ;yes, skip ahead
  3995 000001F5 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  3996 000001F7 AA                      .40                     stosb                                                   ;store ascii hexadecimal of high-order
  3997 000001F8 88E0                                            mov     al,ah                                           ;low-order in bits 3-0
  3998 000001FA 240F                                            and     al,0fh                                          ;mask out high-order bits
  3999 000001FC 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  4000 000001FE 3C3A                                            cmp     al,3ah                                          ;numeric range?
  4001 00000200 7202                                            jb      .50                                             ;yes, skip ahead
  4002 00000202 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  4003 00000204 AA                      .50                     stosb                                                   ;store ascii hexadecimal of low-order
  4004 00000205 59                                              pop     ecx                                             ;loop count
  4005 00000206 E2DD                                            loop    .30                                             ;next
  4006                                  ;
  4007                                  ;       Output printable ASCII character section for the row.
  4008                                  ;
  4009 00000208 B020                                            mov     al,' '                                          ;ascii space
  4010 0000020A AA                                              stosb                                                   ;store delimiter
  4011 0000020B B020                                            mov     al,' '                                          ;ascii space
  4012 0000020D AA                                              stosb                                                   ;store delimiter
  4013 0000020E 83EE10                                          sub     esi,16                                          ;reset source pointer
  4014 00000211 B110                                            mov     cl,16                                           ;loop count
  4015 00000213 AC                      .60                     lodsb                                                   ;source byte
  4016 00000214 3C20                                            cmp     al,32                                           ;printable? (low-range test)
  4017 00000216 7204                                            jb      .70                                             ;no, skip ahead
  4018 00000218 3C80                                            cmp     al,128                                          ;printable? (high-range test)
  4019 0000021A 7202                                            jb      .80                                             ;yes, skip ahead
  4020 0000021C B020                    .70                     mov     al,' '                                          ;display space instead of printable
  4021 0000021E AA                      .80                     stosb                                                   ;store printable ascii byte
  4022 0000021F E2F2                                            loop    .60                                             ;next source byte
  4023                                  ;
  4024                                  ;       Display constructed output buffer and newline.
  4025                                  ;
  4026 00000221 83C350                                          add     ebx,80                                          ;next contiguous output buffer addr
  4027                                  ;
  4028                                  ;       Repeat until all lines displayed and preserve source address.
  4029                                  ;
  4030 00000224 59                                              pop     ecx                                             ;remaining rows
  4031 00000225 E2AC                                            loop    .20                                             ;next row
  4032 00000227 893500080000                                    mov     [wdConsoleMemBase],esi                          ;update console memory address
  4033                                  ;
  4034                                  ;       Update the current panel identifier.
  4035                                  ;
  4036 0000022D B8[67020000]                                    mov     eax,czPnlMem001                                 ;initial console panel
  4037 00000232 A304080000                                      mov     [wdConsolePanel],eax                            ;save panel template address
  4038                                  ;
  4039                                  ;       Restore and return.
  4040                                  ;
  4041 00000237 5F                                              pop     edi                                             ;restore regs
  4042 00000238 5E                                              pop     esi                                             ;
  4043 00000239 5B                                              pop     ebx                                             ;
  4044 0000023A C3                                              ret                                                     ;return
  4045                                  ;-----------------------------------------------------------------------------------------------------------------------
  4046                                  ;
  4047                                  ;       Constants
  4048                                  ;
  4049                                  ;-----------------------------------------------------------------------------------------------------------------------
  4050                                  ;-----------------------------------------------------------------------------------------------------------------------
  4051                                  ;
  4052                                  ;       Panels
  4053                                  ;
  4054                                  ;       Notes:          1.      Each field MUST have an address of a constant or an input field.
  4055                                  ;                       2.      The constant text or input field MUST be at least the length of the field.
  4056                                  ;                       3.      Field constant text or field values MUST be comprised of printable characters.
  4057                                  ;
  4058                                  ;-----------------------------------------------------------------------------------------------------------------------
  4059 0000023B [57030000]              czPnlCon001             dd      czFldPnlIdCon001                                ;field text
  4060 0000023F 00000206                                        db      00,00,02h,06                                    ;flags+row, col, attr, length
  4061 00000243 [63030000]                                      dd      czFldTitleCon001
  4062 00000247 001E0714                                        db      00,30,07h,20
  4063 0000024B [85030000]                                      dd      czFldDatTmCon001
  4064 0000024F 003F0211                                        db      00,63,02h,17
  4065 00000253 [96030000]                                      dd      czFldPrmptCon001
  4066 00000257 17000701                                        db      23,00,07h,01
  4067 0000025B 10080000                                        dd      wzConsoleInBuffer
  4068 0000025F 9701074F                                        db      128+23,01,07h,79
  4069 00000263 00000000                                        dd      0                                               ;end of panel
  4070 00000267 [5D030000]              czPnlMem001             dd      czFldPnlIdMem001                                ;field text
  4071 0000026B 00000206                                        db      00,00,02h,06                                    ;flags+row, col, attr, length
  4072 0000026F [77030000]                                      dd      czFldTitleMem001
  4073 00000273 0021070E                                        db      00,33,07h,14
  4074 00000277 00090000                                        dd      wzConsoleMemBuf0
  4075 0000027B 03000750                                        db      03,00,07h,80
  4076 0000027F 50090000                                        dd      wzConsoleMemBuf1
  4077 00000283 04000750                                        db      04,00,07h,80
  4078 00000287 A0090000                                        dd      wzConsoleMemBuf2
  4079 0000028B 05000750                                        db      05,00,07h,80
  4080 0000028F F0090000                                        dd      wzConsoleMemBuf3
  4081 00000293 06000750                                        db      06,00,07h,80
  4082 00000297 400A0000                                        dd      wzConsoleMemBuf4
  4083 0000029B 07000750                                        db      07,00,07h,80
  4084 0000029F 900A0000                                        dd      wzConsoleMemBuf5
  4085 000002A3 08000750                                        db      08,00,07h,80
  4086 000002A7 E00A0000                                        dd      wzConsoleMemBuf6
  4087 000002AB 09000750                                        db      09,00,07h,80
  4088 000002AF 300B0000                                        dd      wzConsoleMemBuf7
  4089 000002B3 0A000750                                        db      10,00,07h,80
  4090 000002B7 800B0000                                        dd      wzConsoleMemBuf8
  4091 000002BB 0B000750                                        db      11,00,07h,80
  4092 000002BF D00B0000                                        dd      wzConsoleMemBuf9
  4093 000002C3 0C000750                                        db      12,00,07h,80
  4094 000002C7 200C0000                                        dd      wzConsoleMemBufA
  4095 000002CB 0D000750                                        db      13,00,07h,80
  4096 000002CF 700C0000                                        dd      wzConsoleMemBufB
  4097 000002D3 0E000750                                        db      14,00,07h,80
  4098 000002D7 C00C0000                                        dd      wzConsoleMemBufC
  4099 000002DB 0F000750                                        db      15,00,07h,80
  4100 000002DF 100D0000                                        dd      wzConsoleMemBufD
  4101 000002E3 10000750                                        db      16,00,07h,80
  4102 000002E7 600D0000                                        dd      wzConsoleMemBufE
  4103 000002EB 11000750                                        db      17,00,07h,80
  4104 000002EF B00D0000                                        dd      wzConsoleMemBufF
  4105 000002F3 12000750                                        db      18,00,07h,80
  4106 000002F7 [96030000]                                      dd      czFldPrmptCon001
  4107 000002FB 17000701                                        db      23,00,07h,01
  4108 000002FF 10080000                                        dd      wzConsoleInBuffer
  4109 00000303 9701074F                                        db      128+23,01,07h,79
  4110 00000307 00000000                                        dd      0                                               ;end of panel
  4111                                  ;-----------------------------------------------------------------------------------------------------------------------
  4112                                  ;
  4113                                  ;       Tables
  4114                                  ;
  4115                                  ;-----------------------------------------------------------------------------------------------------------------------
  4116                                                                                                                  ;---------------------------------------
  4117                                                                                                                  ;  Command Jump Table
  4118                                                                                                                  ;---------------------------------------
  4119                                  tConJmpTbl              equ     $                                               ;command jump table
  4120 0000030B 88010000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  4121 0000030F 9B010000                                        dd      ConMem          - ConCode                       ;memory command routine offset
  4122 00000313 88010000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  4123 00000317 8D010000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  4124 0000031B 90010000                                        dd      ConMain         - ConCode                       ;main command routine offset
  4125 0000031F 88010000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  4126 00000323 9B010000                                        dd      ConMem          - ConCode                       ;mem command routine offset
  4127                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4128                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4129                                                                                                                  ;---------------------------------------
  4130                                                                                                                  ;  Command Name Table
  4131                                                                                                                  ;---------------------------------------
  4132                                  tConCmdTbl              equ     $                                               ;command name table
  4133 00000327 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  4133 00000330 00                 
  4134 00000331 074D454D4F525900                                db      7,"MEMORY",0                                    ;memory command
  4135 00000339 054558495400                                    db      5,"EXIT",0                                      ;exit command
  4136 0000033F 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  4137 00000345 054D41494E00                                    db      5,"MAIN",0                                      ;main command
  4138 0000034B 055155495400                                    db      5,"QUIT",0                                      ;quit command
  4139 00000351 044D454D00                                      db      4,"MEM",0                                       ;mem command
  4140 00000356 00                                              db      0                                               ;end of table
  4141                                  ;-----------------------------------------------------------------------------------------------------------------------
  4142                                  ;
  4143                                  ;       Strings
  4144                                  ;
  4145                                  ;-----------------------------------------------------------------------------------------------------------------------
  4146 00000357 4D41494E3031            czFldPnlIdCon001        db      "MAIN01"                                        ;main console panel id
  4147 0000035D 4D454D303031            czFldPnlIdMem001        db      "MEM001"                                        ;memory panel id
  4148 00000363 437573746F6D4F5320-     czFldTitleCon001        db      "CustomOS Version 1.0"                          ;main console panel title
  4148 0000036C 56657273696F6E2031-
  4148 00000375 2E30               
  4149 00000377 4D656D6F7279204469-     czFldTitleMem001        db      "Memory Display"                                ;memory panel title
  4149 00000380 73706C6179         
  4150 00000385 44442D4D4D4D2D5959-     czFldDatTmCon001        db      "DD-MMM-YYYY HH:MM"                             ;panel date and time template
  4150 0000038E 59592048483A4D4D   
  4151 00000396 3A                      czFldPrmptCon001        db      ":"                                             ;command prompt
  4152 00000397 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  4153                                  %endif
  4154                                  %ifdef BUILDDISK
  4155                                  ;-----------------------------------------------------------------------------------------------------------------------
  4156                                  ;
  4157                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  4158                                  ;
  4159                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4160                                  ;
  4161                                  ;-----------------------------------------------------------------------------------------------------------------------
  4162                                  section                 unused                                                  ;unused disk space
  4163 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  4164                                  %endif
  4165                                  ;=======================================================================================================================
  4166                                  ;
  4167                                  ;       End of Program Code
  4168                                  ;
  4169                                  ;=======================================================================================================================
