     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.009
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support the "mem" and "memory" commands.
     8                                  ;
     9                                  ;       Revised:        July 4, 2018
    10                                  ;
    11                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    17                                  ;
    18                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;       Assembly Directives
    24                                  ;
    25                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    34                                  %define BUILDBOOT                                                               ;... build the boot sector
    35                                  %define BUILDCOM                                                                ;... and the OS kernel
    36                                  %endif
    37                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    38                                  %define BUILDBOOT                                                               ;... also build the boot sector
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;       Conventions
    43                                  ;
    44                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    45                                  ;                       Logical tabs are set after each eight columns.
    46                                  ;                       Tabs are simulated using SPACE characters.
    47                                  ;                       For comments that span an entire line, comment text begins in column 9.
    48                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    49                                  ;                       Assembly operands begin in column 33.
    50                                  ;                       Inline comments begin in column 81.
    51                                  ;                       Lines should not extend beyond column 120.
    52                                  ;
    53                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    54                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    55                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    56                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    57                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    58                                  ;                       ouput buffers, respectively.
    59                                  ;
    60                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    61                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    62                                  ;
    63                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    64                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    65                                  ;                       Register names in comments are in upper case (EAX, EDI).
    66                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    67                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    68                                  ;                       register contents on entry and exit.
    69                                  ;
    70                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    71                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    72                                  ;                       The 2nd letter of the constant label indicates the storage type.
    73                                  ;
    74                                  ;                       cq......        constant quad-word (dq)
    75                                  ;                       cd......        constant double-word (dd)
    76                                  ;                       cw......        constant word (dw)
    77                                  ;                       cb......        constant byte (db)
    78                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    79                                  ;
    80                                  ;       Instructions:   32-bit instructions are generally favored.
    81                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    82                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    83                                  ;
    84                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    85                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    86                                  ;
    87                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    88                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    89                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    90                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    91                                  ;                       Octal literal values are avoided.
    92                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    93                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    94                                  ;
    95                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    96                                  ;                       Macro names describe an action and so DO begin with a verb.
    97                                  ;
    98                                  ;       Memory Use:     Operating system memory allocation is minimized.
    99                                  ;                       Buffers are kept to as small a size as practicable.
   100                                  ;                       Data and code intermingling is avoided wherever possible.
   101                                  ;
   102                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   103                                  ;                       Register names in source code are in lower case (eax, edx).
   104                                  ;
   105                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   106                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   107                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   108                                  ;
   109                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   110                                  ;                       Routine names begin with a verb (Get, Read, Load).
   111                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   112                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   113                                  ;                       function but begin with a leading underscore (_) character.
   114                                  ;
   115                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   116                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   117                                  ;
   118                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   119                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   120                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   121                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   122                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   123                                  ;
   124                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   125                                  ;                       The 2nd letter of the variable label indicates the storage type.
   126                                  ;
   127                                  ;                       wq......        variable quad-word (resq)
   128                                  ;                       wd......        variable double-word (resd)
   129                                  ;                       ww......        variable word (resw)
   130                                  ;                       wb......        variable byte (resb)
   131                                  ;                       ws......        writable structure
   132                                  ;
   133                                  ;-----------------------------------------------------------------------------------------------------------------------
   134                                  ;=======================================================================================================================
   135                                  ;
   136                                  ;       Equates
   137                                  ;
   138                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   139                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   140                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   141                                  ;       sets. Equates here are defined in the following groupings:
   142                                  ;
   143                                  ;       Hardware-Defined Values
   144                                  ;
   145                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   146                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   147                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   148                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   149                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   150                                  ;       EX86...         Intel x86 CPU architecture values
   151                                  ;
   152                                  ;       Firmware-Defined Values
   153                                  ;
   154                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   155                                  ;
   156                                  ;       Standards-Based Values
   157                                  ;
   158                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   159                                  ;
   160                                  ;       Operating System Values
   161                                  ;
   162                                  ;       EBOOT...        Boot sector and loader values
   163                                  ;       ECON...         Console values (dimensions and attributes)
   164                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   165                                  ;       EKEYF...        Keyboard status flags
   166                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   167                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   168                                  ;       EMSG...         Message identifers
   169                                  ;
   170                                  ;=======================================================================================================================
   171                                  ;-----------------------------------------------------------------------------------------------------------------------
   172                                  ;
   173                                  ;       Hardware-Defined Values
   174                                  ;
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;
   178                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   179                                  ;
   180                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   181                                  ;       for CGA, EGA, VGA and compatible video modes.
   182                                  ;
   183                                  ;-----------------------------------------------------------------------------------------------------------------------
   184                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   185                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   186                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   187                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   188                                  ;-----------------------------------------------------------------------------------------------------------------------
   189                                  ;
   190                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   191                                  ;
   192                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   193                                  ;
   194                                  ;-----------------------------------------------------------------------------------------------------------------------
   195                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   196                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   197                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   198                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   199                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   200                                  ;-----------------------------------------------------------------------------------------------------------------------
   201                                  ;
   202                                  ;       8042 Keyboard Controller                                                EKEYB...
   203                                  ;
   204                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   205                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   206                                  ;
   207                                  ;-----------------------------------------------------------------------------------------------------------------------
   208                                  EKEYBPORTDATA           equ     060h                                            ;data port
   209                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   210                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   211                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   212                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   213                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   214                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   215                                                                                                                  ;---------------------------------------
   216                                                                                                                  ;       Keyboard Scan Codes
   217                                                                                                                  ;---------------------------------------
   218                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   219                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   220                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   221                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   222                                  EKEYBSLASH              equ     035h                                            ;slash
   223                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   224                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   225                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   226                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   227                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   228                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   229                                  EKEYBUP                 equ     080h                                            ;up
   230                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   231                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   232                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   233                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   234                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   235                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   236                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   237                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   238                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   239                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   240                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   241                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   242                                  ;-----------------------------------------------------------------------------------------------------------------------
   243                                  ;
   244                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   245                                  ;
   246                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   247                                  ;       external devices and signals a hardware interrupt to the CPU.
   248                                  ;
   249                                  ;-----------------------------------------------------------------------------------------------------------------------
   250                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   251                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   252                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   253                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   254                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   255                                  ;-----------------------------------------------------------------------------------------------------------------------
   256                                  ;
   257                                  ;       8253 Programmable Interval Timer                                        EPIT...
   258                                  ;
   259                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   260                                  ;       approximately 18.2 times per second.
   261                                  ;
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  ;
   266                                  ;       x86 CPU Architecture                                                    ;EX86...
   267                                  ;
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   270                                  ;-----------------------------------------------------------------------------------------------------------------------
   271                                  ;
   272                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   273                                  ;
   274                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   275                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   276                                  ;
   277                                  ;       0.......        Segment is not present in memory (triggers int 11)
   278                                  ;       1.......        Segment is present in memory
   279                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   280                                  ;       ...0....        Segment is a system segment
   281                                  ;       ...00010                Local Descriptor Table
   282                                  ;       ...00101                Task Gate
   283                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   284                                  ;       ...01100                Call Gate (386)
   285                                  ;       ...01110                Interrupt Gate (386)
   286                                  ;       ...01111                Trap Gate (386)
   287                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   288                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   289                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   290                                  ;
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   293                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   294                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   295                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   296                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   297                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   298                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   299                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;
   302                                  ;       Firmware-Defined Values
   303                                  ;
   304                                  ;-----------------------------------------------------------------------------------------------------------------------
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  ;
   307                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   308                                  ;
   309                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   310                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   311                                  ;
   312                                  ;-----------------------------------------------------------------------------------------------------------------------
   313                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   314                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   315                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   316                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   317                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   318                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   319                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   320                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   321                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   322                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   323                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;
   326                                  ;       Standards-Based Values
   327                                  ;
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  ;
   331                                  ;       ASCII                                                                   EASCII...
   332                                  ;
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   335                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   336                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   337                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   338                                  EASCIISPACE             equ     020h                                            ;space
   339                                  EASCIIUPPERA            equ     041h                                            ;'A'
   340                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   341                                  EASCIILOWERA            equ     061h                                            ;'a'
   342                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   343                                  EASCIITILDE             equ     07Eh                                            ;'~'
   344                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   345                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   346                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   347                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   348                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   349                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   350                                  EASCIICASE              equ     00100000b                                       ;case bit
   351                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;
   354                                  ;       Operating System Values
   355                                  ;
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  ;
   359                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   360                                  ;
   361                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   362                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   363                                  ;
   364                                  ;-----------------------------------------------------------------------------------------------------------------------
   365                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   366                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   367                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   368                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   369                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   370                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   371                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   372                                  ;-----------------------------------------------------------------------------------------------------------------------
   373                                  ;       Console Constants                                                       ECON...
   374                                  ;-----------------------------------------------------------------------------------------------------------------------
   375                                  ECONCOLS                equ     80                                              ;columns per row
   376                                  ECONROWS                equ     24                                              ;console rows
   377                                  ECONOIAROW              equ     24                                              ;operator information area row
   378                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   379                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   380                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   381                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   382                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   383                                  ;-----------------------------------------------------------------------------------------------------------------------
   384                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   385                                  ;-----------------------------------------------------------------------------------------------------------------------
   386                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   387                                  EGDTCGA                 equ     020h                                            ;cga video selector
   388                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   389                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   390                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   391                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   392                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   393                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   394                                  ;-----------------------------------------------------------------------------------------------------------------------
   395                                  ;       Keyboard Flags                                                          EKEYF...
   396                                  ;-----------------------------------------------------------------------------------------------------------------------
   397                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   398                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   399                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   400                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   401                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   402                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   403                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   404                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   405                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   406                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   407                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   408                                  ;-----------------------------------------------------------------------------------------------------------------------
   409                                  ;       Kernel Constants                                                        EKRN...
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   412                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   413                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   414                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   415                                  ;-----------------------------------------------------------------------------------------------------------------------
   416                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   417                                  ;-----------------------------------------------------------------------------------------------------------------------
   418                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   419                                  ;-----------------------------------------------------------------------------------------------------------------------
   420                                  ;       Message Identifiers                                                     EMSG...
   421                                  ;-----------------------------------------------------------------------------------------------------------------------
   422                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   423                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   424                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   425                                  ;=======================================================================================================================
   426                                  ;
   427                                  ;       Structures
   428                                  ;
   429                                  ;=======================================================================================================================
   430                                  ;-----------------------------------------------------------------------------------------------------------------------
   431                                  ;
   432                                  ;       MQUEUE
   433                                  ;
   434                                  ;       The MQUEUE structure maps memory used for a message queue.
   435                                  ;
   436                                  ;-----------------------------------------------------------------------------------------------------------------------
   437                                  struc                   MQUEUE
   438 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   439 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   440 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   441                                  endstruc
   442                                  ;-----------------------------------------------------------------------------------------------------------------------
   443                                  ;
   444                                  ;       OSDATA
   445                                  ;
   446                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   447                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   448                                  ;
   449                                  ;-----------------------------------------------------------------------------------------------------------------------
   450                                  struc                   OSDATA
   451 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   452 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   453 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   454 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   455 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   456 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   457 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   458 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   459 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   460 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   461 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   462 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   463 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   464 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   465 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   466 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   467 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   468 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   469 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   470 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   471 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   472 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   473 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   474 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   475 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   476 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   477 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   478 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   479 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   480 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   481 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   482 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   483 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   484 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   485 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   486 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   487 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   488 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   489 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   490 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   491 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   492 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   493 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   494 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   495 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   496 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   497 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   498 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   499 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   500 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   501 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   502 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   503 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   504 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   505 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   506 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   507 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   508 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   509 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   510 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   511 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   512 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   513 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   514 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   515 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   516 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   517 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   518 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   519 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   520 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   521 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   522 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   523 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   524 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   525 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   526 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   527 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   528 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   529 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   530 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   531 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   532 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   533 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   534 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   535 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   536 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   537 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   538 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   539 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   540 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   541 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   542 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   543 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   544 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   545 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   546 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   547 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   548 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   549 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   550 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   551 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   552                                  ;-----------------------------------------------------------------------------------------------------------------------
   553                                  ;
   554                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   555                                  ;
   556                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   557                                  ;
   558                                  ;-----------------------------------------------------------------------------------------------------------------------
   559                                  ECONDATA                equ     ($)
   560 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   561 00000804 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   562 00000805 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   563 00000806 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   564 00000807 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   565 00000808 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   566 00000809 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   567 0000080A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   568 0000080B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   569 0000080C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   570 0000080D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   571 0000080E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   572 0000080F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   573 00000810 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   574 00000860 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   575 000008B0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   576                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   577                                  ;-----------------------------------------------------------------------------------------------------------------------
   578                                  ;
   579                                  ;       End of OS Variables
   580                                  ;
   581                                  ;-----------------------------------------------------------------------------------------------------------------------
   582                                  endstruc
   583                                  ;-----------------------------------------------------------------------------------------------------------------------
   584                                  ;
   585                                  ;       Macros
   586                                  ;
   587                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   588                                  ;
   589                                  ;-----------------------------------------------------------------------------------------------------------------------
   590                                  %macro                  mint    1
   591                                  _%1                     equ     ($-$$) / EX86DESCLEN
   592                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   593                                  %endmacro
   594                                  %macro                  mtrap   1
   595                                  _%1                     equ     ($-$$) / EX86DESCLEN
   596                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   597                                  %endmacro
   598                                  %macro                  menter  1
   599                                  ?%1                     equ     ($-$$)
   600                                  %endmacro
   601                                  %macro                  tsvce   1
   602                                  e%1                     equ     ($-tsvc)/4
   603                                                          dd      %1
   604                                  %endmacro
   605                                  %ifdef BUILDBOOT
   606                                  ;=======================================================================================================================
   607                                  ;
   608                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   609                                  ;
   610                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   611                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   612                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   613                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   614                                  ;
   615                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   616                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   617                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   618                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   619                                  ;       immediately followed by a disk parameter table.
   620                                  ;
   621                                  ;=======================================================================================================================
   622                                                          cpu     8086                                            ;assume minimal CPU
   623                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   624                                                          bits    16                                              ;16-bit code at power-up
   625                                  %ifdef BUILDPREP
   626                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   627                                  %else
   628 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   629                                  %endif
   630                                  ;-----------------------------------------------------------------------------------------------------------------------
   631                                  ;
   632                                  ;       Disk Parameter Table
   633                                  ;
   634                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   635                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   636                                  ;
   637                                  ;-----------------------------------------------------------------------------------------------------------------------
   638 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   639 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   640 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   641 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   642 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   643 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   644 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   645 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   646 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   647                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   648 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   649 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   650 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   651                                  ;
   652                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   653                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   654                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   655                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   656                                  ;       given several possible starting values for CS:IP.
   657                                  ;
   658                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   659 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   660                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   661 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   662 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   663 00000025 B104                                            mov     cl,4                                            ;shift count
   664 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   665 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   666 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   667                                  ;
   668                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   669                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   670                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   671                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   672                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   673                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   674                                  ;
   675 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   676 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   677 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   678 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   679 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   680                                  ;
   681                                  ;       Our boot addressability is now set up according to the following diagram.
   682                                  ;
   683                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   684                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   685                                  ;                               |  256 = 100h bytes                             |
   686                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   687                                  ;                               |  Boot Sector (vstart=0100h)                   |
   688                                  ;                               |  1 sector = 512 = 200h bytes                  |
   689                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   690                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   691                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   692                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   693                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   694                                  ;                               |  2 sectors = 1024 = 400h bytes
   695                                  ;                       009400  +-----------------------------------------------+ DS:1900
   696                                  ;
   697                                  ;       On entry, DL indicates the drive being booted from.
   698                                  ;
   699 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   700                                  ;
   701                                  ;       Compute directory i/o buffer address.
   702                                  ;
   703 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   704 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   705 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   706 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   707                                  ;
   708                                  ;       Compute segment where os.com will be loaded.
   709                                  ;
   710 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   711 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   712 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   713 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   714                                  ;
   715                                  ;       Set the video mode to 80 column, 25 row, text.
   716                                  ;
   717 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   718 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   719                                  ;
   720                                  ;       Write a message to the console so we know we have our addressability established.
   721                                  ;
   722 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   723 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   724                                  ;
   725                                  ;       Initialize the number of directory sectors to search.
   726                                  ;
   727 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   728 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   729                                  ;
   730                                  ;       Compute number of directory sectors and initialize overhead count.
   731                                  ;
   732 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   733 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   734 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   735 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   736                                  ;
   737                                  ;       Compute directory entries per sector.
   738                                  ;
   739 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   740 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   741 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   742                                  ;
   743                                  ;       Compute first logical directory sector and update overhead count.
   744                                  ;
   745 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   746 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   747 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   748 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   749 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   750 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   751                                  ;
   752                                  ;       Read directory sector.
   753                                  ;
   754 0000008E B001                    .30                     mov     al,1                                            ;sector count
   755 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   756 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   757 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   758                                  ;
   759                                  ;       Setup variables to search this directory sector.
   760                                  ;
   761 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   762 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   763 000000A1 7603                                            jna     .40                                             ;no, continue
   764 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   765 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   766 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   767 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   768                                  ;
   769                                  ;       Loop through directory sectors searching for kernel program.
   770                                  ;
   771 000000B1 56                      .50                     push    si                                              ;save kernel name address
   772 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   773 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   774 000000B6 FC                                              cld                                                     ;forward strings
   775 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   776 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   777 000000BA 5E                                              pop     si                                              ;restore kernel name address
   778 000000BB 7418                                            je      .60                                             ;exit loop if found
   779 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   780 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   781 000000C2 75ED                                            jnz     .50                                             ;next entry
   782                                  ;
   783                                  ;       Repeat search if we are not at the end of the directory.
   784                                  ;
   785 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   786 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   787 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   788 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   789 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   790                                  ;
   791                                  ;       If we find the kernel program in the directory, read the FAT.
   792                                  ;
   793 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   794 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   795 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   796 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   797 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   798 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   799                                  ;
   800                                  ;       Get the starting cluster of the kernel program and target address.
   801                                  ;
   802 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   803 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   804                                  ;
   805                                  ;       Read each program cluster into RAM.
   806                                  ;
   807 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   808 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   809 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   810 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   811 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   812 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   813 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   814 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   815 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   816                                  ;
   817                                  ;       Update buffer pointer for next cluster.
   818                                  ;
   819 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   820 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   821 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   822 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   823 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   824                                  ;
   825                                  ;       Compute next cluster number.
   826                                  ;
   827 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   828 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   829 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   830 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   831 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   832 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   833 00000120 83E701                                          and     di,1                                            ;get low bit
   834 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   835 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   836 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   837                                  ;
   838                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   839                                  ;
   840 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   841 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   842 00000130 B104                                            mov     cl,4                                            ;shift count
   843 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   844 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   845 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   846 0000013A 75B2                                            jne     .70                                             ;no, continue
   847                                  ;
   848                                  ;       Transfer control to the operating system program.
   849                                  ;
   850 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   851 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   852 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   853                                  ;
   854                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   855                                  ;
   856 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   857 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   858 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   859 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   860 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   861 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   862 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   863 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   864 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   865 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   866                                  ;
   867                                  ;       Try maxtries times to read sector.
   868                                  ;
   869 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   870 00000160 53                      .10                     push    bx                                              ;save buffer address
   871 00000161 51                                              push    cx                                              ;save retry count
   872 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   873 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   874 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   875 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   876 0000016F 59                                              pop     cx                                              ;restore retry count
   877 00000170 5B                                              pop     bx                                              ;restore buffer address
   878 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   879 00000173 E2EB                                            loop    .10                                             ;retry
   880                                  ;
   881                                  ;       Handle disk error: convert to ASCII and store in error string.
   882                                  ;
   883 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   884 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   885 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   886 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   887 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   888 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   889 00000183 7203                                            jb      .20                                             ;continue if numeral
   890 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   891 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   892 0000018A 7203                                            jb      .30                                             ;continue if numeral
   893 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   894 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   895 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   896 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   897                                  ;
   898                                  ;       Wait for a key press.
   899                                  ;
   900 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   901 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   902 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   903 0000019E FB                                              sti                                                     ;enable maskable interrupts
   904 0000019F F4                                              hlt                                                     ;wait for interrupt
   905 000001A0 EBF6                                            jmp     .10                                             ;repeat
   906                                  ;
   907                                  ;       Reset the system.
   908                                  ;
   909 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   910 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   911 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   912 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   913 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   914                                  ;
   915                                  ;       Display text message.
   916                                  ;
   917 000001AA FC                      BootPrint               cld                                                     ;forward strings
   918 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   919 000001AC 84C0                                            test    al,al                                           ;end of string?
   920 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   921 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   922 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   923 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   924 000001B6 C3                      BootReturn              ret                                                     ;return
   925                                  ;-----------------------------------------------------------------------------------------------------------------------
   926                                  ;
   927                                  ;       Constants
   928                                  ;
   929                                  ;-----------------------------------------------------------------------------------------------------------------------
   930 000001B7 90                                              align   2
   931 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   932 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   932 000001C3 4F4D               
   933 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   933 000001CE 530D0A00           
   934 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   934 000001DB 7220               
   935 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   936 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   936 000001E9 6700               
   937                                  ;-----------------------------------------------------------------------------------------------------------------------
   938                                  ;
   939                                  ;       Work Areas
   940                                  ;
   941                                  ;-----------------------------------------------------------------------------------------------------------------------
   942 000001EB 90                                              align   2
   943 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   944 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   945 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   946 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   947 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   948                                  wwReadCountCommand      equ     $                                               ;read count and command
   949 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   950 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   951                                  wwDriveHead             equ     $                                               ;drive, head (word)
   952 000001F8 00                      wbDrive                 db      0                                               ;drive
   953 000001F9 00                      wbHead                  db      0                                               ;head
   954                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   955 000001FA 00                                              db      0                                               ;sector
   956 000001FB 00                      wbTrack                 db      0                                               ;track
   957 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   958 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   959                                  %endif
   960                                  %ifdef BUILDPREP
   961                                  ;=======================================================================================================================
   962                                  ;
   963                                  ;       Diskette Preparation Code
   964                                  ;
   965                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   966                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   967                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   968                                  ;
   969                                  ;=======================================================================================================================
   970                                  ;
   971                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   972                                  ;
   973                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   974                                                          call    BootPrint                                       ;display message
   975                                  ;
   976                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   977                                  ;
   978                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   979                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   980                                                          jnz     .20                                             ;continue if key pressed
   981                                                          sti                                                     ;enable interrupts
   982                                                          hlt                                                     ;wait for interrupt
   983                                                          jmp     .10                                             ;repeat
   984                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   985                                                          je      .30                                             ;yes, branch
   986                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   987                                                          jne     .10                                             ;no, repeat
   988                                                          jmp     .120                                            ;yes, exit program
   989                                  ;
   990                                  ;       Display writing-sector message and patch the JMP instruction.
   991                                  ;
   992                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   993                                                          call    BootPrint                                       ;display message
   994                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   995                                                          mov     ax,01Bh                                         ;address past disk parameter table
   996                                                          mov     [bx],ax                                         ;update the JMP instruction
   997                                  ;
   998                                  ;       Try to read the boot sector.
   999                                  ;
  1000                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1001                                  .40                     push    cx                                              ;save remaining tries
  1002                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1003                                                          mov     dx,0                                            ;head zero, drive zero
  1004                                                          mov     cx,1                                            ;track zero, sector one
  1005                                                          mov     al,1                                            ;one sector
  1006                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1007                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1008                                                          pop     cx                                              ;restore remaining retries
  1009                                                          jnc     .50                                             ;skip ahead if successful
  1010                                                          loop    .40                                             ;try again
  1011                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1012                                                          jmp     .70                                             ;branch to error routine
  1013                                  ;
  1014                                  ;       Copy diskette parms from input buffer to output buffer.
  1015                                  ;
  1016                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1017                                                          add     si,11                                           ;skip over JMP and system ID
  1018                                                          mov     di,Boot                                         ;output buffer address
  1019                                                          add     di,11                                           ;skip over JMP and system ID
  1020                                                          mov     cx,19                                           ;length of diskette parameters
  1021                                                          cld                                                     ;forward string copies
  1022                                                          rep     movsb                                           ;copy diskette parameters
  1023                                  ;
  1024                                  ;       Try to write boot sector to diskette.
  1025                                  ;
  1026                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1027                                  .60                     push    cx                                              ;save remaining tries
  1028                                                          mov     bx,Boot                                         ;output buffer address
  1029                                                          mov     dx,0                                            ;head zero, drive zero
  1030                                                          mov     cx,1                                            ;track zero, sector one
  1031                                                          mov     al,1                                            ;one sector
  1032                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1033                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1034                                                          pop     cx                                              ;restore remaining retries
  1035                                                          jnc     .100                                            ;skip ahead if successful
  1036                                                          loop    .60                                             ;try again
  1037                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1038                                  ;
  1039                                  ;       Convert the error code to ASCII and display the error message.
  1040                                  ;
  1041                                  .70                     push    ax                                              ;save error code
  1042                                                          mov     al,ah                                           ;copy error code
  1043                                                          mov     ah,0                                            ;AX = error code
  1044                                                          mov     dl,10h                                          ;hexadecimal divisor
  1045                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1046                                                          or      ax,03030h                                       ;add ASCII zone digits
  1047                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1048                                                          jb      .80                                             ;yes, continue
  1049                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1050                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1051                                                          jb      .90                                             ;yes, continue
  1052                                                          add     al,7                                            ;no, make ASCII
  1053                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1054                                                          call    BootPrint                                       ;write error message
  1055                                                          pop     ax                                              ;restore error code
  1056                                  ;
  1057                                  ;       Display the completion message.
  1058                                  ;
  1059                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1060                                                          mov     al,ah                                           ;BIOS return code
  1061                                                          cmp     al,0                                            ;success?
  1062                                                          je      .110                                            ;yes, continue
  1063                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1064                                                          cmp     al,1                                            ;disk parameter error?
  1065                                                          je      .110                                            ;yes, continue
  1066                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1067                                                          cmp     al,2                                            ;address mark not found?
  1068                                                          je      .110                                            ;yes, continue
  1069                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1070                                                          cmp     al,3                                            ;protected disk?
  1071                                                          je      .110                                            ;yes, continue
  1072                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1073                                                          cmp     al,6                                            ;diskette removed?
  1074                                                          je      .110                                            ;yes, continue
  1075                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1076                                                          cmp     al,80H                                          ;drive timed out?
  1077                                                          je      .110                                            ;yes, continue
  1078                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1079                                  .110                    call    BootPrint                                       ;display result message
  1080                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1081                                                          int     021h                                            ;terminate DOS program
  1082                                                          ret                                                     ;return (should not execute)
  1083                                  ;-----------------------------------------------------------------------------------------------------------------------
  1084                                  ;
  1085                                  ;       Diskette Preparation Messages
  1086                                  ;
  1087                                  ;-----------------------------------------------------------------------------------------------------------------------
  1088                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1089                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1090                                                          db      13,10
  1091                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1092                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1093                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1094                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1095                                                          db      13,10,0
  1096                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1097                                                          db      13,10,0
  1098                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1099                                                          db      13,10,0
  1100                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1101                                                          db      13,10,0
  1102                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1103                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1104                                                          db      13,10,0
  1105                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1106                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1107                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1108                                                          db      13,10,"and retry."
  1109                                                          db      13,10,0
  1110                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1111                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1112                                                          db      13,10,"using another diskette."
  1113                                                          db      13,10,0
  1114                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1115                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1116                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1117                                                          db      13,10,0
  1118                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1119                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1120                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1121                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1122                                                          db      13,10,"is properly inserted in the diskette drive."
  1123                                                          db      13,10,0
  1124                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1125                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1126                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1127                                                          db      13,10,0
  1128                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1129                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1130                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1131                                                          db      13,10,0
  1132                                  wcPrepInBuf             equ     $
  1133                                  %endif
  1134                                  %ifdef BUILDDISK
  1135                                  ;=======================================================================================================================
  1136                                  ;
  1137                                  ;       File Allocation Tables
  1138                                  ;
  1139                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1140                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1141                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1142                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1143                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1144                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1145                                  ;       the last cluster in the chain.
  1146                                  ;
  1147                                  ;       Every three bytes encode two FAT entries as follows:
  1148                                  ;
  1149                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1150                                  ;
  1151                                  ;=======================================================================================================================
  1152                                  ;-----------------------------------------------------------------------------------------------------------------------
  1153                                  ;
  1154                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1155                                  ;
  1156                                  ;-----------------------------------------------------------------------------------------------------------------------
  1157                                  section                 fat1                                                    ;first copy of FAT
  1158 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1159 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1160 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1161 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1162 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1163 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1164 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1165 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1166 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1167 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1168 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1169 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1170                                  ;-----------------------------------------------------------------------------------------------------------------------
  1171                                  ;
  1172                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1173                                  ;
  1174                                  ;-----------------------------------------------------------------------------------------------------------------------
  1175                                  section                 fat2                                                    ;second copy of FAT
  1176 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1177 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1178 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1179 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1180 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1181 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1182 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1183 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1184 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1185 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1186 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1187 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1188                                  ;-----------------------------------------------------------------------------------------------------------------------
  1189                                  ;
  1190                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1191                                  ;
  1192                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1193                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1194                                  ;       copy.
  1195                                  ;
  1196                                  ;-----------------------------------------------------------------------------------------------------------------------
  1197                                  section                 dir                                                     ;diskette directory
  1198 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1198 00000009 4F4D               
  1199 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1200 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1201 00000016 0000                                            dw      0h                                              ;time
  1202 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1203 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1204 0000001A 0200                                            dw      2                                               ;first cluster
  1205 0000001C 00540000                                        dd      05400h                                          ;file size
  1206 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1207                                  %endif
  1208                                  %ifdef BUILDCOM
  1209                                  ;=======================================================================================================================
  1210                                  ;
  1211                                  ;       OS.COM
  1212                                  ;
  1213                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1214                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1215                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1216                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1217                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1218                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1219                                  ;
  1220                                  ;       Our loader addressability is set up according to the following diagram.
  1221                                  ;
  1222                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1223                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1224                                  ;                               |  256 = 100h bytes                             |
  1225                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1226                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1227                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1228                                  ;                       007e00  +-----------------------------------------------+
  1229                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1230                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1231                                  ;                               |                                               |
  1232                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1233                                  ;                               |                                               |
  1234                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1235                                  ;                               |  Loader Code                                  |
  1236                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1237                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1238                                  ;
  1239                                  ;=======================================================================================================================
  1240                                  ;-----------------------------------------------------------------------------------------------------------------------
  1241                                  ;
  1242                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1243                                  ;
  1244                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1245                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1246                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1247                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1248                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1249                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1250                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1251                                  ;       registers.
  1252                                  ;
  1253                                  ;-----------------------------------------------------------------------------------------------------------------------
  1254                                                          cpu     8086                                            ;assume minimal CPU
  1255                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1256                                                          bits    16                                              ;this is 16-bit code
  1257 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1258 00000001 1F                                              pop     ds                                              ;...as our data segment
  1259 00000002 0E                                              push    cs                                              ;use the code segment
  1260 00000003 07                                              pop     es                                              ;...as our extra segment
  1261                                  ;
  1262                                  ;       Write a message to the console so we know we have our addressability established.
  1263                                  ;
  1264 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1265 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1266                                  ;
  1267                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1268                                  ;
  1269 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1270 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1271 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1272 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1273                                                          cpu     386                                             ;allow 80386 instructions
  1274 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1275 00000017 E89600                                          call    PutTTYString                                    ;display message
  1276                                  ;
  1277                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1278                                  ;
  1279 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1280 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1281 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1282 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1283 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1284 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1285 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1286 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1287 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1288 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1289                                  ;
  1290                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1291                                  ;
  1292 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1293 00000038 07                                              pop     es                                              ;... as target segment
  1294 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1295 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1296 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1297 00000041 FC                                              cld                                                     ;forward strings
  1298 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1299 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1300 00000047 E86600                                          call    PutTTYString                                    ;display message
  1301                                  ;
  1302                                  ;       Switch to protected mode.
  1303                                  ;
  1304 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1305 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1306 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1307 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1308 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1309 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1310 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1311 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1312 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1313 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1314 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1315                                  ;
  1316                                  ;       Enable hardware and maskable interrupts.
  1317                                  ;
  1318 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1319 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1320 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1321 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1322                                  ;
  1323                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1324                                  ;
  1325 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1326 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1327 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1328                                  ;-----------------------------------------------------------------------------------------------------------------------
  1329                                  ;
  1330                                  ;       Routine:        LoaderExit
  1331                                  ;
  1332                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1333                                  ;
  1334                                  ;       In:             DS:SI   string address
  1335                                  ;
  1336                                  ;-----------------------------------------------------------------------------------------------------------------------
  1337 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1338                                  ;
  1339                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1340                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1341                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1342                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1343                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1344                                  ;
  1345 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1346 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1347 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1348 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1349 00000085 F4                                              hlt                                                     ;wait for interrupt
  1350 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1351                                  ;
  1352                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1353                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1354                                  ;       HLT until the system resets.
  1355                                  ;
  1356 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1357 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1358 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1359 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1360 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1361                                  ;-----------------------------------------------------------------------------------------------------------------------
  1362                                  ;
  1363                                  ;       Routine:        GetCPUType
  1364                                  ;
  1365                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1366                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1367                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1368                                  ;
  1369                                  ;       Out:            AX      0 = 808x, v20, etc.
  1370                                  ;                               1 = 80186
  1371                                  ;                               2 = 80286
  1372                                  ;                               3 = 80386
  1373                                  ;
  1374                                  ;-----------------------------------------------------------------------------------------------------------------------
  1375 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1376 00000092 B120                                            mov     cl,32                                           ;shift count
  1377 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1378 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1379 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1380                                                          cpu     186
  1381 0000009A 54                                              push    sp                                              ;save stack pointer
  1382 0000009B 59                                              pop     cx                                              ;...into cx
  1383 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1384 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1385                                                          cpu     286
  1386 000000A0 40                                              inc     ax                                              ;AX = 2
  1387 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1388 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1389 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1390 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1391 000000AE 40                                              inc     ax                                              ;AX = 3
  1392 000000AF C3                      .10                     ret                                                     ;return
  1393                                  ;-----------------------------------------------------------------------------------------------------------------------
  1394                                  ;
  1395                                  ;       Routine:        PutTTYString
  1396                                  ;
  1397                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1398                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1399                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1400                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1401                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1402                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1403                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1404                                  ;                       to LODSB is not needed.
  1405                                  ;
  1406                                  ;       In:             DS:SI   address of string
  1407                                  ;
  1408                                  ;       Out:            DF      0
  1409                                  ;                       ZF      1
  1410                                  ;                       AL      0
  1411                                  ;
  1412                                  ;-----------------------------------------------------------------------------------------------------------------------
  1413 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1414 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1415 000000B2 84C0                                            test    al,al                                           ;end of string?
  1416 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1417 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1418 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1419 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1420 000000BC C3                      .20                     ret                                                     ;return
  1421                                  ;-----------------------------------------------------------------------------------------------------------------------
  1422                                  ;
  1423                                  ;       Loader Data
  1424                                  ;
  1425                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1426                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1427                                  ;
  1428                                  ;-----------------------------------------------------------------------------------------------------------------------
  1429 000000BD 90                                              align   2
  1430 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1431 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1432 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1433 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1434 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1434 000000D1 74696E672073797374-
  1434 000000DA 656D20726571756972-
  1434 000000E3 657320616E20693338-
  1434 000000EC 36206F72206C617465-
  1434 000000F5 722070726F63657373-
  1434 000000FE 6F722E0D0A         
  1435 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1435 0000010C 65737320616E79206B-
  1435 00000115 657920746F20726573-
  1435 0000011E 746172742074686520-
  1435 00000127 636F6D70757465722E-
  1435 00000130 0D0A00             
  1436 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1437 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1437 00000145 7265640D0A00       
  1438 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1438 00000154 616465640D0A00     
  1439 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1439 00000164 4F530D0A00         
  1440 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1441                                  ;=======================================================================================================================
  1442                                  ;
  1443                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1444                                  ;
  1445                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1446                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1447                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1448                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1449                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1450                                  ;
  1451                                  ;=======================================================================================================================
  1452                                  ;=======================================================================================================================
  1453                                  ;
  1454                                  ;       Kernel Tables
  1455                                  ;
  1456                                  ;=======================================================================================================================
  1457                                  ;-----------------------------------------------------------------------------------------------------------------------
  1458                                  ;
  1459                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1460                                  ;
  1461                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1462                                  ;       first descriptor must be all nulls.
  1463                                  ;
  1464                                  ;       6   5         4         3         2         1         0
  1465                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1466                                  ;       ----------------------------------------------------------------
  1467                                  ;       h......hffffmmmma......ab......................bn..............n
  1468                                  ;
  1469                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1470                                  ;               ffff                                                            flags
  1471                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1472                                  ;                       a......a                                                access
  1473                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1474                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1475                                  ;
  1476                                  ;       00000000                                                                all areas have base addresses below 2^24
  1477                                  ;               0...                                                            single-byte size granularity
  1478                                  ;               1...                                                            4-kilobyte size granularity
  1479                                  ;               .0..                                                            16-bit default for code segments
  1480                                  ;               .1..                                                            32-bit default for code segments
  1481                                  ;               ..0.                                                            intel-reserved; should be zero
  1482                                  ;               ...0                                                            available for operating system use
  1483                                  ;                   0000                                                        segment is less than 2^16 in size
  1484                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1485                                  ;                       1.......                                                segment is present in memory
  1486                                  ;                       .00.....                                                segment is of privilege level 0
  1487                                  ;                       ...0....                                                segment is of system or gate type
  1488                                  ;                       ...00010                                                local decriptor table (LDT)
  1489                                  ;                       ...01001                                                task state segment (TSS) available
  1490                                  ;                       ...01011                                                task state segment (TSS) busy
  1491                                  ;                       ...10...                                                data segment
  1492                                  ;                       ...10011                                                writable data (accessed)
  1493                                  ;                       ...11...                                                code segment
  1494                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1495                                  ;
  1496                                  ;-----------------------------------------------------------------------------------------------------------------------
  1497                                  section                 gdt                                                     ;global descriptor table
  1498 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1499 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1500 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1501 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1502 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1503 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1504 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1505 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1506 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1507 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1508 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1509 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1510 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1511 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1512 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1513                                  ;-----------------------------------------------------------------------------------------------------------------------
  1514                                  ;
  1515                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1516                                  ;
  1517                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1518                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1519                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1520                                  ;
  1521                                  ;       6   5         4         3         2         1         0
  1522                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1523                                  ;       ----------------------------------------------------------------
  1524                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1525                                  ;
  1526                                  ;       h...h   high-order offset (bits 16-31)
  1527                                  ;       P       present (0=unused interrupt)
  1528                                  ;       zz      descriptor privilege level
  1529                                  ;       S       storage segment (must be zero for IDT)
  1530                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1531                                  ;       S...S   handling code selector in GDT
  1532                                  ;       l...l   lo-order offset (bits 0-15)
  1533                                  ;
  1534                                  ;-----------------------------------------------------------------------------------------------------------------------
  1535                                  section                 idt                                                     ;interrupt descriptor table
  1536                                                          mint    dividebyzero                                    ;00 divide by zero
  1536                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1536 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1537                                                          mint    singlestep                                      ;01 single step
  1537                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1537 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1538                                                          mint    nmi                                             ;02 non-maskable
  1538                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1538 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1539                                                          mint    break                                           ;03 break
  1539                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1539 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1540                                                          mint    into                                            ;04 into
  1540                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1540 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1541                                                          mint    bounds                                          ;05 bounds
  1541                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1541 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1542                                                          mint    badopcode                                       ;06 bad op code
  1542                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1542 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1543                                                          mint    nocoproc                                        ;07 no coprocessor
  1543                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1543 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1544                                                          mint    doublefault                                     ;08 double-fault
  1544                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1544 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1545                                                          mint    operand                                         ;09 operand
  1545                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1545 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1546                                                          mint    badtss                                          ;0a bad TSS
  1546                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1546 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1547                                                          mint    notpresent                                      ;0b not-present
  1547                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1547 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1548                                                          mint    stacklimit                                      ;0c stack limit
  1548                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1548 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1549                                                          mint    protection                                      ;0d general protection fault
  1549                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1549 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1550                                                          mint    int14                                           ;0e (reserved)
  1550                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1550 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1551                                                          mint    int15                                           ;0f (reserved)
  1551                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1551 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1552                                                          mint    coproccalc                                      ;10 (reserved)
  1552                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1552 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1553                                                          mint    int17                                           ;11 (reserved)
  1553                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1553 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1554                                                          mint    int18                                           ;12 (reserved)
  1554                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1554 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1555                                                          mint    int19                                           ;13 (reserved)
  1555                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1555 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1556                                                          mint    int20                                           ;14 (reserved)
  1556                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1556 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1557                                                          mint    int21                                           ;15 (reserved)
  1557                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1557 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1558                                                          mint    int22                                           ;16 (reserved)
  1558                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1558 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1559                                                          mint    int23                                           ;17 (reserved)
  1559                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1559 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1560                                                          mint    int24                                           ;18 (reserved)
  1560                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1560 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1561                                                          mint    int25                                           ;19 (reserved)
  1561                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1561 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1562                                                          mint    int26                                           ;1a (reserved)
  1562                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1562 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1563                                                          mint    int27                                           ;1b (reserved)
  1563                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1563 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1564                                                          mint    int28                                           ;1c (reserved)
  1564                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1564 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1565                                                          mint    int29                                           ;1d (reserved)
  1565                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1565 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1566                                                          mint    int30                                           ;1e (reserved)
  1566                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1566 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1567                                                          mint    int31                                           ;1f (reserved)
  1567                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1567 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1568                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1568                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1568 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1569                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1569                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1569 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1570                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1570                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1570 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1571                                                          mtrap   com2                                            ;23 IRQ3 com2
  1571                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1571 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1572                                                          mtrap   com1                                            ;24 IRQ4 com1
  1572                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1572 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1573                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1573                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1573 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1574                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1574                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1574 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1575                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1575                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1575 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1576                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1576                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1576 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1577                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1577                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1577 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1578                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1578                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1578 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1579                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1579                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1579 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1580                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1580                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1580 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1581                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1581                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1581 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1582                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1582                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1582 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1583                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1583                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1583 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1584                                                          mtrap   svc                                             ;30 OS services
  1584                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1584 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1585 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1586                                  ;=======================================================================================================================
  1587                                  ;
  1588                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1589                                  ;
  1590                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1591                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1592                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1593                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1594                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1595                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1596                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1597                                  ;
  1598                                  ;=======================================================================================================================
  1599                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1600                                                          cpu     386                                             ;allow 80386 instructions
  1601                                                          bits    32                                              ;this is 32-bit code
  1602                                  ;=======================================================================================================================
  1603                                  ;
  1604                                  ;       CPU Interrupt Handlers
  1605                                  ;
  1606                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1607                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1608                                  ;
  1609                                  ;=======================================================================================================================
  1610                                  ;-----------------------------------------------------------------------------------------------------------------------
  1611                                  ;
  1612                                  ;       INT0    Divide By Zero
  1613                                  ;
  1614                                  ;-----------------------------------------------------------------------------------------------------------------------
  1615                                                          menter  dividebyzero                                    ;divide by zero
  1615                              <1> ?%1 equ ($-$$)
  1616 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1617 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1618 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1619                                  ;-----------------------------------------------------------------------------------------------------------------------
  1620                                  ;
  1621                                  ;       INT1    Single Step
  1622                                  ;
  1623                                  ;-----------------------------------------------------------------------------------------------------------------------
  1624                                                          menter  singlestep                                      ;single step
  1624                              <1> ?%1 equ ($-$$)
  1625 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1626 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1627 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1628                                  ;-----------------------------------------------------------------------------------------------------------------------
  1629                                  ;
  1630                                  ;       INT2    Non-Maskable Interrupt
  1631                                  ;
  1632                                  ;-----------------------------------------------------------------------------------------------------------------------
  1633                                                          menter  nmi                                             ;non-maskable
  1633                              <1> ?%1 equ ($-$$)
  1634 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1635 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1636 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1637                                  ;-----------------------------------------------------------------------------------------------------------------------
  1638                                  ;
  1639                                  ;       INT3    Break
  1640                                  ;
  1641                                  ;-----------------------------------------------------------------------------------------------------------------------
  1642                                                          menter  break                                           ;break
  1642                              <1> ?%1 equ ($-$$)
  1643 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1644 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1645 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1646                                  ;-----------------------------------------------------------------------------------------------------------------------
  1647                                  ;
  1648                                  ;       INT4    Into
  1649                                  ;
  1650                                  ;-----------------------------------------------------------------------------------------------------------------------
  1651                                                          menter  into                                            ;into
  1651                              <1> ?%1 equ ($-$$)
  1652 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1653 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1654 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1655                                  ;-----------------------------------------------------------------------------------------------------------------------
  1656                                  ;
  1657                                  ;       INT5    Bounds
  1658                                  ;
  1659                                  ;-----------------------------------------------------------------------------------------------------------------------
  1660                                                          menter  bounds                                          ;bounds
  1660                              <1> ?%1 equ ($-$$)
  1661 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1662 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1663 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1664                                  ;-----------------------------------------------------------------------------------------------------------------------
  1665                                  ;
  1666                                  ;       INT6    Bad Operation Code
  1667                                  ;
  1668                                  ;-----------------------------------------------------------------------------------------------------------------------
  1669                                                          menter  badopcode                                       ;bad opcode interrupt
  1669                              <1> ?%1 equ ($-$$)
  1670 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1671 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1672 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1673                                  ;-----------------------------------------------------------------------------------------------------------------------
  1674                                  ;
  1675                                  ;       INT7    No Coprocessor
  1676                                  ;
  1677                                  ;-----------------------------------------------------------------------------------------------------------------------
  1678                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1678                              <1> ?%1 equ ($-$$)
  1679 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1680 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1681 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1682                                  ;-----------------------------------------------------------------------------------------------------------------------
  1683                                  ;
  1684                                  ;       INT8    Double Fault
  1685                                  ;
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                                          menter  doublefault                                     ;doublefault interrupt
  1687                              <1> ?%1 equ ($-$$)
  1688 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1689 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1690 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1691                                  ;-----------------------------------------------------------------------------------------------------------------------
  1692                                  ;
  1693                                  ;       INT9    Operand
  1694                                  ;
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                                          menter  operand                                         ;operand interrupt
  1696                              <1> ?%1 equ ($-$$)
  1697 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1698 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1699 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1700                                  ;-----------------------------------------------------------------------------------------------------------------------
  1701                                  ;
  1702                                  ;       INT10   Bad Task State Segment
  1703                                  ;
  1704                                  ;-----------------------------------------------------------------------------------------------------------------------
  1705                                                          menter  badtss                                          ;bad TSS interrupt
  1705                              <1> ?%1 equ ($-$$)
  1706 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1707 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1708 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1709                                  ;-----------------------------------------------------------------------------------------------------------------------
  1710                                  ;
  1711                                  ;       INT11   Not Present
  1712                                  ;
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                                          menter  notpresent                                      ;not present interrupt
  1714                              <1> ?%1 equ ($-$$)
  1715 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1716 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1717 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1718                                  ;-----------------------------------------------------------------------------------------------------------------------
  1719                                  ;
  1720                                  ;       INT12   Stack Limit
  1721                                  ;
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                                          menter  stacklimit                                      ;stack limit interrupt
  1723                              <1> ?%1 equ ($-$$)
  1724 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1725 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1726 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1727                                  ;-----------------------------------------------------------------------------------------------------------------------
  1728                                  ;
  1729                                  ;       INT13   General Protection Fault
  1730                                  ;
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                                          menter  protection                                      ;protection fault interrupt
  1732                              <1> ?%1 equ ($-$$)
  1733 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1734 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1735 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1736                                  ;-----------------------------------------------------------------------------------------------------------------------
  1737                                  ;
  1738                                  ;       INT14   Reserved
  1739                                  ;
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                                          menter  int14                                           ;(reserved)
  1741                              <1> ?%1 equ ($-$$)
  1742 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1743 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1744 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1745                                  ;-----------------------------------------------------------------------------------------------------------------------
  1746                                  ;
  1747                                  ;       INT15   Reserved
  1748                                  ;
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                                          menter  int15                                           ;(reserved)
  1750                              <1> ?%1 equ ($-$$)
  1751 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1752 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1753 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1754                                  ;-----------------------------------------------------------------------------------------------------------------------
  1755                                  ;
  1756                                  ;       INT16   Coprocessor Calculation
  1757                                  ;
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                                          menter  coproccalc                                      ;coprocessor calculation
  1759                              <1> ?%1 equ ($-$$)
  1760 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1761 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1762 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1763                                  ;-----------------------------------------------------------------------------------------------------------------------
  1764                                  ;
  1765                                  ;       INT17   Reserved
  1766                                  ;
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                                          menter  int17                                           ;(reserved)
  1768                              <1> ?%1 equ ($-$$)
  1769 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1770 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1771 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1772                                  ;-----------------------------------------------------------------------------------------------------------------------
  1773                                  ;
  1774                                  ;       INT18   Reserved
  1775                                  ;
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                                          menter  int18                                           ;(reserved)
  1777                              <1> ?%1 equ ($-$$)
  1778 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1779 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1780 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1781                                  ;-----------------------------------------------------------------------------------------------------------------------
  1782                                  ;
  1783                                  ;       INT19   Reserved
  1784                                  ;
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                                          menter  int19                                           ;(reserved)
  1786                              <1> ?%1 equ ($-$$)
  1787 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1788 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1789 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1790                                  ;-----------------------------------------------------------------------------------------------------------------------
  1791                                  ;
  1792                                  ;       INT20   Reserved
  1793                                  ;
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                                          menter  int20                                           ;(reserved)
  1795                              <1> ?%1 equ ($-$$)
  1796 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1797 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1798 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1799                                  ;-----------------------------------------------------------------------------------------------------------------------
  1800                                  ;
  1801                                  ;       INT21   Reserved
  1802                                  ;
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                                          menter  int21                                           ;(reserved)
  1804                              <1> ?%1 equ ($-$$)
  1805 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1806 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1807 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1808                                  ;-----------------------------------------------------------------------------------------------------------------------
  1809                                  ;
  1810                                  ;       INT22   Reserved
  1811                                  ;
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                                          menter  int22                                           ;(reserved)
  1813                              <1> ?%1 equ ($-$$)
  1814 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1815 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1816 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1817                                  ;-----------------------------------------------------------------------------------------------------------------------
  1818                                  ;
  1819                                  ;       INT23   Reserved
  1820                                  ;
  1821                                  ;-----------------------------------------------------------------------------------------------------------------------
  1822                                                          menter  int23                                           ;(reserved)
  1822                              <1> ?%1 equ ($-$$)
  1823 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1824 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1825 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1826                                  ;-----------------------------------------------------------------------------------------------------------------------
  1827                                  ;
  1828                                  ;       INT24   Reserved
  1829                                  ;
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                                          menter  int24                                           ;(reserved)
  1831                              <1> ?%1 equ ($-$$)
  1832 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1833 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1834 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                  ;
  1837                                  ;       INT25   Reserved
  1838                                  ;
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                                          menter  int25                                           ;(reserved)
  1840                              <1> ?%1 equ ($-$$)
  1841 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1842 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1843 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1844                                  ;-----------------------------------------------------------------------------------------------------------------------
  1845                                  ;
  1846                                  ;       INT26   Reserved
  1847                                  ;
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                                          menter  int26                                           ;(reserved)
  1849                              <1> ?%1 equ ($-$$)
  1850 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1851 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1852 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1853                                  ;-----------------------------------------------------------------------------------------------------------------------
  1854                                  ;
  1855                                  ;       INT27   Reserved
  1856                                  ;
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                                          menter  int27                                           ;(reserved)
  1858                              <1> ?%1 equ ($-$$)
  1859 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1860 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1861 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1862                                  ;-----------------------------------------------------------------------------------------------------------------------
  1863                                  ;
  1864                                  ;       INT28   Reserved
  1865                                  ;
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                                          menter  int28                                           ;(reserved)
  1867                              <1> ?%1 equ ($-$$)
  1868 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1869 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1870 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1871                                  ;-----------------------------------------------------------------------------------------------------------------------
  1872                                  ;
  1873                                  ;       INT29   Reserved
  1874                                  ;
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                                          menter  int29                                           ;(reserved)
  1876                              <1> ?%1 equ ($-$$)
  1877 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1878 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1879 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                  ;
  1882                                  ;       INT30   Reserved
  1883                                  ;
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                                          menter  int30                                           ;(reserved)
  1885                              <1> ?%1 equ ($-$$)
  1886 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1887 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1888 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                  ;
  1891                                  ;       INT31   Reserved
  1892                                  ;
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                                          menter  int31                                           ;(reserved)
  1894                              <1> ?%1 equ ($-$$)
  1895 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1896 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1897 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                  ;
  1900                                  ;       Routine:        ReportInterrupt
  1901                                  ;
  1902                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1903                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1904                                  ;
  1905                                  ;       In:             [ESP+16]        eflags                                  stored by interrupt call
  1906                                  ;                       [ESP+12]        cs                                      stored by interrupt call
  1907                                  ;                       [ESP+8]         eip                                     stored by interrupt call
  1908                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1909                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1910                                  ;
  1911                                  ;       Out:            N/A             This routine does not exit.
  1912                                  ;
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1915 00000154 06                                              push    es                                              ;save ES at time of interrupt
  1916 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1917 00000156 89E5                                            mov     ebp,esp                                         ;EBP --> [EDI]
  1918                                  ;
  1919                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1920                                  ;
  1921                                  ;                       [EBP+56]        eflags
  1922                                  ;                       [EBP+52]        cs
  1923                                  ;                       [EBP+48]        eip
  1924                                  ;                       [EBP+44]        interrupt number (0-31)
  1925                                  ;                       [EBP+40]        error message address
  1926                                  ;                       [EBP+36]        ds
  1927                                  ;                       [EBP+32]        es
  1928                                  ;                       [EBP+28]        eax
  1929                                  ;                       [EBP+24]        ecx
  1930                                  ;                       [EBP+20]        edx
  1931                                  ;                       [EBP+16]        ebx
  1932                                  ;                       [EBP+12]        esp
  1933                                  ;                       [EBP+8]         ebp
  1934                                  ;                       [EBP+4]         esi
  1935                                  ;                       [EBP+0]         edi
  1936                                  ;
  1937 00000158 0E                                              push    cs                                              ;load code selector ...
  1938 00000159 1F                                              pop     ds                                              ;... into DS
  1939 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  1940 0000015C 07                                              pop     es                                              ;... into ES
  1941                                  ;
  1942                                  ;       Display the interrupt report boundary box
  1943                                  ;
  1944 0000015D B10D                                            mov     cl,13                                           ;column
  1945 0000015F B506                                            mov     ch,6                                            ;row
  1946 00000161 B232                                            mov     dl,50                                           ;width
  1947 00000163 B608                                            mov     dh,8                                            ;height
  1948 00000165 B707                                            mov     bh,07h                                          ;attribute
  1949 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  1950                                  ;
  1951                                  ;       Display the report header
  1952                                  ;
  1953 0000016C B10F                                            mov     cl,15                                           ;column
  1954 0000016E B507                                            mov     ch,7                                            ;row
  1955 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  1956 00000175 E8A80B0000                                      call    SetConsoleString                                ;draw text string
  1957                                  ;
  1958                                  ;       Display the interrupt description label
  1959                                  ;
  1960 0000017A B10F                                            mov     cl,15                                           ;column
  1961 0000017C B508                                            mov     ch,8                                            ;row
  1962 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  1963 00000183 E89A0B0000                                      call    SetConsoleString                                ;draw text string
  1964                                  ;
  1965                                  ;       Display the interrupt number
  1966                                  ;
  1967 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  1968 0000018B B11A                                            mov     cl,26                                           ;column
  1969 0000018D B508                                            mov     ch,8                                            ;row
  1970 0000018F E80E090000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  1971                                  ;
  1972                                  ;       Display the interrupt name
  1973                                  ;
  1974 00000194 B11D                                            mov     cl,29                                           ;column
  1975 00000196 B508                                            mov     ch,8                                            ;row
  1976 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  1977 0000019B E8820B0000                                      call    SetConsoleString                                ;display interrupt description
  1978                                  ;
  1979                                  ;       Display the register values header
  1980                                  ;
  1981 000001A0 B10F                                            mov     cl,15                                           ;column
  1982 000001A2 B50A                                            mov     ch,10                                           ;row
  1983 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  1984 000001A9 E8740B0000                                      call    SetConsoleString                                ;draw text string
  1985                                  ;
  1986                                  ;       Display the EAX register label and value
  1987                                  ;
  1988 000001AE B10F                                            mov     cl,15                                           ;column
  1989 000001B0 B50B                                            mov     ch,11                                           ;row
  1990 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  1991 000001B7 E8660B0000                                      call    SetConsoleString                                ;draw label
  1992 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  1993 000001BF B113                                            mov     cl,19                                           ;column
  1994 000001C1 B50B                                            mov     ch,11                                           ;row
  1995 000001C3 E800090000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1996                                  ;
  1997                                  ;       Display the ECX register label and value
  1998                                  ;
  1999 000001C8 B10F                                            mov     cl,15                                           ;column
  2000 000001CA B50C                                            mov     ch,12                                           ;row
  2001 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2002 000001D1 E84C0B0000                                      call    SetConsoleString                                ;draw label
  2003 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2004 000001D9 B113                                            mov     cl,19                                           ;column
  2005 000001DB B50C                                            mov     ch,12                                           ;row
  2006 000001DD E8E6080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2007                                  ;
  2008                                  ;       Display the EDX register label and value
  2009                                  ;
  2010 000001E2 B10F                                            mov     cl,15                                           ;column
  2011 000001E4 B50D                                            mov     ch,13                                           ;row
  2012 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2013 000001EB E8320B0000                                      call    SetConsoleString                                ;draw label
  2014 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2015 000001F3 B113                                            mov     cl,19                                           ;column
  2016 000001F5 B50D                                            mov     ch,13                                           ;row
  2017 000001F7 E8CC080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2018                                  ;
  2019                                  ;       Display the EBX register label and value
  2020                                  ;
  2021 000001FC B10F                                            mov     cl,15                                           ;column
  2022 000001FE B50E                                            mov     ch,14                                           ;row
  2023 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2024 00000205 E8180B0000                                      call    SetConsoleString                                ;draw label
  2025 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2026 0000020D B113                                            mov     cl,19                                           ;column
  2027 0000020F B50E                                            mov     ch,14                                           ;row
  2028 00000211 E8B2080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2029                                  ;
  2030                                  ;       Display the ESI register label and value
  2031                                  ;
  2032 00000216 B11D                                            mov     cl,29                                           ;column
  2033 00000218 B50B                                            mov     ch,11                                           ;row
  2034 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2035 0000021F E8FE0A0000                                      call    SetConsoleString                                ;draw label
  2036 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2037 00000227 B121                                            mov     cl,33                                           ;column
  2038 00000229 B50B                                            mov     ch,11                                           ;row
  2039 0000022B E898080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2040                                  ;
  2041                                  ;       Display the EDI register label and value
  2042                                  ;
  2043 00000230 B11D                                            mov     cl,29                                           ;column
  2044 00000232 B50C                                            mov     ch,12                                           ;row
  2045 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2046 00000239 E8E40A0000                                      call    SetConsoleString                                ;draw label
  2047 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2048 00000241 B121                                            mov     cl,33                                           ;column
  2049 00000243 B50C                                            mov     ch,12                                           ;row
  2050 00000245 E87E080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2051                                  ;
  2052                                  ;       Display the EBP register label and value
  2053                                  ;
  2054 0000024A B11D                                            mov     cl,29                                           ;column
  2055 0000024C B50D                                            mov     ch,13                                           ;row
  2056 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2057 00000253 E8CA0A0000                                      call    SetConsoleString                                ;draw label
  2058 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2059 0000025B B121                                            mov     cl,33                                           ;column
  2060 0000025D B50D                                            mov     ch,13                                           ;row
  2061 0000025F E864080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2062                                  ;
  2063                                  ;       Display the DS register label and value
  2064                                  ;
  2065 00000264 B12A                                            mov     cl,42                                           ;column
  2066 00000266 B50B                                            mov     ch,11                                           ;row
  2067 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2068 0000026D E8B00A0000                                      call    SetConsoleString                                ;draw label
  2069 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2070 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2071 00000278 B12E                                            mov     cl,46                                           ;column
  2072 0000027A B50B                                            mov     ch,11                                           ;row
  2073 0000027C E857080000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2074                                  ;
  2075                                  ;       Display the ES register label and value
  2076                                  ;
  2077 00000281 B12A                                            mov     cl,42                                           ;column
  2078 00000283 B50C                                            mov     ch,12                                           ;row
  2079 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2080 0000028A E8930A0000                                      call    SetConsoleString                                ;draw label
  2081 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2082 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2083 00000295 B12E                                            mov     cl,46                                           ;column
  2084 00000297 B50C                                            mov     ch,12                                           ;row
  2085 00000299 E83A080000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2086                                  ;
  2087                                  ;       Display the SS register label and value
  2088                                  ;
  2089 0000029E B12A                                            mov     cl,42                                           ;column
  2090 000002A0 B50D                                            mov     ch,13                                           ;row
  2091 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2092 000002A7 E8760A0000                                      call    SetConsoleString                                ;draw label
  2093 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2094 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2095 000002B1 B12E                                            mov     cl,46                                           ;column
  2096 000002B3 B50D                                            mov     ch,13                                           ;row
  2097 000002B5 E81E080000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2098                                  ;
  2099                                  ;       Display the CS register lable and value
  2100                                  ;
  2101 000002BA B12A                                            mov     cl,42                                           ;column
  2102 000002BC B50E                                            mov     ch,14                                           ;row
  2103 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2104 000002C3 E85A0A0000                                      call    SetConsoleString                                ;draw label
  2105 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2106 000002CA 668B4534                                        mov     ax,[ebp+52]                                     ;CS
  2107 000002CE B12E                                            mov     cl,46                                           ;column
  2108 000002D0 B50E                                            mov     ch,14                                           ;row
  2109 000002D2 E801080000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2110                                  ;
  2111                                  ;       Display the EFLAGS register label and value
  2112                                  ;
  2113 000002D7 B133                                            mov     cl,51                                           ;column
  2114 000002D9 B50B                                            mov     ch,11                                           ;row
  2115 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2116 000002E0 E83D0A0000                                      call    SetConsoleString                                ;draw label
  2117 000002E5 8B4538                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2118 000002E8 B137                                            mov     cl,55                                           ;column
  2119 000002EA B50B                                            mov     ch,11                                           ;row
  2120 000002EC E8D7070000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2121                                  ;
  2122                                  ;       Display the ESP register label and value
  2123                                  ;
  2124 000002F1 B133                                            mov     cl,51                                           ;column
  2125 000002F3 B50D                                            mov     ch,13                                           ;row
  2126 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2127 000002FA E8230A0000                                      call    SetConsoleString                                ;draw label
  2128 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2129 00000302 B137                                            mov     cl,55                                           ;column
  2130 00000304 B50D                                            mov     ch,13                                           ;row
  2131 00000306 E8BD070000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2132                                  ;
  2133                                  ;       Display the EIP register label and value
  2134                                  ;
  2135 0000030B B133                                            mov     cl,51                                           ;column
  2136 0000030D B50E                                            mov     ch,14                                           ;row
  2137 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2138 00000314 E8090A0000                                      call    SetConsoleString                                ;draw label
  2139 00000319 8B4530                                          mov     eax,[ebp+48]                                    ;EIP
  2140 0000031C B137                                            mov     cl,55                                           ;column
  2141 0000031E B50E                                            mov     ch,14                                           ;row
  2142 00000320 E8A3070000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2143                                  ;
  2144                                  ;       Halt and loop until reset
  2145                                  ;
  2146 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2147 00000326 F4                                              hlt                                                     ;halt processor
  2148 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2149                                  ;-----------------------------------------------------------------------------------------------------------------------
  2150                                  ;
  2151                                  ;       Processor Interrupt Name Strings
  2152                                  ;
  2153                                  ;-----------------------------------------------------------------------------------------------------------------------
  2154 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2154 00000332 6279207A65726F00   
  2155 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2155 00000343 657000             
  2156 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2156 0000034F 626C6520696E746572-
  2156 00000358 7275707400         
  2157 0000035D 427265616B00            czIntBreak              db      "Break",0
  2158 00000363 496E746F00              czIntInto               db      "Into",0
  2159 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2160 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2160 00000378 74696F6E20436F6465-
  2160 00000381 00                 
  2161 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2161 0000038B 6573736F7200       
  2162 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2162 0000039A 756C7400           
  2163 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2164 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2164 000003AF 537461746520536567-
  2164 000003B8 6D656E7400         
  2165 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2165 000003C6 6E7400             
  2166 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2166 000003D2 697400             
  2167 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2167 000003DE 726F74656374696F6E-
  2167 000003E7 204661756C7400     
  2168 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2168 000003F7 6F722043616C63756C-
  2168 00000400 6174696F6E00       
  2169 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2170                                  ;-----------------------------------------------------------------------------------------------------------------------
  2171                                  ;
  2172                                  ;       Processor Interrupt Handling Strings
  2173                                  ;
  2174                                  ;-----------------------------------------------------------------------------------------------------------------------
  2175 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2175 00000418 6C65642070726F6365-
  2175 00000421 73736F7220696E7465-
  2175 0000042A 727275707420686173-
  2175 00000433 206F63637572726564-
  2175 0000043C 3A00               
  2176 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2176 00000447 202300             
  2177 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2177 00000453 206174207468652074-
  2177 0000045C 696D65206F66207468-
  2177 00000465 6520696E7465727275-
  2177 0000046E 70743A00           
  2178 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2179 00000477 4543583A00              czIntECX                db      "ECX:",0
  2180 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2181 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2182 00000486 4553493A00              czIntESI                db      "ESI:",0
  2183 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2184 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2185 00000495 4553503A00              czIntESP                db      "ESP:",0
  2186 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2187 0000049F 2045533A00              czIntES                 db      " ES:",0
  2188 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2189 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2190 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2191 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2192                                  ;-----------------------------------------------------------------------------------------------------------------------
  2193                                  ;
  2194                                  ;       Routine:        DrawTextDialogBox
  2195                                  ;
  2196                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2197                                  ;
  2198                                  ;       In:             CL      upper left column (0-79)
  2199                                  ;                       CH      upper left row (0-24)
  2200                                  ;                       DL      column width, excluding border
  2201                                  ;                       DH      row height, excluding border
  2202                                  ;                       BH      color attribute
  2203                                  ;
  2204                                  ;-----------------------------------------------------------------------------------------------------------------------
  2205 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2206 000004B9 56                                              push    esi                                             ;
  2207 000004BA 57                                              push    edi                                             ;
  2208 000004BB 06                                              push    es                                              ;
  2209 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2210 000004BE 07                                              pop     es                                              ;... into ES
  2211                                  ;
  2212                                  ;       Compute target display offset
  2213                                  ;
  2214 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2215 000004C1 88E8                                            mov     al,ch                                           ;row
  2216 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2217 000004C5 F6E4                                            mul     ah                                              ;row offset
  2218 000004C7 00C8                                            add     al,cl                                           ;add column
  2219 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2220 000004CC 00C8                                            add     al,cl                                           ;add column
  2221 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2222 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2223                                  ;
  2224                                  ;       Display top border row
  2225                                  ;
  2226 000004D3 57                                              push    edi                                             ;save target row offset
  2227 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2228 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2229 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2230 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2231 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2232 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2233 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2234 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2235 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2236 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2237 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2238                                  ;
  2239                                  ;       Display dialog box body rows
  2240                                  ;
  2241 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2242 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2243 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2244 000004F3 57                                              push    edi                                             ;save target row offset
  2245 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2246 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2247 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2248 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2249 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2250 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2251 00000500 F366AB                                          rep     stosw                                           ;display row
  2252 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2253 00000505 66AB                                            stosw                                                   ;display character and attribute
  2254 00000507 5F                                              pop     edi                                             ;restore target row offset
  2255 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2256 0000050E 59                                              pop     ecx                                             ;remaining rows
  2257 0000050F E2E1                                            loop    .10                                             ;next row
  2258                                  ;
  2259                                  ;       Display bottom border row
  2260                                  ;
  2261 00000511 57                                              push    edi                                             ;save target row offset
  2262 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2263 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2264 00000516 66AB                                            stosw                                                   ;display character and attribute
  2265 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2266 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2267 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2268 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2269 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2270 00000523 66AB                                            stosw                                                   ;display character and attribute
  2271 00000525 5F                                              pop     edi                                             ;restore target row offset
  2272 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2273                                  ;
  2274                                  ;       Restore and return
  2275                                  ;
  2276 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2277 0000052D 5F                                              pop     edi                                             ;
  2278 0000052E 5E                                              pop     esi                                             ;
  2279 0000052F 59                                              pop     ecx                                             ;
  2280 00000530 C3                                              ret                                                     ;return
  2281                                  ;=======================================================================================================================
  2282                                  ;
  2283                                  ;       Hardware Device Interupts
  2284                                  ;
  2285                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2286                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2287                                  ;       (BX=2028h).
  2288                                  ;
  2289                                  ;=======================================================================================================================
  2290                                  ;-----------------------------------------------------------------------------------------------------------------------
  2291                                  ;
  2292                                  ;       IRQ0    Clock Tick Interrupt
  2293                                  ;
  2294                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2295                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2296                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2297                                  ;
  2298                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2299                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2300                                  ;
  2301                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2302                                  ;       zero, the floppy disk motors are turned off.
  2303                                  ;
  2304                                  ;-----------------------------------------------------------------------------------------------------------------------
  2305                                                          menter  clocktick                                       ;clock tick interrupt
  2305                              <1> ?%1 equ ($-$$)
  2306 00000531 50                                              push    eax                                             ;save non-volatile regs
  2307 00000532 52                                              push    edx                                             ;
  2308 00000533 1E                                              push    ds                                              ;
  2309                                  ;
  2310                                  ;       Update the clock tick count and the elapsed days as needed.
  2311                                  ;
  2312 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2313 00000536 1F                                              pop     ds                                              ;... into data segment register
  2314 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2315 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2316 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2317 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2318 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2319 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2320 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2321                                  ;
  2322                                  ;       Decrement floppy disk motor timeout.
  2323                                  ;
  2324 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2325 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2326 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2327 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2328                                  ;
  2329                                  ;       Turn off the floppy disk motor if appropriate.
  2330                                  ;
  2331 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2332 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2333 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2334 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2335 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2336 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2337 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2338 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2339 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2340 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2341 00000577 EE                                              out     dx,al                                           ;turn motor off
  2342                                  ;
  2343                                  ;       Signal the end of the hardware interrupt.
  2344                                  ;
  2345 00000578 E8DF070000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2346                                  ;
  2347                                  ;       Restore and return.
  2348                                  ;
  2349 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2350 0000057E 5A                                              pop     edx                                             ;
  2351 0000057F 58                                              pop     eax                                             ;
  2352 00000580 CF                                              iretd                                                   ;return
  2353                                  ;-----------------------------------------------------------------------------------------------------------------------
  2354                                  ;
  2355                                  ;       IRQ1    Keyboard Interrupt
  2356                                  ;
  2357                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2358                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2359                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2360                                  ;       ALL modified registers upon return.
  2361                                  ;
  2362                                  ;-----------------------------------------------------------------------------------------------------------------------
  2363                                                          menter  keyboard                                        ;keyboard interrrupt
  2363                              <1> ?%1 equ ($-$$)
  2364 00000581 50                                              push    eax                                             ;save non-volatile regs
  2365 00000582 53                                              push    ebx                                             ;
  2366 00000583 51                                              push    ecx                                             ;
  2367 00000584 56                                              push    esi                                             ;
  2368 00000585 1E                                              push    ds                                              ;
  2369 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2370 00000588 1F                                              pop     ds                                              ;... into data segment register
  2371 00000589 30C0                                            xor     al,al                                           ;zero
  2372 0000058B A209080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2373 00000590 A20A080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2374 00000595 A20B080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2375 0000059A A20C080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2376 0000059F A20D080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2377 000005A4 A20E080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2378 000005A9 B020                                            mov     al,' '                                          ;space
  2379 000005AB A20F080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2380 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2381 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2382 000005B4 200508080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2383 000005BA 8A1D06080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2384 000005C0 8A3D07080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2385 000005C6 E8DB070000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2386 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2387 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2388 000005D3 A209080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2389 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2390 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2391 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2392 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2393 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2394 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2395 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2396 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2397 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2398 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2399 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2400 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2401 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2402 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2403 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2404 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2405 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2406 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2407 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2408 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2409 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2410 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2411 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2412 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2413 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2414 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2415 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2416 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2417 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2418 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2419 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2420 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2421 00000654 E84D070000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2422 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2423 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2424 00000661 A20A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2425 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2426 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2427 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2428 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2429 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2430 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2431 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2432 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2433 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2434 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2435 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2436 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2437 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2438 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2439 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2440 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2441 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2442 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2443 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2444 0000069C E805070000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2445 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2446 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2447 000006A9 A20B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2448 000006AE E8F3060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2449 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2450 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2451 000006BB A20C080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2452 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2453 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2454 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2455 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2456 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2457 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2458 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2459 000006D1 E8A1060000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2460 000006D6 881D06080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2461 000006DC 883D07080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2462 000006E2 E859040000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2463 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2464 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2465 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2466 000006F1 E8B0060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2467 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2468 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2469 000006FE A20A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2470 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2471 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2472 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2473 0000070E E893060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2474 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2475 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2476 0000071B A20B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2477 00000720 E881060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2478 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2479 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2480 0000072D A20C080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2481 00000732 E86F060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2482 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2483 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2484 0000073F A20D080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2485 00000744 E85D060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2486 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2487 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2488 0000074D A20E080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2489 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2490 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2491 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2492 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2493 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2494 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2495 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2496 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2497 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2498 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2499 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2500 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2501 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2502 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2503 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2504 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2505 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2506 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2507 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2508 00000787 A20F080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2509 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2510 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2511 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2512 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2513 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2514 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2515 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2516 000007A4 50                                              push    eax                                             ;save codes
  2517 000007A5 E8D3040000                                      call    PutMessage                                      ;put message to console
  2518 000007AA 58                                              pop     eax                                             ;restore codes
  2519 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2520 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2521 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2522 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2523 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2524 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2525 000007BD E8BB040000                                      call    PutMessage                                      ;put message to console
  2526 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2527 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2528 000007C6 080508080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2529 000007CC E817030000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2530 000007D1 E886050000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2531 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2532 000007D7 5E                                              pop     esi                                             ;
  2533 000007D8 59                                              pop     ecx                                             ;
  2534 000007D9 5B                                              pop     ebx                                             ;
  2535 000007DA 58                                              pop     eax                                             ;
  2536 000007DB CF                                              iretd                                                   ;return
  2537                                  ;-----------------------------------------------------------------------------------------------------------------------
  2538                                  ;       Scan-Code to ASCII Translation Tables
  2539                                  ;-----------------------------------------------------------------------------------------------------------------------
  2540 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2541 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2542 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2543 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2544 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2545 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2546 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2547 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2548 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2549 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2550 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2551 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2552 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2553 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2554 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2555 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2556 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2557 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2558 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2559 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2560 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2561 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2562 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2563 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2564 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2565 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2566 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2567 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2568 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2569 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2570 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2571 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2572                                  ;-----------------------------------------------------------------------------------------------------------------------
  2573                                  ;
  2574                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2575                                  ;
  2576                                  ;-----------------------------------------------------------------------------------------------------------------------
  2577                                                          menter  iochannel                                       ;secondary 8259A cascade
  2577                              <1> ?%1 equ ($-$$)
  2578 000008DC 50                                              push    eax                                             ;save modified regs
  2579 000008DD EB3F                                            jmp     hwint                                           ;end interrupt and return
  2580                                  ;-----------------------------------------------------------------------------------------------------------------------
  2581                                  ;
  2582                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2583                                  ;
  2584                                  ;-----------------------------------------------------------------------------------------------------------------------
  2585                                                          menter  com2                                            ;serial port 2 interrupt
  2585                              <1> ?%1 equ ($-$$)
  2586 000008DF 50                                              push    eax                                             ;save modified regs
  2587 000008E0 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2588                                  ;-----------------------------------------------------------------------------------------------------------------------
  2589                                  ;
  2590                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2591                                  ;
  2592                                  ;-----------------------------------------------------------------------------------------------------------------------
  2593                                                          menter  com1                                            ;serial port 1 interrupt
  2593                              <1> ?%1 equ ($-$$)
  2594 000008E2 50                                              push    eax                                             ;save modified regs
  2595 000008E3 EB39                                            jmp     hwint                                           ;end interrupt and return
  2596                                  ;-----------------------------------------------------------------------------------------------------------------------
  2597                                  ;
  2598                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2599                                  ;
  2600                                  ;-----------------------------------------------------------------------------------------------------------------------
  2601                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2601                              <1> ?%1 equ ($-$$)
  2602 000008E5 50                                              push    eax                                             ;save modified regs
  2603 000008E6 EB36                                            jmp     hwint                                           ;end interrupt and return
  2604                                  ;-----------------------------------------------------------------------------------------------------------------------
  2605                                  ;
  2606                                  ;       IRQ6    Diskette Hardware Interrupt
  2607                                  ;
  2608                                  ;-----------------------------------------------------------------------------------------------------------------------
  2609                                                          menter  diskette                                        ;floppy disk interrupt
  2609                              <1> ?%1 equ ($-$$)
  2610 000008E8 50                                              push    eax                                             ;save non-volatile regs
  2611 000008E9 1E                                              push    ds                                              ;
  2612 000008EA 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2613 000008EC 1F                                              pop     ds                                              ;... into DS register
  2614 000008ED A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2615 000008F2 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2616 000008F4 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2617 000008F9 1F                                              pop     ds                                              ;restore non-volatile regs
  2618 000008FA EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  ;
  2621                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2622                                  ;
  2623                                  ;-----------------------------------------------------------------------------------------------------------------------
  2624                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2624                              <1> ?%1 equ ($-$$)
  2625 000008FC 50                                              push    eax                                             ;save modified regs
  2626 000008FD EB1F                                            jmp     hwint                                           ;end interrupt and return
  2627                                  ;-----------------------------------------------------------------------------------------------------------------------
  2628                                  ;
  2629                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2630                                  ;
  2631                                  ;-----------------------------------------------------------------------------------------------------------------------
  2632                                                          menter  rtclock                                         ;real-time clock interrupt
  2632                              <1> ?%1 equ ($-$$)
  2633 000008FF 50                                              push    eax                                             ;save modified regs
  2634 00000900 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2635                                  ;-----------------------------------------------------------------------------------------------------------------------
  2636                                  ;
  2637                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2638                                  ;
  2639                                  ;-----------------------------------------------------------------------------------------------------------------------
  2640                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2640                              <1> ?%1 equ ($-$$)
  2641 00000902 50                                              push    eax                                             ;save modified regs
  2642 00000903 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2643                                  ;-----------------------------------------------------------------------------------------------------------------------
  2644                                  ;
  2645                                  ;       IRQ10   Reserved Hardware Interrupt
  2646                                  ;
  2647                                  ;-----------------------------------------------------------------------------------------------------------------------
  2648                                                          menter  irq10                                           ;reserved
  2648                              <1> ?%1 equ ($-$$)
  2649 00000905 50                                              push    eax                                             ;save modified regs
  2650 00000906 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2651                                  ;-----------------------------------------------------------------------------------------------------------------------
  2652                                  ;
  2653                                  ;       IRQ11   Reserved Hardware Interrupt
  2654                                  ;
  2655                                  ;-----------------------------------------------------------------------------------------------------------------------
  2656                                                          menter  irq11                                           ;reserved
  2656                              <1> ?%1 equ ($-$$)
  2657 00000908 50                                              push    eax                                             ;save modified regs
  2658 00000909 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2659                                  ;-----------------------------------------------------------------------------------------------------------------------
  2660                                  ;
  2661                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2662                                  ;
  2663                                  ;-----------------------------------------------------------------------------------------------------------------------
  2664                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2664                              <1> ?%1 equ ($-$$)
  2665 0000090B 50                                              push    eax                                             ;save modified regs
  2666 0000090C EB09                                            jmp     hwwint                                          ;end interrupt and return
  2667                                  ;-----------------------------------------------------------------------------------------------------------------------
  2668                                  ;
  2669                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2670                                  ;
  2671                                  ;-----------------------------------------------------------------------------------------------------------------------
  2672                                                          menter  coprocessor                                     ;coprocessor interrupt
  2672                              <1> ?%1 equ ($-$$)
  2673 0000090E 50                                              push    eax                                             ;save modified regs
  2674 0000090F EB06                                            jmp     hwwint                                          ;end interrupt and return
  2675                                  ;-----------------------------------------------------------------------------------------------------------------------
  2676                                  ;
  2677                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2678                                  ;
  2679                                  ;-----------------------------------------------------------------------------------------------------------------------
  2680                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2680                              <1> ?%1 equ ($-$$)
  2681 00000911 50                                              push    eax                                             ;save modified regs
  2682 00000912 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2683                                  ;-----------------------------------------------------------------------------------------------------------------------
  2684                                  ;
  2685                                  ;       IRQ15   Reserved Hardware Interrupt
  2686                                  ;
  2687                                  ;-----------------------------------------------------------------------------------------------------------------------
  2688                                                          menter  irq15                                           ;reserved
  2688                              <1> ?%1 equ ($-$$)
  2689 00000914 50                                              push    eax                                             ;save modified regs
  2690 00000915 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2691                                  ;-----------------------------------------------------------------------------------------------------------------------
  2692                                  ;
  2693                                  ;       Exit from hardware interrupt
  2694                                  ;
  2695                                  ;-----------------------------------------------------------------------------------------------------------------------
  2696 00000917 E846040000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2697 0000091C EB05                                            jmp     hwint90                                         ;skip ahead
  2698 0000091E E839040000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2699 00000923 58                      hwint90                 pop     eax                                             ;restore modified regs
  2700 00000924 CF                                              iretd                                                   ;return from interrupt
  2701                                  ;-----------------------------------------------------------------------------------------------------------------------
  2702                                  ;
  2703                                  ;       INT 30h Operating System Software Service Interrupt
  2704                                  ;
  2705                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2706                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2707                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2708                                  ;       the entry address of the specific function from a table.
  2709                                  ;
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711                                                          menter  svc
  2711                              <1> ?%1 equ ($-$$)
  2712 00000925 3C09                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2713 00000927 730D                                            jae     svc90                                           ;yes, skip ahead
  2714 00000929 0FB6C0                                          movzx   eax,al                                          ;function
  2715 0000092C C1E002                                          shl     eax,2                                           ;offset into table
  2716 0000092F 2EFF90[37090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2717 00000936 CF                      svc90                   iretd                                                   ;return from interrupt
  2718                                  ;-----------------------------------------------------------------------------------------------------------------------
  2719                                  ;
  2720                                  ;       Service Request Table
  2721                                  ;
  2722                                  ;
  2723                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2724                                  ;
  2725                                  ;-----------------------------------------------------------------------------------------------------------------------
  2726                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2726                              <1> tsvc :
  2726                              <1> e%1 equ ($-tsvc)/4
  2726 00000937 [A50C0000]          <1>  dd %1
  2727                                                          tsvce   CompareMemory                                   ;compare memory
  2727                              <1> e%1 equ ($-tsvc)/4
  2727 0000093B [5B090000]          <1>  dd %1
  2728                                                          tsvce   GetConsoleString                                ;get string input
  2728                              <1> e%1 equ ($-tsvc)/4
  2728 0000093F [BC090000]          <1>  dd %1
  2729                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2729                              <1> e%1 equ ($-tsvc)/4
  2729 00000943 [0A0C0000]          <1>  dd %1
  2730                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2730                              <1> e%1 equ ($-tsvc)/4
  2730 00000947 [320D0000]          <1>  dd %1
  2731                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2731                              <1> e%1 equ ($-tsvc)/4
  2731 0000094B [DA0B0000]          <1>  dd %1
  2732                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2732                              <1> e%1 equ ($-tsvc)/4
  2732 0000094F [680D0000]          <1>  dd %1
  2733                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2733                              <1> e%1 equ ($-tsvc)/4
  2733 00000953 [280C0000]          <1>  dd %1
  2734                                                          tsvce   UpperCaseString                                 ;upper-case string
  2734                              <1> e%1 equ ($-tsvc)/4
  2734 00000957 [78090000]          <1>  dd %1
  2735                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2736                                  ;-----------------------------------------------------------------------------------------------------------------------
  2737                                  ;
  2738                                  ;       Service Request Macros
  2739                                  ;
  2740                                  ;       These macros provide positional parameterization of service request calls.
  2741                                  ;
  2742                                  ;-----------------------------------------------------------------------------------------------------------------------
  2743                                  %macro                  clearConsoleScreen 0
  2744                                                          mov     al,eClearConsoleScreen                          ;function code
  2745                                                          int     _svc                                            ;invoke OS service
  2746                                  %endmacro
  2747                                  %macro                  compareMemory 0
  2748                                                          mov     al,eCompareMemory                               ;function code
  2749                                                          int     _svc                                            ;invoke OS service
  2750                                  %endmacro
  2751                                  %macro                  getConsoleString 4
  2752                                                          mov     edx,%1                                          ;buffer address
  2753                                                          mov     ecx,%2                                          ;max characters
  2754                                                          mov     bh,%3                                           ;echo indicator
  2755                                                          mov     bl,%4                                           ;terminator
  2756                                                          mov     al,eGetConsoleString                            ;function code
  2757                                                          int     _svc                                            ;invoke OS service
  2758                                  %endmacro
  2759                                  %macro                  hexadecimalToUnsigned 0
  2760                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2761                                                          int     _svc                                            ;invoke OS service
  2762                                  %endmacro
  2763                                  %macro                  placeCursor 0
  2764                                                          mov     al,ePlaceCursor                                 ;function code
  2765                                                          int     _svc                                            ;invoke OS service
  2766                                  %endmacro
  2767                                  %macro                  putConsoleString 1
  2768                                                          mov     edx,%1                                          ;string address
  2769                                                          mov     al,ePutConsoleString                            ;function code
  2770                                                          int     _svc                                            ;invoke OS service
  2771                                  %endmacro
  2772                                  %macro                  resetSystem 0
  2773                                                          mov     al,eResetSystem                                 ;function code
  2774                                                          int     _svc                                            ;invoke OS service
  2775                                  %endmacro
  2776                                  %macro                  unsignedToHexadecimal 0
  2777                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2778                                                          int     _svc                                            ;invoke OS service
  2779                                  %endmacro
  2780                                  %macro                  upperCaseString 0
  2781                                                          mov     al,eUpperCaseString                             ;function code
  2782                                                          int     _svc                                            ;invoke OS service
  2783                                  %endmacro
  2784                                  ;=======================================================================================================================
  2785                                  ;
  2786                                  ;       Kernel Function Library
  2787                                  ;
  2788                                  ;=======================================================================================================================
  2789                                  ;=======================================================================================================================
  2790                                  ;
  2791                                  ;       String Helper Routines
  2792                                  ;
  2793                                  ;       CompareMemory
  2794                                  ;       UpperCaseString
  2795                                  ;
  2796                                  ;=======================================================================================================================
  2797                                  ;-----------------------------------------------------------------------------------------------------------------------
  2798                                  ;
  2799                                  ;       Routine:        CompareMemory
  2800                                  ;
  2801                                  ;       Description:    This routine compares two byte arrays.
  2802                                  ;
  2803                                  ;       In:             DS:EDX  first source address
  2804                                  ;                       DS:EBX  second source address
  2805                                  ;                       ECX     comparison length
  2806                                  ;
  2807                                  ;       Out:            EDX     first source address
  2808                                  ;                       EBX     second source address
  2809                                  ;                       ECX     0       array 1 = array 2
  2810                                  ;                               <0      array 1 < array 2
  2811                                  ;                               >0      array 1 > array 2
  2812                                  ;
  2813                                  ;-----------------------------------------------------------------------------------------------------------------------
  2814 0000095B 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  2815 0000095C 57                                              push    edi                                             ;
  2816 0000095D 06                                              push    es                                              ;
  2817 0000095E 1E                                              push    ds                                              ;copy DS
  2818 0000095F 07                                              pop     es                                              ;... to ES
  2819 00000960 89D6                                            mov     esi,edx                                         ;first source address
  2820 00000962 89DF                                            mov     edi,ebx                                         ;second source address
  2821 00000964 FC                                              cld                                                     ;forward strings
  2822 00000965 F3A6                                            rep     cmpsb                                           ;compare bytes
  2823 00000967 B000                                            mov     al,0                                            ;default result
  2824 00000969 7406                                            jz      .10                                             ;branch if arrays equal
  2825 0000096B B001                                            mov     al,1                                            ;positive result
  2826 0000096D 7302                                            jnc     .10                                             ;branch if target > source
  2827 0000096F B0FF                                            mov     al,-1                                           ;negative result
  2828 00000971 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  2829 00000974 07                                              pop     es                                              ;restore non-volatile regs
  2830 00000975 5F                                              pop     edi                                             ;
  2831 00000976 5E                                              pop     esi                                             ;
  2832 00000977 C3                                              ret                                                     ;return
  2833                                  ;-----------------------------------------------------------------------------------------------------------------------
  2834                                  ;
  2835                                  ;       Routine:        UpperCaseString
  2836                                  ;
  2837                                  ;       Description:    This routine places all characters in the given string to upper case.
  2838                                  ;
  2839                                  ;       In:             DS:EDX  string address
  2840                                  ;
  2841                                  ;       Out:            EDX     string address
  2842                                  ;
  2843                                  ;-----------------------------------------------------------------------------------------------------------------------
  2844 00000978 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  2845 00000979 89D6                                            mov     esi,edx                                         ;string address
  2846 0000097B FC                                              cld                                                     ;forward strings
  2847 0000097C AC                      .10                     lodsb                                                   ;string character
  2848 0000097D 84C0                                            test    al,al                                           ;null?
  2849 0000097F 740F                                            jz      .20                                             ;yes, skip ahead
  2850 00000981 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2851 00000983 72F7                                            jb      .10                                             ;no, continue
  2852 00000985 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2853 00000987 77F3                                            ja      .10                                             ;no, continue
  2854 00000989 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  2855 0000098B 8846FF                                          mov     [esi-1],al                                      ;upper character
  2856 0000098E EBEC                                            jmp     .10                                             ;continue
  2857 00000990 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  2858 00000991 C3                                              ret                                                     ;return
  2859                                  ;=======================================================================================================================
  2860                                  ;
  2861                                  ;       Console Helper Routines
  2862                                  ;
  2863                                  ;       FirstConsoleColumn
  2864                                  ;       GetConsoleChar
  2865                                  ;       GetConsoleString
  2866                                  ;       NextConsoleColumn
  2867                                  ;       NextConsoleRow
  2868                                  ;       PreviousConsoleColumn
  2869                                  ;       PutConsoleChar
  2870                                  ;       PutConsoleHexByte
  2871                                  ;       PutConsoleHexDword
  2872                                  ;       PutConsoleHexWord
  2873                                  ;       PutConsoleOIAChar
  2874                                  ;       PutConsoleOIAShift
  2875                                  ;       PutConsoleString
  2876                                  ;       Yield
  2877                                  ;
  2878                                  ;=======================================================================================================================
  2879                                  ;-----------------------------------------------------------------------------------------------------------------------
  2880                                  ;
  2881                                  ;       Routine:        FirstConsoleColumn
  2882                                  ;
  2883                                  ;       Description:    This routine resets the console column to start of the row.
  2884                                  ;
  2885                                  ;       In:             DS      OS data selector
  2886                                  ;
  2887                                  ;-----------------------------------------------------------------------------------------------------------------------
  2888 00000992 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  2889 00000994 A204080000                                      mov     [wbConsoleColumn],al                            ;save column
  2890 00000999 C3                                              ret                                                     ;return
  2891                                  ;-----------------------------------------------------------------------------------------------------------------------
  2892                                  ;
  2893                                  ;       Routine:        GetConsoleChar
  2894                                  ;
  2895                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2896                                  ;
  2897                                  ;       Out:            AL      ASCII character code
  2898                                  ;                       AH      keyboard scan code
  2899                                  ;
  2900                                  ;-----------------------------------------------------------------------------------------------------------------------
  2901 0000099A E868020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2902 0000099F E8A4020000              GetConsoleChar          call    GetMessage                                      ;get the next message
  2903 000009A4 09C0                                            or      eax,eax                                         ;do we have a message?
  2904 000009A6 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  2905 000009A8 50                                              push    eax                                             ;save key codes
  2906 000009A9 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  2907 000009AE 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2908 000009B3 58                                              pop     eax                                             ;restore key codes
  2909 000009B4 75E9                                            jne     GetConsoleChar                                  ;no, try again
  2910 000009B6 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  2911 000009BB C3                                              ret                                                     ;return
  2912                                  ;-----------------------------------------------------------------------------------------------------------------------
  2913                                  ;
  2914                                  ;       Routine:        GetConsoleString
  2915                                  ;
  2916                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2917                                  ;
  2918                                  ;       In:             DS:EDX  target buffer address
  2919                                  ;                       ECX     maximum number of characters to accept
  2920                                  ;                       BH      echo to terminal
  2921                                  ;                       BL      terminating character
  2922                                  ;
  2923                                  ;-----------------------------------------------------------------------------------------------------------------------
  2924 000009BC 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  2925 000009BD 56                                              push    esi                                             ;
  2926 000009BE 57                                              push    edi                                             ;
  2927 000009BF 06                                              push    es                                              ;
  2928 000009C0 1E                                              push    ds                                              ;load data segment selector ...
  2929 000009C1 07                                              pop     es                                              ;... into extra segment register
  2930 000009C2 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2931 000009C4 51                                              push    ecx                                             ;save maximum characters
  2932 000009C5 30C0                                            xor     al,al                                           ;zero register
  2933 000009C7 FC                                              cld                                                     ;forward strings
  2934 000009C8 F3AA                                            rep     stosb                                           ;zero fill buffer
  2935 000009CA 59                                              pop     ecx                                             ;maximum characters
  2936 000009CB 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2937 000009CD 89D6                                            mov     esi,edx                                         ;esi = target buffer
  2938 000009CF E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  2939 000009D1 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  2940 000009D6 38D8                                            cmp     al,bl                                           ;is this the terminator?
  2941 000009D8 7445                                            je      .50                                             ;yes, exit
  2942 000009DA 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2943 000009DC 7521                                            jne     .30                                             ;no, skip ahead
  2944 000009DE 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  2945 000009E0 74EF                                            je      .20                                             ;yes, get next character
  2946 000009E2 4F                                              dec     edi                                             ;backup target pointer
  2947 000009E3 C60700                                          mov     byte [edi],0                                    ;zero previous character
  2948 000009E6 41                                              inc     ecx                                             ;increment remaining chars
  2949 000009E7 F6C701                                          test    bh,1                                            ;echo to console?
  2950 000009EA 74E5                                            jz      .20                                             ;no, get next character
  2951 000009EC E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  2952 000009F1 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2953 000009F3 E891000000                                      call    PutConsoleChar                                  ;write space to console
  2954 000009F8 E835030000                                      call    PlaceCursor                                     ;position the cursor
  2955 000009FD EBD2                                            jmp     .20                                             ;get next character
  2956 000009FF 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2957 00000A01 72CE                                            jb      .20                                             ;no, get another character
  2958 00000A03 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2959 00000A05 77CA                                            ja      .20                                             ;no, get another character
  2960 00000A07 AA                                              stosb                                                   ;store character in buffer
  2961 00000A08 F6C701                                          test    bh,1                                            ;echo to console?
  2962 00000A0B 740F                                            jz      .40                                             ;no, skip ahead
  2963 00000A0D E877000000                                      call    PutConsoleChar                                  ;write character to console
  2964 00000A12 E810000000                                      call    NextConsoleColumn                               ;advance console position
  2965 00000A17 E816030000                                      call    PlaceCursor                                     ;position the cursor
  2966 00000A1C 49                      .40                     dec     ecx                                             ;decrement remaining chars
  2967 00000A1D EBB0                                            jmp     .10                                             ;next
  2968 00000A1F 30C0                    .50                     xor     al,al                                           ;null
  2969 00000A21 AA                                              stosb                                                   ;terminate buffer
  2970 00000A22 07                                              pop     es                                              ;restore non-volatile regs
  2971 00000A23 5F                                              pop     edi                                             ;
  2972 00000A24 5E                                              pop     esi                                             ;
  2973 00000A25 59                                              pop     ecx                                             ;
  2974 00000A26 C3                                              ret                                                     ;return
  2975                                  ;-----------------------------------------------------------------------------------------------------------------------
  2976                                  ;
  2977                                  ;       Routine:        NextConsoleColumn
  2978                                  ;
  2979                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2980                                  ;                       incremented if the end of the current row is reached.
  2981                                  ;
  2982                                  ;       In:             DS      OS data selector
  2983                                  ;
  2984                                  ;-----------------------------------------------------------------------------------------------------------------------
  2985 00000A27 A004080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2986 00000A2C FEC0                                            inc     al                                              ;increment column
  2987 00000A2E A204080000                                      mov     [wbConsoleColumn],al                            ;save column
  2988 00000A33 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  2989 00000A35 720A                                            jb      .10                                             ;no, skip ahead
  2990 00000A37 E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  2991 00000A3C E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  2992 00000A41 C3                      .10                     ret                                                     ;return
  2993                                  ;-----------------------------------------------------------------------------------------------------------------------
  2994                                  ;
  2995                                  ;       Routine:        NextConsoleRow
  2996                                  ;
  2997                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2998                                  ;
  2999                                  ;       In:             DS      OS data selector
  3000                                  ;
  3001                                  ;-----------------------------------------------------------------------------------------------------------------------
  3002 00000A42 A005080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  3003 00000A47 FEC0                                            inc     al                                              ;increment row
  3004 00000A49 A205080000                                      mov     [wbConsoleRow],al                               ;save row
  3005 00000A4E 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  3006 00000A50 7211                                            jb      .10                                             ;no, skip ahead
  3007 00000A52 E889020000                                      call    ScrollConsoleRow                                ;scroll up one row
  3008 00000A57 A005080000                                      mov     al,[wbConsoleRow]                               ;row
  3009 00000A5C FEC8                                            dec     al                                              ;decrement row
  3010 00000A5E A205080000                                      mov     [wbConsoleRow],al                               ;save row
  3011 00000A63 C3                      .10                     ret                                                     ;return
  3012                                  ;-----------------------------------------------------------------------------------------------------------------------
  3013                                  ;
  3014                                  ;       Routine:        PreviousConsoleColumn
  3015                                  ;
  3016                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3017                                  ;                       the column is set to the last position in the row and the row is decremented.
  3018                                  ;
  3019                                  ;       In:             DS      OS data selector
  3020                                  ;
  3021                                  ;-----------------------------------------------------------------------------------------------------------------------
  3022 00000A64 A004080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3023 00000A69 08C0                                            or      al,al                                           ;start of row?
  3024 00000A6B 7514                                            jnz     .10                                             ;no, skip ahead
  3025 00000A6D 8A2505080000                                    mov     ah,[wbConsoleRow]                               ;current row
  3026 00000A73 08E4                                            or      ah,ah                                           ;top of screen?
  3027 00000A75 7411                                            jz      .20                                             ;yes, exit with no change
  3028 00000A77 FECC                                            dec     ah                                              ;decrement row
  3029 00000A79 882505080000                                    mov     [wbConsoleRow],ah                               ;save row
  3030 00000A7F B050                                            mov     al,ECONCOLS                                     ;set maximum column
  3031 00000A81 FEC8                    .10                     dec     al                                              ;decrement column
  3032 00000A83 A204080000                                      mov     [wbConsoleColumn],al                            ;save column
  3033 00000A88 C3                      .20                     ret                                                     ;return
  3034                                  ;-----------------------------------------------------------------------------------------------------------------------
  3035                                  ;
  3036                                  ;       Routine:        PutConsoleChar
  3037                                  ;
  3038                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3039                                  ;
  3040                                  ;       In:             AL      ASCII character
  3041                                  ;                       DS      OS data selector
  3042                                  ;
  3043                                  ;-----------------------------------------------------------------------------------------------------------------------
  3044 00000A89 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3045 00000A8A 06                                              push    es                                              ;
  3046 00000A8B 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3047 00000A8D 07                                              pop     es                                              ;... into extra segment reg
  3048 00000A8E 8A0D04080000                                    mov     cl,[wbConsoleColumn]                            ;column
  3049 00000A94 8A2D05080000                                    mov     ch,[wbConsoleRow]                               ;row
  3050 00000A9A E86D020000                                      call    SetConsoleChar                                  ;put character at row, column
  3051 00000A9F 07                                              pop     es                                              ;restore non-volatile regs
  3052 00000AA0 59                                              pop     ecx                                             ;
  3053 00000AA1 C3                                              ret                                                     ;return
  3054                                  ;-----------------------------------------------------------------------------------------------------------------------
  3055                                  ;
  3056                                  ;       Routine:        PutConsoleHexByte
  3057                                  ;
  3058                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3059                                  ;
  3060                                  ;       In:             AL      byte value
  3061                                  ;                       CL      column
  3062                                  ;                       CH      row
  3063                                  ;                       DS      OS data selector
  3064                                  ;                       ES      CGA selector
  3065                                  ;
  3066                                  ;-----------------------------------------------------------------------------------------------------------------------
  3067 00000AA2 53                      PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  3068 00000AA3 88C3                                            mov     bl,al                                           ;save byte value
  3069 00000AA5 C0E804                                          shr     al,4                                            ;hi-order nybble
  3070 00000AA8 0C30                                            or      al,030h                                         ;apply ASCII zone
  3071 00000AAA 3C3A                                            cmp     al,03ah                                         ;numeric?
  3072 00000AAC 7202                                            jb      .10                                             ;yes, skip ahead
  3073 00000AAE 0407                                            add     al,7                                            ;add ASCII offset for alpha
  3074 00000AB0 E857020000              .10                     call    SetConsoleChar                                  ;display ASCII character
  3075 00000AB5 88D8                                            mov     al,bl                                           ;byte value
  3076 00000AB7 240F                                            and     al,0fh                                          ;lo-order nybble
  3077 00000AB9 0C30                                            or      al,30h                                          ;apply ASCII zone
  3078 00000ABB 3C3A                                            cmp     al,03ah                                         ;numeric?
  3079 00000ABD 7202                                            jb      .20                                             ;yes, skip ahead
  3080 00000ABF 0407                                            add     al,7                                            ;add ASCII offset for alpha
  3081 00000AC1 E846020000              .20                     call    SetConsoleChar                                  ;display ASCII character
  3082 00000AC6 5B                                              pop     ebx                                             ;restore non-volatile regs
  3083 00000AC7 C3                                              ret                                                     ;return
  3084                                  ;-----------------------------------------------------------------------------------------------------------------------
  3085                                  ;
  3086                                  ;       Routine:        PutConsoleHexDword
  3087                                  ;
  3088                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3089                                  ;
  3090                                  ;       In:             EAX     value
  3091                                  ;                       CL      column
  3092                                  ;                       CH      row
  3093                                  ;                       DS      OS data selector
  3094                                  ;                       ES      CGA selector
  3095                                  ;
  3096                                  ;-----------------------------------------------------------------------------------------------------------------------
  3097 00000AC8 50                      PutConsoleHexDword      push    eax
  3098 00000AC9 C1E810                                          shr     eax,16
  3099 00000ACC E807000000                                      call    PutConsoleHexWord
  3100 00000AD1 58                                              pop     eax
  3101 00000AD2 E801000000                                      call    PutConsoleHexWord
  3102 00000AD7 C3                                              ret
  3103                                  ;-----------------------------------------------------------------------------------------------------------------------
  3104                                  ;
  3105                                  ;       Routine:        PutConsoleHexWord
  3106                                  ;
  3107                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3108                                  ;
  3109                                  ;       In:             EAX     value
  3110                                  ;                       CL      column
  3111                                  ;                       CH      row
  3112                                  ;                       DS      OS data selector
  3113                                  ;                       ES      CGA selector
  3114                                  ;
  3115                                  ;-----------------------------------------------------------------------------------------------------------------------
  3116 00000AD8 50                      PutConsoleHexWord       push    eax
  3117 00000AD9 C1E808                                          shr     eax,8
  3118 00000ADC E8C1FFFFFF                                      call    PutConsoleHexByte
  3119 00000AE1 58                                              pop     eax
  3120 00000AE2 E8BBFFFFFF                                      call    PutConsoleHexByte
  3121 00000AE7 C3                                              ret
  3122                                  ;-----------------------------------------------------------------------------------------------------------------------
  3123                                  ;
  3124                                  ;       Routine:        PutConsoleOIAChar
  3125                                  ;
  3126                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3127                                  ;
  3128                                  ;       In:             DS      OS data selector
  3129                                  ;
  3130                                  ;-----------------------------------------------------------------------------------------------------------------------
  3131 00000AE8 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3132 00000AE9 51                                              push    ecx                                             ;
  3133 00000AEA 56                                              push    esi                                             ;
  3134 00000AEB 1E                                              push    ds                                              ;
  3135 00000AEC 06                                              push    es                                              ;
  3136 00000AED 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3137 00000AEF 1F                                              pop     ds                                              ;... into data segment register
  3138 00000AF0 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3139 00000AF2 07                                              pop     es                                              ;... into extra segment register
  3140 00000AF3 BE09080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  3141 00000AF8 B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  3142 00000AFA B300                                            mov     bl,0                                            ;starting column
  3143 00000AFC B906000000                                      mov     ecx,6                                           ;maximum scan codes
  3144 00000B01 51                      .10                     push    ecx                                             ;save remaining count
  3145 00000B02 89D9                                            mov     ecx,ebx                                         ;row, column
  3146 00000B04 AC                                              lodsb                                                   ;read scan code
  3147 00000B05 08C0                                            or      al,al                                           ;scan code present?
  3148 00000B07 7407                                            jz      .20                                             ;no, skip ahead
  3149 00000B09 E894FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  3150 00000B0E EB0E                                            jmp     .30                                             ;continue
  3151 00000B10 B020                    .20                     mov     al,' '                                          ;ASCII space
  3152 00000B12 E8F5010000                                      call    SetConsoleChar                                  ;display space
  3153 00000B17 B020                                            mov     al,' '                                          ;ASCII space
  3154 00000B19 E8EE010000                                      call    SetConsoleChar                                  ;display space
  3155 00000B1E 80C302                  .30                     add     bl,2                                            ;next column (+2)
  3156 00000B21 59                                              pop     ecx                                             ;restore remaining
  3157 00000B22 E2DD                                            loop    .10                                             ;next code
  3158 00000B24 A00F080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  3159 00000B29 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  3160 00000B2B 720D                                            jb      .40                                             ;no, skip ahead
  3161 00000B2D 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  3162 00000B2F 7709                                            ja      .40                                             ;no, skip ahead
  3163 00000B31 88FD                                            mov     ch,bh                                           ;OIA row
  3164 00000B33 B128                                            mov     cl,40                                           ;character display column
  3165 00000B35 E8D2010000                                      call    SetConsoleChar                                  ;display ASCII character
  3166 00000B3A 07                      .40                     pop     es                                              ;restore non-volatile regs
  3167 00000B3B 1F                                              pop     ds                                              ;
  3168 00000B3C 5E                                              pop     esi                                             ;
  3169 00000B3D 59                                              pop     ecx                                             ;
  3170 00000B3E 5B                                              pop     ebx                                             ;
  3171 00000B3F C3                                              ret                                                     ;return
  3172                                  ;-----------------------------------------------------------------------------------------------------------------------
  3173                                  ;
  3174                                  ;       Routine:        PutConsoleOIAShift
  3175                                  ;
  3176                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3177                                  ;
  3178                                  ;       In:             BL      shift flags
  3179                                  ;                       BH      lock flags
  3180                                  ;                       DS      OS data selector
  3181                                  ;
  3182                                  ;-----------------------------------------------------------------------------------------------------------------------
  3183 00000B40 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3184 00000B41 06                                              push    es                                              ;
  3185 00000B42 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3186 00000B44 07                                              pop     es                                              ;... into ES register
  3187 00000B45 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  3188 00000B47 B020                                            mov     al,EASCIISPACE                                  ;space is default character
  3189 00000B49 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3190 00000B4C 7402                                            jz      .10                                             ;no, skip ahead
  3191 00000B4E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3192 00000B50 B10E                    .10                     mov     cl,14                                           ;indicator column
  3193 00000B52 E8B5010000                                      call    SetConsoleChar                                  ;display ASCII character
  3194 00000B57 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3195 00000B59 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3196 00000B5C 7402                                            jz      .20                                             ;no, skip ahead
  3197 00000B5E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3198 00000B60 B140                    .20                     mov     cl,64                                           ;indicator column
  3199 00000B62 E8A5010000                                      call    SetConsoleChar                                  ;display ASCII character
  3200 00000B67 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3201 00000B69 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3202 00000B6C 7402                                            jz      .30                                             ;no, skip ahead
  3203 00000B6E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3204 00000B70 B10F                    .30                     mov     cl,15                                           ;indicator column
  3205 00000B72 E895010000                                      call    SetConsoleChar                                  ;display ASCII character
  3206 00000B77 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3207 00000B79 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3208 00000B7C 7402                                            jz      .40                                             ;no, skip ahead
  3209 00000B7E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3210 00000B80 B13F                    .40                     mov     cl,63                                           ;indicator column
  3211 00000B82 E885010000                                      call    SetConsoleChar                                  ;display ASCII character
  3212 00000B87 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3213 00000B89 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3214 00000B8C 7402                                            jz      .50                                             ;no, skip ahead
  3215 00000B8E B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  3216 00000B90 B110                    .50                     mov     cl,16                                           ;indicator column
  3217 00000B92 E875010000                                      call    SetConsoleChar                                  ;display ASCII character
  3218 00000B97 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3219 00000B99 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3220 00000B9C 7402                                            jz      .60                                             ;no, skip ahead
  3221 00000B9E B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  3222 00000BA0 B13E                    .60                     mov     cl,62                                           ;indicator column
  3223 00000BA2 E865010000                                      call    SetConsoleChar                                  ;display ASCII character
  3224 00000BA7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3225 00000BA9 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3226 00000BAC 7402                                            jz      .70                                             ;no, skip ahead
  3227 00000BAE B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3228 00000BB0 B14E                    .70                     mov     cl,78                                           ;indicator column
  3229 00000BB2 E855010000                                      call    SetConsoleChar                                  ;display ASCII character
  3230 00000BB7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3231 00000BB9 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3232 00000BBC 7402                                            jz      .80                                             ;no, skip ahead
  3233 00000BBE B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  3234 00000BC0 B14D                    .80                     mov     cl,77                                           ;indicator column
  3235 00000BC2 E845010000                                      call    SetConsoleChar                                  ;display ASCII character
  3236 00000BC7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3237 00000BC9 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3238 00000BCC 7402                                            jz      .90                                             ;no, skip ahead
  3239 00000BCE B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3240 00000BD0 B14C                    .90                     mov     cl,76                                           ;indicator column
  3241 00000BD2 E835010000                                      call    SetConsoleChar                                  ;display ASCII character
  3242 00000BD7 07                                              pop     es                                              ;restore non-volatile regs
  3243 00000BD8 59                                              pop     ecx                                             ;
  3244 00000BD9 C3                                              ret                                                     ;return
  3245                                  ;-----------------------------------------------------------------------------------------------------------------------
  3246                                  ;
  3247                                  ;       Routine:        PutConsoleString
  3248                                  ;
  3249                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3250                                  ;                       console position as needed.
  3251                                  ;
  3252                                  ;       In:             EDX     source address
  3253                                  ;                       DS      OS data selector
  3254                                  ;
  3255                                  ;-----------------------------------------------------------------------------------------------------------------------
  3256 00000BDA 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  3257 00000BDB 89D6                                            mov     esi,edx                                         ;source address
  3258 00000BDD FC                                              cld                                                     ;forward strings
  3259 00000BDE AC                      .10                     lodsb                                                   ;ASCII character
  3260 00000BDF 08C0                                            or      al,al                                           ;end of string?
  3261 00000BE1 7422                                            jz      .40                                             ;yes, skip ahead
  3262 00000BE3 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  3263 00000BE5 7507                                            jne     .20                                             ;no, skip ahead
  3264 00000BE7 E8A6FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  3265 00000BEC EBF0                                            jmp     .10                                             ;next character
  3266 00000BEE 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3267 00000BF0 7507                                            jne     .30                                             ;no, skip ahead
  3268 00000BF2 E84BFEFFFF                                      call    NextConsoleRow                                  ;move to next row
  3269 00000BF7 EBE5                                            jmp     .10                                             ;next character
  3270 00000BF9 E88BFEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  3271 00000BFE E824FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  3272 00000C03 EBD9                                            jmp     .10                                             ;next character
  3273 00000C05 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  3274 00000C06 C3                                              ret                                                     ;return
  3275                                  ;-----------------------------------------------------------------------------------------------------------------------
  3276                                  ;
  3277                                  ;       Routine:        Yield
  3278                                  ;
  3279                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3280                                  ;
  3281                                  ;-----------------------------------------------------------------------------------------------------------------------
  3282 00000C07 FB                      Yield                   sti                                                     ;enable maskagle interrupts
  3283 00000C08 F4                                              hlt                                                     ;halt until external interrupt
  3284 00000C09 C3                                              ret                                                     ;return
  3285                                  ;=======================================================================================================================
  3286                                  ;
  3287                                  ;       Data-Type Conversion Helper Routines
  3288                                  ;
  3289                                  ;       HexadecimalToUnsigned
  3290                                  ;       UnsignedToHexadecimal
  3291                                  ;
  3292                                  ;=======================================================================================================================
  3293                                  ;-----------------------------------------------------------------------------------------------------------------------
  3294                                  ;
  3295                                  ;       Routine:        HexadecimalToUnsigned
  3296                                  ;
  3297                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3298                                  ;
  3299                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  3300                                  ;
  3301                                  ;       Output:         EAX     unsigned integer value
  3302                                  ;
  3303                                  ;-----------------------------------------------------------------------------------------------------------------------
  3304 00000C0A 56                      HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  3305 00000C0B 89D6                                            mov     esi,edx                                         ;source address
  3306 00000C0D 31D2                                            xor     edx,edx                                         ;zero register
  3307 00000C0F AC                      .10                     lodsb                                                   ;source byte
  3308 00000C10 84C0                                            test    al,al                                           ;end of string?
  3309 00000C12 7410                                            jz      .30                                             ;yes, branch
  3310 00000C14 3C39                                            cmp     al,'9'                                          ;hexadecimal?
  3311 00000C16 7602                                            jna     .20                                             ;no, skip ahead
  3312 00000C18 2C37                                            sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  3313 00000C1A 83E00F                  .20                     and     eax,0fh                                         ;remove ascii zone
  3314 00000C1D C1E204                                          shl     edx,4                                           ;previous total x 16
  3315 00000C20 01C2                                            add     edx,eax                                         ;add prior value x 16
  3316 00000C22 EBEB                                            jmp     .10                                             ;next
  3317 00000C24 89D0                    .30                     mov     eax,edx                                         ;result
  3318 00000C26 5E                                              pop     esi                                             ;restore non-volatile regs
  3319 00000C27 C3                                              ret                                                     ;return
  3320                                  ;-----------------------------------------------------------------------------------------------------------------------
  3321                                  ;
  3322                                  ;       Routine:        UnsignedToHexadecimal
  3323                                  ;
  3324                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  3325                                  ;
  3326                                  ;       Input:          DS:EDX  output buffer address
  3327                                  ;                       ECX     32-bit binary
  3328                                  ;
  3329                                  ;-----------------------------------------------------------------------------------------------------------------------
  3330 00000C28 57                      UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  3331 00000C29 89D7                                            mov     edi,edx                                         ;output buffer address
  3332 00000C2B 89CA                                            mov     edx,ecx                                         ;32-bit unsigned
  3333 00000C2D 31C9                                            xor     ecx,ecx                                         ;zero register
  3334 00000C2F B108                                            mov     cl,8                                            ;nybble count
  3335 00000C31 C1C204                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  3336 00000C34 88D0                                            mov     al,dl                                           ;????bbbb
  3337 00000C36 240F                                            and     al,0fh                                          ;mask out bits 4-7
  3338 00000C38 0C30                                            or      al,30h                                          ;mask in ascii zone
  3339 00000C3A 3C3A                                            cmp     al,3ah                                          ;A through F?
  3340 00000C3C 7202                                            jb      .20                                             ;no, skip ahead
  3341 00000C3E 0407                                            add     al,7                                            ;41h through 46h
  3342 00000C40 AA                      .20                     stosb                                                   ;store hexnum
  3343 00000C41 E2EE                                            loop    .10                                             ;next nybble
  3344 00000C43 30C0                                            xor     al,al                                           ;zero reg
  3345 00000C45 AA                                              stosb                                                   ;null terminate
  3346 00000C46 5F                                              pop     edi                                             ;restore non-volatile regs
  3347 00000C47 C3                                              ret                                                     ;return
  3348                                  ;=======================================================================================================================
  3349                                  ;
  3350                                  ;       Message Queue Helper Routines
  3351                                  ;
  3352                                  ;       GetMessage
  3353                                  ;       PutMessage
  3354                                  ;
  3355                                  ;=======================================================================================================================
  3356                                  ;-----------------------------------------------------------------------------------------------------------------------
  3357                                  ;
  3358                                  ;       Routine:        GetMessage
  3359                                  ;
  3360                                  ;       Description:    This routine reads and removes a message from the message queue.
  3361                                  ;
  3362                                  ;       Out:            EAX     lo-order message data
  3363                                  ;                       EDX     hi-order message data
  3364                                  ;
  3365                                  ;                       CY      0 = message read
  3366                                  ;                               1 = no message to read
  3367                                  ;
  3368                                  ;-----------------------------------------------------------------------------------------------------------------------
  3369 00000C48 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  3370 00000C49 51                                              push    ecx                                             ;
  3371 00000C4A 1E                                              push    ds                                              ;
  3372 00000C4B 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  3373 00000C4D 1F                                              pop     ds                                              ;... into data segment register
  3374 00000C4E 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  3375 00000C54 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  3376 00000C56 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3377 00000C59 09D0                                            or      eax,edx                                         ;is queue empty?
  3378 00000C5B F9                                              stc                                                     ;assume queue is emtpy
  3379 00000C5C 741B                                            jz      .20                                             ;yes, skip ahead
  3380 00000C5E 31C9                                            xor     ecx,ecx                                         ;store zero
  3381 00000C60 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  3382 00000C62 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3383 00000C65 83C308                                          add     ebx,8                                           ;next queue element
  3384 00000C68 81E3FC030000                                    and     ebx,03fch                                       ;at end of queue?
  3385 00000C6E 7502                                            jnz     .10                                             ;no, skip ahead
  3386 00000C70 B308                                            mov     bl,8                                            ;reset to 1st entry
  3387 00000C72 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3388 00000C78 F8                                              clc                                                     ;indicate message read
  3389 00000C79 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  3390 00000C7A 59                                              pop     ecx                                             ;
  3391 00000C7B 5B                                              pop     ebx                                             ;
  3392 00000C7C C3                                              ret                                                     ;return
  3393                                  ;-----------------------------------------------------------------------------------------------------------------------
  3394                                  ;
  3395                                  ;       Routine:        PutMessage
  3396                                  ;
  3397                                  ;       Description:    This routine adda a message to the message queue.
  3398                                  ;
  3399                                  ;       In:             ECX     hi-order data word
  3400                                  ;                       EDX     lo-order data word
  3401                                  ;
  3402                                  ;       Out:            CY      0 = success
  3403                                  ;                               1 = fail: queue is full
  3404                                  ;
  3405                                  ;-----------------------------------------------------------------------------------------------------------------------
  3406 00000C7D 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  3407 00000C7E 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  3408 00000C80 1F                                              pop     ds                                              ;... into data segment register
  3409 00000C81 A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  3410 00000C86 833800                                          cmp     dword [eax],0                                   ;is queue full?
  3411 00000C89 F9                                              stc                                                     ;assume failure
  3412 00000C8A 7517                                            jne     .20                                             ;yes, cannot store
  3413 00000C8C 8910                                            mov     [eax],edx                                       ;store lo-order data
  3414 00000C8E 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  3415 00000C91 83C008                                          add     eax,8                                           ;next queue element adr
  3416 00000C94 25FC030000                                      and     eax,03fch                                       ;at end of queue?
  3417 00000C99 7502                                            jnz     .10                                             ;no, skip ahead
  3418 00000C9B B008                                            mov     al,8                                            ;reset to top of queue
  3419 00000C9D A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3420 00000CA2 F8                                              clc                                                     ;indicate success
  3421 00000CA3 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  3422 00000CA4 C3                                              ret                                                     ;return
  3423                                  ;=======================================================================================================================
  3424                                  ;
  3425                                  ;       Memory-Mapped Video Routines
  3426                                  ;
  3427                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  3428                                  ;
  3429                                  ;       ClearConsoleScreen
  3430                                  ;       ScrollConsoleRow
  3431                                  ;       SetConsoleChar
  3432                                  ;       SetConsoleString
  3433                                  ;
  3434                                  ;=======================================================================================================================
  3435                                  ;-----------------------------------------------------------------------------------------------------------------------
  3436                                  ;
  3437                                  ;       Routine:        ClearConsoleScreen
  3438                                  ;
  3439                                  ;       Description:    This routine clears the console (CGA) screen.
  3440                                  ;
  3441                                  ;-----------------------------------------------------------------------------------------------------------------------
  3442 00000CA5 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  3443 00000CA6 57                                              push    edi                                             ;
  3444 00000CA7 1E                                              push    ds                                              ;
  3445 00000CA8 06                                              push    es                                              ;
  3446 00000CA9 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  3447 00000CAB 1F                                              pop     ds                                              ;... into DS register
  3448 00000CAC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3449 00000CAE 07                                              pop     es                                              ;... into ES register
  3450 00000CAF B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  3451 00000CB4 B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  3452 00000CB9 31FF                                            xor     edi,edi                                         ;target offset
  3453 00000CBB FC                                              cld                                                     ;forward strings
  3454 00000CBC F3AB                                            rep     stosd                                           ;reset screen body
  3455 00000CBE B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  3456 00000CC3 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  3457 00000CC8 F3AB                                            rep     stosd                                           ;reset OIA line
  3458 00000CCA 30C0                                            xor     al,al                                           ;zero register
  3459 00000CCC A205080000                                      mov     [wbConsoleRow],al                               ;reset console row
  3460 00000CD1 A204080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  3461 00000CD6 E857000000                                      call    PlaceCursor                                     ;place cursor at current position
  3462 00000CDB 07                                              pop     es                                              ;restore non-volatile regs
  3463 00000CDC 1F                                              pop     ds                                              ;
  3464 00000CDD 5F                                              pop     edi                                             ;
  3465 00000CDE 59                                              pop     ecx                                             ;
  3466 00000CDF C3                                              ret                                                     ;return
  3467                                  ;-----------------------------------------------------------------------------------------------------------------------
  3468                                  ;
  3469                                  ;       Routine:        ScrollConsoleRow
  3470                                  ;
  3471                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  3472                                  ;
  3473                                  ;-----------------------------------------------------------------------------------------------------------------------
  3474 00000CE0 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  3475 00000CE1 56                                              push    esi                                             ;
  3476 00000CE2 57                                              push    edi                                             ;
  3477 00000CE3 1E                                              push    ds                                              ;
  3478 00000CE4 06                                              push    es                                              ;
  3479 00000CE5 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  3480 00000CE7 1F                                              pop     ds                                              ;... into DS
  3481 00000CE8 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  3482 00000CEA 07                                              pop     es                                              ;... into ES
  3483 00000CEB B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  3484 00000CF0 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  3485 00000CF5 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  3486 00000CF7 FC                                              cld                                                     ;forward strings
  3487 00000CF8 F3A5                                            rep     movsd                                           ;move 24 lines up
  3488 00000CFA B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  3489 00000CFF B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  3490 00000D04 F3AB                                            rep     stosd                                           ;clear bottom row
  3491 00000D06 07                                              pop     es                                              ;restore non-volatile regs
  3492 00000D07 1F                                              pop     ds                                              ;
  3493 00000D08 5F                                              pop     edi                                             ;
  3494 00000D09 5E                                              pop     esi                                             ;
  3495 00000D0A 59                                              pop     ecx                                             ;
  3496 00000D0B C3                                              ret                                                     ;return
  3497                                  ;-----------------------------------------------------------------------------------------------------------------------
  3498                                  ;
  3499                                  ;       Routine:        SetConsoleChar
  3500                                  ;
  3501                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3502                                  ;
  3503                                  ;       In:             AL      ASCII character
  3504                                  ;                       CL      column
  3505                                  ;                       CH      row
  3506                                  ;                       ES      CGA selector
  3507                                  ;
  3508                                  ;       Out:            EAX     last target address written (ES:)
  3509                                  ;                       CL      column + 1
  3510                                  ;
  3511                                  ;-----------------------------------------------------------------------------------------------------------------------
  3512 00000D0C 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  3513 00000D0E 0FB6C5                                          movzx   eax,ch                                          ;row
  3514 00000D11 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  3515 00000D13 F6E4                                            mul     ah                                              ;row * cols/row
  3516 00000D15 00C8                                            add     al,cl                                           ;add column
  3517 00000D17 80D400                                          adc     ah,0                                            ;handle carry
  3518 00000D1A D1E0                                            shl     eax,1                                           ;screen offset
  3519 00000D1C 268810                                          mov     [es:eax],dl                                     ;store character
  3520 00000D1F FEC1                                            inc     cl                                              ;next column
  3521 00000D21 C3                                              ret                                                     ;return
  3522                                  ;-----------------------------------------------------------------------------------------------------------------------
  3523                                  ;
  3524                                  ;       Routine:        SetConsoleString
  3525                                  ;
  3526                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  3527                                  ;
  3528                                  ;       In:             ESI     source offset (DS:)
  3529                                  ;                       CL      column
  3530                                  ;                       CH      row
  3531                                  ;                       ES      CGA selector
  3532                                  ;
  3533                                  ;-----------------------------------------------------------------------------------------------------------------------
  3534 00000D22 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  3535 00000D23 FC                                              cld                                                     ;forward strings
  3536 00000D24 AC                      .10                     lodsb                                                   ;next ASCII character
  3537 00000D25 84C0                                            test    al,al                                           ;end of string?
  3538 00000D27 7407                                            jz      .20                                             ;yes, branch
  3539 00000D29 E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  3540 00000D2E EBF4                                            jmp     .10                                             ;continue
  3541 00000D30 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  3542 00000D31 C3                                              ret                                                     ;return
  3543                                  ;=======================================================================================================================
  3544                                  ;
  3545                                  ;       Input/Output Routines
  3546                                  ;
  3547                                  ;       These routines read and/or write directly to ports.
  3548                                  ;
  3549                                  ;       PlaceCursor
  3550                                  ;       PutPrimaryEndOfInt
  3551                                  ;       PutSecondaryEndOfInt
  3552                                  ;       ResetSystem
  3553                                  ;       SetKeyboardLamps
  3554                                  ;       WaitForKeyInBuffer
  3555                                  ;       WaitForKeyOutBuffer
  3556                                  ;
  3557                                  ;=======================================================================================================================
  3558                                  ;-----------------------------------------------------------------------------------------------------------------------
  3559                                  ;
  3560                                  ;       Routine:        PlaceCursor
  3561                                  ;
  3562                                  ;       Description:    This routine positions the cursor on the console.
  3563                                  ;
  3564                                  ;       In:             DS      OS data selector
  3565                                  ;
  3566                                  ;-----------------------------------------------------------------------------------------------------------------------
  3567 00000D32 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  3568 00000D33 A005080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  3569 00000D38 B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  3570 00000D3A F6E4                                            mul     ah                                              ;row offset
  3571 00000D3C 020504080000                                    add     al,[wbConsoleColumn]                            ;add column
  3572 00000D42 80D400                                          adc     ah,0                                            ;add overflow
  3573 00000D45 89C1                                            mov     ecx,eax                                         ;screen offset
  3574 00000D47 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3575 00000D49 B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3576 00000D4B B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3577 00000D4D EE                                              out     dx,al                                           ;select register
  3578 00000D4E 42                                              inc     edx                                             ;data port
  3579 00000D4F 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  3580 00000D51 EE                                              out     dx,al                                           ;store hi-order loc
  3581 00000D52 4A                                              dec     edx                                             ;register select port
  3582 00000D53 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3583 00000D55 EE                                              out     dx,al                                           ;select register
  3584 00000D56 42                                              inc     edx                                             ;data port
  3585 00000D57 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  3586 00000D59 EE                                              out     dx,al                                           ;store lo-order loc
  3587 00000D5A 59                                              pop     ecx                                             ;restore non-volatile regs
  3588 00000D5B C3                                              ret                                                     ;return
  3589                                  ;-----------------------------------------------------------------------------------------------------------------------
  3590                                  ;
  3591                                  ;       Routine:        PutPrimaryEndOfInt
  3592                                  ;
  3593                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3594                                  ;
  3595                                  ;-----------------------------------------------------------------------------------------------------------------------
  3596 00000D5C FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  3597 00000D5D B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3598 00000D5F E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3599 00000D61 C3                                              ret                                                     ;return
  3600                                  ;-----------------------------------------------------------------------------------------------------------------------
  3601                                  ;
  3602                                  ;       Routine:        PutSecondaryEndOfInt
  3603                                  ;
  3604                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3605                                  ;
  3606                                  ;-----------------------------------------------------------------------------------------------------------------------
  3607 00000D62 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3608 00000D63 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3609 00000D65 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3610 00000D67 C3                                              ret                                                     ;return
  3611                                  ;-----------------------------------------------------------------------------------------------------------------------
  3612                                  ;
  3613                                  ;       Routine:        ResetSystem
  3614                                  ;
  3615                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3616                                  ;
  3617                                  ;       Out:            N/A     This routine does not return.
  3618                                  ;
  3619                                  ;-----------------------------------------------------------------------------------------------------------------------
  3620 00000D68 B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3621 00000D6D E2FE                                            loop    $                                               ;clear interrupts
  3622 00000D6F B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3623 00000D71 E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3624 00000D73 FB                      .10                     sti                                                     ;enable maskable interrupts
  3625 00000D74 F4                                              hlt                                                     ;halt until interrupt
  3626 00000D75 EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  3627                                  ;-----------------------------------------------------------------------------------------------------------------------
  3628                                  ;
  3629                                  ;       Routine:        SetKeyboardLamps
  3630                                  ;
  3631                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3632                                  ;
  3633                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3634                                  ;
  3635                                  ;-----------------------------------------------------------------------------------------------------------------------
  3636 00000D77 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3637 00000D7C B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3638 00000D7E E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  3639 00000D80 E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3640 00000D85 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3641 00000D87 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3642 00000D8C 88F8                                            mov     al,bh                                           ;set/reset lamps value
  3643 00000D8E E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  3644 00000D90 E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3645 00000D95 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3646 00000D97 C3                                              ret                                                     ;return
  3647                                  ;-----------------------------------------------------------------------------------------------------------------------
  3648                                  ;
  3649                                  ;       Routine:        WaitForKeyInBuffer
  3650                                  ;
  3651                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3652                                  ;
  3653                                  ;       Out:            ZF      1 = Input buffer ready
  3654                                  ;                               0 = Input buffer not ready after timeout
  3655                                  ;
  3656                                  ;-----------------------------------------------------------------------------------------------------------------------
  3657 00000D98 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3658 00000D99 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3659 00000D9E E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3660 00000DA0 A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  3661 00000DA2 E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  3662 00000DA4 59                                              pop     ecx                                             ;restore non-volatile regs
  3663 00000DA5 C3                                              ret                                                     ;return
  3664                                  ;-----------------------------------------------------------------------------------------------------------------------
  3665                                  ;
  3666                                  ;       Routine:        WaitForKeyOutBuffer
  3667                                  ;
  3668                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3669                                  ;
  3670                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3671                                  ;                               0 = Output buffer empty after timeout
  3672                                  ;
  3673                                  ;-----------------------------------------------------------------------------------------------------------------------
  3674 00000DA6 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3675 00000DA7 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3676 00000DAC E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3677 00000DAE A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  3678 00000DB0 E1FA                                            loopz   .10                                             ;loop until output buffer bit
  3679 00000DB2 59                                              pop     ecx                                             ;restore non-volatile regs
  3680 00000DB3 C3                                              ret                                                     ;return
  3681                                  ;-----------------------------------------------------------------------------------------------------------------------
  3682                                  ;
  3683                                  ;       End of the Kernel Function Library
  3684                                  ;
  3685                                  ;-----------------------------------------------------------------------------------------------------------------------
  3686 00000DB4 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  3687                                  ;=======================================================================================================================
  3688                                  ;
  3689                                  ;       Console Task
  3690                                  ;
  3691                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3692                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3693                                  ;       screen and responds to user commands.
  3694                                  ;
  3695                                  ;=======================================================================================================================
  3696                                  ;-----------------------------------------------------------------------------------------------------------------------
  3697                                  ;
  3698                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3699                                  ;
  3700                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3701                                  ;
  3702                                  ;-----------------------------------------------------------------------------------------------------------------------
  3703                                  section                 constack                                                ;console task stack
  3704 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  3705                                  ;-----------------------------------------------------------------------------------------------------------------------
  3706                                  ;
  3707                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3708                                  ;
  3709                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3710                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3711                                  ;       16 descriptors. Six are initially defined.
  3712                                  ;
  3713                                  ;-----------------------------------------------------------------------------------------------------------------------
  3714                                  section                 conldt                                                  ;console local descriptors
  3715 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  3716 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  3717 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  3718 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  3719 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  3720 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  3721 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  3722                                  ;-----------------------------------------------------------------------------------------------------------------------
  3723                                  ;
  3724                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3725                                  ;
  3726                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3727                                  ;       segment. CS to console code.
  3728                                  ;
  3729                                  ;-----------------------------------------------------------------------------------------------------------------------
  3730                                  section                 contss                                                  ;console task state segment
  3731 00000000 00000000                                        dd      0                                               ;00 back-link tss
  3732 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  3733 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  3734 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  3735 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  3736 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  3737 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  3738 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  3739 00000020 00000000                                        dd      0                                               ;20 eip
  3740 00000024 00020000                                        dd      0200h                                           ;24 eflags
  3741 00000028 00000000                                        dd      0                                               ;28 eax
  3742 0000002C 00000000                                        dd      0                                               ;2c ecx
  3743 00000030 00000000                                        dd      0                                               ;30 edx
  3744 00000034 00000000                                        dd      0                                               ;34 ebx
  3745 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  3746 0000003C 00000000                                        dd      0                                               ;3c ebp
  3747 00000040 00000000                                        dd      0                                               ;40 esi
  3748 00000044 00000000                                        dd      0                                               ;44 edi
  3749 00000048 1C000000                                        dd      001Ch                                           ;48 es
  3750 0000004C 24000000                                        dd      0024h                                           ;4c cs
  3751 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  3752 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  3753 00000058 00000000                                        dd      0                                               ;58 fs
  3754 0000005C 00000000                                        dd      0                                               ;5c gs
  3755 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3756 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  3757                                  ;-----------------------------------------------------------------------------------------------------------------------
  3758                                  ;
  3759                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3760                                  ;
  3761                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3762                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3763                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3764                                  ;       event.
  3765                                  ;
  3766                                  ;-----------------------------------------------------------------------------------------------------------------------
  3767                                  section                 conmque                                                 ;console message queue
  3768 00000000 08000000                                        dd      8                                               ;head pointer
  3769 00000004 08000000                                        dd      8                                               ;tail pointer
  3770 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  3771                                  ;-----------------------------------------------------------------------------------------------------------------------
  3772                                  ;
  3773                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3774                                  ;
  3775                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3776                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3777                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3778                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3779                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3780                                  ;       board input, echoing to the console screen and responding to user commands.
  3781                                  ;
  3782                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3783                                  ;
  3784                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3785                                  ;                               |  Real Mode Interrupt Vectors                  |
  3786                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3787                                  ;                               |  Reserved BIOS Memory Area                    |
  3788                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3789                                  ;                               |  Shared Kernel Memory Area                    |
  3790                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3791                                  ;                               |  Global Descriptor Table (GDT)                |
  3792                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3793                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3794                                  ;                       002000  +-----------------------------------------------+
  3795                                  ;                               |  Interrupt Handlers                           |
  3796                                  ;                               |  Kernel Function Library                      |
  3797                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3798                                  ;                               |  Console Task Stack Area                      |
  3799                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3800                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3801                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3802                                  ;                               |  Console Task Task State Segment (TSS)        |
  3803                                  ;                       004800  +-----------------------------------------------+
  3804                                  ;                               |  Console Task Message Queue                   |
  3805                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3806                                  ;                               |  Console Task Code                            |
  3807                                  ;                               |  Console Task Constants                       |
  3808                                  ;                       006000  +===============================================+
  3809                                  ;
  3810                                  ;-----------------------------------------------------------------------------------------------------------------------
  3811                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3812 00000000 E86D000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  3813                                  
  3814                                                          clearConsoleScreen                                      ;clear the console screen
  3814 00000005 B000                <1>  mov al,eClearConsoleScreen
  3814 00000007 CD30                <1>  int _svc
  3815                                                          putConsoleString czTitle                                ;display startup message
  3815 00000009 BA[15020000]        <1>  mov edx,%1
  3815 0000000E B005                <1>  mov al,ePutConsoleString
  3815 00000010 CD30                <1>  int _svc
  3816                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3816                              <1> .10 :
  3816 00000012 BA[13020000]        <1>  mov edx,%1
  3816 00000017 B005                <1>  mov al,ePutConsoleString
  3816 00000019 CD30                <1>  int _svc
  3817                                                          placeCursor                                             ;set CRT cursor location
  3817 0000001B B004                <1>  mov al,ePlaceCursor
  3817 0000001D CD30                <1>  int _svc
  3818                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3818 0000001F BA10080000          <1>  mov edx,%1
  3818 00000024 B94F000000          <1>  mov ecx,%2
  3818 00000029 B701                <1>  mov bh,%3
  3818 0000002B B30D                <1>  mov bl,%4
  3818 0000002D B002                <1>  mov al,eGetConsoleString
  3818 0000002F CD30                <1>  int _svc
  3819                                                          putConsoleString czNewLine                              ;newline
  3819 00000031 BA[10020000]        <1>  mov edx,%1
  3819 00000036 B005                <1>  mov al,ePutConsoleString
  3819 00000038 CD30                <1>  int _svc
  3820                                  
  3821 0000003A BA10080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  3822 0000003F BB60080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  3823 00000044 E842000000                                      call    ConTakeToken                                    ;handle console input
  3824 00000049 BA60080000                                      mov     edx,wzConsoleToken                              ;token buffer
  3825 0000004E E86D000000                                      call    ConDetermineCommand                             ;determine command number
  3826 00000053 83F80A                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  3827 00000056 720B                                            jb      .20                                             ;yes, branch
  3828                                  
  3829                                                          putConsoleString czUnknownCommand                       ;display error message
  3829 00000058 BA[33020000]        <1>  mov edx,%1
  3829 0000005D B005                <1>  mov al,ePutConsoleString
  3829 0000005F CD30                <1>  int _svc
  3830                                  
  3831 00000061 EBAF                                            jmp     .10                                             ;next command
  3832 00000063 C1E002                  .20                     shl     eax,2                                           ;index into jump table
  3833 00000066 BA[A4010000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  3834 0000006B 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  3835 0000006E FFD0                                            call    eax                                             ;call command handler
  3836 00000070 EBA0                                            jmp     .10                                             ;next command
  3837                                  ;-----------------------------------------------------------------------------------------------------------------------
  3838                                  ;
  3839                                  ;       Routine:        ConInitializeData
  3840                                  ;
  3841                                  ;       Description:    This routine initializes console task variables.
  3842                                  ;
  3843                                  ;-----------------------------------------------------------------------------------------------------------------------
  3844 00000072 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  3845 00000073 57                                              push    edi                                             ;
  3846 00000074 06                                              push    es                                              ;
  3847                                  ;
  3848                                  ;       Initialize console work areas.
  3849                                  ;
  3850 00000075 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3851 00000077 07                                              pop     es                                              ;... into extra segment register
  3852 00000078 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  3853 0000007D 30C0                                            xor     al,al                                           ;initialization value
  3854 0000007F B900010000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  3855 00000084 FC                                              cld                                                     ;forward strings
  3856 00000085 F3AA                                            rep     stosb                                           ;initialize data
  3857                                  ;
  3858                                  ;       Restore and return.
  3859                                  ;
  3860 00000087 07                                              pop     es                                              ;restore non-volatile regs
  3861 00000088 5F                                              pop     edi                                             ;
  3862 00000089 59                                              pop     ecx                                             ;
  3863 0000008A C3                                              ret                                                     ;return
  3864                                  ;-----------------------------------------------------------------------------------------------------------------------
  3865                                  ;
  3866                                  ;       Routine:        ConTakeToken
  3867                                  ;
  3868                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3869                                  ;
  3870                                  ;       In:             DS:EDX  source buffer address
  3871                                  ;                       DS:EBX  target buffer address
  3872                                  ;
  3873                                  ;       Out:            DS:EDX  source buffer address
  3874                                  ;                       DS:EBX  target buffer address
  3875                                  ;
  3876                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3877                                  ;
  3878                                  ;-----------------------------------------------------------------------------------------------------------------------
  3879 0000008B 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  3880 0000008C 57                                              push    edi                                             ;
  3881 0000008D 06                                              push    es                                              ;
  3882 0000008E 1E                                              push    ds                                              ;load data segment selector ...
  3883 0000008F 07                                              pop     es                                              ;... into extra segment reg
  3884 00000090 89D6                                            mov     esi,edx                                         ;source buffer address
  3885 00000092 89DF                                            mov     edi,ebx                                         ;target buffer address
  3886 00000094 C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3887 00000097 FC                                              cld                                                     ;forward strings
  3888 00000098 AC                      .10                     lodsb                                                   ;load byte
  3889 00000099 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3890 0000009B 74FB                                            je      .10                                             ;yes, continue
  3891 0000009D 84C0                                            test    al,al                                           ;end of line?
  3892 0000009F 7410                                            jz      .40                                             ;yes, branch
  3893 000000A1 AA                      .20                     stosb                                                   ;store byte
  3894 000000A2 AC                                              lodsb                                                   ;load byte
  3895 000000A3 84C0                                            test    al,al                                           ;end of line?
  3896 000000A5 740A                                            jz      .40                                             ;no, continue
  3897 000000A7 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3898 000000A9 75F6                                            jne     .20                                             ;no, continue
  3899 000000AB AC                      .30                     lodsb                                                   ;load byte
  3900 000000AC 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3901 000000AE 74FB                                            je      .30                                             ;yes, continue
  3902 000000B0 4E                                              dec     esi                                             ;pre-position
  3903 000000B1 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3904 000000B4 89D7                                            mov     edi,edx                                         ;source buffer address
  3905 000000B6 AC                      .50                     lodsb                                                   ;remaining byte
  3906 000000B7 AA                                              stosb                                                   ;move to front of buffer
  3907 000000B8 84C0                                            test    al,al                                           ;end of line?
  3908 000000BA 75FA                                            jnz     .50                                             ;no, continue
  3909 000000BC 07                                              pop     es                                              ;restore non-volatile regs
  3910 000000BD 5F                                              pop     edi                                             ;
  3911 000000BE 5E                                              pop     esi                                             ;
  3912 000000BF C3                                              ret                                                     ;return
  3913                                  ;-----------------------------------------------------------------------------------------------------------------------
  3914                                  ;
  3915                                  ;       Routine:        ConDetermineCommand
  3916                                  ;
  3917                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3918                                  ;
  3919                                  ;       input:          DS:EDX  command address
  3920                                  ;
  3921                                  ;       output:         EAX     >=0     = command nbr
  3922                                  ;                               0       = unknown command
  3923                                  ;
  3924                                  ;-----------------------------------------------------------------------------------------------------------------------
  3925 000000C0 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3926 000000C1 51                                              push    ecx                                             ;
  3927 000000C2 56                                              push    esi                                             ;
  3928 000000C3 57                                              push    edi                                             ;
  3929                                  
  3930                                                          upperCaseString                                         ;upper-case string at EDX
  3930 000000C4 B008                <1>  mov al,eUpperCaseString
  3930 000000C6 CD30                <1>  int _svc
  3931                                  
  3932 000000C8 BE[CC010000]                                    mov     esi,tConCmdTbl                                  ;commands table
  3933 000000CD 31FF                                            xor     edi,edi                                         ;intialize command number
  3934 000000CF FC                                              cld                                                     ;forward strings
  3935 000000D0 AC                      .10                     lodsb                                                   ;command length
  3936 000000D1 0FB6C8                                          movzx   ecx,al                                          ;command length
  3937 000000D4 E30D                                            jecxz   .20                                             ;branch if end of table
  3938 000000D6 89F3                                            mov     ebx,esi                                         ;table entry address
  3939 000000D8 01CE                                            add     esi,ecx                                         ;next table entry address
  3940                                  
  3941                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3941 000000DA B001                <1>  mov al,eCompareMemory
  3941 000000DC CD30                <1>  int _svc
  3942                                  
  3943 000000DE E303                                            jecxz   .20                                             ;branch if equal
  3944 000000E0 47                                              inc     edi                                             ;increment command nbr
  3945 000000E1 EBED                                            jmp     .10                                             ;repeat
  3946 000000E3 89F8                    .20                     mov     eax,edi                                         ;command number
  3947 000000E5 5F                                              pop     edi                                             ;restore non-volatile regs
  3948 000000E6 5E                                              pop     esi                                             ;
  3949 000000E7 59                                              pop     ecx                                             ;
  3950 000000E8 5B                                              pop     ebx                                             ;
  3951 000000E9 C3                                              ret                                                     ;return
  3952                                  ;-----------------------------------------------------------------------------------------------------------------------
  3953                                  ;
  3954                                  ;       Routine:        ConClear
  3955                                  ;
  3956                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  3957                                  ;
  3958                                  ;-----------------------------------------------------------------------------------------------------------------------
  3959                                  ConClear                clearConsoleScreen                                      ;clear console screen
  3959                              <1> ConClear :
  3959 000000EA B000                <1>  mov al,eClearConsoleScreen
  3959 000000EC CD30                <1>  int _svc
  3960 000000EE C3                                              ret                                                     ;return
  3961                                  ;-----------------------------------------------------------------------------------------------------------------------
  3962                                  ;
  3963                                  ;       Routine:        ConExit
  3964                                  ;
  3965                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3966                                  ;
  3967                                  ;-----------------------------------------------------------------------------------------------------------------------
  3968                                  ConExit                 resetSystem                                             ;issue system reset
  3968                              <1> ConExit :
  3968 000000EF B006                <1>  mov al,eResetSystem
  3968 000000F1 CD30                <1>  int _svc
  3969 000000F3 C3                                              ret                                                     ;return
  3970                                  ;-----------------------------------------------------------------------------------------------------------------------
  3971                                  ;
  3972                                  ;       Routine:        ConInt6
  3973                                  ;
  3974                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  3975                                  ;
  3976                                  ;-----------------------------------------------------------------------------------------------------------------------
  3977 000000F4 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  3978 000000F6 C3                                              ret                                                     ;return (not executed)
  3979                                  ;-----------------------------------------------------------------------------------------------------------------------
  3980                                  ;
  3981                                  ;       Routine:        ConMem
  3982                                  ;
  3983                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  3984                                  ;
  3985                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  3986                                  ;
  3987                                  ;-----------------------------------------------------------------------------------------------------------------------
  3988 000000F7 53                      ConMem                  push    ebx                                             ;save non-volatile regs
  3989 000000F8 56                                              push    esi                                             ;
  3990 000000F9 57                                              push    edi                                             ;
  3991                                  ;
  3992                                  ;       Update the source address if a parameter is given.
  3993                                  ;
  3994 000000FA BA10080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  3995 000000FF BB60080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  3996 00000104 E882FFFFFF                                      call    ConTakeToken                                    ;take first param as token
  3997 00000109 803D6008000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  3998 00000110 740E                                            je      .10                                             ;no, branch
  3999 00000112 BA60080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  4000                                  
  4001                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4001 00000117 B003                <1>  mov al,eHexadecimalToUnsigned
  4001 00000119 CD30                <1>  int _svc
  4002                                  
  4003 0000011B A300080000                                      mov     [wdConsoleMemBase],eax                          ;save console memory address
  4004                                  ;
  4005                                  ;       Setup source address and row count.
  4006                                  ;
  4007 00000120 8B3500080000            .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  4008 00000126 31C9                                            xor     ecx,ecx                                         ;zero register
  4009 00000128 B110                                            mov     cl,16                                           ;row count
  4010                                  ;
  4011                                  ;       Start the row with the source address in hexadecimal.
  4012                                  ;
  4013 0000012A 51                      .20                     push    ecx                                             ;save remaining rows
  4014 0000012B BFB0080000                                      mov     edi,wzConsoleOutBuffer                          ;output buffer address
  4015 00000130 89FA                                            mov     edx,edi                                         ;output buffer address
  4016 00000132 89F1                                            mov     ecx,esi                                         ;console memory address
  4017                                  
  4018                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  4018 00000134 B007                <1>  mov al,eUnsignedToHexadecimal
  4018 00000136 CD30                <1>  int _svc
  4019                                  
  4020 00000138 83C708                                          add     edi,8                                           ;end of memory addr hexnum
  4021 0000013B B020                                            mov     al,' '                                          ;ascii space
  4022 0000013D AA                                              stosb                                                   ;store delimiter
  4023                                  ;
  4024                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  4025                                  ;
  4026 0000013E 31C9                                            xor     ecx,ecx                                         ;zero register
  4027 00000140 B110                                            mov     cl,16                                           ;loop count
  4028 00000142 51                      .30                     push    ecx                                             ;save loop count
  4029 00000143 AC                                              lodsb                                                   ;memory byte
  4030 00000144 88C4                                            mov     ah,al                                           ;memory byte
  4031 00000146 C0E804                                          shr     al,4                                            ;high-order in bits 3-0
  4032 00000149 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  4033 0000014B 3C3A                                            cmp     al,3ah                                          ;numeric range?
  4034 0000014D 7202                                            jb      .40                                             ;yes, skip ahead
  4035 0000014F 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  4036 00000151 AA                      .40                     stosb                                                   ;store ascii hexadecimal of high-order
  4037 00000152 88E0                                            mov     al,ah                                           ;low-order in bits 3-0
  4038 00000154 240F                                            and     al,0fh                                          ;mask out high-order bits
  4039 00000156 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  4040 00000158 3C3A                                            cmp     al,3ah                                          ;numeric range?
  4041 0000015A 7202                                            jb      .50                                             ;yes, skip ahead
  4042 0000015C 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  4043 0000015E AA                      .50                     stosb                                                   ;store ascii hexadecimal of low-order
  4044 0000015F B020                                            mov     al,' '                                          ;ascii space
  4045 00000161 AA                                              stosb                                                   ;store ascii space delimiter
  4046 00000162 59                                              pop     ecx                                             ;loop count
  4047 00000163 E2DD                                            loop    .30                                             ;next
  4048                                  ;
  4049                                  ;       Output printable ASCII character section for the row.
  4050                                  ;
  4051 00000165 83EE10                                          sub     esi,16                                          ;reset source pointer
  4052 00000168 B110                                            mov     cl,16                                           ;loop count
  4053 0000016A AC                      .60                     lodsb                                                   ;source byte
  4054 0000016B 3C20                                            cmp     al,32                                           ;printable? (low-range test)
  4055 0000016D 7204                                            jb      .70                                             ;no, skip ahead
  4056 0000016F 3C80                                            cmp     al,128                                          ;printable? (high-range test)
  4057 00000171 7202                                            jb      .80                                             ;yes, skip ahead
  4058 00000173 B020                    .70                     mov     al,' '                                          ;display space instead of printable
  4059 00000175 AA                      .80                     stosb                                                   ;store printable ascii byte
  4060 00000176 E2F2                                            loop    .60                                             ;next source byte
  4061 00000178 30C0                                            xor     al,al                                           ;nul-terminator
  4062 0000017A AA                                              stosb                                                   ;terminate output line
  4063                                  ;
  4064                                  ;       Display constructed output buffer and newline.
  4065                                  ;
  4066                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  4066 0000017B BAB0080000          <1>  mov edx,%1
  4066 00000180 B005                <1>  mov al,ePutConsoleString
  4066 00000182 CD30                <1>  int _svc
  4067                                                          putConsoleString czNewLine                              ;display new line
  4067 00000184 BA[10020000]        <1>  mov edx,%1
  4067 00000189 B005                <1>  mov al,ePutConsoleString
  4067 0000018B CD30                <1>  int _svc
  4068                                  ;
  4069                                  ;       Repeat until all lines displayed and preserve source address.
  4070                                  ;
  4071 0000018D 59                                              pop     ecx                                             ;remaining rows
  4072 0000018E E29A                                            loop    .20                                             ;next row
  4073 00000190 893500080000                                    mov     [wdConsoleMemBase],esi                          ;update console memory address
  4074 00000196 5F                                              pop     edi                                             ;restore regs
  4075 00000197 5E                                              pop     esi                                             ;
  4076 00000198 5B                                              pop     ebx                                             ;
  4077 00000199 C3                                              ret                                                     ;return
  4078                                  ;-----------------------------------------------------------------------------------------------------------------------
  4079                                  ;
  4080                                  ;       Routine:        ConVersion
  4081                                  ;
  4082                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  4083                                  ;
  4084                                  ;-----------------------------------------------------------------------------------------------------------------------
  4085                                  ConVersion              putConsoleString czTitle                                ;display version message
  4085                              <1> ConVersion :
  4085 0000019A BA[15020000]        <1>  mov edx,%1
  4085 0000019F B005                <1>  mov al,ePutConsoleString
  4085 000001A1 CD30                <1>  int _svc
  4086 000001A3 C3                                              ret                                                     ;return
  4087                                  ;-----------------------------------------------------------------------------------------------------------------------
  4088                                  ;
  4089                                  ;       Tables
  4090                                  ;
  4091                                  ;-----------------------------------------------------------------------------------------------------------------------
  4092                                                                                                                  ;---------------------------------------
  4093                                                                                                                  ;  Command Jump Table
  4094                                                                                                                  ;---------------------------------------
  4095                                  tConJmpTbl              equ     $                                               ;command jump table
  4096 000001A4 EF000000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  4097 000001A8 9A010000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  4098 000001AC F7000000                                        dd      ConMem          - ConCode                       ;memory command routine offset
  4099 000001B0 EA000000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  4100 000001B4 EF000000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  4101 000001B8 F4000000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  4102 000001BC EF000000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  4103 000001C0 EA000000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  4104 000001C4 F7000000                                        dd      ConMem          - ConCode                       ;mem command routine offset
  4105 000001C8 9A010000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  4106                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4107                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4108                                                                                                                  ;---------------------------------------
  4109                                                                                                                  ;  Command Name Table
  4110                                                                                                                  ;---------------------------------------
  4111                                  tConCmdTbl              equ     $                                               ;command name table
  4112 000001CC 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  4112 000001D5 00                 
  4113 000001D6 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  4114 000001DF 074D454D4F525900                                db      7,"MEMORY",0                                    ;memory command
  4115 000001E7 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  4116 000001EE 054558495400                                    db      5,"EXIT",0                                      ;exit command
  4117 000001F4 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  4118 000001FA 055155495400                                    db      5,"QUIT",0                                      ;quit command
  4119 00000200 04434C5300                                      db      4,"CLS",0                                       ;cls command
  4120 00000205 044D454D00                                      db      4,"MEM",0                                       ;mem command
  4121 0000020A 0456455200                                      db      4,"VER",0                                       ;ver command
  4122 0000020F 00                                              db      0                                               ;end of table
  4123                                  ;-----------------------------------------------------------------------------------------------------------------------
  4124                                  ;
  4125                                  ;       Constants
  4126                                  ;
  4127                                  ;-----------------------------------------------------------------------------------------------------------------------
  4128 00000210 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  4129 00000213 3A00                    czPrompt                db      ":",0                                           ;prompt string
  4130 00000215 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  4130 0000021E 65726174696E672053-
  4130 00000227 797374656D20312E30-
  4130 00000230 0D0A00             
  4131 00000233 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  4131 0000023C 6F6D6D616E640D0A00 
  4132 00000245 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  4133                                  %endif
  4134                                  %ifdef BUILDDISK
  4135                                  ;-----------------------------------------------------------------------------------------------------------------------
  4136                                  ;
  4137                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  4138                                  ;
  4139                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4140                                  ;
  4141                                  ;-----------------------------------------------------------------------------------------------------------------------
  4142                                  section                 unused                                                  ;unused disk space
  4143 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  4144                                  %endif
  4145                                  ;=======================================================================================================================
  4146                                  ;
  4147                                  ;       End of Program Code
  4148                                  ;
  4149                                  ;=======================================================================================================================
