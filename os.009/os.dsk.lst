     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.009
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support the "mem" and "memory" commands.
     8                                  ;
     9                                  ;       Revised:        July 4, 2018
    10                                  ;
    11                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    17                                  ;
    18                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;       Assembly Directives
    24                                  ;
    25                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    34                                  %define BUILDBOOT                                                               ;... build the boot sector
    35                                  %define BUILDCOM                                                                ;... and the OS kernel
    36                                  %endif
    37                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    38                                  %define BUILDBOOT                                                               ;... also build the boot sector
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;       Conventions
    43                                  ;
    44                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    45                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    46                                  ;                       Assembly operands begin in column 33.
    47                                  ;                       Inline comments begin in column 81.
    48                                  ;                       Lines should not extend beyond column 120.
    49                                  ;
    50                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    51                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    52                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    53                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    54                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    55                                  ;                       ouput buffers, respectively.
    56                                  ;
    57                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    58                                  ;                       Negative relative call or jump addresses indicate reuse.
    59                                  ;
    60                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    61                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    62                                  ;                       Register names in comments are in upper case (EAX, EDI).
    63                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    64                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    65                                  ;                       register contents on entry and exit.
    66                                  ;
    67                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    68                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    69                                  ;                       The 2nd letter of the constant label indicates the storage type.
    70                                  ;
    71                                  ;                       cq......        constant quad-word (dq)
    72                                  ;                       cd......        constant double-word (dd)
    73                                  ;                       cw......        constant word (dw)
    74                                  ;                       cb......        constant byte (db)
    75                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    76                                  ;
    77                                  ;       Instructions:   32-bit instructions are generally favored.
    78                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    79                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    80                                  ;
    81                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    82                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    83                                  ;
    84                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    85                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    86                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    87                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    88                                  ;                       Octal literal values are avoided.
    89                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    90                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    91                                  ;
    92                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    93                                  ;                       Macro names describe an action and so DO begin with a verb.
    94                                  ;
    95                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    96                                  ;                       Buffers are kept to as small a size as practicable.
    97                                  ;                       Data and code intermingling is avoided wherever possible.
    98                                  ;
    99                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   100                                  ;                       Register names in source code are in lower case (eax, edx).
   101                                  ;
   102                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   103                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   104                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   105                                  ;
   106                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   107                                  ;                       Routine names begin with a verb (Get, Read, Load).
   108                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   109                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   110                                  ;                       function but begin with a leading underscore (_) character.
   111                                  ;
   112                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   113                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   114                                  ;
   115                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   116                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   117                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   118                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   119                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   120                                  ;
   121                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   122                                  ;                       The 2nd letter of the variable label indicates the storage type.
   123                                  ;
   124                                  ;                       wq......        variable quad-word (resq)
   125                                  ;                       wd......        variable double-word (resd)
   126                                  ;                       ww......        variable word (resw)
   127                                  ;                       wb......        variable byte (resb)
   128                                  ;                       ws......        writable structure
   129                                  ;
   130                                  ;-----------------------------------------------------------------------------------------------------------------------
   131                                  ;=======================================================================================================================
   132                                  ;
   133                                  ;       Equates
   134                                  ;
   135                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   136                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   137                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   138                                  ;       sets. Equates here are defined in the following groupings:
   139                                  ;
   140                                  ;       Hardware-Defined Values
   141                                  ;
   142                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   143                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   144                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   145                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   146                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   147                                  ;       EX86...         Intel x86 CPU architecture values
   148                                  ;
   149                                  ;       Firmware-Defined Values
   150                                  ;
   151                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   152                                  ;
   153                                  ;       Standards-Based Values
   154                                  ;
   155                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   156                                  ;
   157                                  ;       Operating System Values
   158                                  ;
   159                                  ;       EBOOT...        Boot sector and loader values
   160                                  ;       ECON...         Console values (dimensions and attributes)
   161                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   162                                  ;       EKEYF...        Keyboard status flags
   163                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   164                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   165                                  ;       EMSG...         Message identifers
   166                                  ;
   167                                  ;=======================================================================================================================
   168                                  ;-----------------------------------------------------------------------------------------------------------------------
   169                                  ;
   170                                  ;       Hardware-Defined Values
   171                                  ;
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;
   175                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   176                                  ;
   177                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   178                                  ;       for CGA, EGA, VGA and compatible video modes.
   179                                  ;
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   182                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   183                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   184                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   185                                  ;-----------------------------------------------------------------------------------------------------------------------
   186                                  ;
   187                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   188                                  ;
   189                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   190                                  ;
   191                                  ;-----------------------------------------------------------------------------------------------------------------------
   192                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   193                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   194                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   195                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   196                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   197                                  ;-----------------------------------------------------------------------------------------------------------------------
   198                                  ;
   199                                  ;       8042 Keyboard Controller                                                EKEYB...
   200                                  ;
   201                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   202                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   203                                  ;
   204                                  ;-----------------------------------------------------------------------------------------------------------------------
   205                                  EKEYBPORTDATA           equ     060h                                            ;data port
   206                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   207                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   208                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   209                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   210                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   211                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   212                                                                                                                  ;---------------------------------------
   213                                                                                                                  ;       Keyboard Scan Codes
   214                                                                                                                  ;---------------------------------------
   215                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   216                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   217                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   218                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   219                                  EKEYBSLASH              equ     035h                                            ;slash
   220                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   221                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   222                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   223                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   224                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   225                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   226                                  EKEYBUP                 equ     080h                                            ;up
   227                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   228                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   229                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   230                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   231                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   232                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   233                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   234                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   235                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   236                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   237                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   238                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   239                                  ;-----------------------------------------------------------------------------------------------------------------------
   240                                  ;
   241                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   242                                  ;
   243                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   244                                  ;       external devices and signals a hardware interrupt to the CPU.
   245                                  ;
   246                                  ;-----------------------------------------------------------------------------------------------------------------------
   247                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   248                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   249                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   250                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   251                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   252                                  ;-----------------------------------------------------------------------------------------------------------------------
   253                                  ;
   254                                  ;       8253 Programmable Interval Timer                                        EPIT...
   255                                  ;
   256                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   257                                  ;       approximately 18.2 times per second.
   258                                  ;
   259                                  ;-----------------------------------------------------------------------------------------------------------------------
   260                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  ;
   263                                  ;       x86 CPU Architecture                                                    ;EX86...
   264                                  ;
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;
   269                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   270                                  ;
   271                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   272                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   273                                  ;
   274                                  ;       0.......        Segment is not present in memory (triggers int 11)
   275                                  ;       1.......        Segment is present in memory
   276                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   277                                  ;       ...0....        Segment is a system segment
   278                                  ;       ...00010                Local Descriptor Table
   279                                  ;       ...00101                Task Gate
   280                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   281                                  ;       ...01100                Call Gate (386)
   282                                  ;       ...01110                Interrupt Gate (386)
   283                                  ;       ...01111                Trap Gate (386)
   284                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   285                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   286                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   287                                  ;
   288                                  ;-----------------------------------------------------------------------------------------------------------------------
   289                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   290                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   291                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   292                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   293                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   294                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   295                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   296                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  ;
   299                                  ;       Firmware-Defined Values
   300                                  ;
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  ;
   304                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   305                                  ;
   306                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   307                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   308                                  ;
   309                                  ;-----------------------------------------------------------------------------------------------------------------------
   310                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   311                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   312                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   313                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   314                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   315                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   316                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   317                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   318                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   319                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   320                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   321                                  ;-----------------------------------------------------------------------------------------------------------------------
   322                                  ;
   323                                  ;       Standards-Based Values
   324                                  ;
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;
   328                                  ;       ASCII                                                                   EASCII...
   329                                  ;
   330                                  ;-----------------------------------------------------------------------------------------------------------------------
   331                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   332                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   333                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   334                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   335                                  EASCIISPACE             equ     020h                                            ;space
   336                                  EASCIIUPPERA            equ     041h                                            ;'A'
   337                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   338                                  EASCIILOWERA            equ     061h                                            ;'a'
   339                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   340                                  EASCIITILDE             equ     07Eh                                            ;'~'
   341                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   342                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   343                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   344                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   345                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   346                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   347                                  EASCIICASE              equ     00100000b                                       ;case bit
   348                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   349                                  ;-----------------------------------------------------------------------------------------------------------------------
   350                                  ;
   351                                  ;       Operating System Values
   352                                  ;
   353                                  ;-----------------------------------------------------------------------------------------------------------------------
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  ;
   356                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   357                                  ;
   358                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   359                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   360                                  ;
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   363                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   364                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   365                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   366                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   367                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   368                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   369                                  ;-----------------------------------------------------------------------------------------------------------------------
   370                                  ;       Console Constants                                                       ECON...
   371                                  ;-----------------------------------------------------------------------------------------------------------------------
   372                                  ECONCOLS                equ     80                                              ;columns per row
   373                                  ECONROWS                equ     24                                              ;console rows
   374                                  ECONOIAROW              equ     24                                              ;operator information area row
   375                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   376                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   377                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   378                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   379                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   380                                  ;-----------------------------------------------------------------------------------------------------------------------
   381                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   382                                  ;-----------------------------------------------------------------------------------------------------------------------
   383                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   384                                  EGDTCGA                 equ     020h                                            ;cga video selector
   385                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   386                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   387                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   388                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   389                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   390                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   391                                  ;-----------------------------------------------------------------------------------------------------------------------
   392                                  ;       Keyboard Flags                                                          EKEYF...
   393                                  ;-----------------------------------------------------------------------------------------------------------------------
   394                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   395                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   396                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   397                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   398                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   399                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   400                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   401                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   402                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   403                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   404                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   405                                  ;-----------------------------------------------------------------------------------------------------------------------
   406                                  ;       Kernel Constants                                                        EKRN...
   407                                  ;-----------------------------------------------------------------------------------------------------------------------
   408                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   409                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   410                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   411                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   412                                  ;-----------------------------------------------------------------------------------------------------------------------
   413                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   414                                  ;-----------------------------------------------------------------------------------------------------------------------
   415                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   416                                  ;-----------------------------------------------------------------------------------------------------------------------
   417                                  ;       Message Identifiers                                                     EMSG...
   418                                  ;-----------------------------------------------------------------------------------------------------------------------
   419                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   420                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   421                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   422                                  ;=======================================================================================================================
   423                                  ;
   424                                  ;       Structures
   425                                  ;
   426                                  ;=======================================================================================================================
   427                                  ;-----------------------------------------------------------------------------------------------------------------------
   428                                  ;
   429                                  ;       MQUEUE
   430                                  ;
   431                                  ;       The MQUEUE structure maps memory used for a message queue.
   432                                  ;
   433                                  ;-----------------------------------------------------------------------------------------------------------------------
   434                                  struc                   MQUEUE
   435 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   436 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   437 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   438                                  endstruc
   439                                  ;-----------------------------------------------------------------------------------------------------------------------
   440                                  ;
   441                                  ;       OSDATA
   442                                  ;
   443                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   444                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   445                                  ;
   446                                  ;-----------------------------------------------------------------------------------------------------------------------
   447                                  struc                   OSDATA
   448 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   449 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   450 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   451 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   452 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   453 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   454 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   455 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   456 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   457 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   458 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   459 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   460 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   461 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   462 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   463 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   464 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   465 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   466 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   467 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   468 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   469 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   470 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   471 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   472 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   473 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   474 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   475 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   476 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   477 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   478 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   479 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   480 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   481 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   482 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   483 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   484 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   485 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   486 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   487 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   488 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   489 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   490 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   491 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   492 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   493 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   494 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   495 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   496 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   497 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   498 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   499 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   500 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   501 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   502 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   503 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   504 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   505 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   506 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   507 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   508 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   509 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   510 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   511 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   512 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   513 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   514 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   515 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   516 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   517 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   518 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   519 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   520 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   521 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   522 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   523 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   524 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   525 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   526 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   527 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   528 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   529 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   530 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   531 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   532 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   533 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   534 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   535 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   536 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   537 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   538 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   539 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   540 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   541 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   542 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   543 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   544 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   545 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   546 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   547 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   548 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   549                                  ;-----------------------------------------------------------------------------------------------------------------------
   550                                  ;
   551                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   552                                  ;
   553                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   554                                  ;
   555                                  ;-----------------------------------------------------------------------------------------------------------------------
   556                                  ECONDATA                equ     ($)
   557 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   558 00000804 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   559 00000805 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   560 00000806 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   561 00000807 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   562 00000808 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   563 00000809 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   564 0000080A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   565 0000080B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   566 0000080C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   567 0000080D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   568 0000080E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   569 0000080F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   570 00000810 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   571 00000860 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   572 000008B0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   573                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   574                                  ;-----------------------------------------------------------------------------------------------------------------------
   575                                  ;
   576                                  ;       End of OS Variables
   577                                  ;
   578                                  ;-----------------------------------------------------------------------------------------------------------------------
   579                                  endstruc
   580                                  ;-----------------------------------------------------------------------------------------------------------------------
   581                                  ;
   582                                  ;       Macros
   583                                  ;
   584                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   585                                  ;
   586                                  ;-----------------------------------------------------------------------------------------------------------------------
   587                                  %macro                  mint    1
   588                                  _%1                     equ     ($-$$) / EX86DESCLEN
   589                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   590                                  %endmacro
   591                                  %macro                  mtrap   1
   592                                  _%1                     equ     ($-$$) / EX86DESCLEN
   593                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   594                                  %endmacro
   595                                  %macro                  menter  1
   596                                  ?%1                     equ     ($-$$)
   597                                  %endmacro
   598                                  %macro                  tsvce   1
   599                                  e%1                     equ     ($-tsvc)/4
   600                                                          dd      %1
   601                                  %endmacro
   602                                  %ifdef BUILDBOOT
   603                                  ;=======================================================================================================================
   604                                  ;
   605                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   606                                  ;
   607                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   608                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   609                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   610                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   611                                  ;
   612                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   613                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   614                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   615                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   616                                  ;       immediately followed by a disk parameter table.
   617                                  ;
   618                                  ;=======================================================================================================================
   619                                                          cpu     8086                                            ;assume minimal CPU
   620                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   621                                                          bits    16                                              ;16-bit code at power-up
   622                                  %ifdef BUILDPREP
   623                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   624                                  %else
   625 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   626                                  %endif
   627                                  ;-----------------------------------------------------------------------------------------------------------------------
   628                                  ;
   629                                  ;       Disk Parameter Table
   630                                  ;
   631                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   632                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   633                                  ;
   634                                  ;-----------------------------------------------------------------------------------------------------------------------
   635 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   636 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   637 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   638 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   639 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   640 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   641 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   642 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   643 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   644                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   645 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   646 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   647 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   648                                  ;
   649                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   650                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   651                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   652                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   653                                  ;       given several possible starting values for CS:IP.
   654                                  ;
   655                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   656 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   657                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   658 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   659 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   660 00000025 B104                                            mov     cl,4                                            ;shift count
   661 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   662 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   663 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   664                                  ;
   665                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   666                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   667                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   668                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   669                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   670                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   671                                  ;
   672 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   673 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   674 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   675 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   676 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   677                                  ;
   678                                  ;       Our boot addressability is now set up according to the following diagram.
   679                                  ;
   680                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   681                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   682                                  ;                               |  256 = 100h bytes                             |
   683                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   684                                  ;                               |  Boot Sector (vstart=0100h)                   |
   685                                  ;                               |  1 sector = 512 = 200h bytes                  |
   686                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   687                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   688                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   689                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   690                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   691                                  ;                               |  2 sectors = 1024 = 400h bytes
   692                                  ;                       009400  +-----------------------------------------------+ DS:1900
   693                                  ;
   694                                  ;       On entry, DL indicates the drive being booted from.
   695                                  ;
   696 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   697                                  ;
   698                                  ;       Compute directory i/o buffer address.
   699                                  ;
   700 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   701 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   702 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   703 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   704                                  ;
   705                                  ;       Compute segment where os.com will be loaded.
   706                                  ;
   707 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   708 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   709 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   710 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   711                                  ;
   712                                  ;       Set the video mode to 80 column, 25 row, text.
   713                                  ;
   714 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   715 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   716                                  ;
   717                                  ;       Write a message to the console so we know we have our addressability established.
   718                                  ;
   719 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   720 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   721                                  ;
   722                                  ;       Initialize the number of directory sectors to search.
   723                                  ;
   724 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   725 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   726                                  ;
   727                                  ;       Compute number of directory sectors and initialize overhead count.
   728                                  ;
   729 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   730 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   731 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   732 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   733                                  ;
   734                                  ;       Compute directory entries per sector.
   735                                  ;
   736 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   737 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   738 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   739                                  ;
   740                                  ;       Compute first logical directory sector and update overhead count.
   741                                  ;
   742 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   743 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   744 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   745 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   746 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   747 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   748                                  ;
   749                                  ;       Read directory sector.
   750                                  ;
   751 0000008E B001                    .30                     mov     al,1                                            ;sector count
   752 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   753 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   754 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   755                                  ;
   756                                  ;       Setup variables to search this directory sector.
   757                                  ;
   758 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   759 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   760 000000A1 7603                                            jna     .40                                             ;no, continue
   761 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   762 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   763 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   764 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   765                                  ;
   766                                  ;       Loop through directory sectors searching for kernel program.
   767                                  ;
   768 000000B1 56                      .50                     push    si                                              ;save kernel name address
   769 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   770 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   771 000000B6 FC                                              cld                                                     ;forward strings
   772 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   773 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   774 000000BA 5E                                              pop     si                                              ;restore kernel name address
   775 000000BB 7418                                            je      .60                                             ;exit loop if found
   776 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   777 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   778 000000C2 75ED                                            jnz     .50                                             ;next entry
   779                                  ;
   780                                  ;       Repeat search if we are not at the end of the directory.
   781                                  ;
   782 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   783 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   784 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   785 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   786 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   787                                  ;
   788                                  ;       If we find the kernel program in the directory, read the FAT.
   789                                  ;
   790 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   791 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   792 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   793 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   794 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   795 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   796                                  ;
   797                                  ;       Get the starting cluster of the kernel program and target address.
   798                                  ;
   799 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   800 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   801                                  ;
   802                                  ;       Read each program cluster into RAM.
   803                                  ;
   804 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   805 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   806 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   807 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   808 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   809 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   810 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   811 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   812 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   813                                  ;
   814                                  ;       Update buffer pointer for next cluster.
   815                                  ;
   816 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   817 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   818 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   819 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   820 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   821                                  ;
   822                                  ;       Compute next cluster number.
   823                                  ;
   824 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   825 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   826 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   827 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   828 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   829 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   830 00000120 83E701                                          and     di,1                                            ;get low bit
   831 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   832 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   833 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   834                                  ;
   835                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   836                                  ;
   837 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   838 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   839 00000130 B104                                            mov     cl,4                                            ;shift count
   840 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   841 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   842 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   843 0000013A 75B2                                            jne     .70                                             ;no, continue
   844                                  ;
   845                                  ;       Transfer control to the operating system program.
   846                                  ;
   847 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   848 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   849 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   850                                  ;
   851                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   852                                  ;
   853 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   854 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   855 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   856 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   857 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   858 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   859 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   860 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   861 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   862 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   863                                  ;
   864                                  ;       Try maxtries times to read sector.
   865                                  ;
   866 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   867 00000160 53                      .10                     push    bx                                              ;save buffer address
   868 00000161 51                                              push    cx                                              ;save retry count
   869 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   870 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   871 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   872 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   873 0000016F 59                                              pop     cx                                              ;restore retry count
   874 00000170 5B                                              pop     bx                                              ;restore buffer address
   875 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   876 00000173 E2EB                                            loop    .10                                             ;retry
   877                                  ;
   878                                  ;       Handle disk error: convert to ASCII and store in error string.
   879                                  ;
   880 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   881 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   882 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   883 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   884 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   885 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   886 00000183 7203                                            jb      .20                                             ;continue if numeral
   887 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   888 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   889 0000018A 7203                                            jb      .30                                             ;continue if numeral
   890 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   891 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   892 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   893 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   894                                  ;
   895                                  ;       Wait for a key press.
   896                                  ;
   897 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   898 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   899 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   900 0000019E FB                                              sti                                                     ;enable maskable interrupts
   901 0000019F F4                                              hlt                                                     ;wait for interrupt
   902 000001A0 EBF6                                            jmp     .10                                             ;repeat
   903                                  ;
   904                                  ;       Reset the system.
   905                                  ;
   906 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   907 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   908 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   909 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   910 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   911                                  ;
   912                                  ;       Display text message.
   913                                  ;
   914 000001AA FC                      BootPrint               cld                                                     ;forward strings
   915 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   916 000001AC 84C0                                            test    al,al                                           ;end of string?
   917 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   918 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   919 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   920 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   921 000001B6 C3                      BootReturn              ret                                                     ;return
   922                                  ;-----------------------------------------------------------------------------------------------------------------------
   923                                  ;
   924                                  ;       Constants
   925                                  ;
   926                                  ;-----------------------------------------------------------------------------------------------------------------------
   927 000001B7 90                                              align   2
   928 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   929 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   929 000001C3 4F4D               
   930 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   930 000001CE 530D0A00           
   931 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   931 000001DB 7220               
   932 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   933 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   933 000001E9 6700               
   934                                  ;-----------------------------------------------------------------------------------------------------------------------
   935                                  ;
   936                                  ;       Work Areas
   937                                  ;
   938                                  ;-----------------------------------------------------------------------------------------------------------------------
   939 000001EB 90                                              align   2
   940 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   941 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   942 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   943 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   944 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   945                                  wwReadCountCommand      equ     $                                               ;read count and command
   946 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   947 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   948                                  wwDriveHead             equ     $                                               ;drive, head (word)
   949 000001F8 00                      wbDrive                 db      0                                               ;drive
   950 000001F9 00                      wbHead                  db      0                                               ;head
   951                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   952 000001FA 00                                              db      0                                               ;sector
   953 000001FB 00                      wbTrack                 db      0                                               ;track
   954 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   955 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   956                                  %endif
   957                                  %ifdef BUILDPREP
   958                                  ;=======================================================================================================================
   959                                  ;
   960                                  ;       Diskette Preparation Code
   961                                  ;
   962                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   963                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   964                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   965                                  ;
   966                                  ;=======================================================================================================================
   967                                  ;
   968                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   969                                  ;
   970                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   971                                                          call    BootPrint                                       ;display message
   972                                  ;
   973                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   974                                  ;
   975                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   976                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   977                                                          jnz     .20                                             ;continue if key pressed
   978                                                          sti                                                     ;enable interrupts
   979                                                          hlt                                                     ;wait for interrupt
   980                                                          jmp     .10                                             ;repeat
   981                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   982                                                          je      .30                                             ;yes, branch
   983                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   984                                                          jne     .10                                             ;no, repeat
   985                                                          jmp     .120                                            ;yes, exit program
   986                                  ;
   987                                  ;       Display writing-sector message and patch the JMP instruction.
   988                                  ;
   989                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   990                                                          call    BootPrint                                       ;display message
   991                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   992                                                          mov     ax,01Bh                                         ;address past disk parameter table
   993                                                          mov     [bx],ax                                         ;update the JMP instruction
   994                                  ;
   995                                  ;       Try to read the boot sector.
   996                                  ;
   997                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   998                                  .40                     push    cx                                              ;save remaining tries
   999                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1000                                                          mov     dx,0                                            ;head zero, drive zero
  1001                                                          mov     cx,1                                            ;track zero, sector one
  1002                                                          mov     al,1                                            ;one sector
  1003                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1004                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1005                                                          pop     cx                                              ;restore remaining retries
  1006                                                          jnc     .50                                             ;skip ahead if successful
  1007                                                          loop    .40                                             ;try again
  1008                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1009                                                          jmp     .70                                             ;branch to error routine
  1010                                  ;
  1011                                  ;       Copy diskette parms from input buffer to output buffer.
  1012                                  ;
  1013                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1014                                                          add     si,11                                           ;skip over JMP and system ID
  1015                                                          mov     di,Boot                                         ;output buffer address
  1016                                                          add     di,11                                           ;skip over JMP and system ID
  1017                                                          mov     cx,19                                           ;length of diskette parameters
  1018                                                          cld                                                     ;forward string copies
  1019                                                          rep     movsb                                           ;copy diskette parameters
  1020                                  ;
  1021                                  ;       Try to write boot sector to diskette.
  1022                                  ;
  1023                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1024                                  .60                     push    cx                                              ;save remaining tries
  1025                                                          mov     bx,Boot                                         ;output buffer address
  1026                                                          mov     dx,0                                            ;head zero, drive zero
  1027                                                          mov     cx,1                                            ;track zero, sector one
  1028                                                          mov     al,1                                            ;one sector
  1029                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1030                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1031                                                          pop     cx                                              ;restore remaining retries
  1032                                                          jnc     .100                                            ;skip ahead if successful
  1033                                                          loop    .60                                             ;try again
  1034                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1035                                  ;
  1036                                  ;       Convert the error code to ASCII and display the error message.
  1037                                  ;
  1038                                  .70                     push    ax                                              ;save error code
  1039                                                          mov     al,ah                                           ;copy error code
  1040                                                          mov     ah,0                                            ;AX = error code
  1041                                                          mov     dl,10h                                          ;hexadecimal divisor
  1042                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1043                                                          or      ax,03030h                                       ;add ASCII zone digits
  1044                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1045                                                          jb      .80                                             ;yes, continue
  1046                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1047                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1048                                                          jb      .90                                             ;yes, continue
  1049                                                          add     al,7                                            ;no, make ASCII
  1050                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1051                                                          call    BootPrint                                       ;write error message
  1052                                                          pop     ax                                              ;restore error code
  1053                                  ;
  1054                                  ;       Display the completion message.
  1055                                  ;
  1056                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1057                                                          mov     al,ah                                           ;BIOS return code
  1058                                                          cmp     al,0                                            ;success?
  1059                                                          je      .110                                            ;yes, continue
  1060                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1061                                                          cmp     al,1                                            ;disk parameter error?
  1062                                                          je      .110                                            ;yes, continue
  1063                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1064                                                          cmp     al,2                                            ;address mark not found?
  1065                                                          je      .110                                            ;yes, continue
  1066                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1067                                                          cmp     al,3                                            ;protected disk?
  1068                                                          je      .110                                            ;yes, continue
  1069                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1070                                                          cmp     al,6                                            ;diskette removed?
  1071                                                          je      .110                                            ;yes, continue
  1072                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1073                                                          cmp     al,80H                                          ;drive timed out?
  1074                                                          je      .110                                            ;yes, continue
  1075                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1076                                  .110                    call    BootPrint                                       ;display result message
  1077                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1078                                                          int     021h                                            ;terminate DOS program
  1079                                                          ret                                                     ;return (should not execute)
  1080                                  ;-----------------------------------------------------------------------------------------------------------------------
  1081                                  ;
  1082                                  ;       Diskette Preparation Messages
  1083                                  ;
  1084                                  ;-----------------------------------------------------------------------------------------------------------------------
  1085                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1086                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1087                                                          db      13,10
  1088                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1089                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1090                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1091                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1092                                                          db      13,10,0
  1093                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1094                                                          db      13,10,0
  1095                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1096                                                          db      13,10,0
  1097                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1098                                                          db      13,10,0
  1099                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1100                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1101                                                          db      13,10,0
  1102                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1103                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1104                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1105                                                          db      13,10,"and retry."
  1106                                                          db      13,10,0
  1107                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1108                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1109                                                          db      13,10,"using another diskette."
  1110                                                          db      13,10,0
  1111                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1112                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1113                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1114                                                          db      13,10,0
  1115                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1116                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1117                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1118                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1119                                                          db      13,10,"is properly inserted in the diskette drive."
  1120                                                          db      13,10,0
  1121                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1122                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1123                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1124                                                          db      13,10,0
  1125                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1126                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1127                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1128                                                          db      13,10,0
  1129                                  wcPrepInBuf             equ     $
  1130                                  %endif
  1131                                  %ifdef BUILDDISK
  1132                                  ;=======================================================================================================================
  1133                                  ;
  1134                                  ;       File Allocation Tables
  1135                                  ;
  1136                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1137                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1138                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1139                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1140                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1141                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1142                                  ;       the last cluster in the chain.
  1143                                  ;
  1144                                  ;       Every three bytes encode two FAT entries as follows:
  1145                                  ;
  1146                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1147                                  ;
  1148                                  ;=======================================================================================================================
  1149                                  ;-----------------------------------------------------------------------------------------------------------------------
  1150                                  ;
  1151                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1152                                  ;
  1153                                  ;-----------------------------------------------------------------------------------------------------------------------
  1154                                  section                 fat1                                                    ;first copy of FAT
  1155 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1156 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1157 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1158 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1159 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1160 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1161 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1162 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1163 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1164 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1165 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1166 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1167                                  ;-----------------------------------------------------------------------------------------------------------------------
  1168                                  ;
  1169                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1170                                  ;
  1171                                  ;-----------------------------------------------------------------------------------------------------------------------
  1172                                  section                 fat2                                                    ;second copy of FAT
  1173 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1174 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1175 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1176 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1177 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1178 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1179 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1180 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1181 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1182 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1183 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1184 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1185                                  ;-----------------------------------------------------------------------------------------------------------------------
  1186                                  ;
  1187                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1188                                  ;
  1189                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1190                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1191                                  ;       copy.
  1192                                  ;
  1193                                  ;-----------------------------------------------------------------------------------------------------------------------
  1194                                  section                 dir                                                     ;diskette directory
  1195 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1195 00000009 4F4D               
  1196 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1197 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1198 00000016 0000                                            dw      0h                                              ;time
  1199 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1200 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1201 0000001A 0200                                            dw      2                                               ;first cluster
  1202 0000001C 00540000                                        dd      05400h                                          ;file size
  1203 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1204                                  %endif
  1205                                  %ifdef BUILDCOM
  1206                                  ;=======================================================================================================================
  1207                                  ;
  1208                                  ;       OS.COM
  1209                                  ;
  1210                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1211                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1212                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1213                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1214                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1215                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1216                                  ;
  1217                                  ;       Our loader addressability is set up according to the following diagram.
  1218                                  ;
  1219                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1220                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1221                                  ;                               |  256 = 100h bytes                             |
  1222                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1223                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1224                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1225                                  ;                       007e00  +-----------------------------------------------+
  1226                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1227                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1228                                  ;                               |                                               |
  1229                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1230                                  ;                               |                                               |
  1231                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1232                                  ;                               |  Loader Code                                  |
  1233                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1234                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1235                                  ;
  1236                                  ;=======================================================================================================================
  1237                                  ;-----------------------------------------------------------------------------------------------------------------------
  1238                                  ;
  1239                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1240                                  ;
  1241                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1242                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1243                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1244                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1245                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1246                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1247                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1248                                  ;       registers.
  1249                                  ;
  1250                                  ;-----------------------------------------------------------------------------------------------------------------------
  1251                                                          cpu     8086                                            ;assume minimal CPU
  1252                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1253                                                          bits    16                                              ;this is 16-bit code
  1254 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1255 00000001 1F                                              pop     ds                                              ;...as our data segment
  1256 00000002 0E                                              push    cs                                              ;use the code segment
  1257 00000003 07                                              pop     es                                              ;...as our extra segment
  1258                                  ;
  1259                                  ;       Write a message to the console so we know we have our addressability established.
  1260                                  ;
  1261 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1262 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1263                                  ;
  1264                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1265                                  ;
  1266 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1267 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1268 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1269 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1270                                                          cpu     386                                             ;allow 80386 instructions
  1271 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1272 00000017 E89600                                          call    PutTTYString                                    ;display message
  1273                                  ;
  1274                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1275                                  ;
  1276 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1277 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1278 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1279 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1280 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1281 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1282 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1283 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1284 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1285 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1286                                  ;
  1287                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1288                                  ;
  1289 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1290 00000038 07                                              pop     es                                              ;... as target segment
  1291 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1292 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1293 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1294 00000041 FC                                              cld                                                     ;forward strings
  1295 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1296 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1297 00000047 E86600                                          call    PutTTYString                                    ;display message
  1298                                  ;
  1299                                  ;       Switch to protected mode.
  1300                                  ;
  1301 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1302 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1303 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1304 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1305 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1306 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1307 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1308 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1309 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1310 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1311 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1312                                  ;
  1313                                  ;       Enable hardware and maskable interrupts.
  1314                                  ;
  1315 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1316 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1317 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1318 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1319                                  ;
  1320                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1321                                  ;
  1322 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1323 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1324 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1325                                  ;-----------------------------------------------------------------------------------------------------------------------
  1326                                  ;
  1327                                  ;       Routine:        LoaderExit
  1328                                  ;
  1329                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1330                                  ;
  1331                                  ;       In:             DS:SI   string address
  1332                                  ;
  1333                                  ;-----------------------------------------------------------------------------------------------------------------------
  1334 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1335                                  ;
  1336                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1337                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1338                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1339                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1340                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1341                                  ;
  1342 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1343 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1344 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1345 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1346 00000085 F4                                              hlt                                                     ;wait for interrupt
  1347 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1348                                  ;
  1349                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1350                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1351                                  ;       HLT until the system resets.
  1352                                  ;
  1353 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1354 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1355 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1356 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1357 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1358                                  ;-----------------------------------------------------------------------------------------------------------------------
  1359                                  ;
  1360                                  ;       Routine:        GetCPUType
  1361                                  ;
  1362                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1363                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1364                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1365                                  ;
  1366                                  ;       Out:            AX      0 = 808x, v20, etc.
  1367                                  ;                               1 = 80186
  1368                                  ;                               2 = 80286
  1369                                  ;                               3 = 80386
  1370                                  ;
  1371                                  ;-----------------------------------------------------------------------------------------------------------------------
  1372 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1373 00000092 B120                                            mov     cl,32                                           ;shift count
  1374 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1375 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1376 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1377                                                          cpu     186
  1378 0000009A 54                                              push    sp                                              ;save stack pointer
  1379 0000009B 59                                              pop     cx                                              ;...into cx
  1380 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1381 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1382                                                          cpu     286
  1383 000000A0 40                                              inc     ax                                              ;AX = 2
  1384 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1385 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1386 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1387 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1388 000000AE 40                                              inc     ax                                              ;AX = 3
  1389 000000AF C3                      .10                     ret                                                     ;return
  1390                                  ;-----------------------------------------------------------------------------------------------------------------------
  1391                                  ;
  1392                                  ;       Routine:        PutTTYString
  1393                                  ;
  1394                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1395                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1396                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1397                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1398                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1399                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1400                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1401                                  ;                       to LODSB is not needed.
  1402                                  ;
  1403                                  ;       In:             DS:SI   address of string
  1404                                  ;
  1405                                  ;       Out:            DF      0
  1406                                  ;                       ZF      1
  1407                                  ;                       AL      0
  1408                                  ;
  1409                                  ;-----------------------------------------------------------------------------------------------------------------------
  1410 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1411 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1412 000000B2 84C0                                            test    al,al                                           ;end of string?
  1413 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1414 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1415 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1416 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1417 000000BC C3                      .20                     ret                                                     ;return
  1418                                  ;-----------------------------------------------------------------------------------------------------------------------
  1419                                  ;
  1420                                  ;       Loader Data
  1421                                  ;
  1422                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1423                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1424                                  ;
  1425                                  ;-----------------------------------------------------------------------------------------------------------------------
  1426 000000BD 90                                              align   2
  1427 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1428 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1429 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1430 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1431 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1431 000000D1 74696E672073797374-
  1431 000000DA 656D20726571756972-
  1431 000000E3 657320616E20693338-
  1431 000000EC 36206F72206C617465-
  1431 000000F5 722070726F63657373-
  1431 000000FE 6F722E0D0A         
  1432 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1432 0000010C 65737320616E79206B-
  1432 00000115 657920746F20726573-
  1432 0000011E 746172742074686520-
  1432 00000127 636F6D70757465722E-
  1432 00000130 0D0A00             
  1433 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1434 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1434 00000145 7265640D0A00       
  1435 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1435 00000154 616465640D0A00     
  1436 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1436 00000164 4F530D0A00         
  1437 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1438                                  ;=======================================================================================================================
  1439                                  ;
  1440                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1441                                  ;
  1442                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1443                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1444                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1445                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1446                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1447                                  ;
  1448                                  ;=======================================================================================================================
  1449                                  ;=======================================================================================================================
  1450                                  ;
  1451                                  ;       Kernel Tables
  1452                                  ;
  1453                                  ;=======================================================================================================================
  1454                                  ;-----------------------------------------------------------------------------------------------------------------------
  1455                                  ;
  1456                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1457                                  ;
  1458                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1459                                  ;       first descriptor must be all nulls.
  1460                                  ;
  1461                                  ;       6   5         4         3         2         1         0
  1462                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1463                                  ;       ----------------------------------------------------------------
  1464                                  ;       h......hffffmmmma......ab......................bn..............n
  1465                                  ;       00000000                        all areas have base addresses below 2^24
  1466                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1467                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1468                                  ;                   1001                present, ring-0, selector
  1469                                  ;
  1470                                  ;       h...h   hi-order base address (bits 24-31)
  1471                                  ;       ffff    flags
  1472                                  ;       mmmm    hi-order limit (bits 16-19)
  1473                                  ;       a...a   access
  1474                                  ;       b...b   lo-order base address (bits 0-23)
  1475                                  ;       n...n   lo-order limit (bits 0-15)
  1476                                  ;
  1477                                  ;-----------------------------------------------------------------------------------------------------------------------
  1478                                  section                 gdt                                                     ;global descriptor table
  1479 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1480 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1481 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1482 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1483 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1484 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1485 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1486 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1487 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1488 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1489 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1490 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1491 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1492 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1493 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1494                                  ;-----------------------------------------------------------------------------------------------------------------------
  1495                                  ;
  1496                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1497                                  ;
  1498                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1499                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1500                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1501                                  ;
  1502                                  ;       6   5         4         3         2         1         0
  1503                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1504                                  ;       ----------------------------------------------------------------
  1505                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1506                                  ;
  1507                                  ;       h...h   high-order offset (bits 16-31)
  1508                                  ;       P       present (0=unused interrupt)
  1509                                  ;       zz      descriptor privilege level
  1510                                  ;       S       storage segment (must be zero for IDT)
  1511                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1512                                  ;       S...S   handling code selector in GDT
  1513                                  ;       l...l   lo-order offset (bits 0-15)
  1514                                  ;
  1515                                  ;-----------------------------------------------------------------------------------------------------------------------
  1516                                  section                 idt                                                     ;interrupt descriptor table
  1517                                                          mint    dividebyzero                                    ;00 divide by zero
  1517                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1517 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1518                                                          mint    singlestep                                      ;01 single step
  1518                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1518 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1519                                                          mint    nmi                                             ;02 non-maskable
  1519                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1519 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1520                                                          mint    break                                           ;03 break
  1520                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1520 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1521                                                          mint    into                                            ;04 into
  1521                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1521 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1522                                                          mint    bounds                                          ;05 bounds
  1522                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1522 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1523                                                          mint    badopcode                                       ;06 bad op code
  1523                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1523 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1524                                                          mint    nocoproc                                        ;07 no coprocessor
  1524                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1524 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1525                                                          mint    doublefault                                     ;08 double-fault
  1525                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1525 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1526                                                          mint    operand                                         ;09 operand
  1526                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1526 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1527                                                          mint    badtss                                          ;0a bad TSS
  1527                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1527 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1528                                                          mint    notpresent                                      ;0b not-present
  1528                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1528 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1529                                                          mint    stacklimit                                      ;0c stack limit
  1529                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1529 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1530                                                          mint    protection                                      ;0d general protection fault
  1530                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1530 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1531                                                          mint    int14                                           ;0e (reserved)
  1531                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1531 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1532                                                          mint    int15                                           ;0f (reserved)
  1532                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1532 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1533                                                          mint    coproccalc                                      ;10 (reserved)
  1533                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1533 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1534                                                          mint    int17                                           ;11 (reserved)
  1534                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1534 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1535                                                          mint    int18                                           ;12 (reserved)
  1535                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1535 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1536                                                          mint    int19                                           ;13 (reserved)
  1536                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1536 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1537                                                          mint    int20                                           ;14 (reserved)
  1537                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1537 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1538                                                          mint    int21                                           ;15 (reserved)
  1538                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1538 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1539                                                          mint    int22                                           ;16 (reserved)
  1539                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1539 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1540                                                          mint    int23                                           ;17 (reserved)
  1540                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1540 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1541                                                          mint    int24                                           ;18 (reserved)
  1541                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1541 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1542                                                          mint    int25                                           ;19 (reserved)
  1542                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1542 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1543                                                          mint    int26                                           ;1a (reserved)
  1543                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1543 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1544                                                          mint    int27                                           ;1b (reserved)
  1544                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1544 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1545                                                          mint    int28                                           ;1c (reserved)
  1545                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1545 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1546                                                          mint    int29                                           ;1d (reserved)
  1546                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1546 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1547                                                          mint    int30                                           ;1e (reserved)
  1547                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1547 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1548                                                          mint    int31                                           ;1f (reserved)
  1548                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1548 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1549                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1549                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1549 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1550                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1550                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1550 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1551                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1551                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1551 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1552                                                          mtrap   com2                                            ;23 IRQ3 com2
  1552                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1552 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1553                                                          mtrap   com1                                            ;24 IRQ4 com1
  1553                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1553 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1554                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1554                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1554 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1555                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1555                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1555 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1556                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1556                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1556 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1557                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1557                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1557 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1558                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1558                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1558 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1559                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1559                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1559 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1560                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1560                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1560 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1561                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1561                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1561 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1562                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1562                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1562 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1563                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1563                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1563 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1564                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1564                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1564 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1565                                                          mtrap   svc                                             ;30 OS services
  1565                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1565 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1566 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1567                                  ;=======================================================================================================================
  1568                                  ;
  1569                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1570                                  ;
  1571                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1572                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1573                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1574                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1575                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1576                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1577                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1578                                  ;
  1579                                  ;=======================================================================================================================
  1580                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1581                                                          cpu     386                                             ;allow 80386 instructions
  1582                                                          bits    32                                              ;this is 32-bit code
  1583                                  ;=======================================================================================================================
  1584                                  ;
  1585                                  ;       CPU Interrupt Handlers
  1586                                  ;
  1587                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1588                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1589                                  ;
  1590                                  ;=======================================================================================================================
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                  ;
  1593                                  ;       INT0    Divide By Zero
  1594                                  ;
  1595                                  ;-----------------------------------------------------------------------------------------------------------------------
  1596                                                          menter  dividebyzero                                    ;divide by zero
  1596                              <1> ?%1 equ ($-$$)
  1597 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1598 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1599 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601                                  ;
  1602                                  ;       INT1    Single Step
  1603                                  ;
  1604                                  ;-----------------------------------------------------------------------------------------------------------------------
  1605                                                          menter  singlestep                                      ;single step
  1605                              <1> ?%1 equ ($-$$)
  1606 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1607 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1608 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                  ;
  1611                                  ;       INT2    Non-Maskable Interrupt
  1612                                  ;
  1613                                  ;-----------------------------------------------------------------------------------------------------------------------
  1614                                                          menter  nmi                                             ;non-maskable
  1614                              <1> ?%1 equ ($-$$)
  1615 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1616 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1617 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                  ;
  1620                                  ;       INT3    Break
  1621                                  ;
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                                          menter  break                                           ;break
  1623                              <1> ?%1 equ ($-$$)
  1624 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1625 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1626 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1627                                  ;-----------------------------------------------------------------------------------------------------------------------
  1628                                  ;
  1629                                  ;       INT4    Into
  1630                                  ;
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                                          menter  into                                            ;into
  1632                              <1> ?%1 equ ($-$$)
  1633 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1634 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1635 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                  ;
  1638                                  ;       INT5    Bounds
  1639                                  ;
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                                          menter  bounds                                          ;bounds
  1641                              <1> ?%1 equ ($-$$)
  1642 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1643 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1644 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1645                                  ;-----------------------------------------------------------------------------------------------------------------------
  1646                                  ;
  1647                                  ;       INT6    Bad Operation Code
  1648                                  ;
  1649                                  ;-----------------------------------------------------------------------------------------------------------------------
  1650                                                          menter  badopcode                                       ;bad opcode interrupt
  1650                              <1> ?%1 equ ($-$$)
  1651 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1652 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1653 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                  ;
  1656                                  ;       INT7    No Coprocessor
  1657                                  ;
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1659                              <1> ?%1 equ ($-$$)
  1660 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1661 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1662 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1663                                  ;-----------------------------------------------------------------------------------------------------------------------
  1664                                  ;
  1665                                  ;       INT8    Double Fault
  1666                                  ;
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                                          menter  doublefault                                     ;doublefault interrupt
  1668                              <1> ?%1 equ ($-$$)
  1669 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1670 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1671 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1672                                  ;-----------------------------------------------------------------------------------------------------------------------
  1673                                  ;
  1674                                  ;       INT9    Operand
  1675                                  ;
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                                          menter  operand                                         ;operand interrupt
  1677                              <1> ?%1 equ ($-$$)
  1678 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1679 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1680 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                  ;
  1683                                  ;       INT10   Bad Task State Segment
  1684                                  ;
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                                          menter  badtss                                          ;bad TSS interrupt
  1686                              <1> ?%1 equ ($-$$)
  1687 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1688 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1689 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                  ;
  1692                                  ;       INT11   Not Present
  1693                                  ;
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                                          menter  notpresent                                      ;not present interrupt
  1695                              <1> ?%1 equ ($-$$)
  1696 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1697 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1698 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                  ;
  1701                                  ;       INT12   Stack Limit
  1702                                  ;
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                                          menter  stacklimit                                      ;stack limit interrupt
  1704                              <1> ?%1 equ ($-$$)
  1705 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1706 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1707 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                  ;
  1710                                  ;       INT13   General Protection Fault
  1711                                  ;
  1712                                  ;-----------------------------------------------------------------------------------------------------------------------
  1713                                                          menter  protection                                      ;protection fault interrupt
  1713                              <1> ?%1 equ ($-$$)
  1714 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1715 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1716 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                  ;
  1719                                  ;       INT14   Reserved
  1720                                  ;
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                                          menter  int14                                           ;(reserved)
  1722                              <1> ?%1 equ ($-$$)
  1723 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1724 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1725 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                  ;
  1728                                  ;       INT15   Reserved
  1729                                  ;
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                                          menter  int15                                           ;(reserved)
  1731                              <1> ?%1 equ ($-$$)
  1732 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1733 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1734 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                  ;
  1737                                  ;       INT16   Coprocessor Calculation
  1738                                  ;
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                                          menter  coproccalc                                      ;coprocessor calculation
  1740                              <1> ?%1 equ ($-$$)
  1741 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1742 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1743 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                  ;
  1746                                  ;       INT17   Reserved
  1747                                  ;
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                                          menter  int17                                           ;(reserved)
  1749                              <1> ?%1 equ ($-$$)
  1750 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1751 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1752 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                  ;
  1755                                  ;       INT18   Reserved
  1756                                  ;
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                                          menter  int18                                           ;(reserved)
  1758                              <1> ?%1 equ ($-$$)
  1759 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1760 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1761 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                  ;
  1764                                  ;       INT19   Reserved
  1765                                  ;
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                                          menter  int19                                           ;(reserved)
  1767                              <1> ?%1 equ ($-$$)
  1768 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1769 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1770 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                  ;
  1773                                  ;       INT20   Reserved
  1774                                  ;
  1775                                  ;-----------------------------------------------------------------------------------------------------------------------
  1776                                                          menter  int20                                           ;(reserved)
  1776                              <1> ?%1 equ ($-$$)
  1777 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1778 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1779 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                  ;
  1782                                  ;       INT21   Reserved
  1783                                  ;
  1784                                  ;-----------------------------------------------------------------------------------------------------------------------
  1785                                                          menter  int21                                           ;(reserved)
  1785                              <1> ?%1 equ ($-$$)
  1786 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1787 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1788 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                  ;
  1791                                  ;       INT22   Reserved
  1792                                  ;
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                                          menter  int22                                           ;(reserved)
  1794                              <1> ?%1 equ ($-$$)
  1795 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1796 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1797 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                  ;
  1800                                  ;       INT23   Reserved
  1801                                  ;
  1802                                  ;-----------------------------------------------------------------------------------------------------------------------
  1803                                                          menter  int23                                           ;(reserved)
  1803                              <1> ?%1 equ ($-$$)
  1804 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1805 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1806 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                  ;
  1809                                  ;       INT24   Reserved
  1810                                  ;
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                                          menter  int24                                           ;(reserved)
  1812                              <1> ?%1 equ ($-$$)
  1813 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1814 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1815 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                  ;
  1818                                  ;       INT25   Reserved
  1819                                  ;
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                                          menter  int25                                           ;(reserved)
  1821                              <1> ?%1 equ ($-$$)
  1822 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1823 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1824 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                  ;
  1827                                  ;       INT26   Reserved
  1828                                  ;
  1829                                  ;-----------------------------------------------------------------------------------------------------------------------
  1830                                                          menter  int26                                           ;(reserved)
  1830                              <1> ?%1 equ ($-$$)
  1831 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1832 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1833 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                  ;
  1836                                  ;       INT27   Reserved
  1837                                  ;
  1838                                  ;-----------------------------------------------------------------------------------------------------------------------
  1839                                                          menter  int27                                           ;(reserved)
  1839                              <1> ?%1 equ ($-$$)
  1840 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1841 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1842 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                  ;
  1845                                  ;       INT28   Reserved
  1846                                  ;
  1847                                  ;-----------------------------------------------------------------------------------------------------------------------
  1848                                                          menter  int28                                           ;(reserved)
  1848                              <1> ?%1 equ ($-$$)
  1849 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1850 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1851 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                  ;
  1854                                  ;       INT29   Reserved
  1855                                  ;
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                                          menter  int29                                           ;(reserved)
  1857                              <1> ?%1 equ ($-$$)
  1858 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1859 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1860 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                  ;
  1863                                  ;       INT30   Reserved
  1864                                  ;
  1865                                  ;-----------------------------------------------------------------------------------------------------------------------
  1866                                                          menter  int30                                           ;(reserved)
  1866                              <1> ?%1 equ ($-$$)
  1867 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1868 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1869 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1870                                  ;-----------------------------------------------------------------------------------------------------------------------
  1871                                  ;
  1872                                  ;       INT31   Reserved
  1873                                  ;
  1874                                  ;-----------------------------------------------------------------------------------------------------------------------
  1875                                                          menter  int31                                           ;(reserved)
  1875                              <1> ?%1 equ ($-$$)
  1876 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1877 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1878 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                  ;
  1881                                  ;       Routine:        ReportInterrupt
  1882                                  ;
  1883                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1884                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1885                                  ;
  1886                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  1887                                  ;                       [esp+12]        cs                                      stored by interrupt call
  1888                                  ;                       [esp+8]         eip                                     stored by interrupt call
  1889                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  1890                                  ;                       [esp+0]         error message address                   stored by push instructions
  1891                                  ;
  1892                                  ;       Out:            N/A             This routine does not exit.
  1893                                  ;
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1896 00000154 06                                              push    es                                              ;save ES at time of interrupt
  1897 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1898 00000156 89E5                                            mov     ebp,esp                                         ;ebp --> [EDI]
  1899                                  ;
  1900                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1901                                  ;
  1902                                  ;                       [ebp+56]        eflags
  1903                                  ;                       [ebp+52]        cs
  1904                                  ;                       [ebp+48]        eip
  1905                                  ;                       [ebp+44]        interrupt number (0-31)
  1906                                  ;                       [ebp+40]        error message address
  1907                                  ;                       [ebp+36]        ds
  1908                                  ;                       [ebp+32]        es
  1909                                  ;                       [ebp+28]        eax
  1910                                  ;                       [ebp+24]        ecx
  1911                                  ;                       [ebp+20]        edx
  1912                                  ;                       [ebp+16]        ebx
  1913                                  ;                       [ebp+12]        esp
  1914                                  ;                       [ebp+8]         ebp
  1915                                  ;                       [ebp+4]         esi
  1916                                  ;                       [ebp+0]         edi
  1917                                  ;
  1918 00000158 0E                                              push    cs                                              ;load code selector ...
  1919 00000159 1F                                              pop     ds                                              ;... into DS
  1920 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  1921 0000015C 07                                              pop     es                                              ;... into ES
  1922                                  ;
  1923                                  ;       Display the interrupt report boundary box
  1924                                  ;
  1925 0000015D B10D                                            mov     cl,13                                           ;column
  1926 0000015F B506                                            mov     ch,6                                            ;row
  1927 00000161 B232                                            mov     dl,50                                           ;width
  1928 00000163 B608                                            mov     dh,8                                            ;height
  1929 00000165 B707                                            mov     bh,07h                                          ;attribute
  1930 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  1931                                  ;
  1932                                  ;       Display the report header
  1933                                  ;
  1934 0000016C B10F                                            mov     cl,15                                           ;column
  1935 0000016E B507                                            mov     ch,7                                            ;row
  1936 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  1937 00000175 E8A80B0000                                      call    SetConsoleString                                ;draw text string
  1938                                  ;
  1939                                  ;       Display the interrupt description label
  1940                                  ;
  1941 0000017A B10F                                            mov     cl,15                                           ;column
  1942 0000017C B508                                            mov     ch,8                                            ;row
  1943 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  1944 00000183 E89A0B0000                                      call    SetConsoleString                                ;draw text string
  1945                                  ;
  1946                                  ;       Display the interrupt number
  1947                                  ;
  1948 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  1949 0000018B B11A                                            mov     cl,26                                           ;column
  1950 0000018D B508                                            mov     ch,8                                            ;row
  1951 0000018F E80E090000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  1952                                  ;
  1953                                  ;       Display the interrupt name
  1954                                  ;
  1955 00000194 B11D                                            mov     cl,29                                           ;column
  1956 00000196 B508                                            mov     ch,8                                            ;row
  1957 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  1958 0000019B E8820B0000                                      call    SetConsoleString                                ;display interrupt description
  1959                                  ;
  1960                                  ;       Display the register values header
  1961                                  ;
  1962 000001A0 B10F                                            mov     cl,15                                           ;column
  1963 000001A2 B50A                                            mov     ch,10                                           ;row
  1964 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  1965 000001A9 E8740B0000                                      call    SetConsoleString                                ;draw text string
  1966                                  ;
  1967                                  ;       Display the EAX register label and value
  1968                                  ;
  1969 000001AE B10F                                            mov     cl,15                                           ;column
  1970 000001B0 B50B                                            mov     ch,11                                           ;row
  1971 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  1972 000001B7 E8660B0000                                      call    SetConsoleString                                ;draw label
  1973 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  1974 000001BF B113                                            mov     cl,19                                           ;column
  1975 000001C1 B50B                                            mov     ch,11                                           ;row
  1976 000001C3 E800090000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1977                                  ;
  1978                                  ;       Display the ECX register label and value
  1979                                  ;
  1980 000001C8 B10F                                            mov     cl,15                                           ;column
  1981 000001CA B50C                                            mov     ch,12                                           ;row
  1982 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  1983 000001D1 E84C0B0000                                      call    SetConsoleString                                ;draw label
  1984 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  1985 000001D9 B113                                            mov     cl,19                                           ;column
  1986 000001DB B50C                                            mov     ch,12                                           ;row
  1987 000001DD E8E6080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1988                                  ;
  1989                                  ;       Display the EDX register label and value
  1990                                  ;
  1991 000001E2 B10F                                            mov     cl,15                                           ;column
  1992 000001E4 B50D                                            mov     ch,13                                           ;row
  1993 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  1994 000001EB E8320B0000                                      call    SetConsoleString                                ;draw label
  1995 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  1996 000001F3 B113                                            mov     cl,19                                           ;column
  1997 000001F5 B50D                                            mov     ch,13                                           ;row
  1998 000001F7 E8CC080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1999                                  ;
  2000                                  ;       Display the EBX register label and value
  2001                                  ;
  2002 000001FC B10F                                            mov     cl,15                                           ;column
  2003 000001FE B50E                                            mov     ch,14                                           ;row
  2004 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2005 00000205 E8180B0000                                      call    SetConsoleString                                ;draw label
  2006 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2007 0000020D B113                                            mov     cl,19                                           ;column
  2008 0000020F B50E                                            mov     ch,14                                           ;row
  2009 00000211 E8B2080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2010                                  ;
  2011                                  ;       Display the ESI register label and value
  2012                                  ;
  2013 00000216 B11D                                            mov     cl,29                                           ;column
  2014 00000218 B50B                                            mov     ch,11                                           ;row
  2015 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2016 0000021F E8FE0A0000                                      call    SetConsoleString                                ;draw label
  2017 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2018 00000227 B121                                            mov     cl,33                                           ;column
  2019 00000229 B50B                                            mov     ch,11                                           ;row
  2020 0000022B E898080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2021                                  ;
  2022                                  ;       Display the EDI register label and value
  2023                                  ;
  2024 00000230 B11D                                            mov     cl,29                                           ;column
  2025 00000232 B50C                                            mov     ch,12                                           ;row
  2026 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2027 00000239 E8E40A0000                                      call    SetConsoleString                                ;draw label
  2028 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2029 00000241 B121                                            mov     cl,33                                           ;column
  2030 00000243 B50C                                            mov     ch,12                                           ;row
  2031 00000245 E87E080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2032                                  ;
  2033                                  ;       Display the EBP register label and value
  2034                                  ;
  2035 0000024A B11D                                            mov     cl,29                                           ;column
  2036 0000024C B50D                                            mov     ch,13                                           ;row
  2037 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2038 00000253 E8CA0A0000                                      call    SetConsoleString                                ;draw label
  2039 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2040 0000025B B121                                            mov     cl,33                                           ;column
  2041 0000025D B50D                                            mov     ch,13                                           ;row
  2042 0000025F E864080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2043                                  ;
  2044                                  ;       Display the DS register label and value
  2045                                  ;
  2046 00000264 B12A                                            mov     cl,42                                           ;column
  2047 00000266 B50B                                            mov     ch,11                                           ;row
  2048 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2049 0000026D E8B00A0000                                      call    SetConsoleString                                ;draw label
  2050 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2051 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2052 00000278 B12E                                            mov     cl,46                                           ;column
  2053 0000027A B50B                                            mov     ch,11                                           ;row
  2054 0000027C E857080000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2055                                  ;
  2056                                  ;       Display the ES register label and value
  2057                                  ;
  2058 00000281 B12A                                            mov     cl,42                                           ;column
  2059 00000283 B50C                                            mov     ch,12                                           ;row
  2060 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2061 0000028A E8930A0000                                      call    SetConsoleString                                ;draw label
  2062 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2063 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2064 00000295 B12E                                            mov     cl,46                                           ;column
  2065 00000297 B50C                                            mov     ch,12                                           ;row
  2066 00000299 E83A080000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2067                                  ;
  2068                                  ;       Display the SS register label and value
  2069                                  ;
  2070 0000029E B12A                                            mov     cl,42                                           ;column
  2071 000002A0 B50D                                            mov     ch,13                                           ;row
  2072 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2073 000002A7 E8760A0000                                      call    SetConsoleString                                ;draw label
  2074 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2075 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2076 000002B1 B12E                                            mov     cl,46                                           ;column
  2077 000002B3 B50D                                            mov     ch,13                                           ;row
  2078 000002B5 E81E080000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2079                                  ;
  2080                                  ;       Display the CS register lable and value
  2081                                  ;
  2082 000002BA B12A                                            mov     cl,42                                           ;column
  2083 000002BC B50E                                            mov     ch,14                                           ;row
  2084 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2085 000002C3 E85A0A0000                                      call    SetConsoleString                                ;draw label
  2086 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2087 000002CA 668B4534                                        mov     ax,[ebp+52]                                     ;CS
  2088 000002CE B12E                                            mov     cl,46                                           ;column
  2089 000002D0 B50E                                            mov     ch,14                                           ;row
  2090 000002D2 E801080000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2091                                  ;
  2092                                  ;       Display the EFLAGS register label and value
  2093                                  ;
  2094 000002D7 B133                                            mov     cl,51                                           ;column
  2095 000002D9 B50B                                            mov     ch,11                                           ;row
  2096 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2097 000002E0 E83D0A0000                                      call    SetConsoleString                                ;draw label
  2098 000002E5 8B4538                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2099 000002E8 B137                                            mov     cl,55                                           ;column
  2100 000002EA B50B                                            mov     ch,11                                           ;row
  2101 000002EC E8D7070000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2102                                  ;
  2103                                  ;       Display the ESP register label and value
  2104                                  ;
  2105 000002F1 B133                                            mov     cl,51                                           ;column
  2106 000002F3 B50D                                            mov     ch,13                                           ;row
  2107 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2108 000002FA E8230A0000                                      call    SetConsoleString                                ;draw label
  2109 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2110 00000302 B137                                            mov     cl,55                                           ;column
  2111 00000304 B50D                                            mov     ch,13                                           ;row
  2112 00000306 E8BD070000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2113                                  ;
  2114                                  ;       Display the EIP register label and value
  2115                                  ;
  2116 0000030B B133                                            mov     cl,51                                           ;column
  2117 0000030D B50E                                            mov     ch,14                                           ;row
  2118 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2119 00000314 E8090A0000                                      call    SetConsoleString                                ;draw label
  2120 00000319 8B4530                                          mov     eax,[ebp+48]                                    ;EIP
  2121 0000031C B137                                            mov     cl,55                                           ;column
  2122 0000031E B50E                                            mov     ch,14                                           ;row
  2123 00000320 E8A3070000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2124                                  ;
  2125                                  ;       Halt and loop until reset
  2126                                  ;
  2127 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2128 00000326 F4                                              hlt                                                     ;halt processor
  2129 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2130                                  ;-----------------------------------------------------------------------------------------------------------------------
  2131                                  ;
  2132                                  ;       Processor Interrupt Name Strings
  2133                                  ;
  2134                                  ;-----------------------------------------------------------------------------------------------------------------------
  2135 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2135 00000332 6279207A65726F00   
  2136 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2136 00000343 657000             
  2137 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2137 0000034F 626C6520696E746572-
  2137 00000358 7275707400         
  2138 0000035D 427265616B00            czIntBreak              db      "Break",0
  2139 00000363 496E746F00              czIntInto               db      "Into",0
  2140 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2141 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2141 00000378 74696F6E20436F6465-
  2141 00000381 00                 
  2142 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2142 0000038B 6573736F7200       
  2143 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2143 0000039A 756C7400           
  2144 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2145 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2145 000003AF 537461746520536567-
  2145 000003B8 6D656E7400         
  2146 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2146 000003C6 6E7400             
  2147 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2147 000003D2 697400             
  2148 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2148 000003DE 726F74656374696F6E-
  2148 000003E7 204661756C7400     
  2149 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2149 000003F7 6F722043616C63756C-
  2149 00000400 6174696F6E00       
  2150 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2151                                  ;-----------------------------------------------------------------------------------------------------------------------
  2152                                  ;
  2153                                  ;       Processor Interrupt Handling Strings
  2154                                  ;
  2155                                  ;-----------------------------------------------------------------------------------------------------------------------
  2156 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2156 00000418 6C65642070726F6365-
  2156 00000421 73736F7220696E7465-
  2156 0000042A 727275707420686173-
  2156 00000433 206F63637572726564-
  2156 0000043C 3A00               
  2157 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2157 00000447 202300             
  2158 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2158 00000453 206174207468652074-
  2158 0000045C 696D65206F66207468-
  2158 00000465 6520696E7465727275-
  2158 0000046E 70743A00           
  2159 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2160 00000477 4543583A00              czIntECX                db      "ECX:",0
  2161 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2162 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2163 00000486 4553493A00              czIntESI                db      "ESI:",0
  2164 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2165 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2166 00000495 4553503A00              czIntESP                db      "ESP:",0
  2167 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2168 0000049F 2045533A00              czIntES                 db      " ES:",0
  2169 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2170 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2171 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2172 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2173                                  ;-----------------------------------------------------------------------------------------------------------------------
  2174                                  ;
  2175                                  ;       Routine:        DrawTextDialogBox
  2176                                  ;
  2177                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2178                                  ;
  2179                                  ;       In:             CL      upper left column (0-79)
  2180                                  ;                       CH      upper left row (0-24)
  2181                                  ;                       DL      column width, excluding border
  2182                                  ;                       DH      row height, excluding border
  2183                                  ;                       BH      color attribute
  2184                                  ;
  2185                                  ;-----------------------------------------------------------------------------------------------------------------------
  2186 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2187 000004B9 56                                              push    esi                                             ;
  2188 000004BA 57                                              push    edi                                             ;
  2189 000004BB 06                                              push    es                                              ;
  2190 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2191 000004BE 07                                              pop     es                                              ;... into ES
  2192                                  ;
  2193                                  ;       Compute target display offset
  2194                                  ;
  2195 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2196 000004C1 88E8                                            mov     al,ch                                           ;row
  2197 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2198 000004C5 F6E4                                            mul     ah                                              ;row offset
  2199 000004C7 00C8                                            add     al,cl                                           ;add column
  2200 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2201 000004CC 00C8                                            add     al,cl                                           ;add column
  2202 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2203 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2204                                  ;
  2205                                  ;       Display top border row
  2206                                  ;
  2207 000004D3 57                                              push    edi                                             ;save target row offset
  2208 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2209 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2210 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2211 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2212 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2213 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2214 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2215 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2216 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2217 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2218 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2219                                  ;
  2220                                  ;       Display dialog box body rows
  2221                                  ;
  2222 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2223 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2224 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2225 000004F3 57                                              push    edi                                             ;save target row offset
  2226 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2227 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2228 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2229 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2230 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2231 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2232 00000500 F366AB                                          rep     stosw                                           ;display row
  2233 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2234 00000505 66AB                                            stosw                                                   ;display character and attribute
  2235 00000507 5F                                              pop     edi                                             ;restore target row offset
  2236 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2237 0000050E 59                                              pop     ecx                                             ;remaining rows
  2238 0000050F E2E1                                            loop    .10                                             ;next row
  2239                                  ;
  2240                                  ;       Display bottom border row
  2241                                  ;
  2242 00000511 57                                              push    edi                                             ;save target row offset
  2243 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2244 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2245 00000516 66AB                                            stosw                                                   ;display character and attribute
  2246 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2247 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2248 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2249 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2250 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2251 00000523 66AB                                            stosw                                                   ;display character and attribute
  2252 00000525 5F                                              pop     edi                                             ;restore target row offset
  2253 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2254                                  ;
  2255                                  ;       Restore and return
  2256                                  ;
  2257 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2258 0000052D 5F                                              pop     edi                                             ;
  2259 0000052E 5E                                              pop     esi                                             ;
  2260 0000052F 59                                              pop     ecx                                             ;
  2261 00000530 C3                                              ret                                                     ;return
  2262                                  ;=======================================================================================================================
  2263                                  ;
  2264                                  ;       Hardware Device Interupts
  2265                                  ;
  2266                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2267                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2268                                  ;       (BX=2028h).
  2269                                  ;
  2270                                  ;=======================================================================================================================
  2271                                  ;-----------------------------------------------------------------------------------------------------------------------
  2272                                  ;
  2273                                  ;       IRQ0    Clock Tick Interrupt
  2274                                  ;
  2275                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2276                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2277                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2278                                  ;
  2279                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2280                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2281                                  ;
  2282                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2283                                  ;       zero, the floppy disk motors are turned off.
  2284                                  ;
  2285                                  ;-----------------------------------------------------------------------------------------------------------------------
  2286                                                          menter  clocktick                                       ;clock tick interrupt
  2286                              <1> ?%1 equ ($-$$)
  2287 00000531 50                                              push    eax                                             ;save non-volatile regs
  2288 00000532 52                                              push    edx                                             ;
  2289 00000533 1E                                              push    ds                                              ;
  2290                                  ;
  2291                                  ;       Update the clock tick count and the elapsed days as needed.
  2292                                  ;
  2293 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2294 00000536 1F                                              pop     ds                                              ;... into data segment register
  2295 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2296 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2297 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2298 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2299 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2300 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2301 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2302                                  ;
  2303                                  ;       Decrement floppy disk motor timeout.
  2304                                  ;
  2305 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2306 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2307 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2308 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2309                                  ;
  2310                                  ;       Turn off the floppy disk motor if appropriate.
  2311                                  ;
  2312 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2313 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2314 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2315 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2316 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2317 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2318 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2319 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2320 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2321 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2322 00000577 EE                                              out     dx,al                                           ;turn motor off
  2323                                  ;
  2324                                  ;       Signal the end of the hardware interrupt.
  2325                                  ;
  2326 00000578 E8DF070000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2327                                  ;
  2328                                  ;       Restore and return.
  2329                                  ;
  2330 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2331 0000057E 5A                                              pop     edx                                             ;
  2332 0000057F 58                                              pop     eax                                             ;
  2333 00000580 CF                                              iretd                                                   ;return
  2334                                  ;-----------------------------------------------------------------------------------------------------------------------
  2335                                  ;
  2336                                  ;       IRQ1    Keyboard Interrupt
  2337                                  ;
  2338                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2339                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2340                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2341                                  ;       ALL modified registers upon return.
  2342                                  ;
  2343                                  ;-----------------------------------------------------------------------------------------------------------------------
  2344                                                          menter  keyboard                                        ;keyboard interrrupt
  2344                              <1> ?%1 equ ($-$$)
  2345 00000581 50                                              push    eax                                             ;save non-volatile regs
  2346 00000582 53                                              push    ebx                                             ;
  2347 00000583 51                                              push    ecx                                             ;
  2348 00000584 56                                              push    esi                                             ;
  2349 00000585 1E                                              push    ds                                              ;
  2350 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2351 00000588 1F                                              pop     ds                                              ;... into data segment register
  2352 00000589 30C0                                            xor     al,al                                           ;zero
  2353 0000058B A209080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2354 00000590 A20A080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2355 00000595 A20B080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2356 0000059A A20C080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2357 0000059F A20D080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2358 000005A4 A20E080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2359 000005A9 B020                                            mov     al,' '                                          ;space
  2360 000005AB A20F080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2361 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2362 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2363 000005B4 200508080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2364 000005BA 8A1D06080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2365 000005C0 8A3D07080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2366 000005C6 E8DB070000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2367 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2368 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2369 000005D3 A209080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2370 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2371 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2372 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2373 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2374 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2375 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2376 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2377 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2378 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2379 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2380 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2381 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2382 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2383 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2384 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2385 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2386 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2387 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2388 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2389 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2390 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2391 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2392 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2393 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2394 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2395 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2396 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2397 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2398 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2399 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2400 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2401 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2402 00000654 E84D070000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2403 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2404 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2405 00000661 A20A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2406 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2407 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2408 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2409 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2410 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2411 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2412 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2413 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2414 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2415 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2416 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2417 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2418 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2419 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2420 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2421 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2422 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2423 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2424 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2425 0000069C E805070000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2426 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2427 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2428 000006A9 A20B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2429 000006AE E8F3060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2430 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2431 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2432 000006BB A20C080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2433 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2434 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2435 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2436 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2437 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2438 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2439 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2440 000006D1 E8A1060000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2441 000006D6 881D06080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2442 000006DC 883D07080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2443 000006E2 E859040000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2444 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2445 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2446 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2447 000006F1 E8B0060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2448 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2449 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2450 000006FE A20A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2451 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2452 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2453 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2454 0000070E E893060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2455 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2456 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2457 0000071B A20B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2458 00000720 E881060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2459 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2460 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2461 0000072D A20C080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2462 00000732 E86F060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2463 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2464 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2465 0000073F A20D080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2466 00000744 E85D060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2467 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2468 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2469 0000074D A20E080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2470 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2471 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2472 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2473 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2474 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2475 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2476 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2477 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2478 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2479 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2480 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2481 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2482 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2483 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2484 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2485 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2486 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2487 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2488 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2489 00000787 A20F080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2490 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2491 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2492 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2493 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2494 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2495 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2496 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2497 000007A4 50                                              push    eax                                             ;save codes
  2498 000007A5 E8D3040000                                      call    PutMessage                                      ;put message to console
  2499 000007AA 58                                              pop     eax                                             ;restore codes
  2500 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2501 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2502 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2503 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2504 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2505 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2506 000007BD E8BB040000                                      call    PutMessage                                      ;put message to console
  2507 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2508 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2509 000007C6 080508080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2510 000007CC E817030000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2511 000007D1 E886050000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2512 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2513 000007D7 5E                                              pop     esi                                             ;
  2514 000007D8 59                                              pop     ecx                                             ;
  2515 000007D9 5B                                              pop     ebx                                             ;
  2516 000007DA 58                                              pop     eax                                             ;
  2517 000007DB CF                                              iretd                                                   ;return
  2518                                  ;-----------------------------------------------------------------------------------------------------------------------
  2519                                  ;       Scan-Code to ASCII Translation Tables
  2520                                  ;-----------------------------------------------------------------------------------------------------------------------
  2521 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2522 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2523 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2524 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2525 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2526 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2527 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2528 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2529 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2530 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2531 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2532 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2533 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2534 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2535 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2536 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2537 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2538 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2539 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2540 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2541 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2542 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2543 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2544 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2545 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2546 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2547 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2548 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2549 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2550 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2551 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2552 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2553                                  ;-----------------------------------------------------------------------------------------------------------------------
  2554                                  ;
  2555                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2556                                  ;
  2557                                  ;-----------------------------------------------------------------------------------------------------------------------
  2558                                                          menter  iochannel                                       ;secondary 8259A cascade
  2558                              <1> ?%1 equ ($-$$)
  2559 000008DC 50                                              push    eax                                             ;save modified regs
  2560 000008DD EB3F                                            jmp     hwint                                           ;end interrupt and return
  2561                                  ;-----------------------------------------------------------------------------------------------------------------------
  2562                                  ;
  2563                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2564                                  ;
  2565                                  ;-----------------------------------------------------------------------------------------------------------------------
  2566                                                          menter  com2                                            ;serial port 2 interrupt
  2566                              <1> ?%1 equ ($-$$)
  2567 000008DF 50                                              push    eax                                             ;save modified regs
  2568 000008E0 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2569                                  ;-----------------------------------------------------------------------------------------------------------------------
  2570                                  ;
  2571                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2572                                  ;
  2573                                  ;-----------------------------------------------------------------------------------------------------------------------
  2574                                                          menter  com1                                            ;serial port 1 interrupt
  2574                              <1> ?%1 equ ($-$$)
  2575 000008E2 50                                              push    eax                                             ;save modified regs
  2576 000008E3 EB39                                            jmp     hwint                                           ;end interrupt and return
  2577                                  ;-----------------------------------------------------------------------------------------------------------------------
  2578                                  ;
  2579                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2580                                  ;
  2581                                  ;-----------------------------------------------------------------------------------------------------------------------
  2582                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2582                              <1> ?%1 equ ($-$$)
  2583 000008E5 50                                              push    eax                                             ;save modified regs
  2584 000008E6 EB36                                            jmp     hwint                                           ;end interrupt and return
  2585                                  ;-----------------------------------------------------------------------------------------------------------------------
  2586                                  ;
  2587                                  ;       IRQ6    Diskette Hardware Interrupt
  2588                                  ;
  2589                                  ;-----------------------------------------------------------------------------------------------------------------------
  2590                                                          menter  diskette                                        ;floppy disk interrupt
  2590                              <1> ?%1 equ ($-$$)
  2591 000008E8 50                                              push    eax                                             ;save non-volatile regs
  2592 000008E9 1E                                              push    ds                                              ;
  2593 000008EA 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2594 000008EC 1F                                              pop     ds                                              ;... into DS register
  2595 000008ED A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2596 000008F2 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2597 000008F4 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2598 000008F9 1F                                              pop     ds                                              ;restore non-volatile regs
  2599 000008FA EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2600                                  ;-----------------------------------------------------------------------------------------------------------------------
  2601                                  ;
  2602                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2603                                  ;
  2604                                  ;-----------------------------------------------------------------------------------------------------------------------
  2605                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2605                              <1> ?%1 equ ($-$$)
  2606 000008FC 50                                              push    eax                                             ;save modified regs
  2607 000008FD EB1F                                            jmp     hwint                                           ;end interrupt and return
  2608                                  ;-----------------------------------------------------------------------------------------------------------------------
  2609                                  ;
  2610                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2611                                  ;
  2612                                  ;-----------------------------------------------------------------------------------------------------------------------
  2613                                                          menter  rtclock                                         ;real-time clock interrupt
  2613                              <1> ?%1 equ ($-$$)
  2614 000008FF 50                                              push    eax                                             ;save modified regs
  2615 00000900 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2616                                  ;-----------------------------------------------------------------------------------------------------------------------
  2617                                  ;
  2618                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2619                                  ;
  2620                                  ;-----------------------------------------------------------------------------------------------------------------------
  2621                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2621                              <1> ?%1 equ ($-$$)
  2622 00000902 50                                              push    eax                                             ;save modified regs
  2623 00000903 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2624                                  ;-----------------------------------------------------------------------------------------------------------------------
  2625                                  ;
  2626                                  ;       IRQ10   Reserved Hardware Interrupt
  2627                                  ;
  2628                                  ;-----------------------------------------------------------------------------------------------------------------------
  2629                                                          menter  irq10                                           ;reserved
  2629                              <1> ?%1 equ ($-$$)
  2630 00000905 50                                              push    eax                                             ;save modified regs
  2631 00000906 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2632                                  ;-----------------------------------------------------------------------------------------------------------------------
  2633                                  ;
  2634                                  ;       IRQ11   Reserved Hardware Interrupt
  2635                                  ;
  2636                                  ;-----------------------------------------------------------------------------------------------------------------------
  2637                                                          menter  irq11                                           ;reserved
  2637                              <1> ?%1 equ ($-$$)
  2638 00000908 50                                              push    eax                                             ;save modified regs
  2639 00000909 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2640                                  ;-----------------------------------------------------------------------------------------------------------------------
  2641                                  ;
  2642                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2643                                  ;
  2644                                  ;-----------------------------------------------------------------------------------------------------------------------
  2645                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2645                              <1> ?%1 equ ($-$$)
  2646 0000090B 50                                              push    eax                                             ;save modified regs
  2647 0000090C EB09                                            jmp     hwwint                                          ;end interrupt and return
  2648                                  ;-----------------------------------------------------------------------------------------------------------------------
  2649                                  ;
  2650                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2651                                  ;
  2652                                  ;-----------------------------------------------------------------------------------------------------------------------
  2653                                                          menter  coprocessor                                     ;coprocessor interrupt
  2653                              <1> ?%1 equ ($-$$)
  2654 0000090E 50                                              push    eax                                             ;save modified regs
  2655 0000090F EB06                                            jmp     hwwint                                          ;end interrupt and return
  2656                                  ;-----------------------------------------------------------------------------------------------------------------------
  2657                                  ;
  2658                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2659                                  ;
  2660                                  ;-----------------------------------------------------------------------------------------------------------------------
  2661                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2661                              <1> ?%1 equ ($-$$)
  2662 00000911 50                                              push    eax                                             ;save modified regs
  2663 00000912 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2664                                  ;-----------------------------------------------------------------------------------------------------------------------
  2665                                  ;
  2666                                  ;       IRQ15   Reserved Hardware Interrupt
  2667                                  ;
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669                                                          menter  irq15                                           ;reserved
  2669                              <1> ?%1 equ ($-$$)
  2670 00000914 50                                              push    eax                                             ;save modified regs
  2671 00000915 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2672                                  ;-----------------------------------------------------------------------------------------------------------------------
  2673                                  ;
  2674                                  ;       Exit from hardware interrupt
  2675                                  ;
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677 00000917 E846040000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2678 0000091C EB05                                            jmp     hwint90                                         ;skip ahead
  2679 0000091E E839040000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2680 00000923 58                      hwint90                 pop     eax                                             ;restore modified regs
  2681 00000924 CF                                              iretd                                                   ;return from interrupt
  2682                                  ;-----------------------------------------------------------------------------------------------------------------------
  2683                                  ;
  2684                                  ;       INT 30h Operating System Software Service Interrupt
  2685                                  ;
  2686                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2687                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2688                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2689                                  ;       the entry address of the specific function from a table.
  2690                                  ;
  2691                                  ;-----------------------------------------------------------------------------------------------------------------------
  2692                                                          menter  svc
  2692                              <1> ?%1 equ ($-$$)
  2693 00000925 3C09                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2694 00000927 730D                                            jae     svc90                                           ;yes, skip ahead
  2695 00000929 0FB6C0                                          movzx   eax,al                                          ;function
  2696 0000092C C1E002                                          shl     eax,2                                           ;offset into table
  2697 0000092F 2EFF90[37090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2698 00000936 CF                      svc90                   iretd                                                   ;return from interrupt
  2699                                  ;-----------------------------------------------------------------------------------------------------------------------
  2700                                  ;
  2701                                  ;       Service Request Table
  2702                                  ;
  2703                                  ;
  2704                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2705                                  ;
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2707                              <1> tsvc :
  2707                              <1> e%1 equ ($-tsvc)/4
  2707 00000937 [A50C0000]          <1>  dd %1
  2708                                                          tsvce   CompareMemory                                   ;compare memory
  2708                              <1> e%1 equ ($-tsvc)/4
  2708 0000093B [5B090000]          <1>  dd %1
  2709                                                          tsvce   GetConsoleString                                ;get string input
  2709                              <1> e%1 equ ($-tsvc)/4
  2709 0000093F [BC090000]          <1>  dd %1
  2710                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2710                              <1> e%1 equ ($-tsvc)/4
  2710 00000943 [0A0C0000]          <1>  dd %1
  2711                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2711                              <1> e%1 equ ($-tsvc)/4
  2711 00000947 [320D0000]          <1>  dd %1
  2712                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2712                              <1> e%1 equ ($-tsvc)/4
  2712 0000094B [DA0B0000]          <1>  dd %1
  2713                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2713                              <1> e%1 equ ($-tsvc)/4
  2713 0000094F [680D0000]          <1>  dd %1
  2714                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2714                              <1> e%1 equ ($-tsvc)/4
  2714 00000953 [280C0000]          <1>  dd %1
  2715                                                          tsvce   UpperCaseString                                 ;upper-case string
  2715                              <1> e%1 equ ($-tsvc)/4
  2715 00000957 [78090000]          <1>  dd %1
  2716                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2717                                  ;-----------------------------------------------------------------------------------------------------------------------
  2718                                  ;
  2719                                  ;       Service Request Macros
  2720                                  ;
  2721                                  ;       These macros provide positional parameterization of service request calls.
  2722                                  ;
  2723                                  ;-----------------------------------------------------------------------------------------------------------------------
  2724                                  %macro                  clearConsoleScreen 0
  2725                                                          mov     al,eClearConsoleScreen                          ;function code
  2726                                                          int     _svc                                            ;invoke OS service
  2727                                  %endmacro
  2728                                  %macro                  compareMemory 0
  2729                                                          mov     al,eCompareMemory                               ;function code
  2730                                                          int     _svc                                            ;invoke OS service
  2731                                  %endmacro
  2732                                  %macro                  getConsoleString 4
  2733                                                          mov     edx,%1                                          ;buffer address
  2734                                                          mov     ecx,%2                                          ;max characters
  2735                                                          mov     bh,%3                                           ;echo indicator
  2736                                                          mov     bl,%4                                           ;terminator
  2737                                                          mov     al,eGetConsoleString                            ;function code
  2738                                                          int     _svc                                            ;invoke OS service
  2739                                  %endmacro
  2740                                  %macro                  hexadecimalToUnsigned 0
  2741                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2742                                                          int     _svc                                            ;invoke OS service
  2743                                  %endmacro
  2744                                  %macro                  placeCursor 0
  2745                                                          mov     al,ePlaceCursor                                 ;function code
  2746                                                          int     _svc                                            ;invoke OS service
  2747                                  %endmacro
  2748                                  %macro                  putConsoleString 1
  2749                                                          mov     edx,%1                                          ;string address
  2750                                                          mov     al,ePutConsoleString                            ;function code
  2751                                                          int     _svc                                            ;invoke OS service
  2752                                  %endmacro
  2753                                  %macro                  resetSystem 0
  2754                                                          mov     al,eResetSystem                                 ;function code
  2755                                                          int     _svc                                            ;invoke OS service
  2756                                  %endmacro
  2757                                  %macro                  unsignedToHexadecimal 0
  2758                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2759                                                          int     _svc                                            ;invoke OS service
  2760                                  %endmacro
  2761                                  %macro                  upperCaseString 0
  2762                                                          mov     al,eUpperCaseString                             ;function code
  2763                                                          int     _svc                                            ;invoke OS service
  2764                                  %endmacro
  2765                                  ;=======================================================================================================================
  2766                                  ;
  2767                                  ;       Kernel Function Library
  2768                                  ;
  2769                                  ;=======================================================================================================================
  2770                                  ;=======================================================================================================================
  2771                                  ;
  2772                                  ;       String Helper Routines
  2773                                  ;
  2774                                  ;       CompareMemory
  2775                                  ;       UpperCaseString
  2776                                  ;
  2777                                  ;=======================================================================================================================
  2778                                  ;-----------------------------------------------------------------------------------------------------------------------
  2779                                  ;
  2780                                  ;       Routine:        CompareMemory
  2781                                  ;
  2782                                  ;       Description:    This routine compares two byte arrays.
  2783                                  ;
  2784                                  ;       In:             DS:EDX  first source address
  2785                                  ;                       DS:EBX  second source address
  2786                                  ;                       ECX     comparison length
  2787                                  ;
  2788                                  ;       Out:            EDX     first source address
  2789                                  ;                       EBX     second source address
  2790                                  ;                       ECX     0       array 1 = array 2
  2791                                  ;                               <0      array 1 < array 2
  2792                                  ;                               >0      array 1 > array 2
  2793                                  ;
  2794                                  ;-----------------------------------------------------------------------------------------------------------------------
  2795 0000095B 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  2796 0000095C 57                                              push    edi                                             ;
  2797 0000095D 06                                              push    es                                              ;
  2798 0000095E 1E                                              push    ds                                              ;copy DS
  2799 0000095F 07                                              pop     es                                              ;... to ES
  2800 00000960 89D6                                            mov     esi,edx                                         ;first source address
  2801 00000962 89DF                                            mov     edi,ebx                                         ;second source address
  2802 00000964 FC                                              cld                                                     ;forward strings
  2803 00000965 F3A6                                            rep     cmpsb                                           ;compare bytes
  2804 00000967 B000                                            mov     al,0                                            ;default result
  2805 00000969 7406                                            jz      .10                                             ;branch if arrays equal
  2806 0000096B B001                                            mov     al,1                                            ;positive result
  2807 0000096D 7302                                            jnc     .10                                             ;branch if target > source
  2808 0000096F B0FF                                            mov     al,-1                                           ;negative result
  2809 00000971 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  2810 00000974 07                                              pop     es                                              ;restore non-volatile regs
  2811 00000975 5F                                              pop     edi                                             ;
  2812 00000976 5E                                              pop     esi                                             ;
  2813 00000977 C3                                              ret                                                     ;return
  2814                                  ;-----------------------------------------------------------------------------------------------------------------------
  2815                                  ;
  2816                                  ;       Routine:        UpperCaseString
  2817                                  ;
  2818                                  ;       Description:    This routine places all characters in the given string to upper case.
  2819                                  ;
  2820                                  ;       In:             DS:EDX  string address
  2821                                  ;
  2822                                  ;       Out:            EDX     string address
  2823                                  ;
  2824                                  ;-----------------------------------------------------------------------------------------------------------------------
  2825 00000978 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  2826 00000979 89D6                                            mov     esi,edx                                         ;string address
  2827 0000097B FC                                              cld                                                     ;forward strings
  2828 0000097C AC                      .10                     lodsb                                                   ;string character
  2829 0000097D 84C0                                            test    al,al                                           ;null?
  2830 0000097F 740F                                            jz      .20                                             ;yes, skip ahead
  2831 00000981 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2832 00000983 72F7                                            jb      .10                                             ;no, continue
  2833 00000985 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2834 00000987 77F3                                            ja      .10                                             ;no, continue
  2835 00000989 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  2836 0000098B 8846FF                                          mov     [esi-1],al                                      ;upper character
  2837 0000098E EBEC                                            jmp     .10                                             ;continue
  2838 00000990 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  2839 00000991 C3                                              ret                                                     ;return
  2840                                  ;=======================================================================================================================
  2841                                  ;
  2842                                  ;       Console Helper Routines
  2843                                  ;
  2844                                  ;       FirstConsoleColumn
  2845                                  ;       GetConsoleChar
  2846                                  ;       GetConsoleString
  2847                                  ;       NextConsoleColumn
  2848                                  ;       NextConsoleRow
  2849                                  ;       PreviousConsoleColumn
  2850                                  ;       PutConsoleChar
  2851                                  ;       PutConsoleHexByte
  2852                                  ;       PutConsoleHexDword
  2853                                  ;       PutConsoleHexWord
  2854                                  ;       PutConsoleOIAChar
  2855                                  ;       PutConsoleOIAShift
  2856                                  ;       PutConsoleString
  2857                                  ;       Yield
  2858                                  ;
  2859                                  ;=======================================================================================================================
  2860                                  ;-----------------------------------------------------------------------------------------------------------------------
  2861                                  ;
  2862                                  ;       Routine:        FirstConsoleColumn
  2863                                  ;
  2864                                  ;       Description:    This routine resets the console column to start of the row.
  2865                                  ;
  2866                                  ;       In:             DS      OS data selector
  2867                                  ;
  2868                                  ;-----------------------------------------------------------------------------------------------------------------------
  2869 00000992 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  2870 00000994 A204080000                                      mov     [wbConsoleColumn],al                            ;save column
  2871 00000999 C3                                              ret                                                     ;return
  2872                                  ;-----------------------------------------------------------------------------------------------------------------------
  2873                                  ;
  2874                                  ;       Routine:        GetConsoleChar
  2875                                  ;
  2876                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2877                                  ;
  2878                                  ;       Out:            AL      ASCII character code
  2879                                  ;                       AH      keyboard scan code
  2880                                  ;
  2881                                  ;-----------------------------------------------------------------------------------------------------------------------
  2882 0000099A E868020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2883 0000099F E8A4020000              GetConsoleChar          call    GetMessage                                      ;get the next message
  2884 000009A4 09C0                                            or      eax,eax                                         ;do we have a message?
  2885 000009A6 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  2886 000009A8 50                                              push    eax                                             ;save key codes
  2887 000009A9 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  2888 000009AE 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2889 000009B3 58                                              pop     eax                                             ;restore key codes
  2890 000009B4 75E9                                            jne     GetConsoleChar                                  ;no, try again
  2891 000009B6 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  2892 000009BB C3                                              ret                                                     ;return
  2893                                  ;-----------------------------------------------------------------------------------------------------------------------
  2894                                  ;
  2895                                  ;       Routine:        GetConsoleString
  2896                                  ;
  2897                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2898                                  ;
  2899                                  ;       In:             DS:EDX  target buffer address
  2900                                  ;                       ECX     maximum number of characters to accept
  2901                                  ;                       BH      echo to terminal
  2902                                  ;                       BL      terminating character
  2903                                  ;
  2904                                  ;-----------------------------------------------------------------------------------------------------------------------
  2905 000009BC 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  2906 000009BD 56                                              push    esi                                             ;
  2907 000009BE 57                                              push    edi                                             ;
  2908 000009BF 06                                              push    es                                              ;
  2909 000009C0 1E                                              push    ds                                              ;load data segment selector ...
  2910 000009C1 07                                              pop     es                                              ;... into extra segment register
  2911 000009C2 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2912 000009C4 51                                              push    ecx                                             ;save maximum characters
  2913 000009C5 30C0                                            xor     al,al                                           ;zero register
  2914 000009C7 FC                                              cld                                                     ;forward strings
  2915 000009C8 F3AA                                            rep     stosb                                           ;zero fill buffer
  2916 000009CA 59                                              pop     ecx                                             ;maximum characters
  2917 000009CB 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2918 000009CD 89D6                                            mov     esi,edx                                         ;esi = target buffer
  2919 000009CF E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  2920 000009D1 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  2921 000009D6 38D8                                            cmp     al,bl                                           ;is this the terminator?
  2922 000009D8 7445                                            je      .50                                             ;yes, exit
  2923 000009DA 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2924 000009DC 7521                                            jne     .30                                             ;no, skip ahead
  2925 000009DE 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  2926 000009E0 74EF                                            je      .20                                             ;yes, get next character
  2927 000009E2 4F                                              dec     edi                                             ;backup target pointer
  2928 000009E3 C60700                                          mov     byte [edi],0                                    ;zero previous character
  2929 000009E6 41                                              inc     ecx                                             ;increment remaining chars
  2930 000009E7 F6C701                                          test    bh,1                                            ;echo to console?
  2931 000009EA 74E5                                            jz      .20                                             ;no, get next character
  2932 000009EC E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  2933 000009F1 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2934 000009F3 E891000000                                      call    PutConsoleChar                                  ;write space to console
  2935 000009F8 E835030000                                      call    PlaceCursor                                     ;position the cursor
  2936 000009FD EBD2                                            jmp     .20                                             ;get next character
  2937 000009FF 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2938 00000A01 72CE                                            jb      .20                                             ;no, get another character
  2939 00000A03 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2940 00000A05 77CA                                            ja      .20                                             ;no, get another character
  2941 00000A07 AA                                              stosb                                                   ;store character in buffer
  2942 00000A08 F6C701                                          test    bh,1                                            ;echo to console?
  2943 00000A0B 740F                                            jz      .40                                             ;no, skip ahead
  2944 00000A0D E877000000                                      call    PutConsoleChar                                  ;write character to console
  2945 00000A12 E810000000                                      call    NextConsoleColumn                               ;advance console position
  2946 00000A17 E816030000                                      call    PlaceCursor                                     ;position the cursor
  2947 00000A1C 49                      .40                     dec     ecx                                             ;decrement remaining chars
  2948 00000A1D EBB0                                            jmp     .10                                             ;next
  2949 00000A1F 30C0                    .50                     xor     al,al                                           ;null
  2950 00000A21 AA                                              stosb                                                   ;terminate buffer
  2951 00000A22 07                                              pop     es                                              ;restore non-volatile regs
  2952 00000A23 5F                                              pop     edi                                             ;
  2953 00000A24 5E                                              pop     esi                                             ;
  2954 00000A25 59                                              pop     ecx                                             ;
  2955 00000A26 C3                                              ret                                                     ;return
  2956                                  ;-----------------------------------------------------------------------------------------------------------------------
  2957                                  ;
  2958                                  ;       Routine:        NextConsoleColumn
  2959                                  ;
  2960                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2961                                  ;                       incremented if the end of the current row is reached.
  2962                                  ;
  2963                                  ;       In:             DS      OS data selector
  2964                                  ;
  2965                                  ;-----------------------------------------------------------------------------------------------------------------------
  2966 00000A27 A004080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2967 00000A2C FEC0                                            inc     al                                              ;increment column
  2968 00000A2E A204080000                                      mov     [wbConsoleColumn],al                            ;save column
  2969 00000A33 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  2970 00000A35 720A                                            jb      .10                                             ;no, skip ahead
  2971 00000A37 E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  2972 00000A3C E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  2973 00000A41 C3                      .10                     ret                                                     ;return
  2974                                  ;-----------------------------------------------------------------------------------------------------------------------
  2975                                  ;
  2976                                  ;       Routine:        NextConsoleRow
  2977                                  ;
  2978                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2979                                  ;
  2980                                  ;       In:             DS      OS data selector
  2981                                  ;
  2982                                  ;-----------------------------------------------------------------------------------------------------------------------
  2983 00000A42 A005080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2984 00000A47 FEC0                                            inc     al                                              ;increment row
  2985 00000A49 A205080000                                      mov     [wbConsoleRow],al                               ;save row
  2986 00000A4E 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  2987 00000A50 7211                                            jb      .10                                             ;no, skip ahead
  2988 00000A52 E889020000                                      call    ScrollConsoleRow                                ;scroll up one row
  2989 00000A57 A005080000                                      mov     al,[wbConsoleRow]                               ;row
  2990 00000A5C FEC8                                            dec     al                                              ;decrement row
  2991 00000A5E A205080000                                      mov     [wbConsoleRow],al                               ;save row
  2992 00000A63 C3                      .10                     ret                                                     ;return
  2993                                  ;-----------------------------------------------------------------------------------------------------------------------
  2994                                  ;
  2995                                  ;       Routine:        PreviousConsoleColumn
  2996                                  ;
  2997                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2998                                  ;                       the column is set to the last position in the row and the row is decremented.
  2999                                  ;
  3000                                  ;       In:             DS      OS data selector
  3001                                  ;
  3002                                  ;-----------------------------------------------------------------------------------------------------------------------
  3003 00000A64 A004080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3004 00000A69 08C0                                            or      al,al                                           ;start of row?
  3005 00000A6B 7514                                            jnz     .10                                             ;no, skip ahead
  3006 00000A6D 8A2505080000                                    mov     ah,[wbConsoleRow]                               ;current row
  3007 00000A73 08E4                                            or      ah,ah                                           ;top of screen?
  3008 00000A75 7411                                            jz      .20                                             ;yes, exit with no change
  3009 00000A77 FECC                                            dec     ah                                              ;decrement row
  3010 00000A79 882505080000                                    mov     [wbConsoleRow],ah                               ;save row
  3011 00000A7F B050                                            mov     al,ECONCOLS                                     ;set maximum column
  3012 00000A81 FEC8                    .10                     dec     al                                              ;decrement column
  3013 00000A83 A204080000                                      mov     [wbConsoleColumn],al                            ;save column
  3014 00000A88 C3                      .20                     ret                                                     ;return
  3015                                  ;-----------------------------------------------------------------------------------------------------------------------
  3016                                  ;
  3017                                  ;       Routine:        PutConsoleChar
  3018                                  ;
  3019                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3020                                  ;
  3021                                  ;       In:             AL      ASCII character
  3022                                  ;                       DS      OS data selector
  3023                                  ;
  3024                                  ;-----------------------------------------------------------------------------------------------------------------------
  3025 00000A89 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3026 00000A8A 06                                              push    es                                              ;
  3027 00000A8B 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3028 00000A8D 07                                              pop     es                                              ;... into extra segment reg
  3029 00000A8E 8A0D04080000                                    mov     cl,[wbConsoleColumn]                            ;column
  3030 00000A94 8A2D05080000                                    mov     ch,[wbConsoleRow]                               ;row
  3031 00000A9A E86D020000                                      call    SetConsoleChar                                  ;put character at row, column
  3032 00000A9F 07                                              pop     es                                              ;restore non-volatile regs
  3033 00000AA0 59                                              pop     ecx                                             ;
  3034 00000AA1 C3                                              ret                                                     ;return
  3035                                  ;-----------------------------------------------------------------------------------------------------------------------
  3036                                  ;
  3037                                  ;       Routine:        PutConsoleHexByte
  3038                                  ;
  3039                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3040                                  ;
  3041                                  ;       In:             AL      byte value
  3042                                  ;                       CL      column
  3043                                  ;                       CH      row
  3044                                  ;                       DS      OS data selector
  3045                                  ;                       ES      CGA selector
  3046                                  ;
  3047                                  ;-----------------------------------------------------------------------------------------------------------------------
  3048 00000AA2 53                      PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  3049 00000AA3 88C3                                            mov     bl,al                                           ;save byte value
  3050 00000AA5 C0E804                                          shr     al,4                                            ;hi-order nybble
  3051 00000AA8 0C30                                            or      al,030h                                         ;apply ASCII zone
  3052 00000AAA 3C3A                                            cmp     al,03ah                                         ;numeric?
  3053 00000AAC 7202                                            jb      .10                                             ;yes, skip ahead
  3054 00000AAE 0407                                            add     al,7                                            ;add ASCII offset for alpha
  3055 00000AB0 E857020000              .10                     call    SetConsoleChar                                  ;display ASCII character
  3056 00000AB5 88D8                                            mov     al,bl                                           ;byte value
  3057 00000AB7 240F                                            and     al,0fh                                          ;lo-order nybble
  3058 00000AB9 0C30                                            or      al,30h                                          ;apply ASCII zone
  3059 00000ABB 3C3A                                            cmp     al,03ah                                         ;numeric?
  3060 00000ABD 7202                                            jb      .20                                             ;yes, skip ahead
  3061 00000ABF 0407                                            add     al,7                                            ;add ASCII offset for alpha
  3062 00000AC1 E846020000              .20                     call    SetConsoleChar                                  ;display ASCII character
  3063 00000AC6 5B                                              pop     ebx                                             ;restore non-volatile regs
  3064 00000AC7 C3                                              ret                                                     ;return
  3065                                  ;-----------------------------------------------------------------------------------------------------------------------
  3066                                  ;
  3067                                  ;       Routine:        PutConsoleHexDword
  3068                                  ;
  3069                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3070                                  ;
  3071                                  ;       In:             EAX     value
  3072                                  ;                       CL      column
  3073                                  ;                       CH      row
  3074                                  ;                       DS      OS data selector
  3075                                  ;                       ES      CGA selector
  3076                                  ;
  3077                                  ;-----------------------------------------------------------------------------------------------------------------------
  3078 00000AC8 50                      PutConsoleHexDword      push    eax
  3079 00000AC9 C1E810                                          shr     eax,16
  3080 00000ACC E807000000                                      call    PutConsoleHexWord
  3081 00000AD1 58                                              pop     eax
  3082 00000AD2 E801000000                                      call    PutConsoleHexWord
  3083 00000AD7 C3                                              ret
  3084                                  ;-----------------------------------------------------------------------------------------------------------------------
  3085                                  ;
  3086                                  ;       Routine:        PutConsoleHexWord
  3087                                  ;
  3088                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3089                                  ;
  3090                                  ;       In:             EAX     value
  3091                                  ;                       CL      column
  3092                                  ;                       CH      row
  3093                                  ;                       DS      OS data selector
  3094                                  ;                       ES      CGA selector
  3095                                  ;
  3096                                  ;-----------------------------------------------------------------------------------------------------------------------
  3097 00000AD8 50                      PutConsoleHexWord       push    eax
  3098 00000AD9 C1E808                                          shr     eax,8
  3099 00000ADC E8C1FFFFFF                                      call    PutConsoleHexByte
  3100 00000AE1 58                                              pop     eax
  3101 00000AE2 E8BBFFFFFF                                      call    PutConsoleHexByte
  3102 00000AE7 C3                                              ret
  3103                                  ;-----------------------------------------------------------------------------------------------------------------------
  3104                                  ;
  3105                                  ;       Routine:        PutConsoleOIAChar
  3106                                  ;
  3107                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3108                                  ;
  3109                                  ;       In:             DS      OS data selector
  3110                                  ;
  3111                                  ;-----------------------------------------------------------------------------------------------------------------------
  3112 00000AE8 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3113 00000AE9 51                                              push    ecx                                             ;
  3114 00000AEA 56                                              push    esi                                             ;
  3115 00000AEB 1E                                              push    ds                                              ;
  3116 00000AEC 06                                              push    es                                              ;
  3117 00000AED 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3118 00000AEF 1F                                              pop     ds                                              ;... into data segment register
  3119 00000AF0 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3120 00000AF2 07                                              pop     es                                              ;... into extra segment register
  3121 00000AF3 BE09080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  3122 00000AF8 B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  3123 00000AFA B300                                            mov     bl,0                                            ;starting column
  3124 00000AFC B906000000                                      mov     ecx,6                                           ;maximum scan codes
  3125 00000B01 51                      .10                     push    ecx                                             ;save remaining count
  3126 00000B02 89D9                                            mov     ecx,ebx                                         ;row, column
  3127 00000B04 AC                                              lodsb                                                   ;read scan code
  3128 00000B05 08C0                                            or      al,al                                           ;scan code present?
  3129 00000B07 7407                                            jz      .20                                             ;no, skip ahead
  3130 00000B09 E894FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  3131 00000B0E EB0E                                            jmp     .30                                             ;continue
  3132 00000B10 B020                    .20                     mov     al,' '                                          ;ASCII space
  3133 00000B12 E8F5010000                                      call    SetConsoleChar                                  ;display space
  3134 00000B17 B020                                            mov     al,' '                                          ;ASCII space
  3135 00000B19 E8EE010000                                      call    SetConsoleChar                                  ;display space
  3136 00000B1E 80C302                  .30                     add     bl,2                                            ;next column (+2)
  3137 00000B21 59                                              pop     ecx                                             ;restore remaining
  3138 00000B22 E2DD                                            loop    .10                                             ;next code
  3139 00000B24 A00F080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  3140 00000B29 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  3141 00000B2B 720D                                            jb      .40                                             ;no, skip ahead
  3142 00000B2D 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  3143 00000B2F 7709                                            ja      .40                                             ;no, skip ahead
  3144 00000B31 88FD                                            mov     ch,bh                                           ;OIA row
  3145 00000B33 B128                                            mov     cl,40                                           ;character display column
  3146 00000B35 E8D2010000                                      call    SetConsoleChar                                  ;display ASCII character
  3147 00000B3A 07                      .40                     pop     es                                              ;restore non-volatile regs
  3148 00000B3B 1F                                              pop     ds                                              ;
  3149 00000B3C 5E                                              pop     esi                                             ;
  3150 00000B3D 59                                              pop     ecx                                             ;
  3151 00000B3E 5B                                              pop     ebx                                             ;
  3152 00000B3F C3                                              ret                                                     ;return
  3153                                  ;-----------------------------------------------------------------------------------------------------------------------
  3154                                  ;
  3155                                  ;       Routine:        PutConsoleOIAShift
  3156                                  ;
  3157                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3158                                  ;
  3159                                  ;       In:             BL      shift flags
  3160                                  ;                       BH      lock flags
  3161                                  ;                       DS      OS data selector
  3162                                  ;
  3163                                  ;-----------------------------------------------------------------------------------------------------------------------
  3164 00000B40 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3165 00000B41 06                                              push    es                                              ;
  3166 00000B42 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3167 00000B44 07                                              pop     es                                              ;... into ES register
  3168 00000B45 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  3169 00000B47 B020                                            mov     al,EASCIISPACE                                  ;space is default character
  3170 00000B49 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3171 00000B4C 7402                                            jz      .10                                             ;no, skip ahead
  3172 00000B4E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3173 00000B50 B10E                    .10                     mov     cl,14                                           ;indicator column
  3174 00000B52 E8B5010000                                      call    SetConsoleChar                                  ;display ASCII character
  3175 00000B57 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3176 00000B59 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3177 00000B5C 7402                                            jz      .20                                             ;no, skip ahead
  3178 00000B5E B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3179 00000B60 B140                    .20                     mov     cl,64                                           ;indicator column
  3180 00000B62 E8A5010000                                      call    SetConsoleChar                                  ;display ASCII character
  3181 00000B67 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3182 00000B69 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3183 00000B6C 7402                                            jz      .30                                             ;no, skip ahead
  3184 00000B6E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3185 00000B70 B10F                    .30                     mov     cl,15                                           ;indicator column
  3186 00000B72 E895010000                                      call    SetConsoleChar                                  ;display ASCII character
  3187 00000B77 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3188 00000B79 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3189 00000B7C 7402                                            jz      .40                                             ;no, skip ahead
  3190 00000B7E B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3191 00000B80 B13F                    .40                     mov     cl,63                                           ;indicator column
  3192 00000B82 E885010000                                      call    SetConsoleChar                                  ;display ASCII character
  3193 00000B87 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3194 00000B89 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3195 00000B8C 7402                                            jz      .50                                             ;no, skip ahead
  3196 00000B8E B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  3197 00000B90 B110                    .50                     mov     cl,16                                           ;indicator column
  3198 00000B92 E875010000                                      call    SetConsoleChar                                  ;display ASCII character
  3199 00000B97 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3200 00000B99 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3201 00000B9C 7402                                            jz      .60                                             ;no, skip ahead
  3202 00000B9E B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  3203 00000BA0 B13E                    .60                     mov     cl,62                                           ;indicator column
  3204 00000BA2 E865010000                                      call    SetConsoleChar                                  ;display ASCII character
  3205 00000BA7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3206 00000BA9 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3207 00000BAC 7402                                            jz      .70                                             ;no, skip ahead
  3208 00000BAE B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3209 00000BB0 B14E                    .70                     mov     cl,78                                           ;indicator column
  3210 00000BB2 E855010000                                      call    SetConsoleChar                                  ;display ASCII character
  3211 00000BB7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3212 00000BB9 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3213 00000BBC 7402                                            jz      .80                                             ;no, skip ahead
  3214 00000BBE B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  3215 00000BC0 B14D                    .80                     mov     cl,77                                           ;indicator column
  3216 00000BC2 E845010000                                      call    SetConsoleChar                                  ;display ASCII character
  3217 00000BC7 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3218 00000BC9 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3219 00000BCC 7402                                            jz      .90                                             ;no, skip ahead
  3220 00000BCE B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3221 00000BD0 B14C                    .90                     mov     cl,76                                           ;indicator column
  3222 00000BD2 E835010000                                      call    SetConsoleChar                                  ;display ASCII character
  3223 00000BD7 07                                              pop     es                                              ;restore non-volatile regs
  3224 00000BD8 59                                              pop     ecx                                             ;
  3225 00000BD9 C3                                              ret                                                     ;return
  3226                                  ;-----------------------------------------------------------------------------------------------------------------------
  3227                                  ;
  3228                                  ;       Routine:        PutConsoleString
  3229                                  ;
  3230                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3231                                  ;                       console position as needed.
  3232                                  ;
  3233                                  ;       In:             EDX     source address
  3234                                  ;                       DS      OS data selector
  3235                                  ;
  3236                                  ;-----------------------------------------------------------------------------------------------------------------------
  3237 00000BDA 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  3238 00000BDB 89D6                                            mov     esi,edx                                         ;source address
  3239 00000BDD FC                                              cld                                                     ;forward strings
  3240 00000BDE AC                      .10                     lodsb                                                   ;ASCII character
  3241 00000BDF 08C0                                            or      al,al                                           ;end of string?
  3242 00000BE1 7422                                            jz      .40                                             ;yes, skip ahead
  3243 00000BE3 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  3244 00000BE5 7507                                            jne     .20                                             ;no, skip ahead
  3245 00000BE7 E8A6FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  3246 00000BEC EBF0                                            jmp     .10                                             ;next character
  3247 00000BEE 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3248 00000BF0 7507                                            jne     .30                                             ;no, skip ahead
  3249 00000BF2 E84BFEFFFF                                      call    NextConsoleRow                                  ;move to next row
  3250 00000BF7 EBE5                                            jmp     .10                                             ;next character
  3251 00000BF9 E88BFEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  3252 00000BFE E824FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  3253 00000C03 EBD9                                            jmp     .10                                             ;next character
  3254 00000C05 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  3255 00000C06 C3                                              ret                                                     ;return
  3256                                  ;-----------------------------------------------------------------------------------------------------------------------
  3257                                  ;
  3258                                  ;       Routine:        Yield
  3259                                  ;
  3260                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3261                                  ;
  3262                                  ;-----------------------------------------------------------------------------------------------------------------------
  3263 00000C07 FB                      Yield                   sti                                                     ;enable maskagle interrupts
  3264 00000C08 F4                                              hlt                                                     ;halt until external interrupt
  3265 00000C09 C3                                              ret                                                     ;return
  3266                                  ;=======================================================================================================================
  3267                                  ;
  3268                                  ;       Data-Type Conversion Helper Routines
  3269                                  ;
  3270                                  ;       HexadecimalToUnsigned
  3271                                  ;       UnsignedToHexadecimal
  3272                                  ;
  3273                                  ;=======================================================================================================================
  3274                                  ;-----------------------------------------------------------------------------------------------------------------------
  3275                                  ;
  3276                                  ;       Routine:        HexadecimalToUnsigned
  3277                                  ;
  3278                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3279                                  ;
  3280                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  3281                                  ;
  3282                                  ;       Output:         EAX     unsigned integer value
  3283                                  ;
  3284                                  ;-----------------------------------------------------------------------------------------------------------------------
  3285 00000C0A 56                      HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  3286 00000C0B 89D6                                            mov     esi,edx                                         ;source address
  3287 00000C0D 31D2                                            xor     edx,edx                                         ;zero register
  3288 00000C0F AC                      .10                     lodsb                                                   ;source byte
  3289 00000C10 84C0                                            test    al,al                                           ;end of string?
  3290 00000C12 7410                                            jz      .30                                             ;yes, branch
  3291 00000C14 3C39                                            cmp     al,'9'                                          ;hexadecimal?
  3292 00000C16 7602                                            jna     .20                                             ;no, skip ahead
  3293 00000C18 2C37                                            sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  3294 00000C1A 83E00F                  .20                     and     eax,0fh                                         ;remove ascii zone
  3295 00000C1D C1E204                                          shl     edx,4                                           ;previous total x 16
  3296 00000C20 01C2                                            add     edx,eax                                         ;add prior value x 16
  3297 00000C22 EBEB                                            jmp     .10                                             ;next
  3298 00000C24 89D0                    .30                     mov     eax,edx                                         ;result
  3299 00000C26 5E                                              pop     esi                                             ;restore non-volatile regs
  3300 00000C27 C3                                              ret                                                     ;return
  3301                                  ;-----------------------------------------------------------------------------------------------------------------------
  3302                                  ;
  3303                                  ;       Routine:        UnsignedToHexadecimal
  3304                                  ;
  3305                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  3306                                  ;
  3307                                  ;       Input:          DS:EDX  output buffer address
  3308                                  ;                       ECX     32-bit binary
  3309                                  ;
  3310                                  ;-----------------------------------------------------------------------------------------------------------------------
  3311 00000C28 57                      UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  3312 00000C29 89D7                                            mov     edi,edx                                         ;output buffer address
  3313 00000C2B 89CA                                            mov     edx,ecx                                         ;32-bit unsigned
  3314 00000C2D 31C9                                            xor     ecx,ecx                                         ;zero register
  3315 00000C2F B108                                            mov     cl,8                                            ;nybble count
  3316 00000C31 C1C204                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  3317 00000C34 88D0                                            mov     al,dl                                           ;????bbbb
  3318 00000C36 240F                                            and     al,0fh                                          ;mask out bits 4-7
  3319 00000C38 0C30                                            or      al,30h                                          ;mask in ascii zone
  3320 00000C3A 3C3A                                            cmp     al,3ah                                          ;A through F?
  3321 00000C3C 7202                                            jb      .20                                             ;no, skip ahead
  3322 00000C3E 0407                                            add     al,7                                            ;41h through 46h
  3323 00000C40 AA                      .20                     stosb                                                   ;store hexnum
  3324 00000C41 E2EE                                            loop    .10                                             ;next nybble
  3325 00000C43 30C0                                            xor     al,al                                           ;zero reg
  3326 00000C45 AA                                              stosb                                                   ;null terminate
  3327 00000C46 5F                                              pop     edi                                             ;restore non-volatile regs
  3328 00000C47 C3                                              ret                                                     ;return
  3329                                  ;=======================================================================================================================
  3330                                  ;
  3331                                  ;       Message Queue Helper Routines
  3332                                  ;
  3333                                  ;       GetMessage
  3334                                  ;       PutMessage
  3335                                  ;
  3336                                  ;=======================================================================================================================
  3337                                  ;-----------------------------------------------------------------------------------------------------------------------
  3338                                  ;
  3339                                  ;       Routine:        GetMessage
  3340                                  ;
  3341                                  ;       Description:    This routine reads and removes a message from the message queue.
  3342                                  ;
  3343                                  ;       Out:            EAX     lo-order message data
  3344                                  ;                       EDX     hi-order message data
  3345                                  ;
  3346                                  ;                       CY      0 = message read
  3347                                  ;                               1 = no message to read
  3348                                  ;
  3349                                  ;-----------------------------------------------------------------------------------------------------------------------
  3350 00000C48 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  3351 00000C49 51                                              push    ecx                                             ;
  3352 00000C4A 1E                                              push    ds                                              ;
  3353 00000C4B 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  3354 00000C4D 1F                                              pop     ds                                              ;... into data segment register
  3355 00000C4E 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  3356 00000C54 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  3357 00000C56 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3358 00000C59 09D0                                            or      eax,edx                                         ;is queue empty?
  3359 00000C5B F9                                              stc                                                     ;assume queue is emtpy
  3360 00000C5C 741B                                            jz      .20                                             ;yes, skip ahead
  3361 00000C5E 31C9                                            xor     ecx,ecx                                         ;store zero
  3362 00000C60 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  3363 00000C62 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3364 00000C65 83C308                                          add     ebx,8                                           ;next queue element
  3365 00000C68 81E3FC030000                                    and     ebx,03fch                                       ;at end of queue?
  3366 00000C6E 7502                                            jnz     .10                                             ;no, skip ahead
  3367 00000C70 B308                                            mov     bl,8                                            ;reset to 1st entry
  3368 00000C72 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3369 00000C78 F8                                              clc                                                     ;indicate message read
  3370 00000C79 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  3371 00000C7A 59                                              pop     ecx                                             ;
  3372 00000C7B 5B                                              pop     ebx                                             ;
  3373 00000C7C C3                                              ret                                                     ;return
  3374                                  ;-----------------------------------------------------------------------------------------------------------------------
  3375                                  ;
  3376                                  ;       Routine:        PutMessage
  3377                                  ;
  3378                                  ;       Description:    This routine adda a message to the message queue.
  3379                                  ;
  3380                                  ;       In:             ECX     hi-order data word
  3381                                  ;                       EDX     lo-order data word
  3382                                  ;
  3383                                  ;       Out:            CY      0 = success
  3384                                  ;                               1 = fail: queue is full
  3385                                  ;
  3386                                  ;-----------------------------------------------------------------------------------------------------------------------
  3387 00000C7D 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  3388 00000C7E 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  3389 00000C80 1F                                              pop     ds                                              ;... into data segment register
  3390 00000C81 A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  3391 00000C86 833800                                          cmp     dword [eax],0                                   ;is queue full?
  3392 00000C89 F9                                              stc                                                     ;assume failure
  3393 00000C8A 7517                                            jne     .20                                             ;yes, cannot store
  3394 00000C8C 8910                                            mov     [eax],edx                                       ;store lo-order data
  3395 00000C8E 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  3396 00000C91 83C008                                          add     eax,8                                           ;next queue element adr
  3397 00000C94 25FC030000                                      and     eax,03fch                                       ;at end of queue?
  3398 00000C99 7502                                            jnz     .10                                             ;no, skip ahead
  3399 00000C9B B008                                            mov     al,8                                            ;reset to top of queue
  3400 00000C9D A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3401 00000CA2 F8                                              clc                                                     ;indicate success
  3402 00000CA3 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  3403 00000CA4 C3                                              ret                                                     ;return
  3404                                  ;=======================================================================================================================
  3405                                  ;
  3406                                  ;       Memory-Mapped Video Routines
  3407                                  ;
  3408                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  3409                                  ;
  3410                                  ;       ClearConsoleScreen
  3411                                  ;       ScrollConsoleRow
  3412                                  ;       SetConsoleChar
  3413                                  ;       SetConsoleString
  3414                                  ;
  3415                                  ;=======================================================================================================================
  3416                                  ;-----------------------------------------------------------------------------------------------------------------------
  3417                                  ;
  3418                                  ;       Routine:        ClearConsoleScreen
  3419                                  ;
  3420                                  ;       Description:    This routine clears the console (CGA) screen.
  3421                                  ;
  3422                                  ;-----------------------------------------------------------------------------------------------------------------------
  3423 00000CA5 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  3424 00000CA6 57                                              push    edi                                             ;
  3425 00000CA7 1E                                              push    ds                                              ;
  3426 00000CA8 06                                              push    es                                              ;
  3427 00000CA9 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  3428 00000CAB 1F                                              pop     ds                                              ;... into DS register
  3429 00000CAC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3430 00000CAE 07                                              pop     es                                              ;... into ES register
  3431 00000CAF B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  3432 00000CB4 B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  3433 00000CB9 31FF                                            xor     edi,edi                                         ;target offset
  3434 00000CBB FC                                              cld                                                     ;forward strings
  3435 00000CBC F3AB                                            rep     stosd                                           ;reset screen body
  3436 00000CBE B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  3437 00000CC3 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  3438 00000CC8 F3AB                                            rep     stosd                                           ;reset OIA line
  3439 00000CCA 30C0                                            xor     al,al                                           ;zero register
  3440 00000CCC A205080000                                      mov     [wbConsoleRow],al                               ;reset console row
  3441 00000CD1 A204080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  3442 00000CD6 E857000000                                      call    PlaceCursor                                     ;place cursor at current position
  3443 00000CDB 07                                              pop     es                                              ;restore non-volatile regs
  3444 00000CDC 1F                                              pop     ds                                              ;
  3445 00000CDD 5F                                              pop     edi                                             ;
  3446 00000CDE 59                                              pop     ecx                                             ;
  3447 00000CDF C3                                              ret                                                     ;return
  3448                                  ;-----------------------------------------------------------------------------------------------------------------------
  3449                                  ;
  3450                                  ;       Routine:        ScrollConsoleRow
  3451                                  ;
  3452                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  3453                                  ;
  3454                                  ;-----------------------------------------------------------------------------------------------------------------------
  3455 00000CE0 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  3456 00000CE1 56                                              push    esi                                             ;
  3457 00000CE2 57                                              push    edi                                             ;
  3458 00000CE3 1E                                              push    ds                                              ;
  3459 00000CE4 06                                              push    es                                              ;
  3460 00000CE5 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  3461 00000CE7 1F                                              pop     ds                                              ;... into DS
  3462 00000CE8 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  3463 00000CEA 07                                              pop     es                                              ;... into ES
  3464 00000CEB B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  3465 00000CF0 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  3466 00000CF5 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  3467 00000CF7 FC                                              cld                                                     ;forward strings
  3468 00000CF8 F3A5                                            rep     movsd                                           ;move 24 lines up
  3469 00000CFA B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  3470 00000CFF B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  3471 00000D04 F3AB                                            rep     stosd                                           ;clear bottom row
  3472 00000D06 07                                              pop     es                                              ;restore non-volatile regs
  3473 00000D07 1F                                              pop     ds                                              ;
  3474 00000D08 5F                                              pop     edi                                             ;
  3475 00000D09 5E                                              pop     esi                                             ;
  3476 00000D0A 59                                              pop     ecx                                             ;
  3477 00000D0B C3                                              ret                                                     ;return
  3478                                  ;-----------------------------------------------------------------------------------------------------------------------
  3479                                  ;
  3480                                  ;       Routine:        SetConsoleChar
  3481                                  ;
  3482                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3483                                  ;
  3484                                  ;       In:             AL      ASCII character
  3485                                  ;                       CL      column
  3486                                  ;                       CH      row
  3487                                  ;                       ES      CGA selector
  3488                                  ;
  3489                                  ;       Out:            EAX     last target address written (ES:)
  3490                                  ;                       CL      column + 1
  3491                                  ;
  3492                                  ;-----------------------------------------------------------------------------------------------------------------------
  3493 00000D0C 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  3494 00000D0E 0FB6C5                                          movzx   eax,ch                                          ;row
  3495 00000D11 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  3496 00000D13 F6E4                                            mul     ah                                              ;row * cols/row
  3497 00000D15 00C8                                            add     al,cl                                           ;add column
  3498 00000D17 80D400                                          adc     ah,0                                            ;handle carry
  3499 00000D1A D1E0                                            shl     eax,1                                           ;screen offset
  3500 00000D1C 268810                                          mov     [es:eax],dl                                     ;store character
  3501 00000D1F FEC1                                            inc     cl                                              ;next column
  3502 00000D21 C3                                              ret                                                     ;return
  3503                                  ;-----------------------------------------------------------------------------------------------------------------------
  3504                                  ;
  3505                                  ;       Routine:        SetConsoleString
  3506                                  ;
  3507                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  3508                                  ;
  3509                                  ;       In:             ESI     source offset (DS:)
  3510                                  ;                       CL      column
  3511                                  ;                       CH      row
  3512                                  ;                       ES      CGA selector
  3513                                  ;
  3514                                  ;-----------------------------------------------------------------------------------------------------------------------
  3515 00000D22 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  3516 00000D23 FC                                              cld                                                     ;forward strings
  3517 00000D24 AC                      .10                     lodsb                                                   ;next ASCII character
  3518 00000D25 84C0                                            test    al,al                                           ;end of string?
  3519 00000D27 7407                                            jz      .20                                             ;yes, branch
  3520 00000D29 E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  3521 00000D2E EBF4                                            jmp     .10                                             ;continue
  3522 00000D30 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  3523 00000D31 C3                                              ret                                                     ;return
  3524                                  ;=======================================================================================================================
  3525                                  ;
  3526                                  ;       Input/Output Routines
  3527                                  ;
  3528                                  ;       These routines read and/or write directly to ports.
  3529                                  ;
  3530                                  ;       PlaceCursor
  3531                                  ;       PutPrimaryEndOfInt
  3532                                  ;       PutSecondaryEndOfInt
  3533                                  ;       ResetSystem
  3534                                  ;       SetKeyboardLamps
  3535                                  ;       WaitForKeyInBuffer
  3536                                  ;       WaitForKeyOutBuffer
  3537                                  ;
  3538                                  ;=======================================================================================================================
  3539                                  ;-----------------------------------------------------------------------------------------------------------------------
  3540                                  ;
  3541                                  ;       Routine:        PlaceCursor
  3542                                  ;
  3543                                  ;       Description:    This routine positions the cursor on the console.
  3544                                  ;
  3545                                  ;       In:             DS      OS data selector
  3546                                  ;
  3547                                  ;-----------------------------------------------------------------------------------------------------------------------
  3548 00000D32 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  3549 00000D33 A005080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  3550 00000D38 B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  3551 00000D3A F6E4                                            mul     ah                                              ;row offset
  3552 00000D3C 020504080000                                    add     al,[wbConsoleColumn]                            ;add column
  3553 00000D42 80D400                                          adc     ah,0                                            ;add overflow
  3554 00000D45 89C1                                            mov     ecx,eax                                         ;screen offset
  3555 00000D47 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3556 00000D49 B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3557 00000D4B B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3558 00000D4D EE                                              out     dx,al                                           ;select register
  3559 00000D4E 42                                              inc     edx                                             ;data port
  3560 00000D4F 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  3561 00000D51 EE                                              out     dx,al                                           ;store hi-order loc
  3562 00000D52 4A                                              dec     edx                                             ;register select port
  3563 00000D53 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3564 00000D55 EE                                              out     dx,al                                           ;select register
  3565 00000D56 42                                              inc     edx                                             ;data port
  3566 00000D57 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  3567 00000D59 EE                                              out     dx,al                                           ;store lo-order loc
  3568 00000D5A 59                                              pop     ecx                                             ;restore non-volatile regs
  3569 00000D5B C3                                              ret                                                     ;return
  3570                                  ;-----------------------------------------------------------------------------------------------------------------------
  3571                                  ;
  3572                                  ;       Routine:        PutPrimaryEndOfInt
  3573                                  ;
  3574                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3575                                  ;
  3576                                  ;-----------------------------------------------------------------------------------------------------------------------
  3577 00000D5C FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  3578 00000D5D B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3579 00000D5F E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3580 00000D61 C3                                              ret                                                     ;return
  3581                                  ;-----------------------------------------------------------------------------------------------------------------------
  3582                                  ;
  3583                                  ;       Routine:        PutSecondaryEndOfInt
  3584                                  ;
  3585                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3586                                  ;
  3587                                  ;-----------------------------------------------------------------------------------------------------------------------
  3588 00000D62 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3589 00000D63 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3590 00000D65 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3591 00000D67 C3                                              ret                                                     ;return
  3592                                  ;-----------------------------------------------------------------------------------------------------------------------
  3593                                  ;
  3594                                  ;       Routine:        ResetSystem
  3595                                  ;
  3596                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3597                                  ;
  3598                                  ;       Out:            N/A     This routine does not return.
  3599                                  ;
  3600                                  ;-----------------------------------------------------------------------------------------------------------------------
  3601 00000D68 B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3602 00000D6D E2FE                                            loop    $                                               ;clear interrupts
  3603 00000D6F B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3604 00000D71 E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3605 00000D73 FB                      .10                     sti                                                     ;enable maskable interrupts
  3606 00000D74 F4                                              hlt                                                     ;halt until interrupt
  3607 00000D75 EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  3608                                  ;-----------------------------------------------------------------------------------------------------------------------
  3609                                  ;
  3610                                  ;       Routine:        SetKeyboardLamps
  3611                                  ;
  3612                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3613                                  ;
  3614                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3615                                  ;
  3616                                  ;-----------------------------------------------------------------------------------------------------------------------
  3617 00000D77 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3618 00000D7C B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3619 00000D7E E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  3620 00000D80 E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3621 00000D85 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3622 00000D87 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3623 00000D8C 88F8                                            mov     al,bh                                           ;set/reset lamps value
  3624 00000D8E E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  3625 00000D90 E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3626 00000D95 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3627 00000D97 C3                                              ret                                                     ;return
  3628                                  ;-----------------------------------------------------------------------------------------------------------------------
  3629                                  ;
  3630                                  ;       Routine:        WaitForKeyInBuffer
  3631                                  ;
  3632                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3633                                  ;
  3634                                  ;       Out:            ZF      1 = Input buffer ready
  3635                                  ;                               0 = Input buffer not ready after timeout
  3636                                  ;
  3637                                  ;-----------------------------------------------------------------------------------------------------------------------
  3638 00000D98 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3639 00000D99 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3640 00000D9E E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3641 00000DA0 A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  3642 00000DA2 E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  3643 00000DA4 59                                              pop     ecx                                             ;restore non-volatile regs
  3644 00000DA5 C3                                              ret                                                     ;return
  3645                                  ;-----------------------------------------------------------------------------------------------------------------------
  3646                                  ;
  3647                                  ;       Routine:        WaitForKeyOutBuffer
  3648                                  ;
  3649                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3650                                  ;
  3651                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3652                                  ;                               0 = Output buffer empty after timeout
  3653                                  ;
  3654                                  ;-----------------------------------------------------------------------------------------------------------------------
  3655 00000DA6 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3656 00000DA7 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3657 00000DAC E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3658 00000DAE A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  3659 00000DB0 E1FA                                            loopz   .10                                             ;loop until output buffer bit
  3660 00000DB2 59                                              pop     ecx                                             ;restore non-volatile regs
  3661 00000DB3 C3                                              ret                                                     ;return
  3662                                  ;-----------------------------------------------------------------------------------------------------------------------
  3663                                  ;
  3664                                  ;       End of the Kernel Function Library
  3665                                  ;
  3666                                  ;-----------------------------------------------------------------------------------------------------------------------
  3667 00000DB4 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  3668                                  ;=======================================================================================================================
  3669                                  ;
  3670                                  ;       Console Task
  3671                                  ;
  3672                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3673                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3674                                  ;       screen and responds to user commands.
  3675                                  ;
  3676                                  ;=======================================================================================================================
  3677                                  ;-----------------------------------------------------------------------------------------------------------------------
  3678                                  ;
  3679                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3680                                  ;
  3681                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3682                                  ;
  3683                                  ;-----------------------------------------------------------------------------------------------------------------------
  3684                                  section                 constack                                                ;console task stack
  3685 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  3686                                  ;-----------------------------------------------------------------------------------------------------------------------
  3687                                  ;
  3688                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3689                                  ;
  3690                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3691                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3692                                  ;       16 descriptors. Six are initially defined.
  3693                                  ;
  3694                                  ;-----------------------------------------------------------------------------------------------------------------------
  3695                                  section                 conldt                                                  ;console local descriptors
  3696 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  3697 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  3698 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  3699 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  3700 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  3701 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  3702 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  3703                                  ;-----------------------------------------------------------------------------------------------------------------------
  3704                                  ;
  3705                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3706                                  ;
  3707                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3708                                  ;       segment. CS to console code.
  3709                                  ;
  3710                                  ;-----------------------------------------------------------------------------------------------------------------------
  3711                                  section                 contss                                                  ;console task state segment
  3712 00000000 00000000                                        dd      0                                               ;00 back-link tss
  3713 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  3714 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  3715 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  3716 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  3717 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  3718 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  3719 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  3720 00000020 00000000                                        dd      0                                               ;20 eip
  3721 00000024 00020000                                        dd      0200h                                           ;24 eflags
  3722 00000028 00000000                                        dd      0                                               ;28 eax
  3723 0000002C 00000000                                        dd      0                                               ;2c ecx
  3724 00000030 00000000                                        dd      0                                               ;30 edx
  3725 00000034 00000000                                        dd      0                                               ;34 ebx
  3726 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  3727 0000003C 00000000                                        dd      0                                               ;3c ebp
  3728 00000040 00000000                                        dd      0                                               ;40 esi
  3729 00000044 00000000                                        dd      0                                               ;44 edi
  3730 00000048 1C000000                                        dd      001Ch                                           ;48 es
  3731 0000004C 24000000                                        dd      0024h                                           ;4c cs
  3732 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  3733 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  3734 00000058 00000000                                        dd      0                                               ;58 fs
  3735 0000005C 00000000                                        dd      0                                               ;5c gs
  3736 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3737 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  3738                                  ;-----------------------------------------------------------------------------------------------------------------------
  3739                                  ;
  3740                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3741                                  ;
  3742                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3743                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3744                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3745                                  ;       event.
  3746                                  ;
  3747                                  ;-----------------------------------------------------------------------------------------------------------------------
  3748                                  section                 conmque                                                 ;console message queue
  3749 00000000 08000000                                        dd      8                                               ;head pointer
  3750 00000004 08000000                                        dd      8                                               ;tail pointer
  3751 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  3752                                  ;-----------------------------------------------------------------------------------------------------------------------
  3753                                  ;
  3754                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3755                                  ;
  3756                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3757                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3758                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3759                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3760                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3761                                  ;       board input, echoing to the console screen and responding to user commands.
  3762                                  ;
  3763                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3764                                  ;
  3765                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3766                                  ;                               |  Real Mode Interrupt Vectors                  |
  3767                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3768                                  ;                               |  Reserved BIOS Memory Area                    |
  3769                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3770                                  ;                               |  Shared Kernel Memory Area                    |
  3771                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3772                                  ;                               |  Global Descriptor Table (GDT)                |
  3773                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3774                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3775                                  ;                       002000  +-----------------------------------------------+
  3776                                  ;                               |  Interrupt Handlers                           |
  3777                                  ;                               |  Kernel Function Library                      |
  3778                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3779                                  ;                               |  Console Task Stack Area                      |
  3780                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3781                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3782                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3783                                  ;                               |  Console Task Task State Segment (TSS)        |
  3784                                  ;                       004800  +-----------------------------------------------+
  3785                                  ;                               |  Console Task Message Queue                   |
  3786                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3787                                  ;                               |  Console Task Code                            |
  3788                                  ;                               |  Console Task Constants                       |
  3789                                  ;                       006000  +===============================================+
  3790                                  ;
  3791                                  ;-----------------------------------------------------------------------------------------------------------------------
  3792                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3793 00000000 E86D000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  3794                                  
  3795                                                          clearConsoleScreen                                      ;clear the console screen
  3795 00000005 B000                <1>  mov al,eClearConsoleScreen
  3795 00000007 CD30                <1>  int _svc
  3796                                                          putConsoleString czTitle                                ;display startup message
  3796 00000009 BA[15020000]        <1>  mov edx,%1
  3796 0000000E B005                <1>  mov al,ePutConsoleString
  3796 00000010 CD30                <1>  int _svc
  3797                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3797                              <1> .10 :
  3797 00000012 BA[13020000]        <1>  mov edx,%1
  3797 00000017 B005                <1>  mov al,ePutConsoleString
  3797 00000019 CD30                <1>  int _svc
  3798                                                          placeCursor                                             ;set CRT cursor location
  3798 0000001B B004                <1>  mov al,ePlaceCursor
  3798 0000001D CD30                <1>  int _svc
  3799                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3799 0000001F BA10080000          <1>  mov edx,%1
  3799 00000024 B94F000000          <1>  mov ecx,%2
  3799 00000029 B701                <1>  mov bh,%3
  3799 0000002B B30D                <1>  mov bl,%4
  3799 0000002D B002                <1>  mov al,eGetConsoleString
  3799 0000002F CD30                <1>  int _svc
  3800                                                          putConsoleString czNewLine                              ;newline
  3800 00000031 BA[10020000]        <1>  mov edx,%1
  3800 00000036 B005                <1>  mov al,ePutConsoleString
  3800 00000038 CD30                <1>  int _svc
  3801                                  
  3802 0000003A BA10080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  3803 0000003F BB60080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  3804 00000044 E842000000                                      call    ConTakeToken                                    ;handle console input
  3805 00000049 BA60080000                                      mov     edx,wzConsoleToken                              ;token buffer
  3806 0000004E E86D000000                                      call    ConDetermineCommand                             ;determine command number
  3807 00000053 83F80A                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  3808 00000056 720B                                            jb      .20                                             ;yes, branch
  3809                                  
  3810                                                          putConsoleString czUnknownCommand                       ;display error message
  3810 00000058 BA[33020000]        <1>  mov edx,%1
  3810 0000005D B005                <1>  mov al,ePutConsoleString
  3810 0000005F CD30                <1>  int _svc
  3811                                  
  3812 00000061 EBAF                                            jmp     .10                                             ;next command
  3813 00000063 C1E002                  .20                     shl     eax,2                                           ;index into jump table
  3814 00000066 BA[A4010000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  3815 0000006B 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  3816 0000006E FFD0                                            call    eax                                             ;call command handler
  3817 00000070 EBA0                                            jmp     .10                                             ;next command
  3818                                  ;-----------------------------------------------------------------------------------------------------------------------
  3819                                  ;
  3820                                  ;       Routine:        ConInitializeData
  3821                                  ;
  3822                                  ;       Description:    This routine initializes console task variables.
  3823                                  ;
  3824                                  ;-----------------------------------------------------------------------------------------------------------------------
  3825 00000072 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  3826 00000073 57                                              push    edi                                             ;
  3827 00000074 06                                              push    es                                              ;
  3828                                  ;
  3829                                  ;       Initialize console work areas.
  3830                                  ;
  3831 00000075 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3832 00000077 07                                              pop     es                                              ;... into extra segment register
  3833 00000078 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  3834 0000007D 30C0                                            xor     al,al                                           ;initialization value
  3835 0000007F B900010000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  3836 00000084 FC                                              cld                                                     ;forward strings
  3837 00000085 F3AA                                            rep     stosb                                           ;initialize data
  3838                                  ;
  3839                                  ;       Restore and return.
  3840                                  ;
  3841 00000087 07                                              pop     es                                              ;restore non-volatile regs
  3842 00000088 5F                                              pop     edi                                             ;
  3843 00000089 59                                              pop     ecx                                             ;
  3844 0000008A C3                                              ret                                                     ;return
  3845                                  ;-----------------------------------------------------------------------------------------------------------------------
  3846                                  ;
  3847                                  ;       Routine:        ConTakeToken
  3848                                  ;
  3849                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3850                                  ;
  3851                                  ;       In:             DS:EDX  source buffer address
  3852                                  ;                       DS:EBX  target buffer address
  3853                                  ;
  3854                                  ;       Out:            DS:EDX  source buffer address
  3855                                  ;                       DS:EBX  target buffer address
  3856                                  ;
  3857                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3858                                  ;
  3859                                  ;-----------------------------------------------------------------------------------------------------------------------
  3860 0000008B 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  3861 0000008C 57                                              push    edi                                             ;
  3862 0000008D 06                                              push    es                                              ;
  3863 0000008E 1E                                              push    ds                                              ;load data segment selector ...
  3864 0000008F 07                                              pop     es                                              ;... into extra segment reg
  3865 00000090 89D6                                            mov     esi,edx                                         ;source buffer address
  3866 00000092 89DF                                            mov     edi,ebx                                         ;target buffer address
  3867 00000094 C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3868 00000097 FC                                              cld                                                     ;forward strings
  3869 00000098 AC                      .10                     lodsb                                                   ;load byte
  3870 00000099 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3871 0000009B 74FB                                            je      .10                                             ;yes, continue
  3872 0000009D 84C0                                            test    al,al                                           ;end of line?
  3873 0000009F 7410                                            jz      .40                                             ;yes, branch
  3874 000000A1 AA                      .20                     stosb                                                   ;store byte
  3875 000000A2 AC                                              lodsb                                                   ;load byte
  3876 000000A3 84C0                                            test    al,al                                           ;end of line?
  3877 000000A5 740A                                            jz      .40                                             ;no, continue
  3878 000000A7 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3879 000000A9 75F6                                            jne     .20                                             ;no, continue
  3880 000000AB AC                      .30                     lodsb                                                   ;load byte
  3881 000000AC 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3882 000000AE 74FB                                            je      .30                                             ;yes, continue
  3883 000000B0 4E                                              dec     esi                                             ;pre-position
  3884 000000B1 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3885 000000B4 89D7                                            mov     edi,edx                                         ;source buffer address
  3886 000000B6 AC                      .50                     lodsb                                                   ;remaining byte
  3887 000000B7 AA                                              stosb                                                   ;move to front of buffer
  3888 000000B8 84C0                                            test    al,al                                           ;end of line?
  3889 000000BA 75FA                                            jnz     .50                                             ;no, continue
  3890 000000BC 07                                              pop     es                                              ;restore non-volatile regs
  3891 000000BD 5F                                              pop     edi                                             ;
  3892 000000BE 5E                                              pop     esi                                             ;
  3893 000000BF C3                                              ret                                                     ;return
  3894                                  ;-----------------------------------------------------------------------------------------------------------------------
  3895                                  ;
  3896                                  ;       Routine:        ConDetermineCommand
  3897                                  ;
  3898                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3899                                  ;
  3900                                  ;       input:          DS:EDX  command address
  3901                                  ;
  3902                                  ;       output:         EAX     >=0     = command nbr
  3903                                  ;                               0       = unknown command
  3904                                  ;
  3905                                  ;-----------------------------------------------------------------------------------------------------------------------
  3906 000000C0 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3907 000000C1 51                                              push    ecx                                             ;
  3908 000000C2 56                                              push    esi                                             ;
  3909 000000C3 57                                              push    edi                                             ;
  3910                                  
  3911                                                          upperCaseString                                         ;upper-case string at EDX
  3911 000000C4 B008                <1>  mov al,eUpperCaseString
  3911 000000C6 CD30                <1>  int _svc
  3912                                  
  3913 000000C8 BE[CC010000]                                    mov     esi,tConCmdTbl                                  ;commands table
  3914 000000CD 31FF                                            xor     edi,edi                                         ;intialize command number
  3915 000000CF FC                                              cld                                                     ;forward strings
  3916 000000D0 AC                      .10                     lodsb                                                   ;command length
  3917 000000D1 0FB6C8                                          movzx   ecx,al                                          ;command length
  3918 000000D4 E30D                                            jecxz   .20                                             ;branch if end of table
  3919 000000D6 89F3                                            mov     ebx,esi                                         ;table entry address
  3920 000000D8 01CE                                            add     esi,ecx                                         ;next table entry address
  3921                                  
  3922                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3922 000000DA B001                <1>  mov al,eCompareMemory
  3922 000000DC CD30                <1>  int _svc
  3923                                  
  3924 000000DE E303                                            jecxz   .20                                             ;branch if equal
  3925 000000E0 47                                              inc     edi                                             ;increment command nbr
  3926 000000E1 EBED                                            jmp     .10                                             ;repeat
  3927 000000E3 89F8                    .20                     mov     eax,edi                                         ;command number
  3928 000000E5 5F                                              pop     edi                                             ;restore non-volatile regs
  3929 000000E6 5E                                              pop     esi                                             ;
  3930 000000E7 59                                              pop     ecx                                             ;
  3931 000000E8 5B                                              pop     ebx                                             ;
  3932 000000E9 C3                                              ret                                                     ;return
  3933                                  ;-----------------------------------------------------------------------------------------------------------------------
  3934                                  ;
  3935                                  ;       Routine:        ConClear
  3936                                  ;
  3937                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  3938                                  ;
  3939                                  ;-----------------------------------------------------------------------------------------------------------------------
  3940                                  ConClear                clearConsoleScreen                                      ;clear console screen
  3940                              <1> ConClear :
  3940 000000EA B000                <1>  mov al,eClearConsoleScreen
  3940 000000EC CD30                <1>  int _svc
  3941 000000EE C3                                              ret                                                     ;return
  3942                                  ;-----------------------------------------------------------------------------------------------------------------------
  3943                                  ;
  3944                                  ;       Routine:        ConExit
  3945                                  ;
  3946                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3947                                  ;
  3948                                  ;-----------------------------------------------------------------------------------------------------------------------
  3949                                  ConExit                 resetSystem                                             ;issue system reset
  3949                              <1> ConExit :
  3949 000000EF B006                <1>  mov al,eResetSystem
  3949 000000F1 CD30                <1>  int _svc
  3950 000000F3 C3                                              ret                                                     ;return
  3951                                  ;-----------------------------------------------------------------------------------------------------------------------
  3952                                  ;
  3953                                  ;       Routine:        ConInt6
  3954                                  ;
  3955                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  3956                                  ;
  3957                                  ;-----------------------------------------------------------------------------------------------------------------------
  3958 000000F4 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  3959 000000F6 C3                                              ret                                                     ;return (not executed)
  3960                                  ;-----------------------------------------------------------------------------------------------------------------------
  3961                                  ;
  3962                                  ;       Routine:        ConMem
  3963                                  ;
  3964                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  3965                                  ;
  3966                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  3967                                  ;
  3968                                  ;-----------------------------------------------------------------------------------------------------------------------
  3969 000000F7 53                      ConMem                  push    ebx                                             ;save non-volatile regs
  3970 000000F8 56                                              push    esi                                             ;
  3971 000000F9 57                                              push    edi                                             ;
  3972                                  ;
  3973                                  ;                       update the source address if a parameter is given
  3974                                  ;
  3975 000000FA BA10080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  3976 000000FF BB60080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  3977 00000104 E882FFFFFF                                      call    ConTakeToken                                    ;take first param as token
  3978 00000109 803D6008000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  3979 00000110 740E                                            je      .10                                             ;no, branch
  3980 00000112 BA60080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  3981                                  
  3982                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  3982 00000117 B003                <1>  mov al,eHexadecimalToUnsigned
  3982 00000119 CD30                <1>  int _svc
  3983                                  
  3984 0000011B A300080000                                      mov     [wdConsoleMemBase],eax                          ;save console memory address
  3985                                  ;
  3986                                  ;                       setup source address and row count
  3987                                  ;
  3988 00000120 8B3500080000            .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  3989 00000126 31C9                                            xor     ecx,ecx                                         ;zero register
  3990 00000128 B110                                            mov     cl,16                                           ;row count
  3991                                  ;
  3992                                  ;                       start the row with the source address in hexadecimal
  3993                                  ;
  3994 0000012A 51                      .20                     push    ecx                                             ;save remaining rows
  3995 0000012B BFB0080000                                      mov     edi,wzConsoleOutBuffer                          ;output buffer address
  3996 00000130 89FA                                            mov     edx,edi                                         ;output buffer address
  3997 00000132 89F1                                            mov     ecx,esi                                         ;console memory address
  3998                                  
  3999                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  3999 00000134 B007                <1>  mov al,eUnsignedToHexadecimal
  3999 00000136 CD30                <1>  int _svc
  4000                                  
  4001 00000138 83C708                                          add     edi,8                                           ;end of memory addr hexnum
  4002 0000013B B020                                            mov     al,' '                                          ;ascii space
  4003 0000013D AA                                              stosb                                                   ;store delimiter
  4004                                  ;
  4005                                  ;                       output 16 ASCII hexadecimal byte values for the row
  4006                                  ;
  4007 0000013E 31C9                                            xor     ecx,ecx                                         ;zero register
  4008 00000140 B110                                            mov     cl,16                                           ;loop count
  4009 00000142 51                      .30                     push    ecx                                             ;save loop count
  4010 00000143 AC                                              lodsb                                                   ;memory byte
  4011 00000144 88C4                                            mov     ah,al                                           ;memory byte
  4012 00000146 C0E804                                          shr     al,4                                            ;high-order in bits 3-0
  4013 00000149 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  4014 0000014B 3C3A                                            cmp     al,3ah                                          ;numeric range?
  4015 0000014D 7202                                            jb      .40                                             ;yes, skip ahead
  4016 0000014F 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  4017 00000151 AA                      .40                     stosb                                                   ;store ascii hexadecimal of high-order
  4018 00000152 88E0                                            mov     al,ah                                           ;low-order in bits 3-0
  4019 00000154 240F                                            and     al,0fh                                          ;mask out high-order bits
  4020 00000156 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  4021 00000158 3C3A                                            cmp     al,3ah                                          ;numeric range?
  4022 0000015A 7202                                            jb      .50                                             ;yes, skip ahead
  4023 0000015C 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  4024 0000015E AA                      .50                     stosb                                                   ;store ascii hexadecimal of low-order
  4025 0000015F B020                                            mov     al,' '                                          ;ascii space
  4026 00000161 AA                                              stosb                                                   ;store ascii space delimiter
  4027 00000162 59                                              pop     ecx                                             ;loop count
  4028 00000163 E2DD                                            loop    .30                                             ;next
  4029                                  ;
  4030                                  ;                       output printable ASCII character section for the row
  4031                                  ;
  4032 00000165 83EE10                                          sub     esi,16                                          ;reset source pointer
  4033 00000168 B110                                            mov     cl,16                                           ;loop count
  4034 0000016A AC                      .60                     lodsb                                                   ;source byte
  4035 0000016B 3C20                                            cmp     al,32                                           ;printable? (low-range test)
  4036 0000016D 7204                                            jb      .70                                             ;no, skip ahead
  4037 0000016F 3C80                                            cmp     al,128                                          ;printable? (high-range test)
  4038 00000171 7202                                            jb      .80                                             ;yes, skip ahead
  4039 00000173 B020                    .70                     mov     al,' '                                          ;display space instead of printable
  4040 00000175 AA                      .80                     stosb                                                   ;store printable ascii byte
  4041 00000176 E2F2                                            loop    .60                                             ;next source byte
  4042 00000178 30C0                                            xor     al,al                                           ;nul-terminator
  4043 0000017A AA                                              stosb                                                   ;terminate output line
  4044                                  ;
  4045                                  ;                       display constructed output buffer and newline
  4046                                  ;
  4047                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  4047 0000017B BAB0080000          <1>  mov edx,%1
  4047 00000180 B005                <1>  mov al,ePutConsoleString
  4047 00000182 CD30                <1>  int _svc
  4048                                                          putConsoleString czNewLine                              ;display new line
  4048 00000184 BA[10020000]        <1>  mov edx,%1
  4048 00000189 B005                <1>  mov al,ePutConsoleString
  4048 0000018B CD30                <1>  int _svc
  4049                                  ;
  4050                                  ;                       repeat until all lines displayed and preserve source address
  4051                                  ;
  4052 0000018D 59                                              pop     ecx                                             ;remaining rows
  4053 0000018E E29A                                            loop    .20                                             ;next row
  4054 00000190 893500080000                                    mov     [wdConsoleMemBase],esi                          ;update console memory address
  4055 00000196 5F                                              pop     edi                                             ;restore regs
  4056 00000197 5E                                              pop     esi                                             ;
  4057 00000198 5B                                              pop     ebx                                             ;
  4058 00000199 C3                                              ret                                                     ;return
  4059                                  ;-----------------------------------------------------------------------------------------------------------------------
  4060                                  ;
  4061                                  ;       Routine:        ConVersion
  4062                                  ;
  4063                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  4064                                  ;
  4065                                  ;-----------------------------------------------------------------------------------------------------------------------
  4066                                  ConVersion              putConsoleString czTitle                                ;display version message
  4066                              <1> ConVersion :
  4066 0000019A BA[15020000]        <1>  mov edx,%1
  4066 0000019F B005                <1>  mov al,ePutConsoleString
  4066 000001A1 CD30                <1>  int _svc
  4067 000001A3 C3                                              ret                                                     ;return
  4068                                  ;-----------------------------------------------------------------------------------------------------------------------
  4069                                  ;
  4070                                  ;       Tables
  4071                                  ;
  4072                                  ;-----------------------------------------------------------------------------------------------------------------------
  4073                                                                                                                  ;---------------------------------------
  4074                                                                                                                  ;  Command Jump Table
  4075                                                                                                                  ;---------------------------------------
  4076                                  tConJmpTbl              equ     $                                               ;command jump table
  4077 000001A4 EF000000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  4078 000001A8 9A010000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  4079 000001AC F7000000                                        dd      ConMem          - ConCode                       ;memory command routine offset
  4080 000001B0 EA000000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  4081 000001B4 EF000000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  4082 000001B8 F4000000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  4083 000001BC EF000000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  4084 000001C0 EA000000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  4085 000001C4 F7000000                                        dd      ConMem          - ConCode                       ;mem command routine offset
  4086 000001C8 9A010000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  4087                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4088                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4089                                                                                                                  ;---------------------------------------
  4090                                                                                                                  ;  Command Name Table
  4091                                                                                                                  ;---------------------------------------
  4092                                  tConCmdTbl              equ     $                                               ;command name table
  4093 000001CC 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  4093 000001D5 00                 
  4094 000001D6 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  4095 000001DF 074D454D4F525900                                db      7,"MEMORY",0                                    ;memory command
  4096 000001E7 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  4097 000001EE 054558495400                                    db      5,"EXIT",0                                      ;exit command
  4098 000001F4 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  4099 000001FA 055155495400                                    db      5,"QUIT",0                                      ;quit command
  4100 00000200 04434C5300                                      db      4,"CLS",0                                       ;cls command
  4101 00000205 044D454D00                                      db      4,"MEM",0                                       ;mem command
  4102 0000020A 0456455200                                      db      4,"VER",0                                       ;ver command
  4103 0000020F 00                                              db      0                                               ;end of table
  4104                                  ;-----------------------------------------------------------------------------------------------------------------------
  4105                                  ;
  4106                                  ;       Constants
  4107                                  ;
  4108                                  ;-----------------------------------------------------------------------------------------------------------------------
  4109 00000210 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  4110 00000213 3A00                    czPrompt                db      ":",0                                           ;prompt string
  4111 00000215 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  4111 0000021E 65726174696E672053-
  4111 00000227 797374656D20312E30-
  4111 00000230 0D0A00             
  4112 00000233 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  4112 0000023C 6F6D6D616E640D0A00 
  4113 00000245 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  4114                                  %endif
  4115                                  %ifdef BUILDDISK
  4116                                  ;-----------------------------------------------------------------------------------------------------------------------
  4117                                  ;
  4118                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  4119                                  ;
  4120                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4121                                  ;
  4122                                  ;-----------------------------------------------------------------------------------------------------------------------
  4123                                  section                 unused                                                  ;unused disk space
  4124 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  4125                                  %endif
  4126                                  ;=======================================================================================================================
  4127                                  ;
  4128                                  ;       End of Program Code
  4129                                  ;
  4130                                  ;=======================================================================================================================
