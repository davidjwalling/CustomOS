     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.009
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support the "mem" and "memory" commands.
     8                                  ;
     9                                  ;       Revised:        July 4, 2018
    10                                  ;
    11                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    17                                  ;
    18                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;       Assembly Directives
    24                                  ;
    25                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    34                                  %define BUILDBOOT                                                               ;... build the boot sector
    35                                  %define BUILDCOM                                                                ;... and the OS kernel
    36                                  %endif
    37                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    38                                  %define BUILDBOOT                                                               ;... also build the boot sector
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;       Conventions
    43                                  ;
    44                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    45                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    46                                  ;                       Assembly operands begin in column 33.
    47                                  ;                       Inline comments begin in column 81.
    48                                  ;                       Lines should not extend beyond column 120.
    49                                  ;
    50                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    51                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    52                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    53                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    54                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    55                                  ;                       ouput buffers, respectively.
    56                                  ;
    57                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    58                                  ;                       Negative relative call or jump addresses indicate reuse.
    59                                  ;
    60                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    61                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    62                                  ;                       Register names in comments are in upper case (EAX, EDI).
    63                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    64                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    65                                  ;                       register contents on entry and exit.
    66                                  ;
    67                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    68                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    69                                  ;                       The 2nd letter of the constant label indicates the storage type.
    70                                  ;
    71                                  ;                       cq......        constant quad-word (dq)
    72                                  ;                       cd......        constant double-word (dd)
    73                                  ;                       cw......        constant word (dw)
    74                                  ;                       cb......        constant byte (db)
    75                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    76                                  ;
    77                                  ;       Instructions:   32-bit instructions are generally favored.
    78                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    79                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    80                                  ;
    81                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    82                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    83                                  ;
    84                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    85                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    86                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    87                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    88                                  ;                       Octal literal values are avoided.
    89                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    90                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    91                                  ;
    92                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    93                                  ;                       Macro names describe an action and so DO begin with a verb.
    94                                  ;
    95                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    96                                  ;                       Buffers are kept to as small a size as practicable.
    97                                  ;                       Data and code intermingling is avoided wherever possible.
    98                                  ;
    99                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   100                                  ;                       Register names in source code are in lower case (eax, edx).
   101                                  ;
   102                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   103                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   104                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   105                                  ;
   106                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   107                                  ;                       Routine names begin with a verb (Get, Read, Load).
   108                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   109                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   110                                  ;                       function but begin with a leading underscore (_) character.
   111                                  ;
   112                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   113                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   114                                  ;
   115                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   116                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   117                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   118                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   119                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   120                                  ;
   121                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   122                                  ;                       The 2nd letter of the variable label indicates the storage type.
   123                                  ;
   124                                  ;                       wq......        variable quad-word (resq)
   125                                  ;                       wd......        variable double-word (resd)
   126                                  ;                       ww......        variable word (resw)
   127                                  ;                       wb......        variable byte (resb)
   128                                  ;                       ws......        writable structure
   129                                  ;
   130                                  ;-----------------------------------------------------------------------------------------------------------------------
   131                                  ;=======================================================================================================================
   132                                  ;
   133                                  ;       Equates
   134                                  ;
   135                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   136                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   137                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   138                                  ;       sets. Equates here are defined in the following groupings:
   139                                  ;
   140                                  ;       Hardware-Defined Values
   141                                  ;
   142                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   143                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   144                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   145                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   146                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   147                                  ;       EX86...         Intel x86 CPU architecture values
   148                                  ;
   149                                  ;       Firmware-Defined Values
   150                                  ;
   151                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   152                                  ;
   153                                  ;       Standards-Based Values
   154                                  ;
   155                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   156                                  ;
   157                                  ;       Operating System Values
   158                                  ;
   159                                  ;       EBOOT...        Boot sector and loader values
   160                                  ;       ECON...         Console values (dimensions and attributes)
   161                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   162                                  ;       EKEYF...        Keyboard status flags
   163                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   164                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   165                                  ;       EMSG...         Message identifers
   166                                  ;
   167                                  ;=======================================================================================================================
   168                                  ;-----------------------------------------------------------------------------------------------------------------------
   169                                  ;
   170                                  ;       Hardware-Defined Values
   171                                  ;
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;
   175                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   176                                  ;
   177                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   178                                  ;       for CGA, EGA, VGA and compatible video modes.
   179                                  ;
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   182                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   183                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   184                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   185                                  ;-----------------------------------------------------------------------------------------------------------------------
   186                                  ;
   187                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   188                                  ;
   189                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   190                                  ;
   191                                  ;-----------------------------------------------------------------------------------------------------------------------
   192                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   193                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   194                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   195                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   196                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   197                                  ;-----------------------------------------------------------------------------------------------------------------------
   198                                  ;
   199                                  ;       8042 Keyboard Controller                                                EKEYB...
   200                                  ;
   201                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   202                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   203                                  ;
   204                                  ;-----------------------------------------------------------------------------------------------------------------------
   205                                  EKEYBPORTDATA           equ     060h                                            ;data port
   206                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   207                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   208                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   209                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   210                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   211                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   212                                                                                                                  ;---------------------------------------
   213                                                                                                                  ;       Keyboard Scan Codes
   214                                                                                                                  ;---------------------------------------
   215                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   216                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   217                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   218                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   219                                  EKEYBSLASH              equ     035h                                            ;slash
   220                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   221                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   222                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   223                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   224                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   225                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   226                                  EKEYBUP                 equ     080h                                            ;up
   227                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   228                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   229                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   230                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   231                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   232                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   233                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   234                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   235                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   236                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   237                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   238                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   239                                  ;-----------------------------------------------------------------------------------------------------------------------
   240                                  ;
   241                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   242                                  ;
   243                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   244                                  ;       external devices and signals a hardware interrupt to the CPU.
   245                                  ;
   246                                  ;-----------------------------------------------------------------------------------------------------------------------
   247                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   248                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   249                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   250                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   251                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   252                                  ;-----------------------------------------------------------------------------------------------------------------------
   253                                  ;
   254                                  ;       8253 Programmable Interval Timer                                        EPIT...
   255                                  ;
   256                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   257                                  ;       approximately 18.2 times per second.
   258                                  ;
   259                                  ;-----------------------------------------------------------------------------------------------------------------------
   260                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  ;
   263                                  ;       x86 CPU Architecture                                                    ;EX86...
   264                                  ;
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;
   269                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   270                                  ;
   271                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   272                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   273                                  ;
   274                                  ;       0.......        Segment is not present in memory (triggers int 11)
   275                                  ;       1.......        Segment is present in memory
   276                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   277                                  ;       ...0....        Segment is a system segment
   278                                  ;       ...00010                Local Descriptor Table
   279                                  ;       ...00101                Task Gate
   280                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   281                                  ;       ...01100                Call Gate (386)
   282                                  ;       ...01110                Interrupt Gate (386)
   283                                  ;       ...01111                Trap Gate (386)
   284                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   285                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   286                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   287                                  ;
   288                                  ;-----------------------------------------------------------------------------------------------------------------------
   289                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   290                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   291                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   292                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   293                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   294                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   295                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   296                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  ;
   299                                  ;       Firmware-Defined Values
   300                                  ;
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  ;
   304                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   305                                  ;
   306                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   307                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   308                                  ;
   309                                  ;-----------------------------------------------------------------------------------------------------------------------
   310                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   311                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   312                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   313                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   314                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   315                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   316                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   317                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   318                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   319                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   320                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   321                                  ;-----------------------------------------------------------------------------------------------------------------------
   322                                  ;
   323                                  ;       Standards-Based Values
   324                                  ;
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;
   328                                  ;       ASCII                                                                   EASCII...
   329                                  ;
   330                                  ;-----------------------------------------------------------------------------------------------------------------------
   331                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   332                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   333                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   334                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   335                                  EASCIISPACE             equ     020h                                            ;space
   336                                  EASCIIUPPERA            equ     041h                                            ;'A'
   337                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   338                                  EASCIILOWERA            equ     061h                                            ;'a'
   339                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   340                                  EASCIITILDE             equ     07Eh                                            ;'~'
   341                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   342                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   343                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   344                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   345                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   346                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   347                                  EASCIICASE              equ     00100000b                                       ;case bit
   348                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   349                                  ;-----------------------------------------------------------------------------------------------------------------------
   350                                  ;
   351                                  ;       Operating System Values
   352                                  ;
   353                                  ;-----------------------------------------------------------------------------------------------------------------------
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  ;
   356                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   357                                  ;
   358                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   359                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   360                                  ;
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   363                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   364                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   365                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   366                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   367                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   368                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   369                                  ;-----------------------------------------------------------------------------------------------------------------------
   370                                  ;       Console Constants                                                       ECON...
   371                                  ;-----------------------------------------------------------------------------------------------------------------------
   372                                  ECONCOLS                equ     80                                              ;columns per row
   373                                  ECONROWS                equ     24                                              ;console rows
   374                                  ECONOIAROW              equ     24                                              ;operator information area row
   375                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   376                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   377                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   378                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   379                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   380                                  ;-----------------------------------------------------------------------------------------------------------------------
   381                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   382                                  ;-----------------------------------------------------------------------------------------------------------------------
   383                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   384                                  EGDTCGA                 equ     020h                                            ;cga video selector
   385                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   386                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   387                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   388                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   389                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   390                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   391                                  ;-----------------------------------------------------------------------------------------------------------------------
   392                                  ;       Keyboard Flags                                                          EKEYF...
   393                                  ;-----------------------------------------------------------------------------------------------------------------------
   394                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   395                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   396                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   397                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   398                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   399                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   400                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   401                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   402                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   403                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   404                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   405                                  ;-----------------------------------------------------------------------------------------------------------------------
   406                                  ;       Kernel Constants                                                        EKRN...
   407                                  ;-----------------------------------------------------------------------------------------------------------------------
   408                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   409                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   410                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   411                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   412                                  ;-----------------------------------------------------------------------------------------------------------------------
   413                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   414                                  ;-----------------------------------------------------------------------------------------------------------------------
   415                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   416                                  ;-----------------------------------------------------------------------------------------------------------------------
   417                                  ;       Message Identifiers                                                     EMSG...
   418                                  ;-----------------------------------------------------------------------------------------------------------------------
   419                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   420                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   421                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   422                                  ;=======================================================================================================================
   423                                  ;
   424                                  ;       Structures
   425                                  ;
   426                                  ;=======================================================================================================================
   427                                  ;-----------------------------------------------------------------------------------------------------------------------
   428                                  ;
   429                                  ;       MQUEUE
   430                                  ;
   431                                  ;       The MQUEUE structure maps memory used for a message queue.
   432                                  ;
   433                                  ;-----------------------------------------------------------------------------------------------------------------------
   434                                  struc                   MQUEUE
   435 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   436 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   437 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   438                                  endstruc
   439                                  ;-----------------------------------------------------------------------------------------------------------------------
   440                                  ;
   441                                  ;       OSDATA
   442                                  ;
   443                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   444                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   445                                  ;
   446                                  ;-----------------------------------------------------------------------------------------------------------------------
   447                                  struc                   OSDATA
   448 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   449 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   450 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   451 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   452 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   453 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   454 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   455 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   456 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   457 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   458 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   459 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   460 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   461 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   462 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   463 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   464 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   465 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   466 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   467 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   468 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   469 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   470 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   471 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   472 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   473 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   474 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   475 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   476 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   477 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   478 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   479 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   480 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   481 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   482 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   483 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   484 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   485 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   486 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   487 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   488 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   489 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   490 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   491 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   492 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   493 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   494 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   495 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   496 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   497 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   498 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   499 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   500 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   501 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   502 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   503 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   504 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   505 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   506 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   507 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   508 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   509 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   510 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   511 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   512 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   513 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   514 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   515 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   516 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   517 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   518 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   519 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   520 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   521 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   522 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   523 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   524 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   525 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   526 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   527 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   528 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   529 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   530 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   531 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   532 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   533 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   534 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   535 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   536 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   537 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   538 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   539 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   540 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   541 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   542 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   543 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   544 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   545 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   546 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   547 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   548 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   549                                  ;-----------------------------------------------------------------------------------------------------------------------
   550                                  ;
   551                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   552                                  ;
   553                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   554                                  ;
   555                                  ;-----------------------------------------------------------------------------------------------------------------------
   556                                  ECONDATA                equ     ($)
   557 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   558 00000804 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   559 00000805 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   560 00000806 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   561 00000807 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   562 00000808 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   563 00000809 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   564 0000080A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   565 0000080B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   566 0000080C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   567 0000080D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   568 0000080E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   569 0000080F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   570 00000810 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   571 00000860 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   572 000008B0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   573                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   574                                  ;-----------------------------------------------------------------------------------------------------------------------
   575                                  ;
   576                                  ;       End of OS Variables
   577                                  ;
   578                                  ;-----------------------------------------------------------------------------------------------------------------------
   579                                  endstruc
   580                                  ;-----------------------------------------------------------------------------------------------------------------------
   581                                  ;
   582                                  ;       Macros
   583                                  ;
   584                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   585                                  ;
   586                                  ;-----------------------------------------------------------------------------------------------------------------------
   587                                  %macro                  mint    1
   588                                  _%1                     equ     ($-$$) / EX86DESCLEN
   589                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   590                                  %endmacro
   591                                  %macro                  mtrap   1
   592                                  _%1                     equ     ($-$$) / EX86DESCLEN
   593                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   594                                  %endmacro
   595                                  %macro                  menter  1
   596                                  ?%1                     equ     ($-$$)
   597                                  %endmacro
   598                                  %macro                  tsvce   1
   599                                  e%1                     equ     ($-tsvc)/4
   600                                                          dd      %1
   601                                  %endmacro
   602                                  %ifdef BUILDBOOT
   603                                  ;=======================================================================================================================
   604                                  ;
   605                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   606                                  ;
   607                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   608                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   609                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   610                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   611                                  ;
   612                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   613                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   614                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   615                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   616                                  ;       immediately followed by a disk parameter table.
   617                                  ;
   618                                  ;=======================================================================================================================
   619                                                          cpu     8086                                            ;assume minimal CPU
   620                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   621                                                          bits    16                                              ;16-bit code at power-up
   622                                  %ifdef BUILDPREP
   623                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   624                                  %else
   625 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   626                                  %endif
   627                                  ;-----------------------------------------------------------------------------------------------------------------------
   628                                  ;
   629                                  ;       Disk Parameter Table
   630                                  ;
   631                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   632                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   633                                  ;
   634                                  ;-----------------------------------------------------------------------------------------------------------------------
   635 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   636 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   637 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   638 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   639 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   640 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   641 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   642 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   643 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   644                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   645 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   646 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   647 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   648                                  ;
   649                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   650                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   651                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   652                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   653                                  ;       given several possible starting values for CS:IP.
   654                                  ;
   655                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   656 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   657                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   658 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   659 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   660 00000025 B104                                            mov     cl,4                                            ;shift count
   661 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   662 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   663 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   664                                  ;
   665                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   666                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   667                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   668                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   669                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   670                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   671                                  ;
   672 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   673 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   674 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   675 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   676 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   677                                  ;
   678                                  ;       Our boot addressability is now set up according to the following diagram.
   679                                  ;
   680                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   681                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   682                                  ;                               |  256 = 100h bytes                             |
   683                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   684                                  ;                               |  Boot Sector (vstart=0100h)                   |
   685                                  ;                               |  1 sector = 512 = 200h bytes                  |
   686                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   687                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   688                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   689                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   690                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   691                                  ;                               |  2 sectors = 1024 = 400h bytes
   692                                  ;                       009400  +-----------------------------------------------+ DS:1900
   693                                  ;
   694                                  ;       On entry, DL indicates the drive being booted from.
   695                                  ;
   696 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   697                                  ;
   698                                  ;       Compute directory i/o buffer address.
   699                                  ;
   700 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   701 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   702 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   703 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   704                                  ;
   705                                  ;       Compute segment where os.com will be loaded.
   706                                  ;
   707 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   708 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   709 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   710 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   711                                  ;
   712                                  ;       Set the video mode to 80 column, 25 row, text.
   713                                  ;
   714 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   715 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   716                                  ;
   717                                  ;       Write a message to the console so we know we have our addressability established.
   718                                  ;
   719 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   720 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   721                                  ;
   722                                  ;       Initialize the number of directory sectors to search.
   723                                  ;
   724 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   725 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   726                                  ;
   727                                  ;       Compute number of directory sectors and initialize overhead count.
   728                                  ;
   729 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   730 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   731 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   732 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   733                                  ;
   734                                  ;       Compute directory entries per sector.
   735                                  ;
   736 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   737 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   738 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   739                                  ;
   740                                  ;       Compute first logical directory sector and update overhead count.
   741                                  ;
   742 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   743 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   744 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   745 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   746 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   747 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   748                                  ;
   749                                  ;       Read directory sector.
   750                                  ;
   751 0000008E B001                    .30                     mov     al,1                                            ;sector count
   752 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   753 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   754 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   755                                  ;
   756                                  ;       Setup variables to search this directory sector.
   757                                  ;
   758 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   759 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   760 000000A1 7603                                            jna     .40                                             ;no, continue
   761 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   762 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   763 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   764 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   765                                  ;
   766                                  ;       Loop through directory sectors searching for kernel program.
   767                                  ;
   768 000000B1 56                      .50                     push    si                                              ;save kernel name address
   769 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   770 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   771 000000B6 FC                                              cld                                                     ;forward strings
   772 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   773 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   774 000000BA 5E                                              pop     si                                              ;restore kernel name address
   775 000000BB 7418                                            je      .60                                             ;exit loop if found
   776 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   777 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   778 000000C2 75ED                                            jnz     .50                                             ;next entry
   779                                  ;
   780                                  ;       Repeat search if we are not at the end of the directory.
   781                                  ;
   782 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   783 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   784 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   785 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   786 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   787                                  ;
   788                                  ;       If we find the kernel program in the directory, read the FAT.
   789                                  ;
   790 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   791 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   792 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   793 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   794 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   795 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   796                                  ;
   797                                  ;       Get the starting cluster of the kernel program and target address.
   798                                  ;
   799 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   800 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   801                                  ;
   802                                  ;       Read each program cluster into RAM.
   803                                  ;
   804 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   805 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   806 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   807 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   808 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   809 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   810 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   811 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   812 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   813                                  ;
   814                                  ;       Update buffer pointer for next cluster.
   815                                  ;
   816 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   817 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   818 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   819 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   820 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   821                                  ;
   822                                  ;       Compute next cluster number.
   823                                  ;
   824 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   825 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   826 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   827 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   828 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   829 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   830 00000120 83E701                                          and     di,1                                            ;get low bit
   831 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   832 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   833 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   834                                  ;
   835                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   836                                  ;
   837 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   838 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   839 00000130 B104                                            mov     cl,4                                            ;shift count
   840 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   841 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   842 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   843 0000013A 75B2                                            jne     .70                                             ;no, continue
   844                                  ;
   845                                  ;       Transfer control to the operating system program.
   846                                  ;
   847 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   848 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   849 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   850                                  ;
   851                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   852                                  ;
   853 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   854 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   855 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   856 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   857 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   858 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   859 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   860 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   861 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   862 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   863                                  ;
   864                                  ;       Try maxtries times to read sector.
   865                                  ;
   866 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   867 00000160 53                      .10                     push    bx                                              ;save buffer address
   868 00000161 51                                              push    cx                                              ;save retry count
   869 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   870 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   871 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   872 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   873 0000016F 59                                              pop     cx                                              ;restore retry count
   874 00000170 5B                                              pop     bx                                              ;restore buffer address
   875 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   876 00000173 E2EB                                            loop    .10                                             ;retry
   877                                  ;
   878                                  ;       Handle disk error: convert to ASCII and store in error string.
   879                                  ;
   880 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   881 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   882 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   883 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   884 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   885 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   886 00000183 7203                                            jb      .20                                             ;continue if numeral
   887 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   888 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   889 0000018A 7203                                            jb      .30                                             ;continue if numeral
   890 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   891 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   892 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   893 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   894                                  ;
   895                                  ;       Wait for a key press.
   896                                  ;
   897 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   898 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   899 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   900 0000019E FB                                              sti                                                     ;enable maskable interrupts
   901 0000019F F4                                              hlt                                                     ;wait for interrupt
   902 000001A0 EBF6                                            jmp     .10                                             ;repeat
   903                                  ;
   904                                  ;       Reset the system.
   905                                  ;
   906 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   907 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   908 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   909 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   910 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   911                                  ;
   912                                  ;       Display text message.
   913                                  ;
   914 000001AA FC                      BootPrint               cld                                                     ;forward strings
   915 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   916 000001AC 84C0                                            test    al,al                                           ;end of string?
   917 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   918 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   919 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   920 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   921 000001B6 C3                      BootReturn              ret                                                     ;return
   922                                  ;-----------------------------------------------------------------------------------------------------------------------
   923                                  ;
   924                                  ;       Constants
   925                                  ;
   926                                  ;-----------------------------------------------------------------------------------------------------------------------
   927 000001B7 90                                              align   2
   928 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   929 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   929 000001C3 4F4D               
   930 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   930 000001CE 530D0A00           
   931 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   931 000001DB 7220               
   932 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   933 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   933 000001E9 6700               
   934                                  ;-----------------------------------------------------------------------------------------------------------------------
   935                                  ;
   936                                  ;       Work Areas
   937                                  ;
   938                                  ;-----------------------------------------------------------------------------------------------------------------------
   939 000001EB 90                                              align   2
   940 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   941 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   942 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   943 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   944 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   945                                  wwReadCountCommand      equ     $                                               ;read count and command
   946 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   947 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   948                                  wwDriveHead             equ     $                                               ;drive, head (word)
   949 000001F8 00                      wbDrive                 db      0                                               ;drive
   950 000001F9 00                      wbHead                  db      0                                               ;head
   951                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   952 000001FA 00                                              db      0                                               ;sector
   953 000001FB 00                      wbTrack                 db      0                                               ;track
   954 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   955 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   956                                  %endif
   957                                  %ifdef BUILDPREP
   958                                  ;=======================================================================================================================
   959                                  ;
   960                                  ;       Diskette Preparation Code
   961                                  ;
   962                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   963                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   964                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   965                                  ;
   966                                  ;=======================================================================================================================
   967                                  ;
   968                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   969                                  ;
   970                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   971                                                          call    BootPrint                                       ;display message
   972                                  ;
   973                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   974                                  ;
   975                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   976                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   977                                                          jnz     .20                                             ;continue if key pressed
   978                                                          sti                                                     ;enable interrupts
   979                                                          hlt                                                     ;wait for interrupt
   980                                                          jmp     .10                                             ;repeat
   981                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   982                                                          je      .30                                             ;yes, branch
   983                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   984                                                          jne     .10                                             ;no, repeat
   985                                                          jmp     .120                                            ;yes, exit program
   986                                  ;
   987                                  ;       Display writing-sector message and patch the JMP instruction.
   988                                  ;
   989                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   990                                                          call    BootPrint                                       ;display message
   991                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   992                                                          mov     ax,01Bh                                         ;address past disk parameter table
   993                                                          mov     [bx],ax                                         ;update the JMP instruction
   994                                  ;
   995                                  ;       Try to read the boot sector.
   996                                  ;
   997                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   998                                  .40                     push    cx                                              ;save remaining tries
   999                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1000                                                          mov     dx,0                                            ;head zero, drive zero
  1001                                                          mov     cx,1                                            ;track zero, sector one
  1002                                                          mov     al,1                                            ;one sector
  1003                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1004                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1005                                                          pop     cx                                              ;restore remaining retries
  1006                                                          jnc     .50                                             ;skip ahead if successful
  1007                                                          loop    .40                                             ;try again
  1008                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1009                                                          jmp     .70                                             ;branch to error routine
  1010                                  ;
  1011                                  ;       Copy diskette parms from input buffer to output buffer.
  1012                                  ;
  1013                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1014                                                          add     si,11                                           ;skip over JMP and system ID
  1015                                                          mov     di,Boot                                         ;output buffer address
  1016                                                          add     di,11                                           ;skip over JMP and system ID
  1017                                                          mov     cx,19                                           ;length of diskette parameters
  1018                                                          cld                                                     ;forward string copies
  1019                                                          rep     movsb                                           ;copy diskette parameters
  1020                                  ;
  1021                                  ;       Try to write boot sector to diskette.
  1022                                  ;
  1023                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1024                                  .60                     push    cx                                              ;save remaining tries
  1025                                                          mov     bx,Boot                                         ;output buffer address
  1026                                                          mov     dx,0                                            ;head zero, drive zero
  1027                                                          mov     cx,1                                            ;track zero, sector one
  1028                                                          mov     al,1                                            ;one sector
  1029                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1030                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1031                                                          pop     cx                                              ;restore remaining retries
  1032                                                          jnc     .100                                            ;skip ahead if successful
  1033                                                          loop    .60                                             ;try again
  1034                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1035                                  ;
  1036                                  ;       Convert the error code to ASCII and display the error message.
  1037                                  ;
  1038                                  .70                     push    ax                                              ;save error code
  1039                                                          mov     al,ah                                           ;copy error code
  1040                                                          mov     ah,0                                            ;AX = error code
  1041                                                          mov     dl,10h                                          ;hexadecimal divisor
  1042                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1043                                                          or      ax,03030h                                       ;add ASCII zone digits
  1044                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1045                                                          jb      .80                                             ;yes, continue
  1046                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1047                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1048                                                          jb      .90                                             ;yes, continue
  1049                                                          add     al,7                                            ;no, make ASCII
  1050                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1051                                                          call    BootPrint                                       ;write error message
  1052                                                          pop     ax                                              ;restore error code
  1053                                  ;
  1054                                  ;       Display the completion message.
  1055                                  ;
  1056                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1057                                                          mov     al,ah                                           ;BIOS return code
  1058                                                          cmp     al,0                                            ;success?
  1059                                                          je      .110                                            ;yes, continue
  1060                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1061                                                          cmp     al,1                                            ;disk parameter error?
  1062                                                          je      .110                                            ;yes, continue
  1063                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1064                                                          cmp     al,2                                            ;address mark not found?
  1065                                                          je      .110                                            ;yes, continue
  1066                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1067                                                          cmp     al,3                                            ;protected disk?
  1068                                                          je      .110                                            ;yes, continue
  1069                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1070                                                          cmp     al,6                                            ;diskette removed?
  1071                                                          je      .110                                            ;yes, continue
  1072                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1073                                                          cmp     al,80H                                          ;drive timed out?
  1074                                                          je      .110                                            ;yes, continue
  1075                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1076                                  .110                    call    BootPrint                                       ;display result message
  1077                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1078                                                          int     021h                                            ;terminate DOS program
  1079                                                          ret                                                     ;return (should not execute)
  1080                                  ;-----------------------------------------------------------------------------------------------------------------------
  1081                                  ;
  1082                                  ;       Diskette Preparation Messages
  1083                                  ;
  1084                                  ;-----------------------------------------------------------------------------------------------------------------------
  1085                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1086                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1087                                                          db      13,10
  1088                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1089                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1090                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1091                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1092                                                          db      13,10,0
  1093                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1094                                                          db      13,10,0
  1095                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1096                                                          db      13,10,0
  1097                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1098                                                          db      13,10,0
  1099                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1100                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1101                                                          db      13,10,0
  1102                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1103                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1104                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1105                                                          db      13,10,"and retry."
  1106                                                          db      13,10,0
  1107                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1108                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1109                                                          db      13,10,"using another diskette."
  1110                                                          db      13,10,0
  1111                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1112                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1113                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1114                                                          db      13,10,0
  1115                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1116                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1117                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1118                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1119                                                          db      13,10,"is properly inserted in the diskette drive."
  1120                                                          db      13,10,0
  1121                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1122                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1123                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1124                                                          db      13,10,0
  1125                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1126                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1127                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1128                                                          db      13,10,0
  1129                                  wcPrepInBuf             equ     $
  1130                                  %endif
  1131                                  %ifdef BUILDDISK
  1132                                  ;=======================================================================================================================
  1133                                  ;
  1134                                  ;       File Allocation Tables
  1135                                  ;
  1136                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1137                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1138                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1139                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1140                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1141                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1142                                  ;       the last cluster in the chain.
  1143                                  ;
  1144                                  ;       Every three bytes encode two FAT entries as follows:
  1145                                  ;
  1146                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1147                                  ;
  1148                                  ;=======================================================================================================================
  1149                                  ;-----------------------------------------------------------------------------------------------------------------------
  1150                                  ;
  1151                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1152                                  ;
  1153                                  ;-----------------------------------------------------------------------------------------------------------------------
  1154                                  section                 fat1                                                    ;first copy of FAT
  1155                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1156                                                          db      005h,060h,000h, 007h,080h,000h
  1157                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1158                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1159                                                          db      011h,020h,001h, 013h,040h,001h
  1160                                                          db      015h,060h,001h, 017h,080h,001h
  1161                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1162                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1163                                                          db      021h,020h,002h, 023h,040h,002h
  1164                                                          db      025h,060h,002h, 027h,080h,002h
  1165                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1166                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1167                                  ;-----------------------------------------------------------------------------------------------------------------------
  1168                                  ;
  1169                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1170                                  ;
  1171                                  ;-----------------------------------------------------------------------------------------------------------------------
  1172                                  section                 fat2                                                    ;second copy of FAT
  1173                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1174                                                          db      005h,060h,000h, 007h,080h,000h
  1175                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1176                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1177                                                          db      011h,020h,001h, 013h,040h,001h
  1178                                                          db      015h,060h,001h, 017h,080h,001h
  1179                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1180                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1181                                                          db      021h,020h,002h, 023h,040h,002h
  1182                                                          db      025h,060h,002h, 027h,080h,002h
  1183                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1184                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1185                                  ;-----------------------------------------------------------------------------------------------------------------------
  1186                                  ;
  1187                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1188                                  ;
  1189                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1190                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1191                                  ;       copy.
  1192                                  ;
  1193                                  ;-----------------------------------------------------------------------------------------------------------------------
  1194                                  section                 dir                                                     ;diskette directory
  1195                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1196                                                          db      020h                                            ;attribute (archive bit set)
  1197                                                          times   10 db 0                                         ;unused
  1198                                                          dw      0h                                              ;time
  1199                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1200                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1201                                                          dw      2                                               ;first cluster
  1202                                                          dd      05400h                                          ;file size
  1203                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1204                                  %endif
  1205                                  %ifdef BUILDCOM
  1206                                  ;=======================================================================================================================
  1207                                  ;
  1208                                  ;       OS.COM
  1209                                  ;
  1210                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1211                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1212                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1213                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1214                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1215                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1216                                  ;
  1217                                  ;       Our loader addressability is set up according to the following diagram.
  1218                                  ;
  1219                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1220                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1221                                  ;                               |  256 = 100h bytes                             |
  1222                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1223                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1224                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1225                                  ;                       007e00  +-----------------------------------------------+
  1226                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1227                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1228                                  ;                               |                                               |
  1229                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1230                                  ;                               |                                               |
  1231                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1232                                  ;                               |  Loader Code                                  |
  1233                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1234                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1235                                  ;
  1236                                  ;=======================================================================================================================
  1237                                  ;-----------------------------------------------------------------------------------------------------------------------
  1238                                  ;
  1239                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1240                                  ;
  1241                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1242                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1243                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1244                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1245                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1246                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1247                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1248                                  ;       registers.
  1249                                  ;
  1250                                  ;-----------------------------------------------------------------------------------------------------------------------
  1251                                                          cpu     8086                                            ;assume minimal CPU
  1252                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1253                                                          bits    16                                              ;this is 16-bit code
  1254                                  Loader                  push    cs                                              ;use the code segment
  1255                                                          pop     ds                                              ;...as our data segment
  1256                                                          push    cs                                              ;use the code segment
  1257                                                          pop     es                                              ;...as our extra segment
  1258                                  ;
  1259                                  ;       Write a message to the console so we know we have our addressability established.
  1260                                  ;
  1261                                                          mov     si,czStartingMsg                                ;starting message
  1262                                                          call    PutTTYString                                    ;display loader message
  1263                                  ;
  1264                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1265                                  ;
  1266                                                          call    GetCPUType                                      ;AL = cpu type
  1267                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1268                                                          cmp     al,3                                            ;80386+?
  1269                                                          jb      LoaderExit                                      ;no, exit with error message
  1270                                                          cpu     386                                             ;allow 80386 instructions
  1271                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1272                                                          call    PutTTYString                                    ;display message
  1273                                  ;
  1274                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1275                                  ;
  1276                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1277                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1278                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1279                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1280                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1281                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1282                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1283                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1284                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1285                                                          call    PutTTYString                                    ;display message
  1286                                  ;
  1287                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1288                                  ;
  1289                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1290                                                          pop     es                                              ;... as target segment
  1291                                                          xor     di,di                                           ;ES:DI = target address
  1292                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1293                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1294                                                          cld                                                     ;forward strings
  1295                                                          rep     movsb                                           ;copy kernel image
  1296                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1297                                                          call    PutTTYString                                    ;display message
  1298                                  ;
  1299                                  ;       Switch to protected mode.
  1300                                  ;
  1301                                                          xor     si,si                                           ;ES:SI = gdt addr
  1302                                                          mov     ss,si                                           ;protected mode ss
  1303                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1304                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1305                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1306                                                          mov     dx,001Fh                                        ;outer delay loop count
  1307                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1308                                                          loop    $                                               ;wait out pending interrupts
  1309                                                          dec     dx                                              ;restore outer loop count
  1310                                                          jnz     .10                                             ;continue outer loop
  1311                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1312                                  ;
  1313                                  ;       Enable hardware and maskable interrupts.
  1314                                  ;
  1315                                                          xor     al,al                                           ;enable all registers code
  1316                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1317                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1318                                                          sti                                                     ;enable maskable interrupts
  1319                                  ;
  1320                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1321                                  ;
  1322                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1323                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1324                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1325                                  ;-----------------------------------------------------------------------------------------------------------------------
  1326                                  ;
  1327                                  ;       Routine:        LoaderExit
  1328                                  ;
  1329                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1330                                  ;
  1331                                  ;       In:             DS:SI   string address
  1332                                  ;
  1333                                  ;-----------------------------------------------------------------------------------------------------------------------
  1334                                  LoaderExit              call    PutTTYString                                    ;display error message
  1335                                  ;
  1336                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1337                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1338                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1339                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1340                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1341                                  ;
  1342                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1343                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1344                                                          jnz     .40                                             ;exit if key pressed
  1345                                                          sti                                                     ;enable maskable interrupts
  1346                                                          hlt                                                     ;wait for interrupt
  1347                                                          jmp     .30                                             ;repeat until keypress
  1348                                  ;
  1349                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1350                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1351                                  ;       HLT until the system resets.
  1352                                  ;
  1353                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1354                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1355                                  .50                     sti                                                     ;enable maskable interrupts
  1356                                                          hlt                                                     ;stop until reset, int, nmi
  1357                                                          jmp     .50                                             ;loop until restart kicks in
  1358                                  ;-----------------------------------------------------------------------------------------------------------------------
  1359                                  ;
  1360                                  ;       Routine:        GetCPUType
  1361                                  ;
  1362                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1363                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1364                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1365                                  ;
  1366                                  ;       Out:            AX      0 = 808x, v20, etc.
  1367                                  ;                               1 = 80186
  1368                                  ;                               2 = 80286
  1369                                  ;                               3 = 80386
  1370                                  ;
  1371                                  ;-----------------------------------------------------------------------------------------------------------------------
  1372                                  GetCPUType              mov     al,1                                            ;AL = 1
  1373                                                          mov     cl,32                                           ;shift count
  1374                                                          shr     al,cl                                           ;try a 32-bit shift
  1375                                                          or      al,al                                           ;did the shift happen?
  1376                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1377                                                          cpu     186
  1378                                                          push    sp                                              ;save stack pointer
  1379                                                          pop     cx                                              ;...into cx
  1380                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1381                                                          jne     .10                                             ;yes, cpu is 80186
  1382                                                          cpu     286
  1383                                                          inc     ax                                              ;AX = 2
  1384                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1385                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1386                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1387                                                          jz      .10                                             ;yes, cpu is 80286
  1388                                                          inc     ax                                              ;AX = 3
  1389                                  .10                     ret                                                     ;return
  1390                                  ;-----------------------------------------------------------------------------------------------------------------------
  1391                                  ;
  1392                                  ;       Routine:        PutTTYString
  1393                                  ;
  1394                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1395                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1396                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1397                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1398                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1399                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1400                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1401                                  ;                       to LODSB is not needed.
  1402                                  ;
  1403                                  ;       In:             DS:SI   address of string
  1404                                  ;
  1405                                  ;       Out:            DF      0
  1406                                  ;                       ZF      1
  1407                                  ;                       AL      0
  1408                                  ;
  1409                                  ;-----------------------------------------------------------------------------------------------------------------------
  1410                                  PutTTYString            cld                                                     ;forward strings
  1411                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1412                                                          test    al,al                                           ;end of string?
  1413                                                          jz      .20                                             ;... yes, exit our loop
  1414                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1415                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1416                                                          jmp     .10                                             ;repeat until done
  1417                                  .20                     ret                                                     ;return
  1418                                  ;-----------------------------------------------------------------------------------------------------------------------
  1419                                  ;
  1420                                  ;       Loader Data
  1421                                  ;
  1422                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1423                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1424                                  ;
  1425                                  ;-----------------------------------------------------------------------------------------------------------------------
  1426                                                          align   2
  1427                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1428                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1429                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1430                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1431                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1432                                                          db      "Please press any key to restart the computer.",13,10,0
  1433                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1434                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1435                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1436                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1437                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1438                                  ;=======================================================================================================================
  1439                                  ;
  1440                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1441                                  ;
  1442                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1443                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1444                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1445                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1446                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1447                                  ;
  1448                                  ;=======================================================================================================================
  1449                                  ;=======================================================================================================================
  1450                                  ;
  1451                                  ;       Kernel Tables
  1452                                  ;
  1453                                  ;=======================================================================================================================
  1454                                  ;-----------------------------------------------------------------------------------------------------------------------
  1455                                  ;
  1456                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1457                                  ;
  1458                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1459                                  ;       first descriptor must be all nulls.
  1460                                  ;
  1461                                  ;       6   5         4         3         2         1         0
  1462                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1463                                  ;       ----------------------------------------------------------------
  1464                                  ;       h......hffffmmmma......ab......................bn..............n
  1465                                  ;       00000000                        all areas have base addresses below 2^24
  1466                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1467                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1468                                  ;                   1001                present, ring-0, selector
  1469                                  ;
  1470                                  ;       h...h   hi-order base address (bits 24-31)
  1471                                  ;       ffff    flags
  1472                                  ;       mmmm    hi-order limit (bits 16-19)
  1473                                  ;       a...a   access
  1474                                  ;       b...b   lo-order base address (bits 0-23)
  1475                                  ;       n...n   lo-order limit (bits 0-15)
  1476                                  ;
  1477                                  ;-----------------------------------------------------------------------------------------------------------------------
  1478                                  section                 gdt                                                     ;global descriptor table
  1479                                                          dq      0000000000000000h                               ;00 required null selector
  1480                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1481                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1482                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1483                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1484                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1485                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1486                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1487                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1488                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1489                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1490                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1491                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1492                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1493                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1494                                  ;-----------------------------------------------------------------------------------------------------------------------
  1495                                  ;
  1496                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1497                                  ;
  1498                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1499                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1500                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1501                                  ;
  1502                                  ;       6   5         4         3         2         1         0
  1503                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1504                                  ;       ----------------------------------------------------------------
  1505                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1506                                  ;
  1507                                  ;       h...h   high-order offset (bits 16-31)
  1508                                  ;       P       present (0=unused interrupt)
  1509                                  ;       zz      descriptor privilege level
  1510                                  ;       S       storage segment (must be zero for IDT)
  1511                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1512                                  ;       S...S   handling code selector in GDT
  1513                                  ;       l...l   lo-order offset (bits 0-15)
  1514                                  ;
  1515                                  ;-----------------------------------------------------------------------------------------------------------------------
  1516                                  section                 idt                                                     ;interrupt descriptor table
  1517                                                          mint    dividebyzero                                    ;00 divide by zero
  1518                                                          mint    singlestep                                      ;01 single step
  1519                                                          mint    nmi                                             ;02 non-maskable
  1520                                                          mint    break                                           ;03 break
  1521                                                          mint    into                                            ;04 into
  1522                                                          mint    bounds                                          ;05 bounds
  1523                                                          mint    badopcode                                       ;06 bad op code
  1524                                                          mint    nocoproc                                        ;07 no coprocessor
  1525                                                          mint    doublefault                                     ;08 double-fault
  1526                                                          mint    operand                                         ;09 operand
  1527                                                          mint    badtss                                          ;0a bad TSS
  1528                                                          mint    notpresent                                      ;0b not-present
  1529                                                          mint    stacklimit                                      ;0c stack limit
  1530                                                          mint    protection                                      ;0d general protection fault
  1531                                                          mint    int14                                           ;0e (reserved)
  1532                                                          mint    int15                                           ;0f (reserved)
  1533                                                          mint    coproccalc                                      ;10 (reserved)
  1534                                                          mint    int17                                           ;11 (reserved)
  1535                                                          mint    int18                                           ;12 (reserved)
  1536                                                          mint    int19                                           ;13 (reserved)
  1537                                                          mint    int20                                           ;14 (reserved)
  1538                                                          mint    int21                                           ;15 (reserved)
  1539                                                          mint    int22                                           ;16 (reserved)
  1540                                                          mint    int23                                           ;17 (reserved)
  1541                                                          mint    int24                                           ;18 (reserved)
  1542                                                          mint    int25                                           ;19 (reserved)
  1543                                                          mint    int26                                           ;1a (reserved)
  1544                                                          mint    int27                                           ;1b (reserved)
  1545                                                          mint    int28                                           ;1c (reserved)
  1546                                                          mint    int29                                           ;1d (reserved)
  1547                                                          mint    int30                                           ;1e (reserved)
  1548                                                          mint    int31                                           ;1f (reserved)
  1549                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1550                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1551                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1552                                                          mtrap   com2                                            ;23 IRQ3 com2
  1553                                                          mtrap   com1                                            ;24 IRQ4 com1
  1554                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1555                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1556                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1557                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1558                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1559                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1560                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1561                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1562                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1563                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1564                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1565                                                          mtrap   svc                                             ;30 OS services
  1566                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1567                                  ;=======================================================================================================================
  1568                                  ;
  1569                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1570                                  ;
  1571                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1572                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1573                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1574                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1575                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1576                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1577                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1578                                  ;
  1579                                  ;=======================================================================================================================
  1580                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1581                                                          cpu     386                                             ;allow 80386 instructions
  1582                                                          bits    32                                              ;this is 32-bit code
  1583                                  ;=======================================================================================================================
  1584                                  ;
  1585                                  ;       CPU Interrupt Handlers
  1586                                  ;
  1587                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1588                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1589                                  ;
  1590                                  ;=======================================================================================================================
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                  ;
  1593                                  ;       INT0    Divide By Zero
  1594                                  ;
  1595                                  ;-----------------------------------------------------------------------------------------------------------------------
  1596                                                          menter  dividebyzero                                    ;divide by zero
  1597                                                          push    0                                               ;store interrupt nbr
  1598                                                          push    czIntDivideByZero                               ;store message offset
  1599                                                          jmp     ReportInterrupt                                 ;report interrupt
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601                                  ;
  1602                                  ;       INT1    Single Step
  1603                                  ;
  1604                                  ;-----------------------------------------------------------------------------------------------------------------------
  1605                                                          menter  singlestep                                      ;single step
  1606                                                          push    1                                               ;store interrupt nbr
  1607                                                          push    czIntSingleStep                                 ;store message offset
  1608                                                          jmp     ReportInterrupt                                 ;report interrupt
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                  ;
  1611                                  ;       INT2    Non-Maskable Interrupt
  1612                                  ;
  1613                                  ;-----------------------------------------------------------------------------------------------------------------------
  1614                                                          menter  nmi                                             ;non-maskable
  1615                                                          push    2                                               ;store interrupt nbr
  1616                                                          push    czIntNonMaskable                                ;store message offset
  1617                                                          jmp     ReportInterrupt                                 ;report interrupt
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                  ;
  1620                                  ;       INT3    Break
  1621                                  ;
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                                          menter  break                                           ;break
  1624                                                          push    3                                               ;store interrupt nbr
  1625                                                          push    czIntBreak                                      ;store message offset
  1626                                                          jmp     ReportInterrupt                                 ;report interrupt
  1627                                  ;-----------------------------------------------------------------------------------------------------------------------
  1628                                  ;
  1629                                  ;       INT4    Into
  1630                                  ;
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                                          menter  into                                            ;into
  1633                                                          push    4                                               ;store interrupt nbr
  1634                                                          push    czIntInto                                       ;store message offset
  1635                                                          jmp     ReportInterrupt                                 ;report interrupt
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                  ;
  1638                                  ;       INT5    Bounds
  1639                                  ;
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                                          menter  bounds                                          ;bounds
  1642                                                          push    5                                               ;store interrupt nbr
  1643                                                          push    czIntBounds                                     ;store message offset
  1644                                                          jmp     ReportInterrupt                                 ;report interrupt
  1645                                  ;-----------------------------------------------------------------------------------------------------------------------
  1646                                  ;
  1647                                  ;       INT6    Bad Operation Code
  1648                                  ;
  1649                                  ;-----------------------------------------------------------------------------------------------------------------------
  1650                                                          menter  badopcode                                       ;bad opcode interrupt
  1651                                                          push    6                                               ;store interrupt nbr
  1652                                                          push    czIntBadOpCode                                  ;store message offset
  1653                                                          jmp     ReportInterrupt                                 ;report interrupt
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                  ;
  1656                                  ;       INT7    No Coprocessor
  1657                                  ;
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1660                                                          push    7                                               ;store interrupt nbr
  1661                                                          push    czIntNoCoprocessor                              ;store message offset
  1662                                                          jmp     ReportInterrupt                                 ;report interrupt
  1663                                  ;-----------------------------------------------------------------------------------------------------------------------
  1664                                  ;
  1665                                  ;       INT8    Double Fault
  1666                                  ;
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                                          menter  doublefault                                     ;doublefault interrupt
  1669                                                          push    8                                               ;store interrupt nbr
  1670                                                          push    czIntDoubleFault                                ;store message offset
  1671                                                          jmp     ReportInterrupt                                 ;report interrupt
  1672                                  ;-----------------------------------------------------------------------------------------------------------------------
  1673                                  ;
  1674                                  ;       INT9    Operand
  1675                                  ;
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                                          menter  operand                                         ;operand interrupt
  1678                                                          push    9                                               ;store interrupt nbr
  1679                                                          push    czIntOperand                                    ;store message offset
  1680                                                          jmp     ReportInterrupt                                 ;report interrupt
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                  ;
  1683                                  ;       INT10   Bad Task State Segment
  1684                                  ;
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                                          menter  badtss                                          ;bad TSS interrupt
  1687                                                          push    10                                              ;store interrupt nbr
  1688                                                          push    czIntBadTSS                                     ;store message offset
  1689                                                          jmp     ReportInterrupt                                 ;report interrupt
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                  ;
  1692                                  ;       INT11   Not Present
  1693                                  ;
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                                          menter  notpresent                                      ;not present interrupt
  1696                                                          push    11                                              ;store interrupt nbr
  1697                                                          push    czIntNotPresent                                 ;store message offset
  1698                                                          jmp     ReportInterrupt                                 ;report interrupt
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                  ;
  1701                                  ;       INT12   Stack Limit
  1702                                  ;
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                                          menter  stacklimit                                      ;stack limit interrupt
  1705                                                          push    12                                              ;store interrupt nbr
  1706                                                          push    czIntStackLimit                                 ;store message offset
  1707                                                          jmp     ReportInterrupt                                 ;report interrupt
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                  ;
  1710                                  ;       INT13   General Protection Fault
  1711                                  ;
  1712                                  ;-----------------------------------------------------------------------------------------------------------------------
  1713                                                          menter  protection                                      ;protection fault interrupt
  1714                                                          push    13                                              ;store interrupt nbr
  1715                                                          push    czIntProtection                                 ;store message offset
  1716                                                          jmp     ReportInterrupt                                 ;report interrupt
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                  ;
  1719                                  ;       INT14   Reserved
  1720                                  ;
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                                          menter  int14                                           ;(reserved)
  1723                                                          push    14                                              ;store interrupt nbr
  1724                                                          push    czIntReserved                                   ;store message offset
  1725                                                          jmp     ReportInterrupt                                 ;report interrupt
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                  ;
  1728                                  ;       INT15   Reserved
  1729                                  ;
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                                          menter  int15                                           ;(reserved)
  1732                                                          push    15                                              ;store interrupt nbr
  1733                                                          push    czIntReserved                                   ;store message offset
  1734                                                          jmp     ReportInterrupt                                 ;report interrupt
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                  ;
  1737                                  ;       INT16   Coprocessor Calculation
  1738                                  ;
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                                          menter  coproccalc                                      ;coprocessor calculation
  1741                                                          push    16                                              ;store interrupt nbr
  1742                                                          push    czIntCoprocessorCalc                            ;store message offset
  1743                                                          jmp     ReportInterrupt                                 ;report interrupt
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                  ;
  1746                                  ;       INT17   Reserved
  1747                                  ;
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                                          menter  int17                                           ;(reserved)
  1750                                                          push    17                                              ;store interrupt nbr
  1751                                                          push    czIntReserved                                   ;store message offset
  1752                                                          jmp     ReportInterrupt                                 ;report interrupt
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                  ;
  1755                                  ;       INT18   Reserved
  1756                                  ;
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                                          menter  int18                                           ;(reserved)
  1759                                                          push    18                                              ;store interrupt nbr
  1760                                                          push    czIntReserved                                   ;store message offset
  1761                                                          jmp     ReportInterrupt                                 ;report interrupt
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                  ;
  1764                                  ;       INT19   Reserved
  1765                                  ;
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                                          menter  int19                                           ;(reserved)
  1768                                                          push    19                                              ;store interrupt nbr
  1769                                                          push    czIntReserved                                   ;store message offset
  1770                                                          jmp     ReportInterrupt                                 ;report interrupt
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                  ;
  1773                                  ;       INT20   Reserved
  1774                                  ;
  1775                                  ;-----------------------------------------------------------------------------------------------------------------------
  1776                                                          menter  int20                                           ;(reserved)
  1777                                                          push    20                                              ;store interrupt nbr
  1778                                                          push    czIntReserved                                   ;store message offset
  1779                                                          jmp     ReportInterrupt                                 ;report interrupt
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                  ;
  1782                                  ;       INT21   Reserved
  1783                                  ;
  1784                                  ;-----------------------------------------------------------------------------------------------------------------------
  1785                                                          menter  int21                                           ;(reserved)
  1786                                                          push    21                                              ;store interrupt nbr
  1787                                                          push    czIntReserved                                   ;store message offset
  1788                                                          jmp     ReportInterrupt                                 ;report interrupt
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                  ;
  1791                                  ;       INT22   Reserved
  1792                                  ;
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                                          menter  int22                                           ;(reserved)
  1795                                                          push    22                                              ;store interrupt nbr
  1796                                                          push    czIntReserved                                   ;store message offset
  1797                                                          jmp     ReportInterrupt                                 ;report interrupt
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                  ;
  1800                                  ;       INT23   Reserved
  1801                                  ;
  1802                                  ;-----------------------------------------------------------------------------------------------------------------------
  1803                                                          menter  int23                                           ;(reserved)
  1804                                                          push    23                                              ;store interrupt nbr
  1805                                                          push    czIntReserved                                   ;store message offset
  1806                                                          jmp     ReportInterrupt                                 ;report interrupt
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                  ;
  1809                                  ;       INT24   Reserved
  1810                                  ;
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                                          menter  int24                                           ;(reserved)
  1813                                                          push    24                                              ;store interrupt nbr
  1814                                                          push    czIntReserved                                   ;store message offset
  1815                                                          jmp     ReportInterrupt                                 ;report interrupt
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                  ;
  1818                                  ;       INT25   Reserved
  1819                                  ;
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                                          menter  int25                                           ;(reserved)
  1822                                                          push    25                                              ;store interrupt nbr
  1823                                                          push    czIntReserved                                   ;store message offset
  1824                                                          jmp     ReportInterrupt                                 ;report interrupt
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                  ;
  1827                                  ;       INT26   Reserved
  1828                                  ;
  1829                                  ;-----------------------------------------------------------------------------------------------------------------------
  1830                                                          menter  int26                                           ;(reserved)
  1831                                                          push    26                                              ;store interrupt nbr
  1832                                                          push    czIntReserved                                   ;store message offset
  1833                                                          jmp     ReportInterrupt                                 ;report interrupt
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                  ;
  1836                                  ;       INT27   Reserved
  1837                                  ;
  1838                                  ;-----------------------------------------------------------------------------------------------------------------------
  1839                                                          menter  int27                                           ;(reserved)
  1840                                                          push    27                                              ;store interrupt nbr
  1841                                                          push    czIntReserved                                   ;store message offset
  1842                                                          jmp     ReportInterrupt                                 ;report interrupt
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                  ;
  1845                                  ;       INT28   Reserved
  1846                                  ;
  1847                                  ;-----------------------------------------------------------------------------------------------------------------------
  1848                                                          menter  int28                                           ;(reserved)
  1849                                                          push    28                                              ;store interrupt nbr
  1850                                                          push    czIntReserved                                   ;store message offset
  1851                                                          jmp     ReportInterrupt                                 ;report interrupt
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                  ;
  1854                                  ;       INT29   Reserved
  1855                                  ;
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                                          menter  int29                                           ;(reserved)
  1858                                                          push    29                                              ;store interrupt nbr
  1859                                                          push    czIntReserved                                   ;store message offset
  1860                                                          jmp     ReportInterrupt                                 ;report interrupt
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                  ;
  1863                                  ;       INT30   Reserved
  1864                                  ;
  1865                                  ;-----------------------------------------------------------------------------------------------------------------------
  1866                                                          menter  int30                                           ;(reserved)
  1867                                                          push    30                                              ;store interrupt nbr
  1868                                                          push    czIntReserved                                   ;store message offset
  1869                                                          jmp     ReportInterrupt                                 ;report interrupt
  1870                                  ;-----------------------------------------------------------------------------------------------------------------------
  1871                                  ;
  1872                                  ;       INT31   Reserved
  1873                                  ;
  1874                                  ;-----------------------------------------------------------------------------------------------------------------------
  1875                                                          menter  int31                                           ;(reserved)
  1876                                                          push    31                                              ;store interrupt nbr
  1877                                                          push    czIntReserved                                   ;store message offset
  1878                                                          jmp     ReportInterrupt                                 ;report interrupt
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                  ;
  1881                                  ;       Routine:        ReportInterrupt
  1882                                  ;
  1883                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1884                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1885                                  ;
  1886                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  1887                                  ;                       [esp+12]        cs                                      stored by interrupt call
  1888                                  ;                       [esp+8]         eip                                     stored by interrupt call
  1889                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  1890                                  ;                       [esp+0]         error message address                   stored by push instructions
  1891                                  ;
  1892                                  ;       Out:            N/A             This routine does not exit.
  1893                                  ;
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1896                                                          push    es                                              ;save ES at time of interrupt
  1897                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1898                                                          mov     ebp,esp                                         ;ebp --> [EDI]
  1899                                  ;
  1900                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1901                                  ;
  1902                                  ;                       [ebp+56]        eflags
  1903                                  ;                       [ebp+52]        cs
  1904                                  ;                       [ebp+48]        eip
  1905                                  ;                       [ebp+44]        interrupt number (0-31)
  1906                                  ;                       [ebp+40]        error message address
  1907                                  ;                       [ebp+36]        ds
  1908                                  ;                       [ebp+32]        es
  1909                                  ;                       [ebp+28]        eax
  1910                                  ;                       [ebp+24]        ecx
  1911                                  ;                       [ebp+20]        edx
  1912                                  ;                       [ebp+16]        ebx
  1913                                  ;                       [ebp+12]        esp
  1914                                  ;                       [ebp+8]         ebp
  1915                                  ;                       [ebp+4]         esi
  1916                                  ;                       [ebp+0]         edi
  1917                                  ;
  1918                                                          push    cs                                              ;load code selector ...
  1919                                                          pop     ds                                              ;... into DS
  1920                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  1921                                                          pop     es                                              ;... into ES
  1922                                  ;
  1923                                  ;       Display the interrupt report boundary box
  1924                                  ;
  1925                                                          mov     cl,13                                           ;column
  1926                                                          mov     ch,6                                            ;row
  1927                                                          mov     dl,50                                           ;width
  1928                                                          mov     dh,8                                            ;height
  1929                                                          mov     bh,07h                                          ;attribute
  1930                                                          call    DrawTextDialogBox                               ;draw text dialog box
  1931                                  ;
  1932                                  ;       Display the report header
  1933                                  ;
  1934                                                          mov     cl,15                                           ;column
  1935                                                          mov     ch,7                                            ;row
  1936                                                          mov     esi,czIntHeader                                 ;interrupt message header
  1937                                                          call    SetConsoleString                                ;draw text string
  1938                                  ;
  1939                                  ;       Display the interrupt description label
  1940                                  ;
  1941                                                          mov     cl,15                                           ;column
  1942                                                          mov     ch,8                                            ;row
  1943                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  1944                                                          call    SetConsoleString                                ;draw text string
  1945                                  ;
  1946                                  ;       Display the interrupt number
  1947                                  ;
  1948                                                          mov     eax,[ebp+44]                                    ;interrupt number
  1949                                                          mov     cl,26                                           ;column
  1950                                                          mov     ch,8                                            ;row
  1951                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  1952                                  ;
  1953                                  ;       Display the interrupt name
  1954                                  ;
  1955                                                          mov     cl,29                                           ;column
  1956                                                          mov     ch,8                                            ;row
  1957                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  1958                                                          call    SetConsoleString                                ;display interrupt description
  1959                                  ;
  1960                                  ;       Display the register values header
  1961                                  ;
  1962                                                          mov     cl,15                                           ;column
  1963                                                          mov     ch,10                                           ;row
  1964                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  1965                                                          call    SetConsoleString                                ;draw text string
  1966                                  ;
  1967                                  ;       Display the EAX register label and value
  1968                                  ;
  1969                                                          mov     cl,15                                           ;column
  1970                                                          mov     ch,11                                           ;row
  1971                                                          mov     esi,czIntEAX                                    ;register EAX label
  1972                                                          call    SetConsoleString                                ;draw label
  1973                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  1974                                                          mov     cl,19                                           ;column
  1975                                                          mov     ch,11                                           ;row
  1976                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1977                                  ;
  1978                                  ;       Display the ECX register label and value
  1979                                  ;
  1980                                                          mov     cl,15                                           ;column
  1981                                                          mov     ch,12                                           ;row
  1982                                                          mov     esi,czIntECX                                    ;label
  1983                                                          call    SetConsoleString                                ;draw label
  1984                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  1985                                                          mov     cl,19                                           ;column
  1986                                                          mov     ch,12                                           ;row
  1987                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1988                                  ;
  1989                                  ;       Display the EDX register label and value
  1990                                  ;
  1991                                                          mov     cl,15                                           ;column
  1992                                                          mov     ch,13                                           ;row
  1993                                                          mov     esi,czIntEDX                                    ;label
  1994                                                          call    SetConsoleString                                ;draw label
  1995                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  1996                                                          mov     cl,19                                           ;column
  1997                                                          mov     ch,13                                           ;row
  1998                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1999                                  ;
  2000                                  ;       Display the EBX register label and value
  2001                                  ;
  2002                                                          mov     cl,15                                           ;column
  2003                                                          mov     ch,14                                           ;row
  2004                                                          mov     esi,czIntEBX                                    ;label
  2005                                                          call    SetConsoleString                                ;draw label
  2006                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2007                                                          mov     cl,19                                           ;column
  2008                                                          mov     ch,14                                           ;row
  2009                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2010                                  ;
  2011                                  ;       Display the ESI register label and value
  2012                                  ;
  2013                                                          mov     cl,29                                           ;column
  2014                                                          mov     ch,11                                           ;row
  2015                                                          mov     esi,czIntESI                                    ;label
  2016                                                          call    SetConsoleString                                ;draw label
  2017                                                          mov     eax,[ebp+4]                                     ;ESI
  2018                                                          mov     cl,33                                           ;column
  2019                                                          mov     ch,11                                           ;row
  2020                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2021                                  ;
  2022                                  ;       Display the EDI register label and value
  2023                                  ;
  2024                                                          mov     cl,29                                           ;column
  2025                                                          mov     ch,12                                           ;row
  2026                                                          mov     esi,czIntEDI                                    ;label
  2027                                                          call    SetConsoleString                                ;draw label
  2028                                                          mov     eax,[ebp+0]                                     ;EDI
  2029                                                          mov     cl,33                                           ;column
  2030                                                          mov     ch,12                                           ;row
  2031                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2032                                  ;
  2033                                  ;       Display the EBP register label and value
  2034                                  ;
  2035                                                          mov     cl,29                                           ;column
  2036                                                          mov     ch,13                                           ;row
  2037                                                          mov     esi,czIntEBP                                    ;label
  2038                                                          call    SetConsoleString                                ;draw label
  2039                                                          mov     eax,[ebp+8]                                     ;EBP
  2040                                                          mov     cl,33                                           ;column
  2041                                                          mov     ch,13                                           ;row
  2042                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2043                                  ;
  2044                                  ;       Display the DS register label and value
  2045                                  ;
  2046                                                          mov     cl,42                                           ;column
  2047                                                          mov     ch,11                                           ;row
  2048                                                          mov     esi,czIntDS                                     ;label
  2049                                                          call    SetConsoleString                                ;draw label
  2050                                                          xor     eax,eax                                         ;zero register
  2051                                                          mov     ax,[ebp+36]                                     ;DS
  2052                                                          mov     cl,46                                           ;column
  2053                                                          mov     ch,11                                           ;row
  2054                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2055                                  ;
  2056                                  ;       Display the ES register label and value
  2057                                  ;
  2058                                                          mov     cl,42                                           ;column
  2059                                                          mov     ch,12                                           ;row
  2060                                                          mov     esi,czIntES                                     ;label
  2061                                                          call    SetConsoleString                                ;draw label
  2062                                                          xor     eax,eax                                         ;zero register
  2063                                                          mov     ax,[ebp+32]                                     ;ES
  2064                                                          mov     cl,46                                           ;column
  2065                                                          mov     ch,12                                           ;row
  2066                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2067                                  ;
  2068                                  ;       Display the SS register label and value
  2069                                  ;
  2070                                                          mov     cl,42                                           ;column
  2071                                                          mov     ch,13                                           ;row
  2072                                                          mov     esi,czIntSS                                     ;label
  2073                                                          call    SetConsoleString                                ;draw label
  2074                                                          xor     eax,eax                                         ;zero register
  2075                                                          mov     ax,ss                                           ;SS
  2076                                                          mov     cl,46                                           ;column
  2077                                                          mov     ch,13                                           ;row
  2078                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2079                                  ;
  2080                                  ;       Display the CS register lable and value
  2081                                  ;
  2082                                                          mov     cl,42                                           ;column
  2083                                                          mov     ch,14                                           ;row
  2084                                                          mov     esi,czIntCS                                     ;label
  2085                                                          call    SetConsoleString                                ;draw label
  2086                                                          xor     eax,eax                                         ;zero register
  2087                                                          mov     ax,[ebp+52]                                     ;CS
  2088                                                          mov     cl,46                                           ;column
  2089                                                          mov     ch,14                                           ;row
  2090                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2091                                  ;
  2092                                  ;       Display the EFLAGS register label and value
  2093                                  ;
  2094                                                          mov     cl,51                                           ;column
  2095                                                          mov     ch,11                                           ;row
  2096                                                          mov     esi,czIntEFLAGS                                 ;label
  2097                                                          call    SetConsoleString                                ;draw label
  2098                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2099                                                          mov     cl,55                                           ;column
  2100                                                          mov     ch,11                                           ;row
  2101                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2102                                  ;
  2103                                  ;       Display the ESP register label and value
  2104                                  ;
  2105                                                          mov     cl,51                                           ;column
  2106                                                          mov     ch,13                                           ;row
  2107                                                          mov     esi,czIntESP                                    ;label
  2108                                                          call    SetConsoleString                                ;draw label
  2109                                                          mov     eax,[ebp+12]                                    ;ESP
  2110                                                          mov     cl,55                                           ;column
  2111                                                          mov     ch,13                                           ;row
  2112                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2113                                  ;
  2114                                  ;       Display the EIP register label and value
  2115                                  ;
  2116                                                          mov     cl,51                                           ;column
  2117                                                          mov     ch,14                                           ;row
  2118                                                          mov     esi,czIntEIP                                    ;label
  2119                                                          call    SetConsoleString                                ;draw label
  2120                                                          mov     eax,[ebp+48]                                    ;EIP
  2121                                                          mov     cl,55                                           ;column
  2122                                                          mov     ch,14                                           ;row
  2123                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2124                                  ;
  2125                                  ;       Halt and loop until reset
  2126                                  ;
  2127                                  .10                     sti                                                     ;enable maskable interrupts
  2128                                                          hlt                                                     ;halt processor
  2129                                                          jmp     .10                                             ;resume on interrupt
  2130                                  ;-----------------------------------------------------------------------------------------------------------------------
  2131                                  ;
  2132                                  ;       Processor Interrupt Name Strings
  2133                                  ;
  2134                                  ;-----------------------------------------------------------------------------------------------------------------------
  2135                                  czIntDivideByZero       db      "Division by zero",0
  2136                                  czIntSingleStep         db      "Single step",0
  2137                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2138                                  czIntBreak              db      "Break",0
  2139                                  czIntInto               db      "Into",0
  2140                                  czIntBounds             db      "Bounds",0
  2141                                  czIntBadOpCode          db      "Bad Operation Code",0
  2142                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2143                                  czIntDoubleFault        db      "Double Fault",0
  2144                                  czIntOperand            db      "Operand",0
  2145                                  czIntBadTSS             db      "Bad Task State Segment",0
  2146                                  czIntNotPresent         db      "Not Present",0
  2147                                  czIntStackLimit         db      "Stack Limit",0
  2148                                  czIntProtection         db      "General Protection Fault",0
  2149                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2150                                  czIntReserved           db      "Reserved",0
  2151                                  ;-----------------------------------------------------------------------------------------------------------------------
  2152                                  ;
  2153                                  ;       Processor Interrupt Handling Strings
  2154                                  ;
  2155                                  ;-----------------------------------------------------------------------------------------------------------------------
  2156                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2157                                  czIntLabel              db      "Interrupt #",0
  2158                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2159                                  czIntEAX                db      "EAX:",0
  2160                                  czIntECX                db      "ECX:",0
  2161                                  czIntEDX                db      "EDX:",0
  2162                                  czIntEBX                db      "EBX:",0
  2163                                  czIntESI                db      "ESI:",0
  2164                                  czIntEDI                db      "EDI:",0
  2165                                  czIntEBP                db      "EBP:",0
  2166                                  czIntESP                db      "ESP:",0
  2167                                  czIntDS                 db      " DS:",0
  2168                                  czIntES                 db      " ES:",0
  2169                                  czIntSS                 db      " SS:",0
  2170                                  czIntCS                 db      " CS:",0
  2171                                  czIntEFLAGS             db      "FLG:",0
  2172                                  czIntEIP                db      "EIP:",0
  2173                                  ;-----------------------------------------------------------------------------------------------------------------------
  2174                                  ;
  2175                                  ;       Routine:        DrawTextDialogBox
  2176                                  ;
  2177                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2178                                  ;
  2179                                  ;       In:             CL      upper left column (0-79)
  2180                                  ;                       CH      upper left row (0-24)
  2181                                  ;                       DL      column width, excluding border
  2182                                  ;                       DH      row height, excluding border
  2183                                  ;                       BH      color attribute
  2184                                  ;
  2185                                  ;-----------------------------------------------------------------------------------------------------------------------
  2186                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2187                                                          push    esi                                             ;
  2188                                                          push    edi                                             ;
  2189                                                          push    es                                              ;
  2190                                                          push    EGDTCGA                                         ;load CGA selector ...
  2191                                                          pop     es                                              ;... into ES
  2192                                  ;
  2193                                  ;       Compute target display offset
  2194                                  ;
  2195                                                          xor     eax,eax                                         ;zero register
  2196                                                          mov     al,ch                                           ;row
  2197                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2198                                                          mul     ah                                              ;row offset
  2199                                                          add     al,cl                                           ;add column
  2200                                                          adc     ah,0                                            ;add overflow
  2201                                                          add     al,cl                                           ;add column
  2202                                                          adc     ah,0                                            ;add overflow
  2203                                                          mov     edi,eax                                         ;target row offset
  2204                                  ;
  2205                                  ;       Display top border row
  2206                                  ;
  2207                                                          push    edi                                             ;save target row offset
  2208                                                          mov     ah,bh                                           ;attribute
  2209                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2210                                                          stosw                                                   ;display character and attribute
  2211                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2212                                                          xor     ecx,ecx                                         ;zero register
  2213                                                          mov     cl,dl                                           ;width, excluding border
  2214                                                          rep     stosw                                           ;display horizontal border
  2215                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2216                                                          stosw                                                   ;display character and attribute
  2217                                                          pop     edi                                             ;restore target row offset
  2218                                                          add     edi,ECONROWBYTES                                ;next row
  2219                                  ;
  2220                                  ;       Display dialog box body rows
  2221                                  ;
  2222                                                          xor     ecx,ecx                                         ;zero register
  2223                                                          mov     cl,dh                                           ;height, excluding border
  2224                                  .10                     push    ecx                                             ;save remaining rows
  2225                                                          push    edi                                             ;save target row offset
  2226                                                          mov     ah,bh                                           ;attribute
  2227                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2228                                                          stosw                                                   ;display character and attribute
  2229                                                          mov     al,EASCIISPACE                                  ;space
  2230                                                          xor     ecx,ecx                                         ;zero register
  2231                                                          mov     cl,dl                                           ;width, excluding border
  2232                                                          rep     stosw                                           ;display row
  2233                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2234                                                          stosw                                                   ;display character and attribute
  2235                                                          pop     edi                                             ;restore target row offset
  2236                                                          add     edi,ECONROWBYTES                                ;next row
  2237                                                          pop     ecx                                             ;remaining rows
  2238                                                          loop    .10                                             ;next row
  2239                                  ;
  2240                                  ;       Display bottom border row
  2241                                  ;
  2242                                                          push    edi                                             ;save target row offset
  2243                                                          mov     ah,bh                                           ;attribute
  2244                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2245                                                          stosw                                                   ;display character and attribute
  2246                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2247                                                          xor     ecx,ecx                                         ;zero register
  2248                                                          mov     cl,dl                                           ;width, excluding border
  2249                                                          rep     stosw                                           ;display horizontal border
  2250                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2251                                                          stosw                                                   ;display character and attribute
  2252                                                          pop     edi                                             ;restore target row offset
  2253                                                          add     edi,ECONROWBYTES                                ;next row
  2254                                  ;
  2255                                  ;       Restore and return
  2256                                  ;
  2257                                                          pop     es                                              ;restore non-volatile regs
  2258                                                          pop     edi                                             ;
  2259                                                          pop     esi                                             ;
  2260                                                          pop     ecx                                             ;
  2261                                                          ret                                                     ;return
  2262                                  ;=======================================================================================================================
  2263                                  ;
  2264                                  ;       Hardware Device Interupts
  2265                                  ;
  2266                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2267                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2268                                  ;       (BX=2028h).
  2269                                  ;
  2270                                  ;=======================================================================================================================
  2271                                  ;-----------------------------------------------------------------------------------------------------------------------
  2272                                  ;
  2273                                  ;       IRQ0    Clock Tick Interrupt
  2274                                  ;
  2275                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2276                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2277                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2278                                  ;
  2279                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2280                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2281                                  ;
  2282                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2283                                  ;       zero, the floppy disk motors are turned off.
  2284                                  ;
  2285                                  ;-----------------------------------------------------------------------------------------------------------------------
  2286                                                          menter  clocktick                                       ;clock tick interrupt
  2287                                                          push    eax                                             ;save non-volatile regs
  2288                                                          push    edx                                             ;
  2289                                                          push    ds                                              ;
  2290                                  ;
  2291                                  ;       Update the clock tick count and the elapsed days as needed.
  2292                                  ;
  2293                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2294                                                          pop     ds                                              ;... into data segment register
  2295                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2296                                                          inc     eax                                             ;increment clock ticks
  2297                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2298                                                          jb      irq0.10                                         ;no, skip ahead
  2299                                                          inc     byte [wbClockDays]                              ;increment clock days
  2300                                                          xor     eax,eax                                         ;reset clock ticks
  2301                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2302                                  ;
  2303                                  ;       Decrement floppy disk motor timeout.
  2304                                  ;
  2305                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2306                                                          je      irq0.20                                         ;yes, skip ahead
  2307                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2308                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2309                                  ;
  2310                                  ;       Turn off the floppy disk motor if appropriate.
  2311                                  ;
  2312                                                          sti                                                     ;enable maskable interrupts
  2313                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2314                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2315                                                          in      al,dx                                           ;FDC main status byte
  2316                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2317                                                          jnz     irq0.15                                         ;wait while busy
  2318                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2319                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2320                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2321                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2322                                                          out     dx,al                                           ;turn motor off
  2323                                  ;
  2324                                  ;       Signal the end of the hardware interrupt.
  2325                                  ;
  2326                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2327                                  ;
  2328                                  ;       Restore and return.
  2329                                  ;
  2330                                                          pop     ds                                              ;restore modified regs
  2331                                                          pop     edx                                             ;
  2332                                                          pop     eax                                             ;
  2333                                                          iretd                                                   ;return
  2334                                  ;-----------------------------------------------------------------------------------------------------------------------
  2335                                  ;
  2336                                  ;       IRQ1    Keyboard Interrupt
  2337                                  ;
  2338                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2339                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2340                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2341                                  ;       ALL modified registers upon return.
  2342                                  ;
  2343                                  ;-----------------------------------------------------------------------------------------------------------------------
  2344                                                          menter  keyboard                                        ;keyboard interrrupt
  2345                                                          push    eax                                             ;save non-volatile regs
  2346                                                          push    ebx                                             ;
  2347                                                          push    ecx                                             ;
  2348                                                          push    esi                                             ;
  2349                                                          push    ds                                              ;
  2350                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2351                                                          pop     ds                                              ;... into data segment register
  2352                                                          xor     al,al                                           ;zero
  2353                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2354                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2355                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2356                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2357                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2358                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2359                                                          mov     al,' '                                          ;space
  2360                                                          mov     [wbConsoleChar],al                              ;set character to space
  2361                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2362                                                          not     al                                              ;controller timeout mask
  2363                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2364                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2365                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2366                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2367                                                          jz      irq1.140                                        ;yes, skip ahead
  2368                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2369                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2370                                                          mov     ah,al                                           ;copy scan code 0
  2371                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2372                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2373                                                          je      irq1.30                                         ;yes, set flag
  2374                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2375                                                          je      irq1.40                                         ;yes, reset flag
  2376                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2377                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2378                                                          je      irq1.30                                         ;yes, set flag
  2379                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2380                                                          je      irq1.40                                         ;yes, reset flag
  2381                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2382                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2383                                                          je      irq1.30                                         ;yes, set flag
  2384                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2385                                                          je      irq1.40                                         ;yes, reset flag
  2386                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2387                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2388                                                          je      irq1.30                                         ;yes, set flag
  2389                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2390                                                          je      irq1.40                                         ;yes, reset flag
  2391                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2392                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2393                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2394                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2395                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2396                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2397                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2398                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2399                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2400                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2401                                                          jne     irq1.70                                         ;no, skip ahead
  2402                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2403                                                          jz      irq1.140                                        ;yes, skip ahead
  2404                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2405                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2406                                                          mov     ah,al                                           ;copy scan code 1
  2407                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2408                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2409                                                          je      irq1.30                                         ;yes, set flag
  2410                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2411                                                          je      irq1.40                                         ;yes, reset flag
  2412                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2413                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2414                                                          je      irq1.30                                         ;yes, set flag
  2415                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2416                                                          je      irq1.40                                         ;yes, reset flag
  2417                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2418                                                          je      irq1.80                                         ;yes, skip ahead
  2419                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2420                                                          je      irq1.80                                         ;yes, skip ahead
  2421                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2422                                                          je      irq1.10                                         ;yes, continue
  2423                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2424                                                          jne     irq1.20                                         ;no, skip ahead
  2425                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2426                                                          jz      irq1.140                                        ;yes, skip ahead
  2427                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2428                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2429                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2430                                                          jz      irq1.140                                        ;yes, skip ahead
  2431                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2432                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2433                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2434                                  irq1.30                 or      bl,al                                           ;set shift flag
  2435                                                          jmp     irq1.60                                         ;skip ahead
  2436                                  irq1.40                 not     al                                              ;convert flag to mask
  2437                                                          and     bl,al                                           ;reset shift flag
  2438                                                          jmp     irq1.60                                         ;skip ahead
  2439                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2440                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2441                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2442                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2443                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2444                                                          jmp     irq1.150                                        ;finish keyboard handling
  2445                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2446                                                          jne     irq1.80                                         ;no continue
  2447                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2448                                                          jz      irq1.140                                        ;yes, skip ahead
  2449                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2450                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2451                                                          mov     ah,al                                           ;copy scan code 1
  2452                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2453                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2454                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2455                                                          jz      irq1.140                                        ;yes, skip ahead
  2456                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2457                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2458                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2459                                                          jz      irq1.140                                        ;yes, skip ahead
  2460                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2461                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2462                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2463                                                          jz      irq1.140                                        ;yes, skip ahead
  2464                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2465                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2466                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2467                                                          jz      irq1.140                                        ;yes, skip ahead
  2468                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2469                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2470                                                          jmp     irq1.150                                        ;continue
  2471                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2472                                                          test    ah,EKEYBUP                                      ;release code?
  2473                                                          jnz     irq1.130                                        ;yes, skip ahead
  2474                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2475                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2476                                                          jz      irq1.90                                         ;no, skip ahead
  2477                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2478                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2479                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2480                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2481                                                          jz      irq1.100                                        ;no skip ahead
  2482                                                          mov     cl,al                                           ;copy ASCII code
  2483                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2484                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2485                                                          jb      irq1.100                                        ;yes, skip ahead
  2486                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2487                                                          ja      irq1.100                                        ;yes, skip ahead
  2488                                                          xor     al,EASCIICASE                                   ;switch case
  2489                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2490                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2491                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2492                                                          jz      irq1.120                                        ;no, skip ahead
  2493                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2494                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2495                                                          or      edx,eax                                         ;msg id and codes
  2496                                                          xor     ecx,ecx                                         ;null param
  2497                                                          push    eax                                             ;save codes
  2498                                                          call    PutMessage                                      ;put message to console
  2499                                                          pop     eax                                             ;restore codes
  2500                                                          test    al,al                                           ;ASCII translation?
  2501                                                          jz      irq1.130                                        ;no, skip ahead
  2502                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2503                                                          and     eax,0FFFFh                                      ;clear high-order word
  2504                                                          or      edx,eax                                         ;msg id and codes
  2505                                                          xor     ecx,ecx                                         ;null param
  2506                                                          call    PutMessage                                      ;put message to console
  2507                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2508                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2509                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2510                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2511                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2512                                                          pop     ds                                              ;restore non-volatile regs
  2513                                                          pop     esi                                             ;
  2514                                                          pop     ecx                                             ;
  2515                                                          pop     ebx                                             ;
  2516                                                          pop     eax                                             ;
  2517                                                          iretd                                                   ;return
  2518                                  ;-----------------------------------------------------------------------------------------------------------------------
  2519                                  ;       Scan-Code to ASCII Translation Tables
  2520                                  ;-----------------------------------------------------------------------------------------------------------------------
  2521                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2522                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2523                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2524                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2525                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2526                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2527                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2528                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2529                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2530                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2531                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2532                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2533                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2534                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2535                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2536                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2537                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2538                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2539                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2540                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2541                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2542                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2543                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2544                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2545                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2546                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2547                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2548                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2549                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2550                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2551                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2552                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2553                                  ;-----------------------------------------------------------------------------------------------------------------------
  2554                                  ;
  2555                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2556                                  ;
  2557                                  ;-----------------------------------------------------------------------------------------------------------------------
  2558                                                          menter  iochannel                                       ;secondary 8259A cascade
  2559                                                          push    eax                                             ;save modified regs
  2560                                                          jmp     hwint                                           ;end interrupt and return
  2561                                  ;-----------------------------------------------------------------------------------------------------------------------
  2562                                  ;
  2563                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2564                                  ;
  2565                                  ;-----------------------------------------------------------------------------------------------------------------------
  2566                                                          menter  com2                                            ;serial port 2 interrupt
  2567                                                          push    eax                                             ;save modified regs
  2568                                                          jmp     hwint                                           ;end interrupt and return
  2569                                  ;-----------------------------------------------------------------------------------------------------------------------
  2570                                  ;
  2571                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2572                                  ;
  2573                                  ;-----------------------------------------------------------------------------------------------------------------------
  2574                                                          menter  com1                                            ;serial port 1 interrupt
  2575                                                          push    eax                                             ;save modified regs
  2576                                                          jmp     hwint                                           ;end interrupt and return
  2577                                  ;-----------------------------------------------------------------------------------------------------------------------
  2578                                  ;
  2579                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2580                                  ;
  2581                                  ;-----------------------------------------------------------------------------------------------------------------------
  2582                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2583                                                          push    eax                                             ;save modified regs
  2584                                                          jmp     hwint                                           ;end interrupt and return
  2585                                  ;-----------------------------------------------------------------------------------------------------------------------
  2586                                  ;
  2587                                  ;       IRQ6    Diskette Hardware Interrupt
  2588                                  ;
  2589                                  ;-----------------------------------------------------------------------------------------------------------------------
  2590                                                          menter  diskette                                        ;floppy disk interrupt
  2591                                                          push    eax                                             ;save non-volatile regs
  2592                                                          push    ds                                              ;
  2593                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2594                                                          pop     ds                                              ;... into DS register
  2595                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2596                                                          or      al,10000000b                                    ;set IRQ flag
  2597                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2598                                                          pop     ds                                              ;restore non-volatile regs
  2599                                                          jmp     hwint                                           ;end primary PIC interrupt
  2600                                  ;-----------------------------------------------------------------------------------------------------------------------
  2601                                  ;
  2602                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2603                                  ;
  2604                                  ;-----------------------------------------------------------------------------------------------------------------------
  2605                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2606                                                          push    eax                                             ;save modified regs
  2607                                                          jmp     hwint                                           ;end interrupt and return
  2608                                  ;-----------------------------------------------------------------------------------------------------------------------
  2609                                  ;
  2610                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2611                                  ;
  2612                                  ;-----------------------------------------------------------------------------------------------------------------------
  2613                                                          menter  rtclock                                         ;real-time clock interrupt
  2614                                                          push    eax                                             ;save modified regs
  2615                                                          jmp     hwwint                                          ;end interrupt and return
  2616                                  ;-----------------------------------------------------------------------------------------------------------------------
  2617                                  ;
  2618                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2619                                  ;
  2620                                  ;-----------------------------------------------------------------------------------------------------------------------
  2621                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2622                                                          push    eax                                             ;save modified regs
  2623                                                          jmp     hwwint                                          ;end interrupt and return
  2624                                  ;-----------------------------------------------------------------------------------------------------------------------
  2625                                  ;
  2626                                  ;       IRQ10   Reserved Hardware Interrupt
  2627                                  ;
  2628                                  ;-----------------------------------------------------------------------------------------------------------------------
  2629                                                          menter  irq10                                           ;reserved
  2630                                                          push    eax                                             ;save modified regs
  2631                                                          jmp     hwwint                                          ;end interrupt and return
  2632                                  ;-----------------------------------------------------------------------------------------------------------------------
  2633                                  ;
  2634                                  ;       IRQ11   Reserved Hardware Interrupt
  2635                                  ;
  2636                                  ;-----------------------------------------------------------------------------------------------------------------------
  2637                                                          menter  irq11                                           ;reserved
  2638                                                          push    eax                                             ;save modified regs
  2639                                                          jmp     hwwint                                          ;end interrupt and return
  2640                                  ;-----------------------------------------------------------------------------------------------------------------------
  2641                                  ;
  2642                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2643                                  ;
  2644                                  ;-----------------------------------------------------------------------------------------------------------------------
  2645                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2646                                                          push    eax                                             ;save modified regs
  2647                                                          jmp     hwwint                                          ;end interrupt and return
  2648                                  ;-----------------------------------------------------------------------------------------------------------------------
  2649                                  ;
  2650                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2651                                  ;
  2652                                  ;-----------------------------------------------------------------------------------------------------------------------
  2653                                                          menter  coprocessor                                     ;coprocessor interrupt
  2654                                                          push    eax                                             ;save modified regs
  2655                                                          jmp     hwwint                                          ;end interrupt and return
  2656                                  ;-----------------------------------------------------------------------------------------------------------------------
  2657                                  ;
  2658                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2659                                  ;
  2660                                  ;-----------------------------------------------------------------------------------------------------------------------
  2661                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2662                                                          push    eax                                             ;save modified regs
  2663                                                          jmp     hwwint                                          ;end interrupt and return
  2664                                  ;-----------------------------------------------------------------------------------------------------------------------
  2665                                  ;
  2666                                  ;       IRQ15   Reserved Hardware Interrupt
  2667                                  ;
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669                                                          menter  irq15                                           ;reserved
  2670                                                          push    eax                                             ;save modified regs
  2671                                                          jmp     hwwint                                          ;end interrupt and return
  2672                                  ;-----------------------------------------------------------------------------------------------------------------------
  2673                                  ;
  2674                                  ;       Exit from hardware interrupt
  2675                                  ;
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2678                                                          jmp     hwint90                                         ;skip ahead
  2679                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2680                                  hwint90                 pop     eax                                             ;restore modified regs
  2681                                                          iretd                                                   ;return from interrupt
  2682                                  ;-----------------------------------------------------------------------------------------------------------------------
  2683                                  ;
  2684                                  ;       INT 30h Operating System Software Service Interrupt
  2685                                  ;
  2686                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2687                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2688                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2689                                  ;       the entry address of the specific function from a table.
  2690                                  ;
  2691                                  ;-----------------------------------------------------------------------------------------------------------------------
  2692                                                          menter  svc
  2693                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2694                                                          jae     svc90                                           ;yes, skip ahead
  2695                                                          movzx   eax,al                                          ;function
  2696                                                          shl     eax,2                                           ;offset into table
  2697                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2698                                  svc90                   iretd                                                   ;return from interrupt
  2699                                  ;-----------------------------------------------------------------------------------------------------------------------
  2700                                  ;
  2701                                  ;       Service Request Table
  2702                                  ;
  2703                                  ;
  2704                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2705                                  ;
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2708                                                          tsvce   CompareMemory                                   ;compare memory
  2709                                                          tsvce   GetConsoleString                                ;get string input
  2710                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2711                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2712                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2713                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2714                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2715                                                          tsvce   UpperCaseString                                 ;upper-case string
  2716                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2717                                  ;-----------------------------------------------------------------------------------------------------------------------
  2718                                  ;
  2719                                  ;       Service Request Macros
  2720                                  ;
  2721                                  ;       These macros provide positional parameterization of service request calls.
  2722                                  ;
  2723                                  ;-----------------------------------------------------------------------------------------------------------------------
  2724                                  %macro                  clearConsoleScreen 0
  2725                                                          mov     al,eClearConsoleScreen                          ;function code
  2726                                                          int     _svc                                            ;invoke OS service
  2727                                  %endmacro
  2728                                  %macro                  compareMemory 0
  2729                                                          mov     al,eCompareMemory                               ;function code
  2730                                                          int     _svc                                            ;invoke OS service
  2731                                  %endmacro
  2732                                  %macro                  getConsoleString 4
  2733                                                          mov     edx,%1                                          ;buffer address
  2734                                                          mov     ecx,%2                                          ;max characters
  2735                                                          mov     bh,%3                                           ;echo indicator
  2736                                                          mov     bl,%4                                           ;terminator
  2737                                                          mov     al,eGetConsoleString                            ;function code
  2738                                                          int     _svc                                            ;invoke OS service
  2739                                  %endmacro
  2740                                  %macro                  hexadecimalToUnsigned 0
  2741                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2742                                                          int     _svc                                            ;invoke OS service
  2743                                  %endmacro
  2744                                  %macro                  placeCursor 0
  2745                                                          mov     al,ePlaceCursor                                 ;function code
  2746                                                          int     _svc                                            ;invoke OS service
  2747                                  %endmacro
  2748                                  %macro                  putConsoleString 1
  2749                                                          mov     edx,%1                                          ;string address
  2750                                                          mov     al,ePutConsoleString                            ;function code
  2751                                                          int     _svc                                            ;invoke OS service
  2752                                  %endmacro
  2753                                  %macro                  resetSystem 0
  2754                                                          mov     al,eResetSystem                                 ;function code
  2755                                                          int     _svc                                            ;invoke OS service
  2756                                  %endmacro
  2757                                  %macro                  unsignedToHexadecimal 0
  2758                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2759                                                          int     _svc                                            ;invoke OS service
  2760                                  %endmacro
  2761                                  %macro                  upperCaseString 0
  2762                                                          mov     al,eUpperCaseString                             ;function code
  2763                                                          int     _svc                                            ;invoke OS service
  2764                                  %endmacro
  2765                                  ;=======================================================================================================================
  2766                                  ;
  2767                                  ;       Kernel Function Library
  2768                                  ;
  2769                                  ;=======================================================================================================================
  2770                                  ;=======================================================================================================================
  2771                                  ;
  2772                                  ;       String Helper Routines
  2773                                  ;
  2774                                  ;       CompareMemory
  2775                                  ;       UpperCaseString
  2776                                  ;
  2777                                  ;=======================================================================================================================
  2778                                  ;-----------------------------------------------------------------------------------------------------------------------
  2779                                  ;
  2780                                  ;       Routine:        CompareMemory
  2781                                  ;
  2782                                  ;       Description:    This routine compares two byte arrays.
  2783                                  ;
  2784                                  ;       In:             DS:EDX  first source address
  2785                                  ;                       DS:EBX  second source address
  2786                                  ;                       ECX     comparison length
  2787                                  ;
  2788                                  ;       Out:            EDX     first source address
  2789                                  ;                       EBX     second source address
  2790                                  ;                       ECX     0       array 1 = array 2
  2791                                  ;                               <0      array 1 < array 2
  2792                                  ;                               >0      array 1 > array 2
  2793                                  ;
  2794                                  ;-----------------------------------------------------------------------------------------------------------------------
  2795                                  CompareMemory           push    esi                                             ;save non-volatile regs
  2796                                                          push    edi                                             ;
  2797                                                          push    es                                              ;
  2798                                                          push    ds                                              ;copy DS
  2799                                                          pop     es                                              ;... to ES
  2800                                                          mov     esi,edx                                         ;first source address
  2801                                                          mov     edi,ebx                                         ;second source address
  2802                                                          cld                                                     ;forward strings
  2803                                                          rep     cmpsb                                           ;compare bytes
  2804                                                          mov     al,0                                            ;default result
  2805                                                          jz      .10                                             ;branch if arrays equal
  2806                                                          mov     al,1                                            ;positive result
  2807                                                          jnc     .10                                             ;branch if target > source
  2808                                                          mov     al,-1                                           ;negative result
  2809                                  .10                     movsx   ecx,al                                          ;extend sign
  2810                                                          pop     es                                              ;restore non-volatile regs
  2811                                                          pop     edi                                             ;
  2812                                                          pop     esi                                             ;
  2813                                                          ret                                                     ;return
  2814                                  ;-----------------------------------------------------------------------------------------------------------------------
  2815                                  ;
  2816                                  ;       Routine:        UpperCaseString
  2817                                  ;
  2818                                  ;       Description:    This routine places all characters in the given string to upper case.
  2819                                  ;
  2820                                  ;       In:             DS:EDX  string address
  2821                                  ;
  2822                                  ;       Out:            EDX     string address
  2823                                  ;
  2824                                  ;-----------------------------------------------------------------------------------------------------------------------
  2825                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  2826                                                          mov     esi,edx                                         ;string address
  2827                                                          cld                                                     ;forward strings
  2828                                  .10                     lodsb                                                   ;string character
  2829                                                          test    al,al                                           ;null?
  2830                                                          jz      .20                                             ;yes, skip ahead
  2831                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2832                                                          jb      .10                                             ;no, continue
  2833                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2834                                                          ja      .10                                             ;no, continue
  2835                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  2836                                                          mov     [esi-1],al                                      ;upper character
  2837                                                          jmp     .10                                             ;continue
  2838                                  .20                     pop     esi                                             ;restore non-volatile regs
  2839                                                          ret                                                     ;return
  2840                                  ;=======================================================================================================================
  2841                                  ;
  2842                                  ;       Console Helper Routines
  2843                                  ;
  2844                                  ;       FirstConsoleColumn
  2845                                  ;       GetConsoleChar
  2846                                  ;       GetConsoleString
  2847                                  ;       NextConsoleColumn
  2848                                  ;       NextConsoleRow
  2849                                  ;       PreviousConsoleColumn
  2850                                  ;       PutConsoleChar
  2851                                  ;       PutConsoleHexByte
  2852                                  ;       PutConsoleHexDword
  2853                                  ;       PutConsoleHexWord
  2854                                  ;       PutConsoleOIAChar
  2855                                  ;       PutConsoleOIAShift
  2856                                  ;       PutConsoleString
  2857                                  ;       Yield
  2858                                  ;
  2859                                  ;=======================================================================================================================
  2860                                  ;-----------------------------------------------------------------------------------------------------------------------
  2861                                  ;
  2862                                  ;       Routine:        FirstConsoleColumn
  2863                                  ;
  2864                                  ;       Description:    This routine resets the console column to start of the row.
  2865                                  ;
  2866                                  ;       In:             DS      OS data selector
  2867                                  ;
  2868                                  ;-----------------------------------------------------------------------------------------------------------------------
  2869                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2870                                                          mov     [wbConsoleColumn],al                            ;save column
  2871                                                          ret                                                     ;return
  2872                                  ;-----------------------------------------------------------------------------------------------------------------------
  2873                                  ;
  2874                                  ;       Routine:        GetConsoleChar
  2875                                  ;
  2876                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2877                                  ;
  2878                                  ;       Out:            AL      ASCII character code
  2879                                  ;                       AH      keyboard scan code
  2880                                  ;
  2881                                  ;-----------------------------------------------------------------------------------------------------------------------
  2882                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2883                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  2884                                                          or      eax,eax                                         ;do we have a message?
  2885                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  2886                                                          push    eax                                             ;save key codes
  2887                                                          and     eax,0FFFF0000h                                  ;mask for message type
  2888                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2889                                                          pop     eax                                             ;restore key codes
  2890                                                          jne     GetConsoleChar                                  ;no, try again
  2891                                                          and     eax,0000ffffh                                   ;mask for key codes
  2892                                                          ret                                                     ;return
  2893                                  ;-----------------------------------------------------------------------------------------------------------------------
  2894                                  ;
  2895                                  ;       Routine:        GetConsoleString
  2896                                  ;
  2897                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2898                                  ;
  2899                                  ;       In:             DS:EDX  target buffer address
  2900                                  ;                       ECX     maximum number of characters to accept
  2901                                  ;                       BH      echo to terminal
  2902                                  ;                       BL      terminating character
  2903                                  ;
  2904                                  ;-----------------------------------------------------------------------------------------------------------------------
  2905                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  2906                                                          push    esi                                             ;
  2907                                                          push    edi                                             ;
  2908                                                          push    es                                              ;
  2909                                                          push    ds                                              ;load data segment selector ...
  2910                                                          pop     es                                              ;... into extra segment register
  2911                                                          mov     edi,edx                                         ;edi = target buffer
  2912                                                          push    ecx                                             ;save maximum characters
  2913                                                          xor     al,al                                           ;zero register
  2914                                                          cld                                                     ;forward strings
  2915                                                          rep     stosb                                           ;zero fill buffer
  2916                                                          pop     ecx                                             ;maximum characters
  2917                                                          mov     edi,edx                                         ;edi = target buffer
  2918                                                          mov     esi,edx                                         ;esi = target buffer
  2919                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  2920                                  .20                     call    GetConsoleChar                                  ;al = next input char
  2921                                                          cmp     al,bl                                           ;is this the terminator?
  2922                                                          je      .50                                             ;yes, exit
  2923                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2924                                                          jne     .30                                             ;no, skip ahead
  2925                                                          cmp     esi,edi                                         ;at start of buffer?
  2926                                                          je      .20                                             ;yes, get next character
  2927                                                          dec     edi                                             ;backup target pointer
  2928                                                          mov     byte [edi],0                                    ;zero previous character
  2929                                                          inc     ecx                                             ;increment remaining chars
  2930                                                          test    bh,1                                            ;echo to console?
  2931                                                          jz      .20                                             ;no, get next character
  2932                                                          call    PreviousConsoleColumn                           ;backup console position
  2933                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2934                                                          call    PutConsoleChar                                  ;write space to console
  2935                                                          call    PlaceCursor                                     ;position the cursor
  2936                                                          jmp     .20                                             ;get next character
  2937                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2938                                                          jb      .20                                             ;no, get another character
  2939                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2940                                                          ja      .20                                             ;no, get another character
  2941                                                          stosb                                                   ;store character in buffer
  2942                                                          test    bh,1                                            ;echo to console?
  2943                                                          jz      .40                                             ;no, skip ahead
  2944                                                          call    PutConsoleChar                                  ;write character to console
  2945                                                          call    NextConsoleColumn                               ;advance console position
  2946                                                          call    PlaceCursor                                     ;position the cursor
  2947                                  .40                     dec     ecx                                             ;decrement remaining chars
  2948                                                          jmp     .10                                             ;next
  2949                                  .50                     xor     al,al                                           ;null
  2950                                                          stosb                                                   ;terminate buffer
  2951                                                          pop     es                                              ;restore non-volatile regs
  2952                                                          pop     edi                                             ;
  2953                                                          pop     esi                                             ;
  2954                                                          pop     ecx                                             ;
  2955                                                          ret                                                     ;return
  2956                                  ;-----------------------------------------------------------------------------------------------------------------------
  2957                                  ;
  2958                                  ;       Routine:        NextConsoleColumn
  2959                                  ;
  2960                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2961                                  ;                       incremented if the end of the current row is reached.
  2962                                  ;
  2963                                  ;       In:             DS      OS data selector
  2964                                  ;
  2965                                  ;-----------------------------------------------------------------------------------------------------------------------
  2966                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2967                                                          inc     al                                              ;increment column
  2968                                                          mov     [wbConsoleColumn],al                            ;save column
  2969                                                          cmp     al,ECONCOLS                                     ;end of row?
  2970                                                          jb      .10                                             ;no, skip ahead
  2971                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2972                                                          call    NextConsoleRow                                  ;line feed to next row
  2973                                  .10                     ret                                                     ;return
  2974                                  ;-----------------------------------------------------------------------------------------------------------------------
  2975                                  ;
  2976                                  ;       Routine:        NextConsoleRow
  2977                                  ;
  2978                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2979                                  ;
  2980                                  ;       In:             DS      OS data selector
  2981                                  ;
  2982                                  ;-----------------------------------------------------------------------------------------------------------------------
  2983                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2984                                                          inc     al                                              ;increment row
  2985                                                          mov     [wbConsoleRow],al                               ;save row
  2986                                                          cmp     al,ECONROWS                                     ;end of screen?
  2987                                                          jb      .10                                             ;no, skip ahead
  2988                                                          call    ScrollConsoleRow                                ;scroll up one row
  2989                                                          mov     al,[wbConsoleRow]                               ;row
  2990                                                          dec     al                                              ;decrement row
  2991                                                          mov     [wbConsoleRow],al                               ;save row
  2992                                  .10                     ret                                                     ;return
  2993                                  ;-----------------------------------------------------------------------------------------------------------------------
  2994                                  ;
  2995                                  ;       Routine:        PreviousConsoleColumn
  2996                                  ;
  2997                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2998                                  ;                       the column is set to the last position in the row and the row is decremented.
  2999                                  ;
  3000                                  ;       In:             DS      OS data selector
  3001                                  ;
  3002                                  ;-----------------------------------------------------------------------------------------------------------------------
  3003                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3004                                                          or      al,al                                           ;start of row?
  3005                                                          jnz     .10                                             ;no, skip ahead
  3006                                                          mov     ah,[wbConsoleRow]                               ;current row
  3007                                                          or      ah,ah                                           ;top of screen?
  3008                                                          jz      .20                                             ;yes, exit with no change
  3009                                                          dec     ah                                              ;decrement row
  3010                                                          mov     [wbConsoleRow],ah                               ;save row
  3011                                                          mov     al,ECONCOLS                                     ;set maximum column
  3012                                  .10                     dec     al                                              ;decrement column
  3013                                                          mov     [wbConsoleColumn],al                            ;save column
  3014                                  .20                     ret                                                     ;return
  3015                                  ;-----------------------------------------------------------------------------------------------------------------------
  3016                                  ;
  3017                                  ;       Routine:        PutConsoleChar
  3018                                  ;
  3019                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3020                                  ;
  3021                                  ;       In:             AL      ASCII character
  3022                                  ;                       DS      OS data selector
  3023                                  ;
  3024                                  ;-----------------------------------------------------------------------------------------------------------------------
  3025                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3026                                                          push    es                                              ;
  3027                                                          push    EGDTCGA                                         ;load CGA selector ...
  3028                                                          pop     es                                              ;... into extra segment reg
  3029                                                          mov     cl,[wbConsoleColumn]                            ;column
  3030                                                          mov     ch,[wbConsoleRow]                               ;row
  3031                                                          call    SetConsoleChar                                  ;put character at row, column
  3032                                                          pop     es                                              ;restore non-volatile regs
  3033                                                          pop     ecx                                             ;
  3034                                                          ret                                                     ;return
  3035                                  ;-----------------------------------------------------------------------------------------------------------------------
  3036                                  ;
  3037                                  ;       Routine:        PutConsoleHexByte
  3038                                  ;
  3039                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3040                                  ;
  3041                                  ;       In:             AL      byte value
  3042                                  ;                       CL      column
  3043                                  ;                       CH      row
  3044                                  ;                       DS      OS data selector
  3045                                  ;                       ES      CGA selector
  3046                                  ;
  3047                                  ;-----------------------------------------------------------------------------------------------------------------------
  3048                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  3049                                                          mov     bl,al                                           ;save byte value
  3050                                                          shr     al,4                                            ;hi-order nybble
  3051                                                          or      al,030h                                         ;apply ASCII zone
  3052                                                          cmp     al,03ah                                         ;numeric?
  3053                                                          jb      .10                                             ;yes, skip ahead
  3054                                                          add     al,7                                            ;add ASCII offset for alpha
  3055                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  3056                                                          mov     al,bl                                           ;byte value
  3057                                                          and     al,0fh                                          ;lo-order nybble
  3058                                                          or      al,30h                                          ;apply ASCII zone
  3059                                                          cmp     al,03ah                                         ;numeric?
  3060                                                          jb      .20                                             ;yes, skip ahead
  3061                                                          add     al,7                                            ;add ASCII offset for alpha
  3062                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  3063                                                          pop     ebx                                             ;restore non-volatile regs
  3064                                                          ret                                                     ;return
  3065                                  ;-----------------------------------------------------------------------------------------------------------------------
  3066                                  ;
  3067                                  ;       Routine:        PutConsoleHexDword
  3068                                  ;
  3069                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3070                                  ;
  3071                                  ;       In:             EAX     value
  3072                                  ;                       CL      column
  3073                                  ;                       CH      row
  3074                                  ;                       DS      OS data selector
  3075                                  ;                       ES      CGA selector
  3076                                  ;
  3077                                  ;-----------------------------------------------------------------------------------------------------------------------
  3078                                  PutConsoleHexDword      push    eax
  3079                                                          shr     eax,16
  3080                                                          call    PutConsoleHexWord
  3081                                                          pop     eax
  3082                                                          call    PutConsoleHexWord
  3083                                                          ret
  3084                                  ;-----------------------------------------------------------------------------------------------------------------------
  3085                                  ;
  3086                                  ;       Routine:        PutConsoleHexWord
  3087                                  ;
  3088                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3089                                  ;
  3090                                  ;       In:             EAX     value
  3091                                  ;                       CL      column
  3092                                  ;                       CH      row
  3093                                  ;                       DS      OS data selector
  3094                                  ;                       ES      CGA selector
  3095                                  ;
  3096                                  ;-----------------------------------------------------------------------------------------------------------------------
  3097                                  PutConsoleHexWord       push    eax
  3098                                                          shr     eax,8
  3099                                                          call    PutConsoleHexByte
  3100                                                          pop     eax
  3101                                                          call    PutConsoleHexByte
  3102                                                          ret
  3103                                  ;-----------------------------------------------------------------------------------------------------------------------
  3104                                  ;
  3105                                  ;       Routine:        PutConsoleOIAChar
  3106                                  ;
  3107                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3108                                  ;
  3109                                  ;       In:             DS      OS data selector
  3110                                  ;
  3111                                  ;-----------------------------------------------------------------------------------------------------------------------
  3112                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3113                                                          push    ecx                                             ;
  3114                                                          push    esi                                             ;
  3115                                                          push    ds                                              ;
  3116                                                          push    es                                              ;
  3117                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3118                                                          pop     ds                                              ;... into data segment register
  3119                                                          push    EGDTCGA                                         ;load CGA selector ...
  3120                                                          pop     es                                              ;... into extra segment register
  3121                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  3122                                                          mov     bh,ECONOIAROW                                   ;OIA row
  3123                                                          mov     bl,0                                            ;starting column
  3124                                                          mov     ecx,6                                           ;maximum scan codes
  3125                                  .10                     push    ecx                                             ;save remaining count
  3126                                                          mov     ecx,ebx                                         ;row, column
  3127                                                          lodsb                                                   ;read scan code
  3128                                                          or      al,al                                           ;scan code present?
  3129                                                          jz      .20                                             ;no, skip ahead
  3130                                                          call    PutConsoleHexByte                               ;display scan code
  3131                                                          jmp     .30                                             ;continue
  3132                                  .20                     mov     al,' '                                          ;ASCII space
  3133                                                          call    SetConsoleChar                                  ;display space
  3134                                                          mov     al,' '                                          ;ASCII space
  3135                                                          call    SetConsoleChar                                  ;display space
  3136                                  .30                     add     bl,2                                            ;next column (+2)
  3137                                                          pop     ecx                                             ;restore remaining
  3138                                                          loop    .10                                             ;next code
  3139                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  3140                                                          cmp     al,32                                           ;printable? (lower-bounds)
  3141                                                          jb      .40                                             ;no, skip ahead
  3142                                                          cmp     al,126                                          ;printable? (upper-bounds)
  3143                                                          ja      .40                                             ;no, skip ahead
  3144                                                          mov     ch,bh                                           ;OIA row
  3145                                                          mov     cl,40                                           ;character display column
  3146                                                          call    SetConsoleChar                                  ;display ASCII character
  3147                                  .40                     pop     es                                              ;restore non-volatile regs
  3148                                                          pop     ds                                              ;
  3149                                                          pop     esi                                             ;
  3150                                                          pop     ecx                                             ;
  3151                                                          pop     ebx                                             ;
  3152                                                          ret                                                     ;return
  3153                                  ;-----------------------------------------------------------------------------------------------------------------------
  3154                                  ;
  3155                                  ;       Routine:        PutConsoleOIAShift
  3156                                  ;
  3157                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3158                                  ;
  3159                                  ;       In:             BL      shift flags
  3160                                  ;                       BH      lock flags
  3161                                  ;                       DS      OS data selector
  3162                                  ;
  3163                                  ;-----------------------------------------------------------------------------------------------------------------------
  3164                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3165                                                          push    es                                              ;
  3166                                                          push    EGDTCGA                                         ;load CGA selector ...
  3167                                                          pop     es                                              ;... into ES register
  3168                                                          mov     ch,ECONOIAROW                                   ;OIA row
  3169                                                          mov     al,EASCIISPACE                                  ;space is default character
  3170                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3171                                                          jz      .10                                             ;no, skip ahead
  3172                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3173                                  .10                     mov     cl,14                                           ;indicator column
  3174                                                          call    SetConsoleChar                                  ;display ASCII character
  3175                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3176                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3177                                                          jz      .20                                             ;no, skip ahead
  3178                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3179                                  .20                     mov     cl,64                                           ;indicator column
  3180                                                          call    SetConsoleChar                                  ;display ASCII character
  3181                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3182                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3183                                                          jz      .30                                             ;no, skip ahead
  3184                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3185                                  .30                     mov     cl,15                                           ;indicator column
  3186                                                          call    SetConsoleChar                                  ;display ASCII character
  3187                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3188                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3189                                                          jz      .40                                             ;no, skip ahead
  3190                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3191                                  .40                     mov     cl,63                                           ;indicator column
  3192                                                          call    SetConsoleChar                                  ;display ASCII character
  3193                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3194                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3195                                                          jz      .50                                             ;no, skip ahead
  3196                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3197                                  .50                     mov     cl,16                                           ;indicator column
  3198                                                          call    SetConsoleChar                                  ;display ASCII character
  3199                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3200                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3201                                                          jz      .60                                             ;no, skip ahead
  3202                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3203                                  .60                     mov     cl,62                                           ;indicator column
  3204                                                          call    SetConsoleChar                                  ;display ASCII character
  3205                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3206                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3207                                                          jz      .70                                             ;no, skip ahead
  3208                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3209                                  .70                     mov     cl,78                                           ;indicator column
  3210                                                          call    SetConsoleChar                                  ;display ASCII character
  3211                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3212                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3213                                                          jz      .80                                             ;no, skip ahead
  3214                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  3215                                  .80                     mov     cl,77                                           ;indicator column
  3216                                                          call    SetConsoleChar                                  ;display ASCII character
  3217                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3218                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3219                                                          jz      .90                                             ;no, skip ahead
  3220                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3221                                  .90                     mov     cl,76                                           ;indicator column
  3222                                                          call    SetConsoleChar                                  ;display ASCII character
  3223                                                          pop     es                                              ;restore non-volatile regs
  3224                                                          pop     ecx                                             ;
  3225                                                          ret                                                     ;return
  3226                                  ;-----------------------------------------------------------------------------------------------------------------------
  3227                                  ;
  3228                                  ;       Routine:        PutConsoleString
  3229                                  ;
  3230                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3231                                  ;                       console position as needed.
  3232                                  ;
  3233                                  ;       In:             EDX     source address
  3234                                  ;                       DS      OS data selector
  3235                                  ;
  3236                                  ;-----------------------------------------------------------------------------------------------------------------------
  3237                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  3238                                                          mov     esi,edx                                         ;source address
  3239                                                          cld                                                     ;forward strings
  3240                                  .10                     lodsb                                                   ;ASCII character
  3241                                                          or      al,al                                           ;end of string?
  3242                                                          jz      .40                                             ;yes, skip ahead
  3243                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  3244                                                          jne     .20                                             ;no, skip ahead
  3245                                                          call    FirstConsoleColumn                              ;move to start of row
  3246                                                          jmp     .10                                             ;next character
  3247                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3248                                                          jne     .30                                             ;no, skip ahead
  3249                                                          call    NextConsoleRow                                  ;move to next row
  3250                                                          jmp     .10                                             ;next character
  3251                                  .30                     call    PutConsoleChar                                  ;output character to console
  3252                                                          call    NextConsoleColumn                               ;advance to next column
  3253                                                          jmp     .10                                             ;next character
  3254                                  .40                     pop     esi                                             ;restore non-volatile regs
  3255                                                          ret                                                     ;return
  3256                                  ;-----------------------------------------------------------------------------------------------------------------------
  3257                                  ;
  3258                                  ;       Routine:        Yield
  3259                                  ;
  3260                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3261                                  ;
  3262                                  ;-----------------------------------------------------------------------------------------------------------------------
  3263                                  Yield                   sti                                                     ;enable maskagle interrupts
  3264                                                          hlt                                                     ;halt until external interrupt
  3265                                                          ret                                                     ;return
  3266                                  ;=======================================================================================================================
  3267                                  ;
  3268                                  ;       Data-Type Conversion Helper Routines
  3269                                  ;
  3270                                  ;       HexadecimalToUnsigned
  3271                                  ;       UnsignedToHexadecimal
  3272                                  ;
  3273                                  ;=======================================================================================================================
  3274                                  ;-----------------------------------------------------------------------------------------------------------------------
  3275                                  ;
  3276                                  ;       Routine:        HexadecimalToUnsigned
  3277                                  ;
  3278                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3279                                  ;
  3280                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  3281                                  ;
  3282                                  ;       Output:         EAX     unsigned integer value
  3283                                  ;
  3284                                  ;-----------------------------------------------------------------------------------------------------------------------
  3285                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  3286                                                          mov     esi,edx                                         ;source address
  3287                                                          xor     edx,edx                                         ;zero register
  3288                                  .10                     lodsb                                                   ;source byte
  3289                                                          test    al,al                                           ;end of string?
  3290                                                          jz      .30                                             ;yes, branch
  3291                                                          cmp     al,'9'                                          ;hexadecimal?
  3292                                                          jna     .20                                             ;no, skip ahead
  3293                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  3294                                  .20                     and     eax,0fh                                         ;remove ascii zone
  3295                                                          shl     edx,4                                           ;previous total x 16
  3296                                                          add     edx,eax                                         ;add prior value x 16
  3297                                                          jmp     .10                                             ;next
  3298                                  .30                     mov     eax,edx                                         ;result
  3299                                                          pop     esi                                             ;restore non-volatile regs
  3300                                                          ret                                                     ;return
  3301                                  ;-----------------------------------------------------------------------------------------------------------------------
  3302                                  ;
  3303                                  ;       Routine:        UnsignedToHexadecimal
  3304                                  ;
  3305                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  3306                                  ;
  3307                                  ;       Input:          DS:EDX  output buffer address
  3308                                  ;                       ECX     32-bit binary
  3309                                  ;
  3310                                  ;-----------------------------------------------------------------------------------------------------------------------
  3311                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  3312                                                          mov     edi,edx                                         ;output buffer address
  3313                                                          mov     edx,ecx                                         ;32-bit unsigned
  3314                                                          xor     ecx,ecx                                         ;zero register
  3315                                                          mov     cl,8                                            ;nybble count
  3316                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  3317                                                          mov     al,dl                                           ;????bbbb
  3318                                                          and     al,0fh                                          ;mask out bits 4-7
  3319                                                          or      al,30h                                          ;mask in ascii zone
  3320                                                          cmp     al,3ah                                          ;A through F?
  3321                                                          jb      .20                                             ;no, skip ahead
  3322                                                          add     al,7                                            ;41h through 46h
  3323                                  .20                     stosb                                                   ;store hexnum
  3324                                                          loop    .10                                             ;next nybble
  3325                                                          xor     al,al                                           ;zero reg
  3326                                                          stosb                                                   ;null terminate
  3327                                                          pop     edi                                             ;restore non-volatile regs
  3328                                                          ret                                                     ;return
  3329                                  ;=======================================================================================================================
  3330                                  ;
  3331                                  ;       Message Queue Helper Routines
  3332                                  ;
  3333                                  ;       GetMessage
  3334                                  ;       PutMessage
  3335                                  ;
  3336                                  ;=======================================================================================================================
  3337                                  ;-----------------------------------------------------------------------------------------------------------------------
  3338                                  ;
  3339                                  ;       Routine:        GetMessage
  3340                                  ;
  3341                                  ;       Description:    This routine reads and removes a message from the message queue.
  3342                                  ;
  3343                                  ;       Out:            EAX     lo-order message data
  3344                                  ;                       EDX     hi-order message data
  3345                                  ;
  3346                                  ;                       CY      0 = message read
  3347                                  ;                               1 = no message to read
  3348                                  ;
  3349                                  ;-----------------------------------------------------------------------------------------------------------------------
  3350                                  GetMessage              push    ebx                                             ;save non-volatile regs
  3351                                                          push    ecx                                             ;
  3352                                                          push    ds                                              ;
  3353                                                          push    ELDTMQ                                          ;load message queue selector ...
  3354                                                          pop     ds                                              ;... into data segment register
  3355                                                          mov     ebx,[MQHead]                                    ;head ptr
  3356                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  3357                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3358                                                          or      eax,edx                                         ;is queue empty?
  3359                                                          stc                                                     ;assume queue is emtpy
  3360                                                          jz      .20                                             ;yes, skip ahead
  3361                                                          xor     ecx,ecx                                         ;store zero
  3362                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  3363                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3364                                                          add     ebx,8                                           ;next queue element
  3365                                                          and     ebx,03fch                                       ;at end of queue?
  3366                                                          jnz     .10                                             ;no, skip ahead
  3367                                                          mov     bl,8                                            ;reset to 1st entry
  3368                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3369                                                          clc                                                     ;indicate message read
  3370                                  .20                     pop     ds                                              ;restore non-volatile regs
  3371                                                          pop     ecx                                             ;
  3372                                                          pop     ebx                                             ;
  3373                                                          ret                                                     ;return
  3374                                  ;-----------------------------------------------------------------------------------------------------------------------
  3375                                  ;
  3376                                  ;       Routine:        PutMessage
  3377                                  ;
  3378                                  ;       Description:    This routine adda a message to the message queue.
  3379                                  ;
  3380                                  ;       In:             ECX     hi-order data word
  3381                                  ;                       EDX     lo-order data word
  3382                                  ;
  3383                                  ;       Out:            CY      0 = success
  3384                                  ;                               1 = fail: queue is full
  3385                                  ;
  3386                                  ;-----------------------------------------------------------------------------------------------------------------------
  3387                                  PutMessage              push    ds                                              ;save non-volatile regs
  3388                                                          push    ELDTMQ                                          ;load task message queue selector ...
  3389                                                          pop     ds                                              ;... into data segment register
  3390                                                          mov     eax,[MQTail]                                    ;tail ptr
  3391                                                          cmp     dword [eax],0                                   ;is queue full?
  3392                                                          stc                                                     ;assume failure
  3393                                                          jne     .20                                             ;yes, cannot store
  3394                                                          mov     [eax],edx                                       ;store lo-order data
  3395                                                          mov     [eax+4],ecx                                     ;store hi-order data
  3396                                                          add     eax,8                                           ;next queue element adr
  3397                                                          and     eax,03fch                                       ;at end of queue?
  3398                                                          jnz     .10                                             ;no, skip ahead
  3399                                                          mov     al,8                                            ;reset to top of queue
  3400                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3401                                                          clc                                                     ;indicate success
  3402                                  .20                     pop     ds                                              ;restore non-volatile regs
  3403                                                          ret                                                     ;return
  3404                                  ;=======================================================================================================================
  3405                                  ;
  3406                                  ;       Memory-Mapped Video Routines
  3407                                  ;
  3408                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  3409                                  ;
  3410                                  ;       ClearConsoleScreen
  3411                                  ;       ScrollConsoleRow
  3412                                  ;       SetConsoleChar
  3413                                  ;       SetConsoleString
  3414                                  ;
  3415                                  ;=======================================================================================================================
  3416                                  ;-----------------------------------------------------------------------------------------------------------------------
  3417                                  ;
  3418                                  ;       Routine:        ClearConsoleScreen
  3419                                  ;
  3420                                  ;       Description:    This routine clears the console (CGA) screen.
  3421                                  ;
  3422                                  ;-----------------------------------------------------------------------------------------------------------------------
  3423                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  3424                                                          push    edi                                             ;
  3425                                                          push    ds                                              ;
  3426                                                          push    es                                              ;
  3427                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  3428                                                          pop     ds                                              ;... into DS register
  3429                                                          push    EGDTCGA                                         ;load CGA selector ...
  3430                                                          pop     es                                              ;... into ES register
  3431                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  3432                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  3433                                                          xor     edi,edi                                         ;target offset
  3434                                                          cld                                                     ;forward strings
  3435                                                          rep     stosd                                           ;reset screen body
  3436                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  3437                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3438                                                          rep     stosd                                           ;reset OIA line
  3439                                                          xor     al,al                                           ;zero register
  3440                                                          mov     [wbConsoleRow],al                               ;reset console row
  3441                                                          mov     [wbConsoleColumn],al                            ;reset console column
  3442                                                          call    PlaceCursor                                     ;place cursor at current position
  3443                                                          pop     es                                              ;restore non-volatile regs
  3444                                                          pop     ds                                              ;
  3445                                                          pop     edi                                             ;
  3446                                                          pop     ecx                                             ;
  3447                                                          ret                                                     ;return
  3448                                  ;-----------------------------------------------------------------------------------------------------------------------
  3449                                  ;
  3450                                  ;       Routine:        ScrollConsoleRow
  3451                                  ;
  3452                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  3453                                  ;
  3454                                  ;-----------------------------------------------------------------------------------------------------------------------
  3455                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  3456                                                          push    esi                                             ;
  3457                                                          push    edi                                             ;
  3458                                                          push    ds                                              ;
  3459                                                          push    es                                              ;
  3460                                                          push    EGDTCGA                                         ;load CGA video selector ...
  3461                                                          pop     ds                                              ;... into DS
  3462                                                          push    EGDTCGA                                         ;load CGA video selector ...
  3463                                                          pop     es                                              ;... into ES
  3464                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  3465                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  3466                                                          xor     edi,edi                                         ;EDI = target (line 1)
  3467                                                          cld                                                     ;forward strings
  3468                                                          rep     movsd                                           ;move 24 lines up
  3469                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  3470                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3471                                                          rep     stosd                                           ;clear bottom row
  3472                                                          pop     es                                              ;restore non-volatile regs
  3473                                                          pop     ds                                              ;
  3474                                                          pop     edi                                             ;
  3475                                                          pop     esi                                             ;
  3476                                                          pop     ecx                                             ;
  3477                                                          ret                                                     ;return
  3478                                  ;-----------------------------------------------------------------------------------------------------------------------
  3479                                  ;
  3480                                  ;       Routine:        SetConsoleChar
  3481                                  ;
  3482                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3483                                  ;
  3484                                  ;       In:             AL      ASCII character
  3485                                  ;                       CL      column
  3486                                  ;                       CH      row
  3487                                  ;                       ES      CGA selector
  3488                                  ;
  3489                                  ;       Out:            EAX     last target address written (ES:)
  3490                                  ;                       CL      column + 1
  3491                                  ;
  3492                                  ;-----------------------------------------------------------------------------------------------------------------------
  3493                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  3494                                                          movzx   eax,ch                                          ;row
  3495                                                          mov     ah,ECONCOLS                                     ;cols/row
  3496                                                          mul     ah                                              ;row * cols/row
  3497                                                          add     al,cl                                           ;add column
  3498                                                          adc     ah,0                                            ;handle carry
  3499                                                          shl     eax,1                                           ;screen offset
  3500                                                          mov     [es:eax],dl                                     ;store character
  3501                                                          inc     cl                                              ;next column
  3502                                                          ret                                                     ;return
  3503                                  ;-----------------------------------------------------------------------------------------------------------------------
  3504                                  ;
  3505                                  ;       Routine:        SetConsoleString
  3506                                  ;
  3507                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  3508                                  ;
  3509                                  ;       In:             ESI     source offset (DS:)
  3510                                  ;                       CL      column
  3511                                  ;                       CH      row
  3512                                  ;                       ES      CGA selector
  3513                                  ;
  3514                                  ;-----------------------------------------------------------------------------------------------------------------------
  3515                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  3516                                                          cld                                                     ;forward strings
  3517                                  .10                     lodsb                                                   ;next ASCII character
  3518                                                          test    al,al                                           ;end of string?
  3519                                                          jz      .20                                             ;yes, branch
  3520                                                          call    SetConsoleChar                                  ;store character
  3521                                                          jmp     .10                                             ;continue
  3522                                  .20                     pop     esi                                             ;restore non-volatile regs
  3523                                                          ret                                                     ;return
  3524                                  ;=======================================================================================================================
  3525                                  ;
  3526                                  ;       Input/Output Routines
  3527                                  ;
  3528                                  ;       These routines read and/or write directly to ports.
  3529                                  ;
  3530                                  ;       PlaceCursor
  3531                                  ;       PutPrimaryEndOfInt
  3532                                  ;       PutSecondaryEndOfInt
  3533                                  ;       ResetSystem
  3534                                  ;       SetKeyboardLamps
  3535                                  ;       WaitForKeyInBuffer
  3536                                  ;       WaitForKeyOutBuffer
  3537                                  ;
  3538                                  ;=======================================================================================================================
  3539                                  ;-----------------------------------------------------------------------------------------------------------------------
  3540                                  ;
  3541                                  ;       Routine:        PlaceCursor
  3542                                  ;
  3543                                  ;       Description:    This routine positions the cursor on the console.
  3544                                  ;
  3545                                  ;       In:             DS      OS data selector
  3546                                  ;
  3547                                  ;-----------------------------------------------------------------------------------------------------------------------
  3548                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  3549                                                          mov     al,[wbConsoleRow]                               ;AL = row
  3550                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  3551                                                          mul     ah                                              ;row offset
  3552                                                          add     al,[wbConsoleColumn]                            ;add column
  3553                                                          adc     ah,0                                            ;add overflow
  3554                                                          mov     ecx,eax                                         ;screen offset
  3555                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3556                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3557                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3558                                                          out     dx,al                                           ;select register
  3559                                                          inc     edx                                             ;data port
  3560                                                          mov     al,ch                                           ;hi-order cursor loc
  3561                                                          out     dx,al                                           ;store hi-order loc
  3562                                                          dec     edx                                             ;register select port
  3563                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3564                                                          out     dx,al                                           ;select register
  3565                                                          inc     edx                                             ;data port
  3566                                                          mov     al,cl                                           ;lo-order cursor loc
  3567                                                          out     dx,al                                           ;store lo-order loc
  3568                                                          pop     ecx                                             ;restore non-volatile regs
  3569                                                          ret                                                     ;return
  3570                                  ;-----------------------------------------------------------------------------------------------------------------------
  3571                                  ;
  3572                                  ;       Routine:        PutPrimaryEndOfInt
  3573                                  ;
  3574                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3575                                  ;
  3576                                  ;-----------------------------------------------------------------------------------------------------------------------
  3577                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  3578                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3579                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3580                                                          ret                                                     ;return
  3581                                  ;-----------------------------------------------------------------------------------------------------------------------
  3582                                  ;
  3583                                  ;       Routine:        PutSecondaryEndOfInt
  3584                                  ;
  3585                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3586                                  ;
  3587                                  ;-----------------------------------------------------------------------------------------------------------------------
  3588                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3589                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3590                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3591                                                          ret                                                     ;return
  3592                                  ;-----------------------------------------------------------------------------------------------------------------------
  3593                                  ;
  3594                                  ;       Routine:        ResetSystem
  3595                                  ;
  3596                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3597                                  ;
  3598                                  ;       Out:            N/A     This routine does not return.
  3599                                  ;
  3600                                  ;-----------------------------------------------------------------------------------------------------------------------
  3601                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3602                                                          loop    $                                               ;clear interrupts
  3603                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3604                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3605                                  .10                     sti                                                     ;enable maskable interrupts
  3606                                                          hlt                                                     ;halt until interrupt
  3607                                                          jmp     .10                                             ;repeat until reset kicks in
  3608                                  ;-----------------------------------------------------------------------------------------------------------------------
  3609                                  ;
  3610                                  ;       Routine:        SetKeyboardLamps
  3611                                  ;
  3612                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3613                                  ;
  3614                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3615                                  ;
  3616                                  ;-----------------------------------------------------------------------------------------------------------------------
  3617                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3618                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3619                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  3620                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3621                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3622                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3623                                                          mov     al,bh                                           ;set/reset lamps value
  3624                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  3625                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3626                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3627                                                          ret                                                     ;return
  3628                                  ;-----------------------------------------------------------------------------------------------------------------------
  3629                                  ;
  3630                                  ;       Routine:        WaitForKeyInBuffer
  3631                                  ;
  3632                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3633                                  ;
  3634                                  ;       Out:            ZF      1 = Input buffer ready
  3635                                  ;                               0 = Input buffer not ready after timeout
  3636                                  ;
  3637                                  ;-----------------------------------------------------------------------------------------------------------------------
  3638                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3639                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3640                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3641                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  3642                                                          loopnz  .10                                             ;yes, repeat till timeout
  3643                                                          pop     ecx                                             ;restore non-volatile regs
  3644                                                          ret                                                     ;return
  3645                                  ;-----------------------------------------------------------------------------------------------------------------------
  3646                                  ;
  3647                                  ;       Routine:        WaitForKeyOutBuffer
  3648                                  ;
  3649                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3650                                  ;
  3651                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3652                                  ;                               0 = Output buffer empty after timeout
  3653                                  ;
  3654                                  ;-----------------------------------------------------------------------------------------------------------------------
  3655                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3656                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3657                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3658                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  3659                                                          loopz   .10                                             ;loop until output buffer bit
  3660                                                          pop     ecx                                             ;restore non-volatile regs
  3661                                                          ret                                                     ;return
  3662                                  ;-----------------------------------------------------------------------------------------------------------------------
  3663                                  ;
  3664                                  ;       End of the Kernel Function Library
  3665                                  ;
  3666                                  ;-----------------------------------------------------------------------------------------------------------------------
  3667                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  3668                                  ;=======================================================================================================================
  3669                                  ;
  3670                                  ;       Console Task
  3671                                  ;
  3672                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3673                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3674                                  ;       screen and responds to user commands.
  3675                                  ;
  3676                                  ;=======================================================================================================================
  3677                                  ;-----------------------------------------------------------------------------------------------------------------------
  3678                                  ;
  3679                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3680                                  ;
  3681                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3682                                  ;
  3683                                  ;-----------------------------------------------------------------------------------------------------------------------
  3684                                  section                 constack                                                ;console task stack
  3685                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  3686                                  ;-----------------------------------------------------------------------------------------------------------------------
  3687                                  ;
  3688                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3689                                  ;
  3690                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3691                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3692                                  ;       16 descriptors. Six are initially defined.
  3693                                  ;
  3694                                  ;-----------------------------------------------------------------------------------------------------------------------
  3695                                  section                 conldt                                                  ;console local descriptors
  3696                                                          dq      004093004780007Fh                               ;04 TSS alias
  3697                                                          dq      004093004700007Fh                               ;0c LDT alias
  3698                                                          dq      00409300400006FFh                               ;14 stack
  3699                                                          dq      00CF93000000FFFFh                               ;1c data
  3700                                                          dq      00409B0050000FFFh                               ;24 code
  3701                                                          dq      00409300480007FFh                               ;2c message queue
  3702                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3703                                  ;-----------------------------------------------------------------------------------------------------------------------
  3704                                  ;
  3705                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3706                                  ;
  3707                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3708                                  ;       segment. CS to console code.
  3709                                  ;
  3710                                  ;-----------------------------------------------------------------------------------------------------------------------
  3711                                  section                 contss                                                  ;console task state segment
  3712                                                          dd      0                                               ;00 back-link tss
  3713                                                          dd      0700h                                           ;04 esp ring 0
  3714                                                          dd      0014h                                           ;08 ss ring 0
  3715                                                          dd      0700h                                           ;0c esp ring 1
  3716                                                          dd      0014h                                           ;10 es ring 1
  3717                                                          dd      0700h                                           ;14 esp ring 2
  3718                                                          dd      0014h                                           ;18 ss ring 2
  3719                                                          dd      0                                               ;1c cr ring 3
  3720                                                          dd      0                                               ;20 eip
  3721                                                          dd      0200h                                           ;24 eflags
  3722                                                          dd      0                                               ;28 eax
  3723                                                          dd      0                                               ;2c ecx
  3724                                                          dd      0                                               ;30 edx
  3725                                                          dd      0                                               ;34 ebx
  3726                                                          dd      0700h                                           ;38 esp ring 3
  3727                                                          dd      0                                               ;3c ebp
  3728                                                          dd      0                                               ;40 esi
  3729                                                          dd      0                                               ;44 edi
  3730                                                          dd      001Ch                                           ;48 es
  3731                                                          dd      0024h                                           ;4c cs
  3732                                                          dd      0014h                                           ;50 ss ring 3
  3733                                                          dd      001Ch                                           ;54 ds
  3734                                                          dd      0                                               ;58 fs
  3735                                                          dd      0                                               ;5c gs
  3736                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3737                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3738                                  ;-----------------------------------------------------------------------------------------------------------------------
  3739                                  ;
  3740                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3741                                  ;
  3742                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3743                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3744                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3745                                  ;       event.
  3746                                  ;
  3747                                  ;-----------------------------------------------------------------------------------------------------------------------
  3748                                  section                 conmque                                                 ;console message queue
  3749                                                          dd      8                                               ;head pointer
  3750                                                          dd      8                                               ;tail pointer
  3751                                                          times   510 dd 0                                        ;queue elements
  3752                                  ;-----------------------------------------------------------------------------------------------------------------------
  3753                                  ;
  3754                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3755                                  ;
  3756                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3757                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3758                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3759                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3760                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3761                                  ;       board input, echoing to the console screen and responding to user commands.
  3762                                  ;
  3763                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3764                                  ;
  3765                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3766                                  ;                               |  Real Mode Interrupt Vectors                  |
  3767                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3768                                  ;                               |  Reserved BIOS Memory Area                    |
  3769                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3770                                  ;                               |  Shared Kernel Memory Area                    |
  3771                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3772                                  ;                               |  Global Descriptor Table (GDT)                |
  3773                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3774                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3775                                  ;                       002000  +-----------------------------------------------+
  3776                                  ;                               |  Interrupt Handlers                           |
  3777                                  ;                               |  Kernel Function Library                      |
  3778                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3779                                  ;                               |  Console Task Stack Area                      |
  3780                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3781                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3782                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3783                                  ;                               |  Console Task Task State Segment (TSS)        |
  3784                                  ;                       004800  +-----------------------------------------------+
  3785                                  ;                               |  Console Task Message Queue                   |
  3786                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3787                                  ;                               |  Console Task Code                            |
  3788                                  ;                               |  Console Task Constants                       |
  3789                                  ;                       006000  +===============================================+
  3790                                  ;
  3791                                  ;-----------------------------------------------------------------------------------------------------------------------
  3792                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3793                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  3794                                  
  3795                                                          clearConsoleScreen                                      ;clear the console screen
  3796                                                          putConsoleString czTitle                                ;display startup message
  3797                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3798                                                          placeCursor                                             ;set CRT cursor location
  3799                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3800                                                          putConsoleString czNewLine                              ;newline
  3801                                  
  3802                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  3803                                                          mov     ebx,wzConsoleToken                              ;token buffer
  3804                                                          call    ConTakeToken                                    ;handle console input
  3805                                                          mov     edx,wzConsoleToken                              ;token buffer
  3806                                                          call    ConDetermineCommand                             ;determine command number
  3807                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  3808                                                          jb      .20                                             ;yes, branch
  3809                                  
  3810                                                          putConsoleString czUnknownCommand                       ;display error message
  3811                                  
  3812                                                          jmp     .10                                             ;next command
  3813                                  .20                     shl     eax,2                                           ;index into jump table
  3814                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  3815                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  3816                                                          call    eax                                             ;call command handler
  3817                                                          jmp     .10                                             ;next command
  3818                                  ;-----------------------------------------------------------------------------------------------------------------------
  3819                                  ;
  3820                                  ;       Routine:        ConInitializeData
  3821                                  ;
  3822                                  ;       Description:    This routine initializes console task variables.
  3823                                  ;
  3824                                  ;-----------------------------------------------------------------------------------------------------------------------
  3825                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  3826                                                          push    edi                                             ;
  3827                                                          push    es                                              ;
  3828                                  ;
  3829                                  ;       Initialize console work areas.
  3830                                  ;
  3831                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3832                                                          pop     es                                              ;... into extra segment register
  3833                                                          mov     edi,ECONDATA                                    ;OS console data address
  3834                                                          xor     al,al                                           ;initialization value
  3835                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  3836                                                          cld                                                     ;forward strings
  3837                                                          rep     stosb                                           ;initialize data
  3838                                  ;
  3839                                  ;       Restore and return.
  3840                                  ;
  3841                                                          pop     es                                              ;restore non-volatile regs
  3842                                                          pop     edi                                             ;
  3843                                                          pop     ecx                                             ;
  3844                                                          ret                                                     ;return
  3845                                  ;-----------------------------------------------------------------------------------------------------------------------
  3846                                  ;
  3847                                  ;       Routine:        ConTakeToken
  3848                                  ;
  3849                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3850                                  ;
  3851                                  ;       In:             DS:EDX  source buffer address
  3852                                  ;                       DS:EBX  target buffer address
  3853                                  ;
  3854                                  ;       Out:            DS:EDX  source buffer address
  3855                                  ;                       DS:EBX  target buffer address
  3856                                  ;
  3857                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3858                                  ;
  3859                                  ;-----------------------------------------------------------------------------------------------------------------------
  3860                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  3861                                                          push    edi                                             ;
  3862                                                          push    es                                              ;
  3863                                                          push    ds                                              ;load data segment selector ...
  3864                                                          pop     es                                              ;... into extra segment reg
  3865                                                          mov     esi,edx                                         ;source buffer address
  3866                                                          mov     edi,ebx                                         ;target buffer address
  3867                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3868                                                          cld                                                     ;forward strings
  3869                                  .10                     lodsb                                                   ;load byte
  3870                                                          cmp     al,EASCIISPACE                                  ;space?
  3871                                                          je      .10                                             ;yes, continue
  3872                                                          test    al,al                                           ;end of line?
  3873                                                          jz      .40                                             ;yes, branch
  3874                                  .20                     stosb                                                   ;store byte
  3875                                                          lodsb                                                   ;load byte
  3876                                                          test    al,al                                           ;end of line?
  3877                                                          jz      .40                                             ;no, continue
  3878                                                          cmp     al,EASCIISPACE                                  ;space?
  3879                                                          jne     .20                                             ;no, continue
  3880                                  .30                     lodsb                                                   ;load byte
  3881                                                          cmp     al,EASCIISPACE                                  ;space?
  3882                                                          je      .30                                             ;yes, continue
  3883                                                          dec     esi                                             ;pre-position
  3884                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3885                                                          mov     edi,edx                                         ;source buffer address
  3886                                  .50                     lodsb                                                   ;remaining byte
  3887                                                          stosb                                                   ;move to front of buffer
  3888                                                          test    al,al                                           ;end of line?
  3889                                                          jnz     .50                                             ;no, continue
  3890                                                          pop     es                                              ;restore non-volatile regs
  3891                                                          pop     edi                                             ;
  3892                                                          pop     esi                                             ;
  3893                                                          ret                                                     ;return
  3894                                  ;-----------------------------------------------------------------------------------------------------------------------
  3895                                  ;
  3896                                  ;       Routine:        ConDetermineCommand
  3897                                  ;
  3898                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3899                                  ;
  3900                                  ;       input:          DS:EDX  command address
  3901                                  ;
  3902                                  ;       output:         EAX     >=0     = command nbr
  3903                                  ;                               0       = unknown command
  3904                                  ;
  3905                                  ;-----------------------------------------------------------------------------------------------------------------------
  3906                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3907                                                          push    ecx                                             ;
  3908                                                          push    esi                                             ;
  3909                                                          push    edi                                             ;
  3910                                  
  3911                                                          upperCaseString                                         ;upper-case string at EDX
  3912                                  
  3913                                                          mov     esi,tConCmdTbl                                  ;commands table
  3914                                                          xor     edi,edi                                         ;intialize command number
  3915                                                          cld                                                     ;forward strings
  3916                                  .10                     lodsb                                                   ;command length
  3917                                                          movzx   ecx,al                                          ;command length
  3918                                                          jecxz   .20                                             ;branch if end of table
  3919                                                          mov     ebx,esi                                         ;table entry address
  3920                                                          add     esi,ecx                                         ;next table entry address
  3921                                  
  3922                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3923                                  
  3924                                                          jecxz   .20                                             ;branch if equal
  3925                                                          inc     edi                                             ;increment command nbr
  3926                                                          jmp     .10                                             ;repeat
  3927                                  .20                     mov     eax,edi                                         ;command number
  3928                                                          pop     edi                                             ;restore non-volatile regs
  3929                                                          pop     esi                                             ;
  3930                                                          pop     ecx                                             ;
  3931                                                          pop     ebx                                             ;
  3932                                                          ret                                                     ;return
  3933                                  ;-----------------------------------------------------------------------------------------------------------------------
  3934                                  ;
  3935                                  ;       Routine:        ConClear
  3936                                  ;
  3937                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  3938                                  ;
  3939                                  ;-----------------------------------------------------------------------------------------------------------------------
  3940                                  ConClear                clearConsoleScreen                                      ;clear console screen
  3941                                                          ret                                                     ;return
  3942                                  ;-----------------------------------------------------------------------------------------------------------------------
  3943                                  ;
  3944                                  ;       Routine:        ConExit
  3945                                  ;
  3946                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3947                                  ;
  3948                                  ;-----------------------------------------------------------------------------------------------------------------------
  3949                                  ConExit                 resetSystem                                             ;issue system reset
  3950                                                          ret                                                     ;return
  3951                                  ;-----------------------------------------------------------------------------------------------------------------------
  3952                                  ;
  3953                                  ;       Routine:        ConInt6
  3954                                  ;
  3955                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  3956                                  ;
  3957                                  ;-----------------------------------------------------------------------------------------------------------------------
  3958                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  3959                                                          ret                                                     ;return (not executed)
  3960                                  ;-----------------------------------------------------------------------------------------------------------------------
  3961                                  ;
  3962                                  ;       Routine:        ConMem
  3963                                  ;
  3964                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  3965                                  ;
  3966                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  3967                                  ;
  3968                                  ;-----------------------------------------------------------------------------------------------------------------------
  3969                                  ConMem                  push    ebx                                             ;save non-volatile regs
  3970                                                          push    esi                                             ;
  3971                                                          push    edi                                             ;
  3972                                  ;
  3973                                  ;                       update the source address if a parameter is given
  3974                                  ;
  3975                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  3976                                                          mov     ebx,wzConsoleToken                              ;console command token address
  3977                                                          call    ConTakeToken                                    ;take first param as token
  3978                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  3979                                                          je      .10                                             ;no, branch
  3980                                                          mov     edx,wzConsoleToken                              ;first param as token address
  3981                                  
  3982                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  3983                                  
  3984                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  3985                                  ;
  3986                                  ;                       setup source address and row count
  3987                                  ;
  3988                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  3989                                                          xor     ecx,ecx                                         ;zero register
  3990                                                          mov     cl,16                                           ;row count
  3991                                  ;
  3992                                  ;                       start the row with the source address in hexadecimal
  3993                                  ;
  3994                                  .20                     push    ecx                                             ;save remaining rows
  3995                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  3996                                                          mov     edx,edi                                         ;output buffer address
  3997                                                          mov     ecx,esi                                         ;console memory address
  3998                                  
  3999                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  4000                                  
  4001                                                          add     edi,8                                           ;end of memory addr hexnum
  4002                                                          mov     al,' '                                          ;ascii space
  4003                                                          stosb                                                   ;store delimiter
  4004                                  ;
  4005                                  ;                       output 16 ASCII hexadecimal byte values for the row
  4006                                  ;
  4007                                                          xor     ecx,ecx                                         ;zero register
  4008                                                          mov     cl,16                                           ;loop count
  4009                                  .30                     push    ecx                                             ;save loop count
  4010                                                          lodsb                                                   ;memory byte
  4011                                                          mov     ah,al                                           ;memory byte
  4012                                                          shr     al,4                                            ;high-order in bits 3-0
  4013                                                          or      al,30h                                          ;apply ascii numeric zone
  4014                                                          cmp     al,3ah                                          ;numeric range?
  4015                                                          jb      .40                                             ;yes, skip ahead
  4016                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4017                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  4018                                                          mov     al,ah                                           ;low-order in bits 3-0
  4019                                                          and     al,0fh                                          ;mask out high-order bits
  4020                                                          or      al,30h                                          ;apply ascii numeric zone
  4021                                                          cmp     al,3ah                                          ;numeric range?
  4022                                                          jb      .50                                             ;yes, skip ahead
  4023                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4024                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  4025                                                          mov     al,' '                                          ;ascii space
  4026                                                          stosb                                                   ;store ascii space delimiter
  4027                                                          pop     ecx                                             ;loop count
  4028                                                          loop    .30                                             ;next
  4029                                  ;
  4030                                  ;                       output printable ASCII character section for the row
  4031                                  ;
  4032                                                          sub     esi,16                                          ;reset source pointer
  4033                                                          mov     cl,16                                           ;loop count
  4034                                  .60                     lodsb                                                   ;source byte
  4035                                                          cmp     al,32                                           ;printable? (low-range test)
  4036                                                          jb      .70                                             ;no, skip ahead
  4037                                                          cmp     al,128                                          ;printable? (high-range test)
  4038                                                          jb      .80                                             ;yes, skip ahead
  4039                                  .70                     mov     al,' '                                          ;display space instead of printable
  4040                                  .80                     stosb                                                   ;store printable ascii byte
  4041                                                          loop    .60                                             ;next source byte
  4042                                                          xor     al,al                                           ;nul-terminator
  4043                                                          stosb                                                   ;terminate output line
  4044                                  ;
  4045                                  ;                       display constructed output buffer and newline
  4046                                  ;
  4047                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  4048                                                          putConsoleString czNewLine                              ;display new line
  4049                                  ;
  4050                                  ;                       repeat until all lines displayed and preserve source address
  4051                                  ;
  4052                                                          pop     ecx                                             ;remaining rows
  4053                                                          loop    .20                                             ;next row
  4054                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  4055                                                          pop     edi                                             ;restore regs
  4056                                                          pop     esi                                             ;
  4057                                                          pop     ebx                                             ;
  4058                                                          ret                                                     ;return
  4059                                  ;-----------------------------------------------------------------------------------------------------------------------
  4060                                  ;
  4061                                  ;       Routine:        ConVersion
  4062                                  ;
  4063                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  4064                                  ;
  4065                                  ;-----------------------------------------------------------------------------------------------------------------------
  4066                                  ConVersion              putConsoleString czTitle                                ;display version message
  4067                                                          ret                                                     ;return
  4068                                  ;-----------------------------------------------------------------------------------------------------------------------
  4069                                  ;
  4070                                  ;       Tables
  4071                                  ;
  4072                                  ;-----------------------------------------------------------------------------------------------------------------------
  4073                                                                                                                  ;---------------------------------------
  4074                                                                                                                  ;  Command Jump Table
  4075                                                                                                                  ;---------------------------------------
  4076                                  tConJmpTbl              equ     $                                               ;command jump table
  4077                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  4078                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  4079                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  4080                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  4081                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  4082                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  4083                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  4084                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  4085                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  4086                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  4087                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4088                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4089                                                                                                                  ;---------------------------------------
  4090                                                                                                                  ;  Command Name Table
  4091                                                                                                                  ;---------------------------------------
  4092                                  tConCmdTbl              equ     $                                               ;command name table
  4093                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  4094                                                          db      8,"VERSION",0                                   ;version command
  4095                                                          db      7,"MEMORY",0                                    ;memory command
  4096                                                          db      6,"CLEAR",0                                     ;clear command
  4097                                                          db      5,"EXIT",0                                      ;exit command
  4098                                                          db      5,"INT6",0                                      ;int6 command
  4099                                                          db      5,"QUIT",0                                      ;quit command
  4100                                                          db      4,"CLS",0                                       ;cls command
  4101                                                          db      4,"MEM",0                                       ;mem command
  4102                                                          db      4,"VER",0                                       ;ver command
  4103                                                          db      0                                               ;end of table
  4104                                  ;-----------------------------------------------------------------------------------------------------------------------
  4105                                  ;
  4106                                  ;       Constants
  4107                                  ;
  4108                                  ;-----------------------------------------------------------------------------------------------------------------------
  4109                                  czNewLine               db      13,10,0                                         ;new line string
  4110                                  czPrompt                db      ":",0                                           ;prompt string
  4111                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  4112                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  4113                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  4114                                  %endif
  4115                                  %ifdef BUILDDISK
  4116                                  ;-----------------------------------------------------------------------------------------------------------------------
  4117                                  ;
  4118                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  4119                                  ;
  4120                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4121                                  ;
  4122                                  ;-----------------------------------------------------------------------------------------------------------------------
  4123                                  section                 unused                                                  ;unused disk space
  4124                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  4125                                  %endif
  4126                                  ;=======================================================================================================================
  4127                                  ;
  4128                                  ;       End of Program Code
  4129                                  ;
  4130                                  ;=======================================================================================================================
