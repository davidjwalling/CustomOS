     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.009
     6                                  ;
     7                                  ;	Description:	In this sample, the console task is expanded to support reading the real-time clock and new
     8                                  ;			"date" and "time" and other related commands.
     9                                  ;
    10                                  ;	Revised:	July 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;			Register names in comments are in upper case.
    51                                  ;			Hexadecimal values in comments are in lower case.
    52                                  ;			Routines are preceded with a comment box that includes the routine name, description, and
    53                                  ;			register contents on entry and exit.
    54                                  ;
    55                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    56                                  ;			Assembly operands begin in column 33.
    57                                  ;			Lines should not extend beyond column 120.
    58                                  ;
    59                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock).
    60                                  ;			Routine names begin with a verb (Get, Read, etc.).
    61                                  ;			Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
    62                                  ;
    63                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    64                                  ;			Constant stored values are named in camel case, starting with 'c'.
    65                                  ;			The 2nd letter of the constant label indicates the storage type.
    66                                  ;
    67                                  ;			cq......	constant quad-word (dq)
    68                                  ;			cd......	constant double-word (dd)
    69                                  ;			cw......	constant word (dw)
    70                                  ;			cb......	constant byte (db)
    71                                  ;			cz......	constant ASCIIZ (null-terminated) string
    72                                  ;
    73                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    74                                  ;			The 2nd letter of the variable label indicates the storage type.
    75                                  ;
    76                                  ;			wq......	variable quad-word (resq)
    77                                  ;			wd......	variable double-word (resd)
    78                                  ;			ww......	variable word (resw)
    79                                  ;			wb......	variable byte (resb)
    80                                  ;
    81                                  ;	Literals:	Literal values defined by external standards should be defined as symbolic constants (equates).
    82                                  ;			Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h'. e.g. 01Fh.
    83                                  ;			Binary literal values in source code are encoded with a final 'b', e.g. 1010b.
    84                                  ;			Decimal literal values in source code are strictly numerals, e.g. 2048.
    85                                  ;			Octal literal values are avoided.
    86                                  ;			String literals are enclosed in double quotes, e.g. "Loading OS".
    87                                  ;			Single character literals are enclosed in single quotes, e.g. 'A'.
    88                                  ;
    89                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    90                                  ;			Structure names do not begin with a verb.
    91                                  ;
    92                                  ;	Macros:		Macro names are in camel case (getDateString).
    93                                  ;			Macro names do begin with a verb.
    94                                  ;
    95                                  ;	Registers:	Register names in comments are in upper case.
    96                                  ;			Register names in source code are in lower case.
    97                                  ;
    98                                  ;	Usage:		Registers EBX, ECX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    99                                  ;			Registers EAX and ECX are preferred for returning response/result values.
   100                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
   101                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
   102                                  ;
   103                                  ;-----------------------------------------------------------------------------------------------------------------------
   104                                  ;=======================================================================================================================
   105                                  ;
   106                                  ;	Equates
   107                                  ;
   108                                  ;	The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   109                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   110                                  ;	values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   111                                  ;	sets. Hardware-based values are listed first, followed by BIOS, protocol and application values.
   112                                  ;
   113                                  ;=======================================================================================================================
   114                                  ;-----------------------------------------------------------------------------------------------------------------------
   115                                  ;
   116                                  ;	8042 Keyboard Controller						EKEYB...
   117                                  ;
   118                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   119                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   120                                  ;
   121                                  ;-----------------------------------------------------------------------------------------------------------------------
   122                                  EKEYBPORTDATA		equ	060h						;data port
   123                                  EKEYBPORTSTAT		equ	064h						;status port
   124                                  EKEYBCMDRESET		equ	0FEh						;reset bit 0 to restart system
   125                                  EKEYBBITOUT		equ	001h						;output buffer status bit
   126                                  EKEYBBITIN		equ	002h						;input buffer status bit
   127                                  EKEYBCMDLAMPS		equ	0EDh						;set/reset lamps command
   128                                  EKEYBWAITLOOP		equ	010000h						;wait loop
   129                                  										;---------------------------------------
   130                                  										;	Keyboard Scan Codes
   131                                  										;---------------------------------------
   132                                  EKEYBCTRLDOWN		equ	01Dh						;control key down
   133                                  EKEYBPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   134                                  EKEYBSHIFTLDOWN		equ	02Ah						;left shift key down
   135                                  EKEYBPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   136                                  EKEYBSLASH		equ	035h						;slash
   137                                  EKEYBSHIFTRDOWN		equ	036h						;right shift key down
   138                                  EKEYBALTDOWN		equ	038h						;alt key down
   139                                  EKEYBCAPSDOWN		equ	03Ah						;caps-lock down
   140                                  EKEYBNUMDOWN		equ	045h						;num-lock down
   141                                  EKEYBSCROLLDOWN		equ	046h						;scroll-lock down
   142                                  EKEYBINSERTDOWN		equ	052h						;insert down (e0 52)
   143                                  EKEYBUP			equ	080h						;up
   144                                  EKEYBCTRLUP		equ	09Dh						;control key up
   145                                  EKEYBSHIFTLUP		equ	0AAh						;left shift key up
   146                                  EKEYBSLASHUP		equ	0B5h						;slash key up
   147                                  EKEYBSHIFTRUP		equ	0B6h						;right shift key up
   148                                  EKEYBPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   149                                  EKEYBALTUP		equ	0B8h						;alt key up
   150                                  EKEYBCAPSUP		equ	0BAh						;caps-lock up
   151                                  EKEYBNUMUP		equ	0C5h						;num-lock up
   152                                  EKEYBSCROLLUP		equ	0C6h						;scroll-lock up
   153                                  EKEYBINSERTUP		equ	0D2h						;insert up (e0 d2)
   154                                  EKEYBCODEEXT0		equ	0E0h						;extended scan code 0
   155                                  EKEYBCODEEXT1		equ	0E1h						;extended scan code 1
   156                                  ;-----------------------------------------------------------------------------------------------------------------------
   157                                  ;
   158                                  ;	8253 Programmable Interrupt Timer					EPIT...
   159                                  ;
   160                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   161                                  ;	approximately 18.2 times per second.
   162                                  ;
   163                                  ;-----------------------------------------------------------------------------------------------------------------------
   164                                  EPITDAYTICKS		equ	1800B0h						;ticks per day
   165                                  ;-----------------------------------------------------------------------------------------------------------------------
   166                                  ;
   167                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   168                                  ;
   169                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   170                                  ;	external devices and signals a hardware interrupt to the CPU.
   171                                  ;
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  EPICPORTPRI		equ	020h						;primary control port 0
   174                                  EPICPORTPRI1		equ	021h						;primary control port 1
   175                                  EPICPORTSEC		equ	0A0h						;secondary control port 0
   176                                  EPICPORTSEC1		equ	0A1h						;secondary control port 1
   177                                  EPICEOI			equ	020h						;non-specific EOI code
   178                                  ;-----------------------------------------------------------------------------------------------------------------------
   179                                  ;
   180                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   181                                  ;
   182                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   183                                  ;	for CGA, EGA, VGA and compatible video modes.
   184                                  ;
   185                                  ;-----------------------------------------------------------------------------------------------------------------------
   186                                  ECRTPORTHI		equ	003h						;controller port hi
   187                                  ECRTPORTLO		equ	0D4h						;controller port lo
   188                                  ECRTCURLOCHI		equ	00Eh						;cursor loc reg hi
   189                                  ECRTCURLOCLO		equ	00Fh						;cursor loc reg lo
   190                                  ;-----------------------------------------------------------------------------------------------------------------------
   191                                  ;
   192                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   193                                  ;
   194                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   195                                  ;
   196                                  ;-----------------------------------------------------------------------------------------------------------------------
   197                                  EFDCPORTHI		equ	003h						;controller port hi
   198                                  EFDCPORTLOOUT		equ	0F2h						;digital output register lo
   199                                  EFDCPORTLOSTAT		equ	0F4h						;main status register lo
   200                                  EFDCSTATBUSY		equ	010h						;main status is busy
   201                                  EFDCMOTOROFF		equ	00Ch						;motor off / enable / DMA
   202                                  ;-----------------------------------------------------------------------------------------------------------------------
   203                                  ;
   204                                  ;	Motorola MC 146818 Real-Time Clock					ERTC...
   205                                  ;
   206                                  ;	The Motorola MC 146818 was the original real-time clock in PCs.
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  ERTCREGPORT		equ	70h						;register select port
   210                                  ERTCDATAPORT		equ	71h						;data port
   211                                  ERTCSECONDREG		equ	00h						;second
   212                                  ERTCMINUTEREG		equ	02h						;minute
   213                                  ERTCHOURREG		equ	04h						;hour
   214                                  ERTCWEEKDAYREG		equ	06h						;weekday
   215                                  ERTCDAYREG		equ	07h						;day
   216                                  ERTCMONTHREG		equ	08h						;month
   217                                  ERTCYEARREG		equ	09h						;year of the century
   218                                  ERTCSTATUSREG		equ	0bh						;status
   219                                  ERTCCENTURYREG		equ	32h						;century
   220                                  ERTCBINARYVALS		equ	00000100b					;values are binary
   221                                  ;-----------------------------------------------------------------------------------------------------------------------
   222                                  ;
   223                                  ;	x86 Descriptor Access Codes						EACC...
   224                                  ;
   225                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   226                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   227                                  ;
   228                                  ;	0.......	Segment is not present in memory (triggers int 11)
   229                                  ;	1.......	Segment is present in memory
   230                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   231                                  ;	...0....	Segment is a system segment
   232                                  ;	...00010		Local Descriptor Table
   233                                  ;	...00101		Task Gate
   234                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   235                                  ;	...01100		Call Gate (386)
   236                                  ;	...01110		Interrupt Gate (386)
   237                                  ;	...01111		Trap Gate (386)
   238                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   239                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   240                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   241                                  ;
   242                                  ;-----------------------------------------------------------------------------------------------------------------------
   243                                  EACCLDT			equ	10000010b					;local descriptor table
   244                                  EACCTASK		equ	10000101b					;task gate
   245                                  EACCTSS			equ	10001001b					;task-state segment
   246                                  EACCGATE		equ	10001100b					;call gate
   247                                  EACCINT			equ	10001110b					;interrupt gate
   248                                  EACCTRAP		equ	10001111b					;trap gate
   249                                  EACCDATA		equ	10010011b					;upward writable data
   250                                  EACCCODE		equ	10011011b					;non-conforming readable code
   251                                  ;-----------------------------------------------------------------------------------------------------------------------
   252                                  ;
   253                                  ;	BIOS Interrupts and Functions						EBIOS...
   254                                  ;
   255                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   256                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   257                                  ;
   258                                  ;-----------------------------------------------------------------------------------------------------------------------
   259                                  EBIOSINTVIDEO		equ	010h						;video services interrupt
   260                                  EBIOSFNSETVMODE		equ	000h						;video set mode function
   261                                  EBIOSMODETEXT80		equ	003h						;video mode 80x25 text
   262                                  EBIOSFNTTYOUTPUT	equ	00Eh						;video TTY output function
   263                                  EBIOSINTDISKETTE	equ	013h						;diskette services interrupt
   264                                  EBIOSINTMISC		equ	015h						;miscellaneous services interrupt
   265                                  EBIOSFNINITPROTMODE	equ	089h						;initialize protected mode fn
   266                                  EBIOSINTKEYBOARD	equ	016h						;keyboard services interrupt
   267                                  EBIOSFNKEYSTATUS	equ	001h						;keyboard status function
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;	ASCII									EASCII...
   271                                  ;
   272                                  ;-----------------------------------------------------------------------------------------------------------------------
   273                                  EASCIIBACKSPACE		equ	008h						;backspace
   274                                  EASCIILINEFEED		equ	00Ah						;line feed
   275                                  EASCIIRETURN		equ	00Dh						;carriage return
   276                                  EASCIIESCAPE		equ	01Bh						;escape
   277                                  EASCIISPACE		equ	020h						;space
   278                                  EASCIIUPPERA		equ	041h						;'A'
   279                                  EASCIIUPPERZ		equ	05Ah						;'Z'
   280                                  EASCIILOWERA		equ	061h						;'a'
   281                                  EASCIILOWERZ		equ	07Ah						;'z'
   282                                  EASCIITILDE		equ	07Eh						;'~'
   283                                  EASCIIBORDSGLVERT	equ	0B3h						;vertical single border
   284                                  EASCIIBORDSGLUPRRGT	equ	0BFh						;upper-right single border
   285                                  EASCIIBORDSGLLWRLFT	equ	0C0h						;lower-left single border
   286                                  EASCIIBORDSGLHORZ	equ	0C4h						;horizontal single border
   287                                  EASCIIBORDSGLLWRRGT	equ	0D9h						;lower-right single border
   288                                  EASCIIBORDSGLUPRLFT	equ	0DAh						;upper-left single border
   289                                  EASCIICASE		equ	00100000b					;case bit
   290                                  EASCIICASEMASK		equ	11011111b					;case mask
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  ;
   293                                  ;	Boot Sector and Loader Constants					EBOOT...
   294                                  ;
   295                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   296                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   297                                  ;
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  EBOOTSTACKTOP		equ	0100h						;boot sector stack top relative to DS
   300                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   301                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   302                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   303                                  EBOOTFATBASE		equ	(EBOOTSTACKTOP+EBOOTSECTORBYTES)		;offset of FAT I/O buffer rel to DS
   304                                  EBOOTMAXTRIES		equ	5						;max read retries
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   307                                  ;-----------------------------------------------------------------------------------------------------------------------
   308                                  ESELDAT			equ	018h						;kernel data selector
   309                                  ESELCGA			equ	020h						;cga video selector
   310                                  ESELOSCODE		equ	048h						;os kernel code selector
   311                                  ESELLOADERLDT		equ	050h						;loader local descriptor table selector
   312                                  ESELLOADERTSS		equ	058h						;loader task state segment selector
   313                                  ESELCONSOLELDT		equ	060h						;console local descriptor table selector
   314                                  ESELCONSOLETSS		equ	068h						;console task state segment selector
   315                                  ;-----------------------------------------------------------------------------------------------------------------------
   316                                  ;	LDT Selectors								ESEL...
   317                                  ;-----------------------------------------------------------------------------------------------------------------------
   318                                  ESELMQ			equ	02Ch						;console task message queue
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  ;	Kernel Constants							EKRN...
   321                                  ;-----------------------------------------------------------------------------------------------------------------------
   322                                  EKRNDESLEN		equ	8						;size of descriptor
   323                                  EKRNCODEADR		equ	01000h						;kernel base address (0000:1000)
   324                                  EKRNCODESEG		equ	(EKRNCODEADR >> 4)				;kernel code segment (0100:0000)
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;	Keyboard Flags								EKEYF...
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  EKEYFCTRLLEFT		equ	00000001b					;left control
   329                                  EKEYFSHIFTLEFT		equ	00000010b					;left shift
   330                                  EKEYFALTLEFT		equ	00000100b					;left alt
   331                                  EKEYFCTRLRIGHT		equ	00001000b					;right control
   332                                  EKEYFSHIFTRIGHT		equ	00010000b					;right shift
   333                                  EKEYFSHIFT		equ	00010010b					;left or right shift
   334                                  EKEYFALTRIGHT		equ	00100000b					;right alt
   335                                  EKEYFLOCKSCROLL		equ	00000001b					;scroll-lock flag
   336                                  EKEYFLOCKNUM		equ	00000010b					;num-lock flag
   337                                  EKEYFLOCKCAPS		equ	00000100b					;cap-lock flag
   338                                  EKEYFTIMEOUT		equ	10000000b					;controller timeout
   339                                  ;-----------------------------------------------------------------------------------------------------------------------
   340                                  ;	Console Constants							ECON...
   341                                  ;-----------------------------------------------------------------------------------------------------------------------
   342                                  ECONCOLS		equ	80						;columns per row
   343                                  ECONROWS		equ	24						;console rows
   344                                  ECONOIAROW		equ	24						;operator information area row
   345                                  ECONCOLBYTES		equ	2						;bytes per column
   346                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   347                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   348                                  ECONCLEARDWORD		equ	007200720h					;attribute and ASCII space
   349                                  ECONOIADWORD		equ	070207020h					;attribute and ASCII space
   350                                  ;-----------------------------------------------------------------------------------------------------------------------
   351                                  ;	Kernel Message Identifiers						EMSG...
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  EMSGKEYDOWN		equ	041000000h					;key-down
   354                                  EMSGKEYUP		equ	041010000h					;key-up
   355                                  EMSGKEYCHAR		equ	041020000h					;character
   356                                  ;=======================================================================================================================
   357                                  ;
   358                                  ;	Structures
   359                                  ;
   360                                  ;=======================================================================================================================
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  ;
   363                                  ;	DATETIME
   364                                  ;
   365                                  ;	The DATETIME structure stores date and time values from the real-time clock.
   366                                  ;
   367                                  ;-----------------------------------------------------------------------------------------------------------------------
   368                                  struc			DATETIME
   369 00000000 <res 00000001>          .second			resb	1						;seconds
   370 00000001 <res 00000001>          .minute			resb	1						;minutes
   371 00000002 <res 00000001>          .hour			resb	1						;hours
   372 00000003 <res 00000001>          .weekday		resb	1						;day of week
   373 00000004 <res 00000001>          .day			resb	1						;day of month
   374 00000005 <res 00000001>          .month			resb	1						;month of year
   375 00000006 <res 00000001>          .year			resb	1						;year of century
   376 00000007 <res 00000001>          .century		resb	1						;century
   377                                  EDATETIMELEN		equ	($-.second)
   378                                  endstruc
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  ;
   381                                  ;	MQUEUE
   382                                  ;
   383                                  ;	The MQUEUE structure maps memory used for a message queue.
   384                                  ;
   385                                  ;-----------------------------------------------------------------------------------------------------------------------
   386                                  struc			MQUEUE
   387 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   388 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   389 00000008 <res 000003F8>          MQData			resd	254						;message queue
   390                                  endstruc
   391                                  ;-----------------------------------------------------------------------------------------------------------------------
   392                                  ;
   393                                  ;	OSDATA
   394                                  ;
   395                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   396                                  ;	used by the BIOS.
   397                                  ;
   398                                  ;-----------------------------------------------------------------------------------------------------------------------
   399                                  struc			OSDATA
   400 00000000 <res 00000400>          			resb	0400h						;000 real mode interrupt vectors
   401 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   402 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   403 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   404 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   405 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   406 0000040A <res 00000002>          			resw	1						;40a LPT2 port address
   407 0000040C <res 00000002>          			resw	1						;40c LPT3 port address
   408 0000040E <res 00000002>          			resw	1						;40e LPT4 port address
   409 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   410 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   411 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12h
   412 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   413 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   414 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   415 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   416 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   417 0000041A <res 00000002>          			resw	1						;41a keyboard buffer head offset
   418 0000041C <res 00000002>          			resw	1						;41c keyboard buffer tail offset
   419 0000041E <res 00000020>          			resb	32						;41e keyboard buffer
   420 0000043E <res 00000001>          wbFDCStatus		resb	1						;43e drive recalibration status
   421 0000043F <res 00000001>          wbFDCControl		resb	1						;43f FDC motor status/control byte
   422 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   423 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   424 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   425 00000449 <res 00000001>          			resb	1						;449 current video mode
   426 0000044A <res 00000002>          			resw	1						;44a screen columns
   427 0000044C <res 00000002>          			resw	1						;44c video regen buffer size
   428 0000044E <res 00000002>          			resw	1						;44e current video page offset
   429 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   430 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   431 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   432 00000462 <res 00000001>          			resb	1						;462 active display page number
   433 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   434 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   435 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   436 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   437 00000469 <res 00000003>          			resb	3						;469 vague
   438 0000046C <res 00000004>          wdClockTicks		resd	1						;46c clock ticks
   439 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   440 00000471 <res 00000001>          			resb	1						;471 bios break flag
   441 00000472 <res 00000002>          			resw	1						;472 soft reset
   442 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   443 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   444 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   445 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   446 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   447 0000047C <res 00000004>          			resb	4						;47c COM timeout values
   448 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   449 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   450 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   451 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   452 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   453 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   454 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   455 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   456 0000048A <res 00000001>          			resb	1						;48a EGA+ display combination code
   457 0000048B <res 00000001>          			resb	1						;48b last diskette data rate selected
   458 0000048C <res 00000001>          			resb	1						;48c hard disk status from controller
   459 0000048D <res 00000001>          			resb	1						;48d hard disk error from controller
   460 0000048E <res 00000001>          			resb	1						;48e hard disk interrupt control flag
   461 0000048F <res 00000001>          			resb	1						;48f combination hard/floppy disk card
   462 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   463 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   464 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   465 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   466 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   467 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   468 0000049C <res 00000004>          			resd	1						;49c user wait time-out value in microseconds
   469 000004A0 <res 00000001>          			resb	1						;4a0 RTC wait function flag
   470 000004A1 <res 00000001>          			resb	1						;4a1 LANA DMA channel flags
   471 000004A2 <res 00000002>          			resb	2						;4a2 status of LANA 0,1
   472 000004A4 <res 00000004>          			resd	1						;4a4 saved hard disk interrupt vector
   473 000004A8 <res 00000004>          			resd	1						;4a8 BIOS video save/override pointer table addr
   474 000004AC <res 00000008>          			resb	8						;4ac reserved
   475 000004B4 <res 00000001>          			resb	1						;4b4 keyboard NMI control flags
   476 000004B5 <res 00000004>          			resd	1						;4b5 keyboard break pending flags
   477 000004B9 <res 00000001>          			resb	1						;4b9 Port 60 single byte queue
   478 000004BA <res 00000001>          			resb	1						;4ba scan code of last key
   479 000004BB <res 00000001>          			resb	1						;4bb NMI buffer head pointer
   480 000004BC <res 00000001>          			resb	1						;4bc NMI buffer tail pointer
   481 000004BD <res 00000010>          			resb	16						;4bd NMI scan code buffer
   482 000004CD <res 00000001>          			resb	1						;4cd unknown
   483 000004CE <res 00000002>          			resw	1						;4de day counter
   484 000004D0 <res 00000020>          			resb	32						;4d0 unknown
   485 000004F0 <res 00000010>          			resb	16						;4f0 intra-app comm area
   486 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   487 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   488 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   489 00000505 <res 0000000A>          			resb	10						;505 POST work area
   490 0000050F <res 00000001>          			resb	1						;50f BASIC shell flag
   491 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   492 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   493 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   494 0000051A <res 00000004>          			resd	1						;51a BASIC INT 24 interrupt handler
   495 0000051E <res 00000002>          			resw	1						;51e unknown
   496 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   497 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1e)
   498 00000530 <res 00000004>          			resb	4						;530 MODE command
   499 00000534 <res 000001CC>          			resb	460						;534 unused
   500 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   501                                  ;-----------------------------------------------------------------------------------------------------------------------
   502                                  ;
   503                                  ;	OS Variables								@disk: N/A	@mem: 000800
   504                                  ;
   505                                  ;	Operating system variables are system global. They are defined at low memory address 800h and are typically
   506                                  ;	accessed using GDT selector 18H, which defines a 4GB address space at address 0:0. The variables defined here
   507                                  ;	are organized based on the task that usually accesses them.
   508                                  ;
   509                                  ;-----------------------------------------------------------------------------------------------------------------------
   510                                  ;-----------------------------------------------------------------------------------------------------------------------
   511                                  ;
   512                                  ;	Console Task Variables
   513                                  ;
   514                                  ;	These variables are exclusve to the console task. These variables are initialized by the console task when
   515                                  ;	the console task starts.
   516                                  ;
   517                                  ;-----------------------------------------------------------------------------------------------------------------------
   518                                  			align	4
   519                                  ECONDATA		equ	($)
   520 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   521 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   522 00000802 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   523 00000803 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   524 00000804 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   525 00000805 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   526 00000806 <res 00000001>          wbConsoleScan1		resb	1						;scan code
   527 00000807 <res 00000001>          wbConsoleScan2		resb	1						;scan code
   528 00000808 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   529 00000809 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   530 0000080A <res 00000001>          wbConsoleScan5		resb	1						;scan code
   531 0000080B <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   532 0000080C <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   533 0000085C <res 00000050>          wzConsoleToken		resb	80						;token buffer
   534 000008AC <res 00000050>          wzConsoleOutBuffer	resb	80						;response output buffer
   535 000008FC <res 00000008>          wsConsoleDateTime	resb	EDATETIMELEN					;date-time buffer
   536                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   537                                  ;-----------------------------------------------------------------------------------------------------------------------
   538                                  ;
   539                                  ;	End of OS Variables
   540                                  ;
   541                                  ;-----------------------------------------------------------------------------------------------------------------------
   542                                  endstruc
   543                                  ;-----------------------------------------------------------------------------------------------------------------------
   544                                  ;
   545                                  ;	Macros
   546                                  ;
   547                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   548                                  ;
   549                                  ;-----------------------------------------------------------------------------------------------------------------------
   550                                  %macro			mint	1
   551                                  _%1			equ	($-$$) / EKRNDESLEN
   552                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   553                                  %endmacro
   554                                  %macro			mtrap	1
   555                                  _%1			equ	($-$$) / EKRNDESLEN
   556                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   557                                  %endmacro
   558                                  %macro			menter	1
   559                                  ?%1			equ	($-$$)
   560                                  %endmacro
   561                                  %macro			tsvce	1
   562                                  e%1			equ	($-tsvc)/4
   563                                  			dd	%1
   564                                  %endmacro
   565                                  %ifdef BUILDBOOT
   566                                  ;=======================================================================================================================
   567                                  ;
   568                                  ;	Boot Sector								@disk: 000000	@mem: 007c00
   569                                  ;
   570                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   571                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   572                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   573                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   574                                  ;
   575                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   576                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   577                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   578                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   579                                  ;	immediately followed by a disk parameter table.
   580                                  ;
   581                                  ;=======================================================================================================================
   582                                  			cpu	8086						;assume minimal CPU
   583                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   584                                  			bits	16						;16-bit code at power-up
   585                                  %ifdef BUILDPREP
   586                                  Boot			jmp	word Prep					;jump to preparation code
   587                                  %else
   588 00000000 E91B00                  Boot			jmp	word Boot.10					;jump over parameter table
   589                                  %endif
   590                                  ;-----------------------------------------------------------------------------------------------------------------------
   591                                  ;
   592                                  ;	Disk Parameter Table
   593                                  ;
   594                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   595                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   596                                  ;
   597                                  ;-----------------------------------------------------------------------------------------------------------------------
   598 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   599 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   600 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   601 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   602 00000010 02                      cbFatCount		db	2						;file allocation table copies
   603 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   604 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   605 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   606 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   607                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   608 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   609 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   610 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   611                                  ;
   612                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   613                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   614                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   615                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   616                                  ;	given several possible starting values for CS:IP.
   617                                  ;
   618                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   619 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   620                                  .@20			equ	$-$$						;.@20 = 021h
   621 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   622 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   623 00000025 B104                    			mov	cl,4						;shift count
   624 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   625 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   626 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   627                                  ;
   628                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   629                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   630                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   631                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   632                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   633                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   634                                  ;
   635 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   636 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   637 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   638 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp (ints disabled)
   639 00000036 BC0001                  			mov	sp,EBOOTSTACKTOP				;SP = 0100       (ints enabled)
   640                                  ;
   641                                  ;	Our boot addressability is now set up according to the following diagram.
   642                                  ;
   643                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   644                                  ;				|  Boot Stack & Boot PSP (Unused)		|
   645                                  ;				|  256 = 100h bytes				|
   646                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ DS:0100  07b0:0100
   647                                  ;				|  Boot Sector (vstart=0100h)			|
   648                                  ;				|  1 sector = 512 = 200h bytes			|
   649                                  ;			007e00	+-----------------------------------------------+ DS:0300
   650                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   651                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   652                                  ;			009000	+-----------------------------------------------+ DS:1500  08f0:0100
   653                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   654                                  ;			009200	+-----------------------------------------------+ DS:1700
   655                                  ;
   656                                  ;	On entry, DL indicates the drive being booted from.
   657                                  ;
   658 00000039 8816[F801]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   659                                  ;
   660                                  ;	Compute directory i/o buffer address.
   661                                  ;
   662 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   663 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   664 00000044 050003                  			add	ax,EBOOTFATBASE					;AX = 1500 = end of FAT buffer
   665 00000047 A3[EC01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1500
   666                                  ;
   667                                  ;	Compute segment where os.com will be loaded.
   668                                  ;
   669 0000004A D3E8                    			shr	ax,cl						;AX = 0150
   670 0000004C 01D8                    			add	ax,bx						;AX = 0150 + 07b0 = 0900
   671 0000004E 83E810                  			sub	ax,16						;AX = 08f0
   672 00000051 A3[3F01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 08f0
   673                                  ;
   674                                  ;	Set the video mode to 80 column, 25 row, text.
   675                                  ;
   676 00000054 B80300                  			mov	ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80		;set mode function, 80x25 text mode
   677 00000057 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   678                                  ;
   679                                  ;	Write a message to the console so we know we have our addressability established.
   680                                  ;
   681 00000059 BE[C501]                			mov	si,czLoadMsg					;loading message
   682 0000005C E84B01                  			call	BootPrint					;display loader message
   683                                  ;
   684                                  ;	Initialize the number of directory sectors to search.
   685                                  ;
   686 0000005F A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   687 00000062 A3[EE01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   688                                  ;
   689                                  ;	Compute number of directory sectors and initialize overhead count.
   690                                  ;
   691 00000065 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   692 00000067 F726[B801]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   693 0000006B F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   694 0000006F A3[F001]                			mov	[wwOverhead],ax					;[overhead] = 000e
   695                                  ;
   696                                  ;	Compute directory entries per sector.
   697                                  ;
   698 00000072 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   699 00000073 F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   700 00000075 A3[F201]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   701                                  ;
   702                                  ;	Compute first logical directory sector and update overhead count.
   703                                  ;
   704 00000078 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   705 0000007B F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   706 0000007F 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   707 00000083 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   708 00000087 A3[F401]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   709 0000008A 0106[F001]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   710                                  ;
   711                                  ;	Read directory sector.
   712                                  ;
   713 0000008E B001                    .30			mov	al,1						;sector count
   714 00000090 A2[F601]                			mov	[wbReadCount],al				;[readcount] = 01
   715 00000093 8B1E[EC01]              			mov	bx,[wwDirBuffer]				;BX = 1500
   716 00000097 E8A700                  			call	ReadSector					;read sector into es:bx
   717                                  ;
   718                                  ;	Setup variables to search this directory sector.
   719                                  ;
   720 0000009A A1[EE01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   721 0000009D 3B06[F201]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   722 000000A1 7603                    			jna	.40						;no, continue
   723 000000A3 A1[F201]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   724 000000A6 2906[EE01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   725 000000AA BE[BA01]                			mov	si,cbKernelProgram				;program name
   726 000000AD 8B3E[EC01]              			mov	di,[wwDirBuffer]				;DI = 1500
   727                                  ;
   728                                  ;	Loop through directory sectors searching for kernel program.
   729                                  ;
   730 000000B1 56                      .50			push	si						;save kernel name address
   731 000000B2 57                      			push	di						;save dir i/o buffer address
   732 000000B3 B90B00                  			mov	cx,11						;length of 8+3 name
   733 000000B6 FC                      			cld							;forward strings
   734 000000B7 F3A6                    			repe	cmpsb						;compare entry name
   735 000000B9 5F                      			pop	di						;restore dir i/o buffer address
   736 000000BA 5E                      			pop	si						;restore kernel name address
   737 000000BB 7418                    			je	.60						;exit loop if found
   738 000000BD 033E[B801]              			add	di,[cwEntryLen]					;point to next dir entry
   739 000000C1 48                      			dec	ax						;decrement remaining entries
   740 000000C2 75ED                    			jnz	.50						;next entry
   741                                  ;
   742                                  ;	Repeat search if we are not at the end of the directory.
   743                                  ;
   744 000000C4 FF06[F401]              			inc	word [wwLogicalSector]				;increment logical sector
   745 000000C8 833E[EE01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   746 000000CD 75BF                    			jne	.30						;no, get next sector
   747 000000CF BE[E001]                			mov	si,czNoKernel					;missing kernel message
   748 000000D2 E9C000                  			jmp	BootExit					;display message and exit
   749                                  ;
   750                                  ;	If we find the kernel program in the directory, read the FAT.
   751                                  ;
   752 000000D5 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   753 000000D8 A3[F401]                			mov	[wwLogicalSector],ax				;start past boot sector
   754 000000DB A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   755 000000DE A2[F601]                			mov	[wbReadCount],al				;[readcount] = 09
   756 000000E1 BB0003                  			mov	bx,EBOOTFATBASE					;BX = 0300
   757 000000E4 E85A00                  			call	ReadSector					;read FAT into buffer
   758                                  ;
   759                                  ;	Get the starting cluster of the kernel program and target address.
   760                                  ;
   761 000000E7 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   762 000000EA C41E[3D01]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load add (08F0:0100)
   763                                  ;
   764                                  ;	Read each program cluster into RAM.
   765                                  ;
   766 000000EE 50                      .70			push	ax						;save cluster nbr
   767 000000EF 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   768 000000F2 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   769 000000F6 880E[F601]              			mov	[wbReadCount],cl				;save sectors to read
   770 000000FA 30ED                    			xor	ch,ch						;CX = sectors per cluster
   771 000000FC F7E1                    			mul	cx						;DX:AX = logical cluster sector
   772 000000FE 0306[F001]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   773 00000102 A3[F401]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   774 00000105 E83900                  			call	ReadSector					;read sectors into ES:BX
   775                                  ;
   776                                  ;	Update buffer pointer for next cluster.
   777                                  ;
   778 00000108 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   779 0000010B 30E4                    			xor	ah,ah						;AX = sectors per cluster
   780 0000010D F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   781 00000111 01C3                    			add	bx,ax						;BX = next cluster target address
   782 00000113 58                      			pop	ax						;AX = restore cluster nbr
   783                                  ;
   784                                  ;	Compute next cluster number.
   785                                  ;
   786 00000114 89C1                    			mov	cx,ax						;CX = cluster nbr
   787 00000116 89C7                    			mov	di,ax						;DI = cluster nbr
   788 00000118 D1E8                    			shr	ax,1						;AX = cluster/2
   789 0000011A 89C2                    			mov	dx,ax						;DX = cluster/2
   790 0000011C 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   791 0000011E 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   792 00000120 83E701                  			and	di,1						;get low bit
   793 00000123 01C7                    			add	di,ax						;add one if cluster is odd
   794 00000125 81C70003                			add	di,EBOOTFATBASE					;add FAT buffer address
   795 00000129 8B05                    			mov	ax,[di]						;get cluster bytes
   796                                  ;
   797                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   798                                  ;
   799 0000012B F6C101                  			test	cl,1						;is cluster odd?
   800 0000012E 7404                    			jz	.80						;no, skip ahead
   801 00000130 B104                    			mov	cl,4						;shift count
   802 00000132 D3E8                    			shr	ax,cl						;shift nybble low
   803 00000134 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   804 00000137 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   805 0000013A 75B2                    			jne	.70						;no, continue
   806                                  ;
   807                                  ;	Transfer control to the operating system program.
   808                                  ;
   809 0000013C EA                      			db	0EAh						;jmp seg:offset
   810 0000013D 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   811 0000013F F008                    wwLoadSegment		dw	08F0h						;kernel entry segment (computed)
   812                                  ;
   813                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   814                                  ;
   815 00000141 A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   816 00000144 F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   817 00000148 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   818 0000014A A1[F401]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   819 0000014D F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   820 0000014F A2[FB01]                			mov	[wbTrack],al					;[track] = cylinder
   821 00000152 89D0                    			mov	ax,dx						;AX = cyl sector
   822 00000154 F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   823 00000158 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   824 0000015A A3[F901]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   825                                  ;
   826                                  ;	Try maxtries times to read sector.
   827                                  ;
   828 0000015D B90500                  			mov	cx,EBOOTMAXTRIES				;CX = 0005
   829 00000160 53                      .10			push	bx						;save buffer address
   830 00000161 51                      			push	cx						;save retry count
   831 00000162 8B16[F801]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   832 00000166 8B0E[FA01]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   833 0000016A A1[F601]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   834 0000016D CD13                    			int	EBIOSINTDISKETTE				;read sector
   835 0000016F 59                      			pop	cx						;restore retry count
   836 00000170 5B                      			pop	bx						;restore buffer address
   837 00000171 7343                    			jnc	BootReturn					;skip ahead if done
   838 00000173 E2EB                    			loop	.10						;retry
   839                                  ;
   840                                  ;	Handle disk error: convert to ASCII and store in error string.
   841                                  ;
   842 00000175 88E0                    			mov	al,ah						;AL = bios error code
   843 00000177 30E4                    			xor	ah,ah						;AX = bios error code
   844 00000179 B210                    			mov	dl,16						;divisor for base 16
   845 0000017B F6F2                    			div	dl						;AL = hi order, AH = lo order
   846 0000017D 0D3030                  			or	ax,03030h					;apply ASCII zone bits
   847 00000180 80FC3A                  			cmp	ah,03Ah						;range test ASCII numeral
   848 00000183 7203                    			jb	.20						;continue if numeral
   849 00000185 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   850 00000188 3C3A                    .20			cmp	al,03Ah						;range test ASCII numeral
   851 0000018A 7203                    			jb	.30						;continue if numeral
   852 0000018C 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   853 0000018F A3[DD01]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   854 00000192 BE[D201]                			mov	si,czErrorMsg					;error message address
   855 00000195 E81200                  BootExit		call	BootPrint					;display messge to console
   856 00000198 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   857 0000019A CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   858 0000019C 7504                    			jnz	.20						;continue if key pressed
   859 0000019E FB                      			sti							;enable maskable interrupts
   860 0000019F F4                      			hlt							;wait for interrupt
   861 000001A0 EBF6                    			jmp	.10						;repeat
   862 000001A2 B0FE                    .20			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
   863 000001A4 E664                    			out	EKEYBPORTSTAT,al				;drive B0 low to restart
   864 000001A6 FB                      .30			sti							;enable maskable interrupts
   865 000001A7 F4                      			hlt							;stop until reset, int, nmi
   866 000001A8 EBFC                    			jmp	.30						;loop until restart kicks in
   867                                  ;
   868                                  ;	Display text message.
   869                                  ;
   870 000001AA FC                      BootPrint		cld							;forward strings
   871 000001AB AC                      			lodsb							;load next byte at DS:SI in AL
   872 000001AC 84C0                    			test	al,al						;end of string?
   873 000001AE 7406                    			jz	BootReturn					;... yes, exit our loop
   874 000001B0 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   875 000001B2 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   876 000001B4 EBF4                    			jmp	BootPrint					;repeat until done
   877 000001B6 C3                      BootReturn		ret							;return
   878                                  ;-----------------------------------------------------------------------------------------------------------------------
   879                                  ;
   880                                  ;	Constants
   881                                  ;
   882                                  ;-----------------------------------------------------------------------------------------------------------------------
   883 000001B7 90                      			align	2
   884 000001B8 2000                    cwEntryLen		dw	32						;length of directory entry
   885 000001BA 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   885 000001C3 4F4D               
   886 000001C5 4C6F6164696E67204F-     czLoadMsg		db	"Loading OS",13,10,0				;loading message
   886 000001CE 530D0A00           
   887 000001D2 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   887 000001DB 7220               
   888 000001DD 202000                  wzErrorCode		db	020h,020h,0					;error code and null terminator
   889 000001E0 4F53206D697373696E-     czNoKernel		db	"OS missing",0					;missing kernel message
   889 000001E9 6700               
   890                                  ;-----------------------------------------------------------------------------------------------------------------------
   891                                  ;
   892                                  ;	Work Areas
   893                                  ;
   894                                  ;-----------------------------------------------------------------------------------------------------------------------
   895 000001EB 90                      			align	2
   896 000001EC 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   897 000001EE 0000                    wwEntriesLeft		dw	0						;directory entries to search
   898 000001F0 0000                    wwOverhead		dw	0						;overhead sectors
   899 000001F2 0000                    wwSectorEntries		dw	0						;directory entries per sector
   900 000001F4 0000                    wwLogicalSector		dw	0						;current logical sector
   901                                  wwReadCountCommand	equ	$						;read count and command
   902 000001F6 00                      wbReadCount		db	0						;sectors to read
   903 000001F7 02                      cbReadCommand		db	2						;BIOS read disk fn code
   904                                  wwDriveHead		equ	$						;drive, head (word)
   905 000001F8 00                      wbDrive			db	0						;drive
   906 000001F9 00                      wbHead			db	0						;head
   907                                  wwSectorTrack		equ	$						;sector, track (word)
   908 000001FA 00                      			db	0						;sector
   909 000001FB 00                      wbTrack			db	0						;track
   910 000001FC 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   911 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   912                                  %endif
   913                                  %ifdef BUILDPREP
   914                                  ;=======================================================================================================================
   915                                  ;
   916                                  ;	Diskette Preparation Code
   917                                  ;
   918                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   919                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   920                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   921                                  ;
   922                                  ;=======================================================================================================================
   923                                  ;
   924                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   925                                  ;
   926                                  Prep			mov	si,czPrepMsg10					;starting message address
   927                                  			call	BootPrint					;display message
   928                                  ;
   929                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   930                                  ;
   931                                  .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   932                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   933                                  			jnz	.12						;continue if key pressed
   934                                  			sti							;enable interrupts
   935                                  			hlt							;wait for interrupt
   936                                  			jmp	.10						;repeat
   937                                  .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   938                                  			je	.15						;yes, branch
   939                                  			cmp	al,EASCIIESCAPE					;Escape key pressed?
   940                                  			jne	.10						;no, repeat
   941                                  			jmp	.90						;yes, exit program
   942                                  ;
   943                                  ;	Display writing-sector message and patch the JMP instruction.
   944                                  ;
   945                                  .15			mov	si,czPrepMsg12					;writing-sector message address
   946                                  			call	BootPrint					;display message
   947                                  			mov	bx,Boot+1					;address of JMP instruction operand
   948                                  			mov	ax,01Bh						;address past disk parameter table
   949                                  			mov	[bx],ax						;update the JMP instruction
   950                                  ;
   951                                  ;	Try to read the boot sector.
   952                                  ;
   953                                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   954                                  .20			push	cx						;save remaining tries
   955                                  			mov	bx,wcPrepInBuf					;input buffer address
   956                                  			mov	dx,0						;head zero, drive zero
   957                                  			mov	cx,1						;track zero, sector one
   958                                  			mov	ax,0201h					;read one sector
   959                                  			int	EBIOSINTDISKETTE				;attempt the read
   960                                  			pop	cx						;restore remaining retries
   961                                  			jnc	.30						;skip ahead if successful
   962                                  			loop	.20						;try again
   963                                  			mov	si,czPrepMsg20					;read-error message address
   964                                  			jmp	.50						;branch to error routine
   965                                  ;
   966                                  ;	Copy diskette parms from input buffer to output buffer.
   967                                  ;
   968                                  .30			mov	si,wcPrepInBuf					;input buffer address
   969                                  			add	si,11						;skip over JMP and system ID
   970                                  			mov	di,Boot						;output buffer address
   971                                  			add	di,11						;skip over JMP and system ID
   972                                  			mov	cx,19						;length of diskette parameters
   973                                  			cld							;forward string copies
   974                                  			rep	movsb						;copy diskette parameters
   975                                  ;
   976                                  ;	Try to write boot sector to diskette.
   977                                  ;
   978                                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   979                                  .40			push	cx						;save remaining tries
   980                                  			mov	bx,Boot						;output buffer address
   981                                  			mov	dx,0						;head zero, drive zero
   982                                  			mov	cx,1						;track zero, sector one
   983                                  			mov	ax,0301h					;write one sector
   984                                  			int	EBIOSINTDISKETTE				;attempt the write
   985                                  			pop	cx						;restore remaining retries
   986                                  			jnc	.80						;skip ahead if successful
   987                                  			loop	.40						;try again
   988                                  			mov	si,czPrepMsg30					;write-error message address
   989                                  ;
   990                                  ;	Convert the error code to ASCII and display the error message.
   991                                  ;
   992                                  .50			push	ax						;save error code
   993                                  			mov	al,ah						;copy error code
   994                                  			mov	ah,0						;AX = error code
   995                                  			mov	dl,10h						;hexadecimal divisor
   996                                  			idiv	dl						;AL = hi-order, AH = lo-order
   997                                  			or	ax,03030h					;add ASCII zone digits
   998                                  			cmp	ah,03Ah						;AH ASCII numeral?
   999                                  			jb	.60						;yes, continue
  1000                                  			add	ah,7						;no, make ASCII 'A'-'F'
  1001                                  .60			cmp	al,03Ah						;al ASCII numeral?
  1002                                  			jb	.70						;yes, continue
  1003                                  			add	al,7						;no, make ASCII
  1004                                  .70			mov	[si+17],ax					;put ASCII error code in message
  1005                                  			call	BootPrint					;write error message
  1006                                  			pop	ax						;restore error code
  1007                                  ;
  1008                                  ;	Display the completion message.
  1009                                  ;
  1010                                  .80			mov	si,czPrepMsgOK					;assume successful completion
  1011                                  			mov	al,ah						;BIOS return code
  1012                                  			cmp	al,0						;success?
  1013                                  			je	.85						;yes, continue
  1014                                  			mov	si,czPrepMsgErr1				;disk parameter error message
  1015                                  			cmp	al,1						;disk parameter error?
  1016                                  			je	.85						;yes, continue
  1017                                  			mov	si,czPrepMsgErr2				;address mark not found message
  1018                                  			cmp	al,2						;address mark not found?
  1019                                  			je	.85						;yes, continue
  1020                                  			mov	si,czPrepMsgErr3				;protected disk message
  1021                                  			cmp	al,3						;protected disk?
  1022                                  			je	.85						;yes, continue
  1023                                  			mov	si,czPrepMsgErr6				;diskette removed message
  1024                                  			cmp	al,6						;diskette removed?
  1025                                  			je	.85						;yes, continue
  1026                                  			mov	si,czPrepMsgErr80				;drive timed out message
  1027                                  			cmp	al,80H						;drive timed out?
  1028                                  			je	.85						;yes, continue
  1029                                  			mov	si,czPrepMsgErrXX				;unknown error message
  1030                                  .85			call	BootPrint					;display result message
  1031                                  .90			mov	ax,04C00H					;terminate with zero result code
  1032                                  			int	021h						;terminate DOS program
  1033                                  			ret							;return (should not execute)
  1034                                  ;-----------------------------------------------------------------------------------------------------------------------
  1035                                  ;
  1036                                  ;	Diskette Preparation Messages
  1037                                  ;
  1038                                  ;-----------------------------------------------------------------------------------------------------------------------
  1039                                  czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
  1040                                  			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1041                                  			db	13,10
  1042                                  			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1043                                  			db	13,10,"will load the operating system into memory when the computer is restarted."
  1044                                  			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1045                                  			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
  1046                                  			db	13,10,0
  1047                                  czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
  1048                                  			db	13,10,0
  1049                                  czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1050                                  			db	13,10,0
  1051                                  czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1052                                  			db	13,10,0
  1053                                  czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1054                                  			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1055                                  			db	13,10,0
  1056                                  czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
  1057                                  			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
  1058                                  			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1059                                  			db	13,10,"and retry."
  1060                                  			db	13,10,0
  1061                                  czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
  1062                                  			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1063                                  			db	13,10,"using another diskette."
  1064                                  			db	13,10,0
  1065                                  czPrepMsgErr3		db	13,10,"(03) Protected Disk"
  1066                                  			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1067                                  			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1068                                  			db	13,10,0
  1069                                  czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
  1070                                  			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
  1071                                  			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1072                                  			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1073                                  			db	13,10,"is properly inserted in the diskette drive."
  1074                                  			db	13,10,0
  1075                                  czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
  1076                                  			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1077                                  			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
  1078                                  			db	13,10,0
  1079                                  czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
  1080                                  			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1081                                  			db	13,10,"your computer's technical reference for a description of this error code."
  1082                                  			db	13,10,0
  1083                                  wcPrepInBuf		equ	$
  1084                                  %endif
  1085                                  %ifdef BUILDDISK
  1086                                  ;=======================================================================================================================
  1087                                  ;
  1088                                  ;	File Allocation Tables
  1089                                  ;
  1090                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1091                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1092                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1093                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1094                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1095                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1096                                  ;	the last cluster in the chain.
  1097                                  ;
  1098                                  ;	Every three bytes encode two FAT entries as follows:
  1099                                  ;
  1100                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1101                                  ;
  1102                                  ;=======================================================================================================================
  1103                                  ;-----------------------------------------------------------------------------------------------------------------------
  1104                                  ;
  1105                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1106                                  ;
  1107                                  ;-----------------------------------------------------------------------------------------------------------------------
  1108                                  section			fat1							;first copy of FAT
  1109                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1110                                  			db	005h,060h,000h,	007h,080h,000h
  1111                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1112                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1113                                  			db	011h,020h,001h,	013h,040h,001h
  1114                                  			db	015h,060h,001h,	017h,080h,001h
  1115                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1116                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1117                                  			db	021h,020h,002h,	023h,040h,002h
  1118                                  			db	025h,060h,002h,	027h,080h,002h
  1119                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1120                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1121                                  ;-----------------------------------------------------------------------------------------------------------------------
  1122                                  ;
  1123                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1124                                  ;
  1125                                  ;-----------------------------------------------------------------------------------------------------------------------
  1126                                  section			fat2							;second copy of FAT
  1127                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1128                                  			db	005h,060h,000h,	007h,080h,000h
  1129                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1130                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1131                                  			db	011h,020h,001h,	013h,040h,001h
  1132                                  			db	015h,060h,001h,	017h,080h,001h
  1133                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1134                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1135                                  			db	021h,020h,002h,	023h,040h,002h
  1136                                  			db	025h,060h,002h,	027h,080h,002h
  1137                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1138                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1139                                  ;-----------------------------------------------------------------------------------------------------------------------
  1140                                  ;
  1141                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1142                                  ;
  1143                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1144                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1145                                  ;	copy.
  1146                                  ;
  1147                                  ;-----------------------------------------------------------------------------------------------------------------------
  1148                                  section			dir							;diskette directory
  1149                                  			db	"OS      COM"					;file name (must contain spaces)
  1150                                  			db	020h						;attribute (archive bit set)
  1151                                  			times	10 db 0						;unused
  1152                                  			dw	0h						;time
  1153                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1154                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1155                                  			dw	2						;first cluster
  1156                                  			dd	05200h						;file size
  1157                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1158                                  %endif
  1159                                  %ifdef BUILDCOM
  1160                                  ;=======================================================================================================================
  1161                                  ;
  1162                                  ;	OS.COM
  1163                                  ;
  1164                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1165                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1166                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1167                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1168                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1169                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1170                                  ;
  1171                                  ;	Our loader addressability is set up according to the following diagram.
  1172                                  ;
  1173                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1174                                  ;				|  Boot Stack & Boot PSP (Unused)		|
  1175                                  ;				|  256 = 100h bytes				|
  1176                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ SS:0100  07b0:0100
  1177                                  ;				|  Boot Sector (vstart=0100h)			|
  1178                                  ;				|  1 sector = 512 = 200h bytes			|
  1179                                  ;			007e00	+-----------------------------------------------+
  1180                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
  1181                                  ;				|  9 x 512-byte sectors = 4,608 = 1200h bytes	|
  1182                                  ;				|						|
  1183                                  ;	CS,DS,ES ----->	008f00	|  Loader PSP (Unused)				| DS:0000
  1184                                  ;				|						|
  1185                                  ;	CS:IP -------->	009000	+-----------------------------------------------+ DS:0100  08f0:0100
  1186                                  ;				|  Loader Code					|
  1187                                  ;				|  1 sector = 512 = 200h bytes			|
  1188                                  ;			009200	+-----------------------------------------------+ DS:0300
  1189                                  ;
  1190                                  ;=======================================================================================================================
  1191                                  ;-----------------------------------------------------------------------------------------------------------------------
  1192                                  ;
  1193                                  ;	OS Loader								@disk: 004200	@mem: 009000
  1194                                  ;
  1195                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1196                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1197                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1198                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1199                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1200                                  ;	starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1201                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1202                                  ;	registers.
  1203                                  ;
  1204                                  ;-----------------------------------------------------------------------------------------------------------------------
  1205                                  			cpu	8086						;assume minimal CPU
  1206                                  section			loader	vstart=0100h					;use .COM compatible addressing
  1207                                  			bits	16						;this is 16-bit code
  1208                                  Loader			push	cs						;use the code segment
  1209                                  			pop	ds						;...as our data segment
  1210                                  			push	cs						;use the code segment
  1211                                  			pop	es						;...as our extra segment
  1212                                  ;
  1213                                  ;	Write a message to the console so we know we have our addressability established.
  1214                                  ;
  1215                                  			mov	si,czStartingMsg				;starting message
  1216                                  			call	PutTTYString					;display loader message
  1217                                  ;
  1218                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1219                                  ;
  1220                                  			call	GetCPUType					;AL = cpu type
  1221                                  			mov	si,czCPUErrorMsg				;loader error message
  1222                                  			cmp	al,3						;80386+?
  1223                                  			jb	LoaderExit					;no, exit with error message
  1224                                  			cpu	386						;allow 80386 instructions
  1225                                  			mov	si,czCPUOKMsg					;cpu ok message
  1226                                  			call	PutTTYString					;display message
  1227                                  ;
  1228                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1229                                  ;
  1230                                  			mov	si,0300h					;GDT offset
  1231                                  			mov	ax,cs						;AX:SI = gdt source
  1232                                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1233                                  			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1234                                  			and	al,0F0h						;AL = phys addr bits 11-0
  1235                                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1236                                  			mov	word [si+030h+2],ax				;lo-order loader code (0-15)
  1237                                  			mov	byte [si+030h+4],cl				;lo-order loader code (16-23)
  1238                                  			mov	si,czGDTOKMsg					;GDT prepared message
  1239                                  			call	PutTTYString					;display message
  1240                                  ;
  1241                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1242                                  ;
  1243                                  			push	EKRNCODESEG					;use kernel code segment ...
  1244                                  			pop	es						;... as target segment
  1245                                  			xor	di,di						;ES:DI = target address
  1246                                  			mov	si,0300h					;DS:SI = source address
  1247                                  			mov	cx,05000h					;CX = kernel size
  1248                                  			cld							;forward strings
  1249                                  			rep	movsb						;copy kernel image
  1250                                  			mov	si,czKernelLoadedMsg				;kernel moved message
  1251                                  			call	PutTTYString					;display message
  1252                                  ;
  1253                                  ;	Switch to protected mode.
  1254                                  ;
  1255                                  			xor	si,si						;ES:SI = gdt addr
  1256                                  			mov	ss,si						;protected mode ss
  1257                                  			mov	sp,EKRNCODEADR					;initial stack immediate before code
  1258                                  			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1259                                  			mov	bx,02028h					;BH,BL = IRQ int bases
  1260                                  			mov	dx,001Fh					;outer delay loop count
  1261                                  .10			mov	cx,0FFFFh					;inner delay loop count
  1262                                  			loop	$						;wait out pending interrupts
  1263                                  			dec	dx						;restore outer loop count
  1264                                  			jnz	.10						;continue outer loop
  1265                                  			int	EBIOSINTMISC					;call BIOS to set protected mode
  1266                                  ;
  1267                                  ;	Enable hardware and maskable interrupts
  1268                                  ;
  1269                                  			xor	al,al						;enable all registers code
  1270                                  			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1271                                  			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1272                                  			sti							;enable maskable interrupts
  1273                                  ;
  1274                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1275                                  ;
  1276                                  			ltr	[cs:cwLoaderTSS]				;load task register
  1277                                  			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1278                                  			jmp	ESELCONSOLETSS:0				;jump to task state segment selector
  1279                                  ;-----------------------------------------------------------------------------------------------------------------------
  1280                                  ;
  1281                                  ;	Routine:	LoaderExit
  1282                                  ;
  1283                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1284                                  ;
  1285                                  ;	In:		DS:SI	string address
  1286                                  ;
  1287                                  ;-----------------------------------------------------------------------------------------------------------------------
  1288                                  LoaderExit		call	PutTTYString					;display error message
  1289                                  ;
  1290                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1291                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1292                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1293                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1294                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1295                                  ;
  1296                                  .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1297                                  			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1298                                  			jnz	.40						;exit if key pressed
  1299                                  			sti							;enable maskable interrupts
  1300                                  			hlt							;wait for interrupt
  1301                                  			jmp	.30						;repeat until keypress
  1302                                  ;
  1303                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1304                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1305                                  ;	HLT until the system resets.
  1306                                  ;
  1307                                  .40			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
  1308                                  			out	EKEYBPORTSTAT,al				;drive B0 low to restart
  1309                                  .50			sti							;enable maskable interrupts
  1310                                  			hlt							;stop until reset, int, nmi
  1311                                  			jmp	.50						;loop until restart kicks in
  1312                                  ;-----------------------------------------------------------------------------------------------------------------------
  1313                                  ;
  1314                                  ;	Routine:	GetCPUType
  1315                                  ;
  1316                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1317                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1318                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1319                                  ;
  1320                                  ;	Out:		AX	0 = 808x, v20, etc.
  1321                                  ;				1 = 80186
  1322                                  ;				2 = 80286
  1323                                  ;				3 = 80386
  1324                                  ;
  1325                                  ;-----------------------------------------------------------------------------------------------------------------------
  1326                                  GetCPUType		mov	al,1						;AL = 1
  1327                                  			mov	cl,32						;shift count
  1328                                  			shr	al,cl						;try a 32-bit shift
  1329                                  			or	al,al						;did the shift happen?
  1330                                  			jz	.10						;yes, cpu is 808x, v20, etc.
  1331                                  			cpu	186
  1332                                  			push	sp						;save stack pointer
  1333                                  			pop	cx						;...into cx
  1334                                  			cmp	cx,sp						;did sp decrement before push?
  1335                                  			jne	.10						;yes, cpu is 80186
  1336                                  			cpu	286
  1337                                  			inc	ax						;AX = 2
  1338                                  			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1339                                  			mov	cl,[cbLoaderGDTHiByte]				;CL = hi-order byte
  1340                                  			inc	cl						;was hi-byte of GDTR 0xff?
  1341                                  			jz	.10						;yes, cpu is 80286
  1342                                  			inc	ax						;AX = 3
  1343                                  .10			ret							;return
  1344                                  ;-----------------------------------------------------------------------------------------------------------------------
  1345                                  ;
  1346                                  ;	Routine:	PutTTYString
  1347                                  ;
  1348                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1349                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1350                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1351                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1352                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1353                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1354                                  ;			registers and flags unless used to indicate return status.
  1355                                  ;
  1356                                  ;	In:		DS:SI	address of string
  1357                                  ;
  1358                                  ;-----------------------------------------------------------------------------------------------------------------------
  1359                                  PutTTYString		cld							;forward strings
  1360                                  			lodsb							;load next byte at DS:SI in AL
  1361                                  			test	al,al						;end of string?
  1362                                  			jz	.10						;... yes, exit our loop
  1363                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1364                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1365                                  			jmp	PutTTYString					;repeat until done
  1366                                  .10			ret							;return
  1367                                  ;-----------------------------------------------------------------------------------------------------------------------
  1368                                  ;
  1369                                  ;	Loader Data
  1370                                  ;
  1371                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1372                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1373                                  ;
  1374                                  ;-----------------------------------------------------------------------------------------------------------------------
  1375                                  			align	2
  1376                                  cwLoaderLDT		dw	ESELLOADERLDT					;loader local descriptor table selector
  1377                                  cwLoaderTSS		dw	ESELLOADERTSS					;loader task state segment selector
  1378                                  cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1379                                  cbLoaderGDTHiByte	db	0						;hi-order byte
  1380                                  czCPUErrorMsg		db	"The operating system requires an i386 or later processor.",13,10
  1381                                  			db	"Please press any key to restart the computer.",13,10,0
  1382                                  czCPUOKMsg		db	"CPU OK",13,10,0
  1383                                  czGDTOKMsg		db	"GDT prepared",13,10,0
  1384                                  czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1385                                  czStartingMsg		db	"Starting OS",13,10,0				;starting message
  1386                                  			times	510-($-$$) db 0h				;zero fill to end of sector
  1387                                  			db	055h,0AAh					;end of sector signature
  1388                                  ;=======================================================================================================================
  1389                                  ;
  1390                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1391                                  ;
  1392                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1393                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1394                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1395                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1396                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1397                                  ;
  1398                                  ;=======================================================================================================================
  1399                                  ;=======================================================================================================================
  1400                                  ;
  1401                                  ;	Kernel Tables
  1402                                  ;
  1403                                  ;=======================================================================================================================
  1404                                  ;-----------------------------------------------------------------------------------------------------------------------
  1405                                  ;
  1406                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1407                                  ;
  1408                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1409                                  ;	first descriptor must be all nulls.
  1410                                  ;
  1411                                  ;	6   5         4         3         2         1         0
  1412                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1413                                  ;	----------------------------------------------------------------
  1414                                  ;	h......hffffmmmma......ab......................bn..............n
  1415                                  ;	00000000			all areas have base addresses below 2^24
  1416                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1417                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1418                                  ;	            1001		present, ring-0, selector
  1419                                  ;
  1420                                  ;	h...h	hi-order base address (bits 24-31)
  1421                                  ;	ffff	flags
  1422                                  ;	mmmm	hi-order limit (bits 16-19)
  1423                                  ;	a...a	access
  1424                                  ;	b...b	lo-order base address (bits 0-23)
  1425                                  ;	n...n	lo-order limit (bits 0-15)
  1426                                  ;
  1427                                  ;-----------------------------------------------------------------------------------------------------------------------
  1428                                  section			gdt							;global descriptor table
  1429                                  			dq	0000000000000000h				;00 required null selector
  1430                                  			dq	00409300100007FFh				;08 2KB  writable data  (GDT alias)
  1431                                  			dq	00409300180007FFh				;10 2KB  writable data  (IDT alias)
  1432                                  			dq	00CF93000000FFFFh				;18 4GB  writable data  (kernel)     DS:
  1433                                  			dq	0040930B80000FFFh				;20 4KB  writable data  (CGA)        ES:
  1434                                  			dq	0040930000000FFFh				;28 4KB  writable stack (Loader)     SS:
  1435                                  			dq	00009B000000FFFFh				;30 64KB readable code  (loader)     CS:
  1436                                  			dq	00009BFF0000FFFFh				;38 64KB readable code  (BIOS)
  1437                                  			dq	004093000400FFFFh				;40 64KB writable data  (BIOS)
  1438                                  			dq	00409B0020001FFFh				;48 8KB  readable code  (kernel)
  1439                                  			dq	004082000F00007Fh				;50 80B  writable LDT   (loader)
  1440                                  			dq	004089000F80007Fh				;58 80B  writable TSS   (loader)
  1441                                  			dq	004082004700007Fh				;60 80B  writable LDT   (console)
  1442                                  			dq	004089004780007Fh				;88 80B  writable TSS   (console)
  1443                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1444                                  ;-----------------------------------------------------------------------------------------------------------------------
  1445                                  ;
  1446                                  ;	Interrupt Descriptor Table						@disk: 004c00	@mem: 001800
  1447                                  ;
  1448                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1449                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1450                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1451                                  ;
  1452                                  ;	6   5         4         3         2         1         0
  1453                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1454                                  ;	----------------------------------------------------------------
  1455                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1456                                  ;
  1457                                  ;	h...h	high-order offset (bits 16-31)
  1458                                  ;	P	present (0=unused interrupt)
  1459                                  ;	zz	descriptor privilege level
  1460                                  ;	S	storage segment (must be zero for IDT)
  1461                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1462                                  ;	S...S	handling code selector in GDT
  1463                                  ;	l...l	lo-order offset (bits 0-15)
  1464                                  ;
  1465                                  ;-----------------------------------------------------------------------------------------------------------------------
  1466                                  section			idt							;interrupt descriptor table
  1467                                  			mint	dividebyzero					;00 divide by zero
  1468                                  			mint	singlestep					;01 single step
  1469                                  			mint	nmi						;02 non-maskable
  1470                                  			mint	break						;03 break
  1471                                  			mint	into						;04 into
  1472                                  			mint	bounds						;05 bounds
  1473                                  			mint	badopcode					;06 bad op code
  1474                                  			mint	nocoproc					;07 no coprocessor
  1475                                  			mint	doublefault					;08 double-fault
  1476                                  			mint	operand						;09 operand
  1477                                  			mint	badtss						;0a bad TSS
  1478                                  			mint	notpresent					;0b not-present
  1479                                  			mint	stacklimit					;0c stack limit
  1480                                  			mint	protection					;0d general protection fault
  1481                                  			mint	int14						;0e (reserved)
  1482                                  			mint	int15						;0f (reserved)
  1483                                  			mint	coproccalc					;10 (reserved)
  1484                                  			mint	int17						;11 (reserved)
  1485                                  			mint	int18						;12 (reserved)
  1486                                  			mint	int19						;13 (reserved)
  1487                                  			mint	int20						;14 (reserved)
  1488                                  			mint	int21						;15 (reserved)
  1489                                  			mint	int22						;16 (reserved)
  1490                                  			mint	int23						;17 (reserved)
  1491                                  			mint	int24						;18 (reserved)
  1492                                  			mint	int25						;19 (reserved)
  1493                                  			mint	int26						;1a (reserved)
  1494                                  			mint	int27						;1b (reserved)
  1495                                  			mint	int28						;1c (reserved)
  1496                                  			mint	int29						;1d (reserved)
  1497                                  			mint	int30						;1e (reserved)
  1498                                  			mint	int31						;1f (reserved)
  1499                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1500                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1501                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1502                                  			mtrap	com2						;23 IRQ3 com2
  1503                                  			mtrap	com1						;24 IRQ4 com1
  1504                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1505                                  			mtrap	diskette					;26 IRQ6 diskette
  1506                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1507                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1508                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1509                                  			mtrap	irq10						;2a IRQA (reserved)
  1510                                  			mtrap	irq11						;2b IRQB (reserved)
  1511                                  			mtrap	ps2mouse					;2c IRQC ps/2 mouse
  1512                                  			mtrap	coprocessor					;2d IRQD coprocessor
  1513                                  			mtrap	fixeddisk					;2e IRQE fixed disk
  1514                                  			mtrap	irq15						;2f IRQF (reserved)
  1515                                  			mtrap	svc						;30 OS services
  1516                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1517                                  ;=======================================================================================================================
  1518                                  ;
  1519                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1520                                  ;
  1521                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1522                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1523                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1524                                  ;	signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1525                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1526                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1527                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1528                                  ;
  1529                                  ;=======================================================================================================================
  1530                                  section			kernel	vstart=0h					;data offsets relative to 0
  1531                                  			cpu	386						;allow 80386 instructions
  1532                                  			bits	32						;this is 32-bit code
  1533                                  ;=======================================================================================================================
  1534                                  ;
  1535                                  ;	CPU Interrupt Handlers
  1536                                  ;
  1537                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1538                                  ;	of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1539                                  ;
  1540                                  ;=======================================================================================================================
  1541                                  ;-----------------------------------------------------------------------------------------------------------------------
  1542                                  ;
  1543                                  ;	INT0	Divide By Zero
  1544                                  ;
  1545                                  ;-----------------------------------------------------------------------------------------------------------------------
  1546                                  			menter	dividebyzero					;divide by zero
  1547                                  			push	0						;store interrupt nbr
  1548                                  			push	czIntDivideByZero				;store message offset
  1549                                  			jmp	ReportInterrupt					;report interrupt
  1550                                  ;-----------------------------------------------------------------------------------------------------------------------
  1551                                  ;
  1552                                  ;	INT1	Single Step
  1553                                  ;
  1554                                  ;-----------------------------------------------------------------------------------------------------------------------
  1555                                  			menter	singlestep					;single step
  1556                                  			push	1						;store interrupt nbr
  1557                                  			push	czIntSingleStep					;store message offset
  1558                                  			jmp	ReportInterrupt					;report interrupt
  1559                                  ;-----------------------------------------------------------------------------------------------------------------------
  1560                                  ;
  1561                                  ;	INT2	Non-Maskable Interrupt
  1562                                  ;
  1563                                  ;-----------------------------------------------------------------------------------------------------------------------
  1564                                  			menter	nmi						;non-maskable
  1565                                  			push	2						;store interrupt nbr
  1566                                  			push	czIntNonMaskable				;store message offset
  1567                                  			jmp	ReportInterrupt					;report interrupt
  1568                                  ;-----------------------------------------------------------------------------------------------------------------------
  1569                                  ;
  1570                                  ;	INT3	Break
  1571                                  ;
  1572                                  ;-----------------------------------------------------------------------------------------------------------------------
  1573                                  			menter	break						;break
  1574                                  			push	3						;store interrupt nbr
  1575                                  			push	czIntBreak					;store message offset
  1576                                  			jmp	ReportInterrupt					;report interrupt
  1577                                  ;-----------------------------------------------------------------------------------------------------------------------
  1578                                  ;
  1579                                  ;	INT4	Into
  1580                                  ;
  1581                                  ;-----------------------------------------------------------------------------------------------------------------------
  1582                                  			menter	into						;into
  1583                                  			push	4						;store interrupt nbr
  1584                                  			push	czIntInto					;store message offset
  1585                                  			jmp	ReportInterrupt					;report interrupt
  1586                                  ;-----------------------------------------------------------------------------------------------------------------------
  1587                                  ;
  1588                                  ;	INT5	Bounds
  1589                                  ;
  1590                                  ;-----------------------------------------------------------------------------------------------------------------------
  1591                                  			menter	bounds						;bounds
  1592                                  			push	5						;store interrupt nbr
  1593                                  			push	czIntBounds					;store message offset
  1594                                  			jmp	ReportInterrupt					;report interrupt
  1595                                  ;-----------------------------------------------------------------------------------------------------------------------
  1596                                  ;
  1597                                  ;	INT6	Bad Operation Code
  1598                                  ;
  1599                                  ;-----------------------------------------------------------------------------------------------------------------------
  1600                                  			menter	badopcode					;bad opcode interrupt
  1601                                  			push	6						;store interrupt nbr
  1602                                  			push	czIntBadOpCode					;store message offset
  1603                                  			jmp	ReportInterrupt					;report interrupt
  1604                                  ;-----------------------------------------------------------------------------------------------------------------------
  1605                                  ;
  1606                                  ;	INT7	No Coprocessor
  1607                                  ;
  1608                                  ;-----------------------------------------------------------------------------------------------------------------------
  1609                                  			menter	nocoproc					;no coprocessor interrupt
  1610                                  			push	7						;store interrupt nbr
  1611                                  			push	czIntNoCoprocessor				;store message offset
  1612                                  			jmp	ReportInterrupt					;report interrupt
  1613                                  ;-----------------------------------------------------------------------------------------------------------------------
  1614                                  ;
  1615                                  ;	INT8	Double Fault
  1616                                  ;
  1617                                  ;-----------------------------------------------------------------------------------------------------------------------
  1618                                  			menter	doublefault					;doublefault interrupt
  1619                                  			push	8						;store interrupt nbr
  1620                                  			push	czIntDoubleFault				;store message offset
  1621                                  			jmp	ReportInterrupt					;report interrupt
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                  ;
  1624                                  ;	INT9	Operand
  1625                                  ;
  1626                                  ;-----------------------------------------------------------------------------------------------------------------------
  1627                                  			menter	operand						;operand interrupt
  1628                                  			push	9						;store interrupt nbr
  1629                                  			push	czIntOperand					;store message offset
  1630                                  			jmp	ReportInterrupt					;report interrupt
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                  ;
  1633                                  ;	INT10	Bad Task State Segment
  1634                                  ;
  1635                                  ;-----------------------------------------------------------------------------------------------------------------------
  1636                                  			menter	badtss						;bad tss interrupt
  1637                                  			push	10						;store interrupt nbr
  1638                                  			push	czIntBadTSS					;store message offset
  1639                                  			jmp	ReportInterrupt					;report interrupt
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                  ;
  1642                                  ;	INT11	Not Present
  1643                                  ;
  1644                                  ;-----------------------------------------------------------------------------------------------------------------------
  1645                                  			menter	notpresent					;not present interrupt
  1646                                  			push	11						;store interrupt nbr
  1647                                  			push	czIntNotPresent					;store message offset
  1648                                  			jmp	ReportInterrupt					;report interrupt
  1649                                  ;-----------------------------------------------------------------------------------------------------------------------
  1650                                  ;
  1651                                  ;	INT12	Stack Limit
  1652                                  ;
  1653                                  ;-----------------------------------------------------------------------------------------------------------------------
  1654                                  			menter	stacklimit					;stack limit interrupt
  1655                                  			push	12						;store interrupt nbr
  1656                                  			push	czIntStackLimit					;store message offset
  1657                                  			jmp	ReportInterrupt					;report interrupt
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                  ;
  1660                                  ;	INT13	General Protection Fault
  1661                                  ;
  1662                                  ;-----------------------------------------------------------------------------------------------------------------------
  1663                                  			menter	protection					;protection fault interrupt
  1664                                  			push	13						;store interrupt nbr
  1665                                  			push	czIntProtection					;store message offset
  1666                                  			jmp	ReportInterrupt					;report interrupt
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                  ;
  1669                                  ;	INT14	Reserved
  1670                                  ;
  1671                                  ;-----------------------------------------------------------------------------------------------------------------------
  1672                                  			menter	int14						;(reserved)
  1673                                  			push	14						;store interrupt nbr
  1674                                  			push	czIntReserved					;store message offset
  1675                                  			jmp	ReportInterrupt					;report interrupt
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                  ;
  1678                                  ;	INT15	Reserved
  1679                                  ;
  1680                                  ;-----------------------------------------------------------------------------------------------------------------------
  1681                                  			menter	int15						;(reserved)
  1682                                  			push	15						;store interrupt nbr
  1683                                  			push	czIntReserved					;store message offset
  1684                                  			jmp	ReportInterrupt					;report interrupt
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                  ;
  1687                                  ;	INT16	Coprocessor Calculation
  1688                                  ;
  1689                                  ;-----------------------------------------------------------------------------------------------------------------------
  1690                                  			menter	coproccalc					;coprocessor calculation
  1691                                  			push	16						;store interrupt nbr
  1692                                  			push	czIntCoprocessorCalc				;store message offset
  1693                                  			jmp	ReportInterrupt					;report interrupt
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                  ;
  1696                                  ;	INT17	Reserved
  1697                                  ;
  1698                                  ;-----------------------------------------------------------------------------------------------------------------------
  1699                                  			menter	int17						;(reserved)
  1700                                  			push	17						;store interrupt nbr
  1701                                  			push	czIntReserved					;store message offset
  1702                                  			jmp	ReportInterrupt					;report interrupt
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                  ;
  1705                                  ;	INT18	Reserved
  1706                                  ;
  1707                                  ;-----------------------------------------------------------------------------------------------------------------------
  1708                                  			menter	int18						;(reserved)
  1709                                  			push	18						;store interrupt nbr
  1710                                  			push	czIntReserved					;store message offset
  1711                                  			jmp	ReportInterrupt					;report interrupt
  1712                                  ;-----------------------------------------------------------------------------------------------------------------------
  1713                                  ;
  1714                                  ;	INT19	Reserved
  1715                                  ;
  1716                                  ;-----------------------------------------------------------------------------------------------------------------------
  1717                                  			menter	int19						;(reserved)
  1718                                  			push	19						;store interrupt nbr
  1719                                  			push	czIntReserved					;store message offset
  1720                                  			jmp	ReportInterrupt					;report interrupt
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                  ;
  1723                                  ;	INT20	Reserved
  1724                                  ;
  1725                                  ;-----------------------------------------------------------------------------------------------------------------------
  1726                                  			menter	int20						;(reserved)
  1727                                  			push	20						;store interrupt nbr
  1728                                  			push	czIntReserved					;store message offset
  1729                                  			jmp	ReportInterrupt					;report interrupt
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                  ;
  1732                                  ;	INT21	Reserved
  1733                                  ;
  1734                                  ;-----------------------------------------------------------------------------------------------------------------------
  1735                                  			menter	int21						;(reserved)
  1736                                  			push	21						;store interrupt nbr
  1737                                  			push	czIntReserved					;store message offset
  1738                                  			jmp	ReportInterrupt					;report interrupt
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                  ;
  1741                                  ;	INT22	Reserved
  1742                                  ;
  1743                                  ;-----------------------------------------------------------------------------------------------------------------------
  1744                                  			menter	int22						;(reserved)
  1745                                  			push	22						;store interrupt nbr
  1746                                  			push	czIntReserved					;store message offset
  1747                                  			jmp	ReportInterrupt					;report interrupt
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                  ;
  1750                                  ;	INT23	Reserved
  1751                                  ;
  1752                                  ;-----------------------------------------------------------------------------------------------------------------------
  1753                                  			menter	int23						;(reserved)
  1754                                  			push	23						;store interrupt nbr
  1755                                  			push	czIntReserved					;store message offset
  1756                                  			jmp	ReportInterrupt					;report interrupt
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                  ;
  1759                                  ;	INT24	Reserved
  1760                                  ;
  1761                                  ;-----------------------------------------------------------------------------------------------------------------------
  1762                                  			menter	int24						;(reserved)
  1763                                  			push	24						;store interrupt nbr
  1764                                  			push	czIntReserved					;store message offset
  1765                                  			jmp	ReportInterrupt					;report interrupt
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                  ;
  1768                                  ;	INT25	Reserved
  1769                                  ;
  1770                                  ;-----------------------------------------------------------------------------------------------------------------------
  1771                                  			menter	int25						;(reserved)
  1772                                  			push	25						;store interrupt nbr
  1773                                  			push	czIntReserved					;store message offset
  1774                                  			jmp	ReportInterrupt					;report interrupt
  1775                                  ;-----------------------------------------------------------------------------------------------------------------------
  1776                                  ;
  1777                                  ;	INT26	Reserved
  1778                                  ;
  1779                                  ;-----------------------------------------------------------------------------------------------------------------------
  1780                                  			menter	int26						;(reserved)
  1781                                  			push	26						;store interrupt nbr
  1782                                  			push	czIntReserved					;store message offset
  1783                                  			jmp	ReportInterrupt					;report interrupt
  1784                                  ;-----------------------------------------------------------------------------------------------------------------------
  1785                                  ;
  1786                                  ;	INT27	Reserved
  1787                                  ;
  1788                                  ;-----------------------------------------------------------------------------------------------------------------------
  1789                                  			menter	int27						;(reserved)
  1790                                  			push	27						;store interrupt nbr
  1791                                  			push	czIntReserved					;store message offset
  1792                                  			jmp	ReportInterrupt					;report interrupt
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                  ;
  1795                                  ;	INT28	Reserved
  1796                                  ;
  1797                                  ;-----------------------------------------------------------------------------------------------------------------------
  1798                                  			menter	int28						;(reserved)
  1799                                  			push	28						;store interrupt nbr
  1800                                  			push	czIntReserved					;store message offset
  1801                                  			jmp	ReportInterrupt					;report interrupt
  1802                                  ;-----------------------------------------------------------------------------------------------------------------------
  1803                                  ;
  1804                                  ;	INT29	Reserved
  1805                                  ;
  1806                                  ;-----------------------------------------------------------------------------------------------------------------------
  1807                                  			menter	int29						;(reserved)
  1808                                  			push	29						;store interrupt nbr
  1809                                  			push	czIntReserved					;store message offset
  1810                                  			jmp	ReportInterrupt					;report interrupt
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                  ;
  1813                                  ;	INT30	Reserved
  1814                                  ;
  1815                                  ;-----------------------------------------------------------------------------------------------------------------------
  1816                                  			menter	int30						;(reserved)
  1817                                  			push	30						;store interrupt nbr
  1818                                  			push	czIntReserved					;store message offset
  1819                                  			jmp	ReportInterrupt					;report interrupt
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                  ;
  1822                                  ;	INT31	Reserved
  1823                                  ;
  1824                                  ;-----------------------------------------------------------------------------------------------------------------------
  1825                                  			menter	int31						;(reserved)
  1826                                  			push	31						;store interrupt nbr
  1827                                  			push	czIntReserved					;store message offset
  1828                                  			jmp	ReportInterrupt					;report interrupt
  1829                                  ;-----------------------------------------------------------------------------------------------------------------------
  1830                                  ;
  1831                                  ;	Routine:	ReportInterrupt
  1832                                  ;
  1833                                  ;	Description:	This routine will be used to respond to processor interrupts that are not otherwise handled.
  1834                                  ;			At this stage, we simply restore the stack and return from the interrupt.
  1835                                  ;
  1836                                  ;	In:		[esp+16]	eflags					stored by interrupt call
  1837                                  ;			[esp+12]	cs					stored by interrupt call
  1838                                  ;			[esp+8]		eip					stored by interrupt call
  1839                                  ;			[esp+4]		interrupt number (0-31)			stored by push instruction
  1840                                  ;			[esp+0]		error message address			stored by push instructions
  1841                                  ;
  1842                                  ;	Out:		N/A		This routine does not exit.
  1843                                  ;
  1844                                  ;-----------------------------------------------------------------------------------------------------------------------
  1845                                  ReportInterrupt		push	ds						;save DS at time of interrupt
  1846                                  			push	es						;save ES at time of interrupt
  1847                                  			pushad							;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1848                                  			mov	ebp,esp						;ebp --> [EDI]
  1849                                  ;
  1850                                  ;	Addressability to registers at the time of the interrupt is now established as:
  1851                                  ;
  1852                                  ;			[ebp+56]	eflags
  1853                                  ;			[ebp+52]	cs
  1854                                  ;			[ebp+48]	eip
  1855                                  ;			[ebp+44]	interrupt number (0-31)
  1856                                  ;			[ebp+40]	error message address
  1857                                  ;			[ebp+36]	ds
  1858                                  ;			[ebp+32]	es
  1859                                  ;			[ebp+28]	eax
  1860                                  ;			[ebp+24]	ecx
  1861                                  ;			[ebp+20]	edx
  1862                                  ;			[ebp+16]	ebx
  1863                                  ;			[ebp+12]	esp
  1864                                  ;			[ebp+8]		ebp
  1865                                  ;			[ebp+4]		esi
  1866                                  ;			[ebp+0]		edi
  1867                                  ;
  1868                                  			push	cs						;load code selector ...
  1869                                  			pop	ds						;... into DS
  1870                                  			push	ESELCGA						;load CGA memory selector ...
  1871                                  			pop	es						;... into ES
  1872                                  ;
  1873                                  ;	Display the interrupt report boundary box
  1874                                  ;
  1875                                  			mov	cl,13						;column
  1876                                  			mov	ch,6						;row
  1877                                  			mov	dl,50						;width
  1878                                  			mov	dh,8						;height
  1879                                  			mov	bh,07h						;attribute
  1880                                  			call	DrawTextDialogBox				;draw text dialog box
  1881                                  ;
  1882                                  ;	Display the report header
  1883                                  ;
  1884                                  			mov	cl,15						;column
  1885                                  			mov	ch,7						;row
  1886                                  			mov	esi,czIntHeader					;interrupt message header
  1887                                  			call	SetConsoleString				;draw text string
  1888                                  ;
  1889                                  ;	Display the interrupt description label
  1890                                  ;
  1891                                  			mov	cl,15						;column
  1892                                  			mov	ch,8						;row
  1893                                  			mov	esi,czIntLabel					;interrupt message description lead
  1894                                  			call	SetConsoleString				;draw text string
  1895                                  ;
  1896                                  ;	Display the interrupt number
  1897                                  ;
  1898                                  			mov	eax,[ebp+44]					;interrupt number
  1899                                  			mov	cl,26						;column
  1900                                  			mov	ch,8						;row
  1901                                  			call	PutConsoleHexByte				;draw ASCII hex byte
  1902                                  ;
  1903                                  ;	Display the interrupt name
  1904                                  ;
  1905                                  			mov	cl,29						;column
  1906                                  			mov	ch,8						;row
  1907                                  			mov	esi,[ebp+40]					;interrupt-specific message
  1908                                  			call	SetConsoleString				;display interrupt description
  1909                                  ;
  1910                                  ;	Display the register values header
  1911                                  ;
  1912                                  			mov	cl,15						;column
  1913                                  			mov	ch,10						;row
  1914                                  			mov	esi,czIntRegsHeader				;interrupt registers header
  1915                                  			call	SetConsoleString				;draw text string
  1916                                  ;
  1917                                  ;	Display the EAX register label and value
  1918                                  ;
  1919                                  			mov	cl,15						;column
  1920                                  			mov	ch,11						;row
  1921                                  			mov	esi,czIntEAX					;register EAX label
  1922                                  			call	SetConsoleString				;draw label
  1923                                  			mov	eax,[ebp+28]					;EAX value at interrupt
  1924                                  			mov	cl,19						;column
  1925                                  			mov	ch,11						;row
  1926                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1927                                  ;
  1928                                  ;	Display the ECX register label and value
  1929                                  ;
  1930                                  			mov	cl,15						;column
  1931                                  			mov	ch,12						;row
  1932                                  			mov	esi,czIntECX					;label
  1933                                  			call	SetConsoleString				;draw label
  1934                                  			mov	eax,[ebp+24]					;ECX value at interrupt
  1935                                  			mov	cl,19						;column
  1936                                  			mov	ch,12						;row
  1937                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1938                                  ;
  1939                                  ;	Display the EDX register label and value
  1940                                  ;
  1941                                  			mov	cl,15						;column
  1942                                  			mov	ch,13						;row
  1943                                  			mov	esi,czIntEDX					;label
  1944                                  			call	SetConsoleString				;draw label
  1945                                  			mov	eax,[ebp+20]					;EDX value at interrupt
  1946                                  			mov	cl,19						;column
  1947                                  			mov	ch,13						;row
  1948                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1949                                  ;
  1950                                  ;	Display the EBX register label and value
  1951                                  ;
  1952                                  			mov	cl,15						;column
  1953                                  			mov	ch,14						;row
  1954                                  			mov	esi,czIntEBX					;label
  1955                                  			call	SetConsoleString				;draw label
  1956                                  			mov	eax,[ebp+16]					;EBX value at interrupt
  1957                                  			mov	cl,19						;column
  1958                                  			mov	ch,14						;row
  1959                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1960                                  ;
  1961                                  ;	Display the ESI register label and value
  1962                                  ;
  1963                                  			mov	cl,29						;column
  1964                                  			mov	ch,11						;row
  1965                                  			mov	esi,czIntESI					;label
  1966                                  			call	SetConsoleString				;draw label
  1967                                  			mov	eax,[ebp+4]					;ESI
  1968                                  			mov	cl,33						;column
  1969                                  			mov	ch,11						;row
  1970                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1971                                  ;
  1972                                  ;	Display the EDI register label and value
  1973                                  ;
  1974                                  			mov	cl,29						;column
  1975                                  			mov	ch,12						;row
  1976                                  			mov	esi,czIntEDI					;label
  1977                                  			call	SetConsoleString				;draw label
  1978                                  			mov	eax,[ebp+0]					;EDI
  1979                                  			mov	cl,33						;column
  1980                                  			mov	ch,12						;row
  1981                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1982                                  ;
  1983                                  ;	Display the EBP register label and value
  1984                                  ;
  1985                                  			mov	cl,29						;column
  1986                                  			mov	ch,13						;row
  1987                                  			mov	esi,czIntEBP					;label
  1988                                  			call	SetConsoleString				;draw label
  1989                                  			mov	eax,[ebp+8]					;EBP
  1990                                  			mov	cl,33						;column
  1991                                  			mov	ch,13						;row
  1992                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1993                                  ;
  1994                                  ;	Display the DS register label and value
  1995                                  ;
  1996                                  			mov	cl,42						;column
  1997                                  			mov	ch,11						;row
  1998                                  			mov	esi,czIntDS					;label
  1999                                  			call	SetConsoleString				;draw label
  2000                                  			xor	eax,eax						;zero register
  2001                                  			mov	ax,[ebp+36]					;DS
  2002                                  			mov	cl,46						;column
  2003                                  			mov	ch,11						;row
  2004                                  			call	PutConsoleHexWord				;draw ASCII hex word
  2005                                  ;
  2006                                  ;	Display the ES register label and value
  2007                                  ;
  2008                                  			mov	cl,42						;column
  2009                                  			mov	ch,12						;row
  2010                                  			mov	esi,czIntES					;label
  2011                                  			call	SetConsoleString				;draw label
  2012                                  			xor	eax,eax						;zero register
  2013                                  			mov	ax,[ebp+32]					;ES
  2014                                  			mov	cl,46						;column
  2015                                  			mov	ch,12						;row
  2016                                  			call	PutConsoleHexWord				;draw ASCII hex word
  2017                                  ;
  2018                                  ;	Display the SS register label and value
  2019                                  ;
  2020                                  			mov	cl,42						;column
  2021                                  			mov	ch,13						;row
  2022                                  			mov	esi,czIntSS					;label
  2023                                  			call	SetConsoleString				;draw label
  2024                                  			xor	eax,eax						;zero register
  2025                                  			mov	ax,ss						;SS
  2026                                  			mov	cl,46						;column
  2027                                  			mov	ch,13						;row
  2028                                  			call	PutConsoleHexWord				;draw ASCII hex word
  2029                                  ;
  2030                                  ;	Display the CS register lable and value
  2031                                  ;
  2032                                  			mov	cl,42						;column
  2033                                  			mov	ch,14						;row
  2034                                  			mov	esi,czIntCS					;label
  2035                                  			call	SetConsoleString				;draw label
  2036                                  			xor	eax,eax						;zero register
  2037                                  			mov	ax,[ebp+52]					;CS
  2038                                  			mov	cl,46						;column
  2039                                  			mov	ch,14						;row
  2040                                  			call	PutConsoleHexWord				;draw ASCII hex word
  2041                                  ;
  2042                                  ;	Display the EFLAGS register label and value
  2043                                  ;
  2044                                  			mov	cl,51						;column
  2045                                  			mov	ch,11						;row
  2046                                  			mov	esi,czIntEFLAGS					;label
  2047                                  			call	SetConsoleString				;draw label
  2048                                  			mov	eax,[ebp+56]					;EFLAGS
  2049                                  			mov	cl,55						;column
  2050                                  			mov	ch,11						;row
  2051                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2052                                  ;
  2053                                  ;	Display the ESP register label and value
  2054                                  ;
  2055                                  			mov	cl,51						;column
  2056                                  			mov	ch,13						;row
  2057                                  			mov	esi,czIntESP					;label
  2058                                  			call	SetConsoleString				;draw label
  2059                                  			mov	eax,[ebp+12]					;ESP
  2060                                  			mov	cl,55						;column
  2061                                  			mov	ch,13						;row
  2062                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2063                                  ;
  2064                                  ;	Display the EIP register label and value
  2065                                  ;
  2066                                  			mov	cl,51						;column
  2067                                  			mov	ch,14						;row
  2068                                  			mov	esi,czIntEIP					;label
  2069                                  			call	SetConsoleString				;draw label
  2070                                  			mov	eax,[ebp+48]					;EIP
  2071                                  			mov	cl,55						;column
  2072                                  			mov	ch,14						;row
  2073                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2074                                  ;
  2075                                  ;	Halt and loop until reset
  2076                                  ;
  2077                                  .10			sti							;enable maskable interrupts
  2078                                  			hlt							;halt processor
  2079                                  			jmp	.10						;resume on interrupt
  2080                                  ;-----------------------------------------------------------------------------------------------------------------------
  2081                                  ;
  2082                                  ;	Processor Interrupt Name Strings
  2083                                  ;
  2084                                  ;-----------------------------------------------------------------------------------------------------------------------
  2085                                  czIntDivideByZero	db	"Division by zero",0
  2086                                  czIntSingleStep		db	"Single step",0
  2087                                  czIntNonMaskable	db	"Non-maskable interrupt",0
  2088                                  czIntBreak		db	"Break",0
  2089                                  czIntInto		db	"Into",0
  2090                                  czIntBounds		db	"Bounds",0
  2091                                  czIntBadOpCode		db	"Bad Operation Code",0
  2092                                  czIntNoCoprocessor	db	"No Coprocessor",0
  2093                                  czIntDoubleFault	db	"Double Fault",0
  2094                                  czIntOperand		db	"Operand",0
  2095                                  czIntBadTSS		db	"Bad Task State Segment",0
  2096                                  czIntNotPresent		db	"Not Present",0
  2097                                  czIntStackLimit		db	"Stack Limit",0
  2098                                  czIntProtection		db	"General Protection Fault",0
  2099                                  czIntCoprocessorCalc	db	"Coprocessor Calculation",0
  2100                                  czIntReserved		db	"Reserved",0
  2101                                  ;-----------------------------------------------------------------------------------------------------------------------
  2102                                  ;
  2103                                  ;	Processor Interrupt Handling Strings
  2104                                  ;
  2105                                  ;-----------------------------------------------------------------------------------------------------------------------
  2106                                  czIntHeader		db	"An unhandled processor interrupt has occurred:",0
  2107                                  czIntLabel		db	"Interrupt #",0
  2108                                  czIntRegsHeader		db	"Registers at the time of the interrupt:",0
  2109                                  czIntEAX		db	"EAX:",0
  2110                                  czIntECX		db	"ECX:",0
  2111                                  czIntEDX		db	"EDX:",0
  2112                                  czIntEBX		db	"EBX:",0
  2113                                  czIntESI		db	"ESI:",0
  2114                                  czIntEDI		db	"EDI:",0
  2115                                  czIntEBP		db	"EBP:",0
  2116                                  czIntESP		db	"ESP:",0
  2117                                  czIntDS			db	" DS:",0
  2118                                  czIntES			db	" ES:",0
  2119                                  czIntSS			db	" SS:",0
  2120                                  czIntCS			db	" CS:",0
  2121                                  czIntEFLAGS		db	"FLG:",0
  2122                                  czIntEIP		db	"EIP:",0
  2123                                  ;-----------------------------------------------------------------------------------------------------------------------
  2124                                  ;
  2125                                  ;	Routine:	DrawTextDialogBox
  2126                                  ;
  2127                                  ;	Description:	This routine opens a text-mode dialog box with an ASCII border.
  2128                                  ;
  2129                                  ;	In:		CL	upper left column (0-79)
  2130                                  ;			CH	upper left row (0-24)
  2131                                  ;			DL	column width, excluding border
  2132                                  ;			DH	row height, excluding border
  2133                                  ;			BH	color attribute
  2134                                  ;
  2135                                  ;-----------------------------------------------------------------------------------------------------------------------
  2136                                  DrawTextDialogBox	push	ecx						;save non-volatile regs
  2137                                  			push	esi						;
  2138                                  			push	edi						;
  2139                                  			push	es						;
  2140                                  			push	ESELCGA						;load CGA selector ...
  2141                                  			pop	es						;... into ES
  2142                                  ;
  2143                                  ;	Compute target display offset
  2144                                  ;
  2145                                  			xor	eax,eax						;zero register
  2146                                  			mov	al,ch						;row
  2147                                  			mov	ah,ECONROWBYTES					;mulitplicand
  2148                                  			mul	ah						;row offset
  2149                                  			add	al,cl						;add column
  2150                                  			adc	ah,0						;add overflow
  2151                                  			add	al,cl						;add column
  2152                                  			adc	ah,0						;add overflow
  2153                                  			mov	edi,eax						;target row offset
  2154                                  ;
  2155                                  ;	Display top border row
  2156                                  ;
  2157                                  			push	edi						;save target row offset
  2158                                  			mov	ah,bh						;attribute
  2159                                  			mov	al,EASCIIBORDSGLUPRLFT				;upper-left single border
  2160                                  			stosw							;display character and attribute
  2161                                  			mov	al,EASCIIBORDSGLHORZ				;horizontal single border
  2162                                  			xor	ecx,ecx						;zero register
  2163                                  			mov	cl,dl						;width, excluding border
  2164                                  			rep	stosw						;display horizontal border
  2165                                  			mov	al,EASCIIBORDSGLUPRRGT				;upper-right single border
  2166                                  			stosw							;display character and attribute
  2167                                  			pop	edi						;restore target row offset
  2168                                  			add	edi,ECONROWBYTES				;next row
  2169                                  ;
  2170                                  ;	Display dialog box body rows
  2171                                  ;
  2172                                  			xor	ecx,ecx						;zero register
  2173                                  			mov	cl,dh						;height, excluding border
  2174                                  .10			push	ecx						;save remaining rows
  2175                                  			push	edi						;save target row offset
  2176                                  			mov	ah,bh						;attribute
  2177                                  			mov	al,EASCIIBORDSGLVERT				;vertical single border
  2178                                  			stosw							;display character and attribute
  2179                                  			mov	al,EASCIISPACE					;space
  2180                                  			xor	ecx,ecx						;zero register
  2181                                  			mov	cl,dl						;width, excluding border
  2182                                  			rep	stosw						;display row
  2183                                  			mov	al,EASCIIBORDSGLVERT				;vertical single border
  2184                                  			stosw							;display character and attribute
  2185                                  			pop	edi						;restore target row offset
  2186                                  			add	edi,ECONROWBYTES				;next row
  2187                                  			pop	ecx						;remaining rows
  2188                                  			loop	.10						;next row
  2189                                  ;
  2190                                  ;	Display bottom border row
  2191                                  ;
  2192                                  			push	edi						;save target row offset
  2193                                  			mov	ah,bh						;attribute
  2194                                  			mov	al,EASCIIBORDSGLLWRLFT				;lower-left single border
  2195                                  			stosw							;display character and attribute
  2196                                  			mov	al,EASCIIBORDSGLHORZ				;horizontal single border
  2197                                  			xor	ecx,ecx						;zero register
  2198                                  			mov	cl,dl						;width, excluding border
  2199                                  			rep	stosw						;display horizontal border
  2200                                  			mov	al,EASCIIBORDSGLLWRRGT				;lower-right single border
  2201                                  			stosw							;display character and attribute
  2202                                  			pop	edi						;restore target row offset
  2203                                  			add	edi,ECONROWBYTES				;next row
  2204                                  ;
  2205                                  ;	Restore and return
  2206                                  ;
  2207                                  			pop	es						;restore non-volatile regs
  2208                                  			pop	edi						;
  2209                                  			pop	esi						;
  2210                                  			pop	ecx						;
  2211                                  			ret							;return
  2212                                  ;=======================================================================================================================
  2213                                  ;
  2214                                  ;	Hardware Device Interupts
  2215                                  ;
  2216                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2217                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2218                                  ;	(BX=2028h).
  2219                                  ;
  2220                                  ;=======================================================================================================================
  2221                                  ;-----------------------------------------------------------------------------------------------------------------------
  2222                                  ;
  2223                                  ;	IRQ0	Clock Tick Interrupt
  2224                                  ;
  2225                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2226                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2227                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2228                                  ;
  2229                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2230                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2231                                  ;
  2232                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2233                                  ;	zero, the floppy disk motors are turned off.
  2234                                  ;
  2235                                  ;-----------------------------------------------------------------------------------------------------------------------
  2236                                  			menter	clocktick					;clock tick interrupt
  2237                                  			push	eax						;save modified regs
  2238                                  			push	edx						;
  2239                                  			push	ds						;
  2240                                  ;
  2241                                  ;	Update the clock tick count and the elapsed days as needed
  2242                                  ;
  2243                                  			push	ESELDAT						;load OS data selector ...
  2244                                  			pop	ds						;... into data segment register
  2245                                  			mov	eax,[wdClockTicks]				;eax = clock ticks
  2246                                  			inc	eax						;increment clock ticks
  2247                                  			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  2248                                  			jb	irq0.10						;no, skip ahead
  2249                                  			inc	byte [wbClockDays]				;increment clock days
  2250                                  			xor	eax,eax						;reset clock ticks
  2251                                  irq0.10			mov	dword [wdClockTicks],eax			;save clock ticks
  2252                                  ;
  2253                                  ;	Decrement floppy disk motor timeout
  2254                                  ;
  2255                                  			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  2256                                  			je	irq0.20						;yes, skip ahead
  2257                                  			dec	byte [wbFDCMotor]				;decrement motor timeout
  2258                                  			jnz	irq0.20						;skip ahead if non-zero
  2259                                  ;
  2260                                  ;	Turn off the floppy disk motor if appropriate
  2261                                  ;
  2262                                  			sti							;enable maskable interrupts
  2263                                  irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  2264                                  			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  2265                                  			in	al,dx						;FDC main status byte
  2266                                  			test	al,EFDCSTATBUSY					;test FDC main status for busy
  2267                                  			jnz	irq0.15						;wait while busy
  2268                                  			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  2269                                  			mov	byte [wbFDCControl],al				;save motor-off setting
  2270                                  			mov	dh,EFDCPORTHI					;fdc port hi
  2271                                  			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  2272                                  			out	dx,al						;turn motor off
  2273                                  ;
  2274                                  ;	Signal the end of the hardware interrupt
  2275                                  ;
  2276                                  irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  2277                                  ;
  2278                                  ;	Restore and return
  2279                                  ;
  2280                                  			pop	ds						;restore modified regs
  2281                                  			pop	edx						;
  2282                                  			pop	eax						;
  2283                                  			iretd							;return
  2284                                  ;-----------------------------------------------------------------------------------------------------------------------
  2285                                  ;
  2286                                  ;	IRQ1	Keyboard Interrupt
  2287                                  ;
  2288                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2289                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2290                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2291                                  ;	ALL modified registers upon return.
  2292                                  ;
  2293                                  ;-----------------------------------------------------------------------------------------------------------------------
  2294                                  			menter	keyboard					;keyboard interrrupt
  2295                                  			push	eax						;save non-volatile regs
  2296                                  			push	ebx						;
  2297                                  			push	ecx						;
  2298                                  			push	esi						;
  2299                                  			push	ds						;
  2300                                  			push	ESELDAT						;load OS data selector ...
  2301                                  			pop	ds						;... into data segment register
  2302                                  			xor	al,al						;zero
  2303                                  			mov	[wbConsoleScan0],al				;clear scan code 0
  2304                                  			mov	[wbConsoleScan1],al				;clear scan code 1
  2305                                  			mov	[wbConsoleScan2],al				;clear scan code 2
  2306                                  			mov	[wbConsoleScan3],al				;clear scan code 3
  2307                                  			mov	[wbConsoleScan4],al				;clear scan code 4
  2308                                  			mov	[wbConsoleScan5],al				;clear scan code 5
  2309                                  			mov	al,' '						;space
  2310                                  			mov	[wbConsoleChar],al				;set character to space
  2311                                  			mov	al,EKEYFTIMEOUT					;controller timeout flag
  2312                                  			not	al						;controller timeout mask
  2313                                  			and	[wbConsoleStatus],al				;clear controller timeout flag
  2314                                  			mov	bl,[wbConsoleShift]				;shift flags
  2315                                  			mov	bh,[wbConsoleLock]				;lock flags
  2316                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2317                                  			jz	irq1.140					;yes, skip ahead
  2318                                  			in	al,EKEYBPORTDATA				;read scan code 0
  2319                                  			mov	[wbConsoleScan0],al				;save scan code 0
  2320                                  			mov	ah,al						;copy scan code 0
  2321                                  			mov	al,EKEYFSHIFTLEFT				;left shift flag
  2322                                  			cmp	ah,EKEYBSHIFTLDOWN				;left shift key down code?
  2323                                  			je	irq1.30						;yes, set flag
  2324                                  			cmp	ah,EKEYBSHIFTLUP				;left shift key up code?
  2325                                  			je	irq1.40						;yes, reset flag
  2326                                  			mov	al,EKEYFSHIFTRIGHT				;right shift flag
  2327                                  			cmp	ah,EKEYBSHIFTRDOWN				;right shift key down code?
  2328                                  			je	irq1.30						;yes, set flag
  2329                                  			cmp	ah,EKEYBSHIFTRUP				;right shift key up code?
  2330                                  			je	irq1.40						;yes, reset flag
  2331                                  			mov	al,EKEYFCTRLLEFT				;left control flag
  2332                                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  2333                                  			je	irq1.30						;yes, set flag
  2334                                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  2335                                  			je	irq1.40						;yes, reset flag
  2336                                  			mov	al,EKEYFALTLEFT					;left alt flag
  2337                                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  2338                                  			je	irq1.30						;yes, set flag
  2339                                  			cmp	ah,EKEYBALTUP					;alt key up code?
  2340                                  			je	irq1.40						;yes, reset flag
  2341                                  			mov	al,EKEYFLOCKCAPS				;caps-lock flag
  2342                                  			cmp	ah,EKEYBCAPSDOWN				;caps-lock key down code?
  2343                                  			je	irq1.50						;yes, toggle lamps and flags
  2344                                  			mov	al,EKEYFLOCKNUM					;num-lock flag
  2345                                  			cmp	ah,EKEYBNUMDOWN					;num-lock key down code?
  2346                                  			je	irq1.50						;yes, toggle lamps and flags
  2347                                  			mov	al,EKEYFLOCKSCROLL				;scroll-lock flag
  2348                                  			cmp	ah,EKEYBSCROLLDOWN				;scroll-lock key down code?
  2349                                  			je	irq1.50						;yes, toggle lamps and flags
  2350                                  			cmp	ah,EKEYBCODEEXT0				;extended scan code 0?
  2351                                  			jne	irq1.70 					;no, skip ahead
  2352                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2353                                  			jz	irq1.140					;yes, skip ahead
  2354                                  			in	al,EKEYBPORTDATA				;read scan code 1
  2355                                  			mov	[wbConsoleScan1],al				;save scan code 1
  2356                                  			mov	ah,al						;copy scan code 1
  2357                                  			mov	al,EKEYFCTRLRIGHT				;right control flag
  2358                                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  2359                                  			je	irq1.30						;yes, set flag
  2360                                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  2361                                  			je	irq1.40						;yes, reset flag
  2362                                  			mov	al,EKEYFALTRIGHT				;right alt flag
  2363                                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  2364                                  			je	irq1.30						;yes, set flag
  2365                                  			cmp	ah,EKEYBALTUP					;alt key up code?
  2366                                  			je	irq1.40						;yes, reset flag
  2367                                  			cmp	ah,EKEYBSLASH					;slash down code?
  2368                                  			je	irq1.80						;yes, skip ahead
  2369                                  			cmp	ah,EKEYBSLASHUP					;slash up code?
  2370                                  			je	irq1.80						;yes, skip ahead
  2371                                  			cmp	ah,EKEYBPRTSCRDOWN				;print screen down code?
  2372                                  			je	irq1.10						;yes, continue
  2373                                  			cmp	ah,EKEYBPRTSCRUP				;print screen up code?
  2374                                  			jne	irq1.20						;no, skip ahead
  2375                                  irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  2376                                  			jz	irq1.140					;yes, skip ahead
  2377                                  			in	al,EKEYBPORTDATA				;read scan code 2
  2378                                  			mov	[wbConsoleScan2],al				;save scan code 2
  2379                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2380                                  			jz	irq1.140					;yes, skip ahead
  2381                                  			in	al,EKEYBPORTDATA				;read scan code 3
  2382                                  			mov	[wbConsoleScan3],al				;read scan code 3
  2383                                  irq1.20			jmp	irq1.150					;finish keyboard handling
  2384                                  irq1.30			or	bl,al						;set shift flag
  2385                                  			jmp	irq1.60						;skip ahead
  2386                                  irq1.40			not	al						;convert flag to mask
  2387                                  			and	bl,al						;reset shift flag
  2388                                  			jmp	irq1.60						;skip ahead
  2389                                  irq1.50			xor	bh,al						;toggle lock flag
  2390                                  			call	SetKeyboardLamps				;update keyboard lamps
  2391                                  irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  2392                                  			mov	[wbConsoleLock],bh				;save lock flags
  2393                                  			call	PutConsoleOIAShift				;update OIA indicators
  2394                                  			jmp	irq1.150					;finish keyboard handling
  2395                                  irq1.70			cmp	ah,EKEYBCODEEXT1				;extended scan code 1?
  2396                                  			jne	irq1.80						;no continue
  2397                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2398                                  			jz	irq1.140					;yes, skip ahead
  2399                                  			in	al,EKEYBPORTDATA				;read scan code 1
  2400                                  			mov	[wbConsoleScan1],al				;save scan code 1
  2401                                  			mov	ah,al						;copy scan code 1
  2402                                  			cmp	ah,EKEYBPAUSEDOWN				;pause key down code?
  2403                                  			jne	irq1.150					;no, finish keyboard handling
  2404                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2405                                  			jz	irq1.140					;yes, skip ahead
  2406                                  			in	al,EKEYBPORTDATA				;read scan code 2
  2407                                  			mov	[wbConsoleScan2],al				;save scan code 2
  2408                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2409                                  			jz	irq1.140					;yes, skip ahead
  2410                                  			in	al,EKEYBPORTDATA				;read scan code 3
  2411                                  			mov	[wbConsoleScan3],al				;save scan code 3
  2412                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2413                                  			jz	irq1.140					;yes, skip ahead
  2414                                  			in	al,EKEYBPORTDATA				;read scan code 4
  2415                                  			mov	[wbConsoleScan4],al				;save scan code 4
  2416                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2417                                  			jz	irq1.140					;yes, skip ahead
  2418                                  			in	al,EKEYBPORTDATA				;read scan code 5
  2419                                  			mov	[wbConsoleScan5],al				;save scan code 5
  2420                                  			jmp	irq1.150					;continue
  2421                                  irq1.80			xor	al,al						;assume no ASCII translation
  2422                                  			test	ah,EKEYBUP					;release code?
  2423                                  			jnz	irq1.130					;yes, skip ahead
  2424                                  			mov	esi,tscan2ascii					;scan-to-ascii table address
  2425                                  			test	bl,EKEYFSHIFT					;either shift key down?
  2426                                  			jz	irq1.90						;no, skip ahead
  2427                                  			mov	esi,tscan2shift					;scan-to-shifted table address
  2428                                  irq1.90			movzx	ecx,ah						;scan code offset
  2429                                  			mov	al,[cs:ecx+esi]					;al = ASCII code
  2430                                  			test	bh,EKEYFLOCKCAPS				;caps-lock on?
  2431                                  			jz	irq1.100					;no skip ahead
  2432                                  			mov	cl,al						;copy ASCII code
  2433                                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  2434                                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  2435                                  			jb	irq1.100					;yes, skip ahead
  2436                                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  2437                                  			ja	irq1.100					;yes, skip ahead
  2438                                  			xor	al,EASCIICASE					;switch case
  2439                                  irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  2440                                  irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  2441                                  			test	ah,EKEYBUP					;release scan-code?
  2442                                  			jz	irq1.120					;no, skip ahead
  2443                                  			mov	edx,EMSGKEYUP					;key-up event
  2444                                  irq1.120		and	eax,0FFFFh					;clear high-order word
  2445                                  			or	edx,eax						;msg id and codes
  2446                                  			xor	ecx,ecx						;null param
  2447                                  			push	eax						;save codes
  2448                                  			call	PutMessage					;put message to console
  2449                                  			pop	eax						;restore codes
  2450                                  			test	al,al						;ASCII translation?
  2451                                  			jz	irq1.130					;no, skip ahead
  2452                                  			mov	edx,EMSGKEYCHAR					;key-character event
  2453                                  			and	eax,0FFFFh					;clear high-order word
  2454                                  			or	edx,eax						;msg id and codes
  2455                                  			xor	ecx,ecx						;null param
  2456                                  			call	PutMessage					;put message to console
  2457                                  irq1.130		jmp	irq1.150					;finish keyboard handling
  2458                                  irq1.140		mov	al,EKEYFTIMEOUT					;controller timeout flag
  2459                                  			or	[wbConsoleStatus],al				;set controller timeout flag
  2460                                  irq1.150		call	PutConsoleOIAChar				;update operator info area
  2461                                  			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  2462                                  			pop	ds						;restore non-volatile regs
  2463                                  			pop	esi						;
  2464                                  			pop	ecx						;
  2465                                  			pop	ebx						;
  2466                                  			pop	eax						;
  2467                                  			iretd							;return
  2468                                  ;-----------------------------------------------------------------------------------------------------------------------
  2469                                  ;	Scan-Code to ASCII Translation Tables
  2470                                  ;-----------------------------------------------------------------------------------------------------------------------
  2471                                  tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  2472                                  			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  2473                                  			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  2474                                  			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  2475                                  			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  2476                                  			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  2477                                  			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  2478                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  2479                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  2480                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  2481                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  2482                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  2483                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  2484                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  2485                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  2486                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  2487                                  tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  2488                                  			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  2489                                  			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  2490                                  			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  2491                                  			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  2492                                  			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  2493                                  			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  2494                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  2495                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  2496                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  2497                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  2498                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  2499                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  2500                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  2501                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  2502                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  2503                                  ;-----------------------------------------------------------------------------------------------------------------------
  2504                                  ;
  2505                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  2506                                  ;
  2507                                  ;-----------------------------------------------------------------------------------------------------------------------
  2508                                  			menter	iochannel					;secondary 8259A cascade
  2509                                  			push	eax						;save modified regs
  2510                                  			jmp	hwint						;end interrupt and return
  2511                                  ;-----------------------------------------------------------------------------------------------------------------------
  2512                                  ;
  2513                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  2514                                  ;
  2515                                  ;-----------------------------------------------------------------------------------------------------------------------
  2516                                  			menter	com2						;serial port 2 interrupt
  2517                                  			push	eax						;save modified regs
  2518                                  			jmp	hwint						;end interrupt and return
  2519                                  ;-----------------------------------------------------------------------------------------------------------------------
  2520                                  ;
  2521                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  2522                                  ;
  2523                                  ;-----------------------------------------------------------------------------------------------------------------------
  2524                                  			menter	com1						;serial port 1 interrupt
  2525                                  			push	eax						;save modified regs
  2526                                  			jmp	hwint						;end interrupt and return
  2527                                  ;-----------------------------------------------------------------------------------------------------------------------
  2528                                  ;
  2529                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  2530                                  ;
  2531                                  ;-----------------------------------------------------------------------------------------------------------------------
  2532                                  			menter	lpt2						;parallel port 2 interrupt
  2533                                  			push	eax						;save modified regs
  2534                                  			jmp	hwint						;end interrupt and return
  2535                                  ;-----------------------------------------------------------------------------------------------------------------------
  2536                                  ;
  2537                                  ;	IRQ6	Diskette Hardware Interrupt
  2538                                  ;
  2539                                  ;-----------------------------------------------------------------------------------------------------------------------
  2540                                  			menter	diskette					;floppy disk interrupt
  2541                                  			push	eax						;save non-volatile regs
  2542                                  			push	ds						;
  2543                                  			push	ESELDAT						;load OS data selector ...
  2544                                  			pop	ds						;... into DS register
  2545                                  			mov	al,[wbFDCStatus]				;al = FDC calibration status
  2546                                  			or	al,10000000b					;set IRQ flag
  2547                                  			mov	[wbFDCStatus],al				;update FDC calibration status
  2548                                  			pop	ds						;restore non-volatile regs
  2549                                  			jmp	hwint						;end primary PIC interrupt
  2550                                  ;-----------------------------------------------------------------------------------------------------------------------
  2551                                  ;
  2552                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  2553                                  ;
  2554                                  ;-----------------------------------------------------------------------------------------------------------------------
  2555                                  			menter	lpt1						;parallel port 1 interrupt
  2556                                  			push	eax						;save modified regs
  2557                                  			jmp	hwint						;end interrupt and return
  2558                                  ;-----------------------------------------------------------------------------------------------------------------------
  2559                                  ;
  2560                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  2561                                  ;
  2562                                  ;-----------------------------------------------------------------------------------------------------------------------
  2563                                  			menter	rtclock						;real-time clock interrupt
  2564                                  			push	eax						;save modified regs
  2565                                  			jmp	hwwint						;end interrupt and return
  2566                                  ;-----------------------------------------------------------------------------------------------------------------------
  2567                                  ;
  2568                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  2569                                  ;
  2570                                  ;-----------------------------------------------------------------------------------------------------------------------
  2571                                  			menter	retrace						;CGA vertical retrace interrupt
  2572                                  			push	eax						;save modified regs
  2573                                  			jmp	hwwint						;end interrupt and return
  2574                                  ;-----------------------------------------------------------------------------------------------------------------------
  2575                                  ;
  2576                                  ;	IRQ10	Reserved Hardware Interrupt
  2577                                  ;
  2578                                  ;-----------------------------------------------------------------------------------------------------------------------
  2579                                  			menter	irq10						;reserved
  2580                                  			push	eax						;save modified regs
  2581                                  			jmp	hwwint						;end interrupt and return
  2582                                  ;-----------------------------------------------------------------------------------------------------------------------
  2583                                  ;
  2584                                  ;	IRQ11	Reserved Hardware Interrupt
  2585                                  ;
  2586                                  ;-----------------------------------------------------------------------------------------------------------------------
  2587                                  			menter	irq11						;reserved
  2588                                  			push	eax						;save modified regs
  2589                                  			jmp	hwwint						;end interrupt and return
  2590                                  ;-----------------------------------------------------------------------------------------------------------------------
  2591                                  ;
  2592                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  2593                                  ;
  2594                                  ;-----------------------------------------------------------------------------------------------------------------------
  2595                                  			menter	ps2mouse					;PS/2 mouse interrupt
  2596                                  			push	eax						;save modified regs
  2597                                  			jmp	hwwint						;end interrupt and return
  2598                                  ;-----------------------------------------------------------------------------------------------------------------------
  2599                                  ;
  2600                                  ;	IRQ13	Coprocessor Hardware Interrupt
  2601                                  ;
  2602                                  ;-----------------------------------------------------------------------------------------------------------------------
  2603                                  			menter	coprocessor					;coprocessor interrupt
  2604                                  			push	eax						;save modified regs
  2605                                  			jmp	hwwint						;end interrupt and return
  2606                                  ;-----------------------------------------------------------------------------------------------------------------------
  2607                                  ;
  2608                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  2609                                  ;
  2610                                  ;-----------------------------------------------------------------------------------------------------------------------
  2611                                  			menter	fixeddisk					;fixed disk interrupt
  2612                                  			push	eax						;save modified regs
  2613                                  			jmp	hwwint						;end interrupt and return
  2614                                  ;-----------------------------------------------------------------------------------------------------------------------
  2615                                  ;
  2616                                  ;	IRQ15	Reserved Hardware Interrupt
  2617                                  ;
  2618                                  ;-----------------------------------------------------------------------------------------------------------------------
  2619                                  			menter	irq15						;reserved
  2620                                  			push	eax						;save modified regs
  2621                                  			jmp	hwwint						;end interrupt and return
  2622                                  ;-----------------------------------------------------------------------------------------------------------------------
  2623                                  ;
  2624                                  ;	Exit from hardware interrupt
  2625                                  ;
  2626                                  ;-----------------------------------------------------------------------------------------------------------------------
  2627                                  hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  2628                                  			jmp	hwint90						;skip ahead
  2629                                  hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  2630                                  hwint90			pop	eax						;restore modified regs
  2631                                  			iretd							;return from interrupt
  2632                                  ;-----------------------------------------------------------------------------------------------------------------------
  2633                                  ;
  2634                                  ;	INT 30h Operating System Software Service Interrupt
  2635                                  ;
  2636                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2637                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  2638                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2639                                  ;	the entry address of the specific function from a table.
  2640                                  ;
  2641                                  ;-----------------------------------------------------------------------------------------------------------------------
  2642                                  			menter	svc
  2643                                  			cmp	al,maxtsvc					;is our function out of range?
  2644                                  			jae	svc90						;yes, skip ahead
  2645                                  			movzx	eax,al						;function
  2646                                  			shl	eax,2						;offset into table
  2647                                  			call	dword [cs:tsvc+eax]				;far call to indirect address
  2648                                  svc90			iretd							;return from interrupt
  2649                                  ;-----------------------------------------------------------------------------------------------------------------------
  2650                                  ;
  2651                                  ;	Service Request Table
  2652                                  ;
  2653                                  ;
  2654                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2655                                  ;
  2656                                  ;-----------------------------------------------------------------------------------------------------------------------
  2657                                  tsvc			tsvce	ClearConsoleScreen				;clear console screen
  2658                                  			tsvce	CompareMemory					;compare memory
  2659                                  			tsvce	GetConsoleString				;get string input
  2660                                  			tsvce	IsLeapYear					;return ecx=1 if leap year
  2661                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  2662                                  			tsvce	PutConsoleString				;tty output asciiz string
  2663                                  			tsvce	PutDateString					;put MM/DD/YYYY string
  2664                                  			tsvce	PutDayString					;put DD string
  2665                                  			tsvce	PutHourString					;put hh string
  2666                                  			tsvce	PutMinuteString					;put mm string
  2667                                  			tsvce	PutMonthString					;put MM string
  2668                                  			tsvce	PutMonthNameString				;put name(MM) string
  2669                                  			tsvce	PutSecondString					;put ss string
  2670                                  			tsvce	PutTimeString					;put HH:MM:SS string
  2671                                  			tsvce	PutWeekdayString				;put weekday string
  2672                                  			tsvce	PutWeekdayNameString				;put name(weekday) string
  2673                                  			tsvce	PutYearString					;put YYYY string
  2674                                  			tsvce	ReadRealTimeClock				;get real-time clock date and time
  2675                                  			tsvce	ResetSystem					;reset system using 8042 chip
  2676                                  			tsvce	UnsignedToDecimalString 			;convert unsigned integer to decimal string
  2677                                  			tsvce	UpperCaseString					;upper-case string
  2678                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  2679                                  ;-----------------------------------------------------------------------------------------------------------------------
  2680                                  ;
  2681                                  ;	Service Request Macros
  2682                                  ;
  2683                                  ;	These macros provide positional parameterization of service request calls.
  2684                                  ;
  2685                                  ;-----------------------------------------------------------------------------------------------------------------------
  2686                                  %macro			clearConsoleScreen 0
  2687                                  			mov	al,eClearConsoleScreen				;function code
  2688                                  			int	_svc						;invoke OS service
  2689                                  %endmacro
  2690                                  %macro			compareMemory 0
  2691                                  			mov	al,eCompareMemory				;function code
  2692                                  			int	_svc						;invoke OS service
  2693                                  %endmacro
  2694                                  %macro			getConsoleString 4
  2695                                  			mov	edx,%1						;buffer address
  2696                                  			mov	ecx,%2						;max characters
  2697                                  			mov	bh,%3						;echo indicator
  2698                                  			mov	bl,%4						;terminator
  2699                                  			mov	al,eGetConsoleString				;function code
  2700                                  			int	_svc						;invoke OS service
  2701                                  %endmacro
  2702                                  %macro			isLeapYear 1
  2703                                  			mov	ebx,%1						;DATETIME addr
  2704                                  			mov	al,eIsLeapYear					;function code
  2705                                  			int	_svc						;invoke OS service
  2706                                  %endmacro
  2707                                  %macro			placeCursor 0
  2708                                  			mov	al,ePlaceCursor					;function code
  2709                                  			int	_svc						;invoke OS service
  2710                                  %endmacro
  2711                                  %macro			putConsoleString 1
  2712                                  			mov	edx,%1						;string address
  2713                                  			mov	al,ePutConsoleString				;function code
  2714                                  			int	_svc						;invoke OS service
  2715                                  %endmacro
  2716                                  %macro			putDateString 0
  2717                                  			mov	al,ePutDateString				;function code
  2718                                  			int	_svc						;invoke OS service
  2719                                  %endmacro
  2720                                  %macro			putDateString 2
  2721                                  			mov	ebx,%1						;DATETIME addr
  2722                                  			mov	edx,%2						;output buffer addr
  2723                                  			mov	al,ePutDateString				;function code
  2724                                  			int	_svc						;invoke OS service
  2725                                  %endmacro
  2726                                  %macro			putDayString 2
  2727                                  			mov	ebx,%1						;DATETIME addr
  2728                                  			mov	edx,%2						;output buffer addr
  2729                                  			mov	al,ePutDayString				;function code
  2730                                  			int	_svc						;invoke OS service
  2731                                  %endmacro
  2732                                  %macro			putHourString 2
  2733                                  			mov	ebx,%1						;DATETIME addr
  2734                                  			mov	edx,%2						;output buffer addr
  2735                                  			mov	al,ePutHourString				;function code
  2736                                  			int	_svc						;invoke OS service
  2737                                  %endmacro
  2738                                  %macro			putMinuteString 2
  2739                                  			mov	ebx,%1						;DATETIME addr
  2740                                  			mov	edx,%2						;output buffer addr
  2741                                  			mov	al,ePutMinuteString				;function code
  2742                                  			int	_svc						;invoke OS service
  2743                                  %endmacro
  2744                                  %macro			putMonthString 2
  2745                                  			mov	ebx,%1						;DATETIME addr
  2746                                  			mov	edx,%2						;output buffer addr
  2747                                  			mov	al,ePutMonthString				;function code
  2748                                  			int	_svc						;invoke OS service
  2749                                  %endmacro
  2750                                  %macro			putMonthNameString 2
  2751                                  			mov	ebx,%1						;DATETIME addr
  2752                                  			mov	edx,%2						;output buffer addr
  2753                                  			mov	al,ePutMonthNameString				;function code
  2754                                  			int	_svc						;invoke OS service
  2755                                  %endmacro
  2756                                  %macro			putSecondString 2
  2757                                  			mov	ebx,%1						;DATETIME addr
  2758                                  			mov	edx,%2						;output buffer addr
  2759                                  			mov	al,ePutSecondString				;function code
  2760                                  			int	_svc						;invoke OS service
  2761                                  %endmacro
  2762                                  %macro			putTimeString 0
  2763                                  			mov	al,ePutTimeString				;function code
  2764                                  			int	_svc						;invoke OS service
  2765                                  %endmacro
  2766                                  %macro			putTimeString 2
  2767                                  			mov	ebx,%1						;DATETIME addr
  2768                                  			mov	edx,%2						;output buffer addr
  2769                                  			mov	al,ePutTimeString				;function code
  2770                                  			int	_svc						;invoke OS service
  2771                                  %endmacro
  2772                                  %macro			putWeekdayString 2
  2773                                  			mov	ebx,%1						;DATETIME addr
  2774                                  			mov	edx,%2						;output buffer addr
  2775                                  			mov	al,ePutWeekdayString				;function code
  2776                                  			int	_svc						;invoke OS service
  2777                                  %endmacro
  2778                                  %macro			putWeekdayNameString 2
  2779                                  			mov	ebx,%1						;DATETIME addr
  2780                                  			mov	edx,%2						;output buffer addr
  2781                                  			mov	al,ePutWeekdayNameString			;function code
  2782                                  			int	_svc						;invoke OS service
  2783                                  %endmacro
  2784                                  %macro			putYearString 2
  2785                                  			mov	ebx,%1						;DATETIME addr
  2786                                  			mov	edx,%2						;output buffer addr
  2787                                  			mov	al,ePutYearString				;function code
  2788                                  			int	_svc						;invoke OS service
  2789                                  %endmacro
  2790                                  %macro			readRealTimeClock 0
  2791                                  			mov	al,eReadRealTimeClock				;function code
  2792                                  			int	_svc						;invoke OS service
  2793                                  %endmacro
  2794                                  %macro			readRealTimeClock 1
  2795                                  			mov	ebx,%1						;DATETIME addr
  2796                                  			mov	al,eReadRealTimeClock				;function code
  2797                                  			int	_svc						;invoke OS service
  2798                                  %endmacro
  2799                                  %macro			resetSystem 0
  2800                                  			mov	al,eResetSystem					;AL = system reset fn.
  2801                                  			int	_svc						;invoke OS service
  2802                                  %endmacro
  2803                                  %macro			unsignedToDecimalString 0
  2804                                  			mov	al,eUnsignedToDecimalString			;function code
  2805                                  			int	_svc						;invoke OS service
  2806                                  %endmacro
  2807                                  %macro			upperCaseString 0
  2808                                  			mov	al,eUpperCaseString				;function code
  2809                                  			int	_svc						;invoke OS service
  2810                                  %endmacro
  2811                                  ;=======================================================================================================================
  2812                                  ;
  2813                                  ;	Kernel Function Library
  2814                                  ;
  2815                                  ;=======================================================================================================================
  2816                                  ;=======================================================================================================================
  2817                                  ;
  2818                                  ;	Date and Time Helper Routines
  2819                                  ;
  2820                                  ;	GetYear
  2821                                  ;	IsLeapYear
  2822                                  ;	PutDateString
  2823                                  ;	PutDayString
  2824                                  ;	PutHourString
  2825                                  ;	PutMinuteString
  2826                                  ;	PutMonthString
  2827                                  ;	PutMonthNameString
  2828                                  ;	PutSecondString
  2829                                  ;	PutTimeString
  2830                                  ;	PutWeekdayString
  2831                                  ;	PutWeekdayNameString
  2832                                  ;	PutYearString
  2833                                  ;
  2834                                  ;=======================================================================================================================
  2835                                  ;-----------------------------------------------------------------------------------------------------------------------
  2836                                  ;
  2837                                  ;	Routine:	GetYear
  2838                                  ;
  2839                                  ;	Description:	Return the four-digit year (century * 100 + year of century)
  2840                                  ;
  2841                                  ;	In:		DS:EBX	DATETIME address
  2842                                  ;
  2843                                  ;	Out:		ECX	year
  2844                                  ;
  2845                                  ;-----------------------------------------------------------------------------------------------------------------------
  2846                                  GetYear			movzx	ecx,byte [ebx+DATETIME.century]			;century
  2847                                  			imul	ecx,100						;century * 100
  2848                                  			movzx	eax,byte [ebx+DATETIME.year]			;year of century
  2849                                  			add	ecx,eax						;year (YYYY)
  2850                                  			ret							;return
  2851                                  ;-----------------------------------------------------------------------------------------------------------------------
  2852                                  ;
  2853                                  ;	Routine:	IsLeapYear
  2854                                  ;
  2855                                  ;	Description:	This routine returns an indicator if the current year is a leap year.
  2856                                  ;
  2857                                  ;	In:		DS:EBX	DATETIME ADDRESS
  2858                                  ;
  2859                                  ;	Out:		ECX	0 = not a leap year
  2860                                  ;				1 = leap year
  2861                                  ;
  2862                                  ;-----------------------------------------------------------------------------------------------------------------------
  2863                                  IsLeapYear		call	GetYear						;ECX = YYYY
  2864                                  			mov	eax,ecx						;EAX = YYYY
  2865                                  			xor	ecx,ecx						;assume not leap year
  2866                                  			test	al,00000011b					;multiple of four?
  2867                                  			jnz	.no						;no, branch
  2868                                  			mov	dl,100						;divisor
  2869                                  			div	dl						;divide by 100
  2870                                  			test	ah,ah						;multiple of 100?
  2871                                  			jnz	.yes						;yes, branch
  2872                                  			test	al,00000011b					;multiple of 400?
  2873                                  			jnz	.no						;no, branch
  2874                                  .yes			inc	ecx						;indicate leap
  2875                                  .no			ret							;
  2876                                  ;-----------------------------------------------------------------------------------------------------------------------
  2877                                  ;
  2878                                  ;	Routine:	PutDateString
  2879                                  ;
  2880                                  ;	Description:	This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  2881                                  ;			structure at ds:ebx.
  2882                                  ;
  2883                                  ;	In:		DS:EBX	DATETIME address
  2884                                  ;			DS:EDX	output buffer address
  2885                                  ;
  2886                                  ;-----------------------------------------------------------------------------------------------------------------------
  2887                                  PutDateString		push	ecx						;save non-volatile regs
  2888                                  			push	edi						;
  2889                                  			push	es						;
  2890                                  			push	ds						;store data selector ...
  2891                                  			pop	es						;... in extra segment reg
  2892                                  			mov	edi,edx						;output buffer address
  2893                                  			mov	cl,10						;divisor
  2894                                  			mov	edx,0002F3030h					;ASCIIZ "00/" (reversed)
  2895                                  			movzx	eax,byte [ebx+DATETIME.month]			;month
  2896                                  			div	cl						;AH = rem; AL = quotient
  2897                                  			or	eax,edx						;apply ASCII zones and delimiter
  2898                                  			cld							;forward strings
  2899                                  			stosd							;store "mm/"nul
  2900                                  			dec	edi						;address of terminator
  2901                                  			movzx	eax,byte [ebx+DATETIME.day]			;day
  2902                                  			div	cl						;AH = rem; AL = quotient
  2903                                  			or	eax,edx						;apply ASCII zones and delimiter
  2904                                  			stosd							;store "dd/"nul
  2905                                  			dec	edi						;address of terminator
  2906                                  			movzx	eax,byte [ebx+DATETIME.century]			;century
  2907                                  			div	cl						;AH = rem; AL = quotient
  2908                                  			or	eax,edx						;apply ASCII zones and delimiter
  2909                                  			stosd							;store "cc/"null
  2910                                  			dec	edi						;address of terminator
  2911                                  			dec	edi						;address of delimiter
  2912                                  			movzx	eax,byte [ebx+DATETIME.year]			;year (yy)
  2913                                  			div	cl						;AH = rem; AL = quotient
  2914                                  			or	eax,edx						;apply ASCII zones and delimiter
  2915                                  			stosb							;store quotient
  2916                                  			mov	al,ah						;remainder
  2917                                  			stosb							;store remainder
  2918                                  			xor	al,al						;null terminator
  2919                                  			stosb							;store terminator
  2920                                  			pop	es						;restore non-volatile regs
  2921                                  			pop	edi						;
  2922                                  			pop	ecx						;
  2923                                  			ret							;return
  2924                                  ;-----------------------------------------------------------------------------------------------------------------------
  2925                                  ;
  2926                                  ;	Routine:	PutDayString
  2927                                  ;
  2928                                  ;	Description:	This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  2929                                  ;			structure at ds:ebx.
  2930                                  ;
  2931                                  ;	In:		DS:EBX	DATETIME address
  2932                                  ;			DS:EDX	output buffer address
  2933                                  ;
  2934                                  ;-----------------------------------------------------------------------------------------------------------------------
  2935                                  PutDayString		push	ecx						;save non-volatile regs
  2936                                  			movzx	ecx,byte [ebx+DATETIME.day]			;day
  2937                                  			mov	bh,1						;trim leading zeros; no commas
  2938                                  			call	UnsignedToDecimalString				;store ASCII decimal string
  2939                                  			pop	ecx						;
  2940                                  			ret							;return
  2941                                  ;-----------------------------------------------------------------------------------------------------------------------
  2942                                  ;
  2943                                  ;	Routine:	PutHourString
  2944                                  ;
  2945                                  ;	Description:	This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  2946                                  ;			structure at ds:ebx.
  2947                                  ;
  2948                                  ;	In:		DS:EBX	DATETIME address
  2949                                  ;			DS:EDX	output buffer address
  2950                                  ;
  2951                                  ;-----------------------------------------------------------------------------------------------------------------------
  2952                                  PutHourString		push	ecx						;save non-volatile regs
  2953                                  			movzx	ecx,byte [ebx+DATETIME.hour]			;hour
  2954                                  			mov	bh,1						;trim leading zeros; no commas
  2955                                  			call	UnsignedToDecimalString				;store ASCII decimal string
  2956                                  			pop	ecx						;
  2957                                  			ret							;return
  2958                                  ;-----------------------------------------------------------------------------------------------------------------------
  2959                                  ;
  2960                                  ;	Routine:	PutMinuteString
  2961                                  ;
  2962                                  ;	Description:	This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  2963                                  ;			structure at ds:ebx.
  2964                                  ;
  2965                                  ;	In:		DS:EBX	DATETIME address
  2966                                  ;			DS:EDX	output buffer address
  2967                                  ;
  2968                                  ;-----------------------------------------------------------------------------------------------------------------------
  2969                                  PutMinuteString		push	ecx						;save non-volatile regs
  2970                                  			movzx	ecx,byte [ebx+DATETIME.minute]			;minute
  2971                                  			mov	bh,1						;trim leading zeros; no commas
  2972                                  			call	UnsignedToDecimalString				;store ASCII decimal string
  2973                                  			pop	ecx						;
  2974                                  			ret							;return
  2975                                  ;-----------------------------------------------------------------------------------------------------------------------
  2976                                  ;
  2977                                  ;	Routine:	PutMonthString
  2978                                  ;
  2979                                  ;	Description:	This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  2980                                  ;			structure at ds:ebx.
  2981                                  ;
  2982                                  ;	In:		DS:EBX	DATETIME address
  2983                                  ;			DS:EDX	output buffer address
  2984                                  ;
  2985                                  ;-----------------------------------------------------------------------------------------------------------------------
  2986                                  PutMonthString		push	ecx						;save non-volatile regs
  2987                                  			movzx	ecx,byte [ebx+DATETIME.month]			;month
  2988                                  			mov	bh,1						;trim leading zeros; no commas
  2989                                  			call	UnsignedToDecimalString				;store ASCII decimal string
  2990                                  			pop	ecx						;
  2991                                  			ret							;return
  2992                                  ;-----------------------------------------------------------------------------------------------------------------------
  2993                                  ;
  2994                                  ;	Routine:	PutMonthNameString
  2995                                  ;
  2996                                  ;	Description:	This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  2997                                  ;			structure at ds:ebx.
  2998                                  ;
  2999                                  ;	In:		DS:EBX	DATETIME address
  3000                                  ;			DS:EDX	output buffer address
  3001                                  ;
  3002                                  ;-----------------------------------------------------------------------------------------------------------------------
  3003                                  PutMonthNameString	push	esi						;save non-volatile regs
  3004                                  			push	edi						;
  3005                                  			push	ds						;
  3006                                  			push	es						;
  3007                                  			push	ds						;load data selector ...
  3008                                  			pop	es						;... into extra segment
  3009                                  			mov	edi,edx						;output buffer address
  3010                                  			movzx	eax,byte [ebx+DATETIME.month]			;month (1-12)
  3011                                  			dec	eax						;month (0-11)
  3012                                  			shl	eax,2						;offset into month name lookup table
  3013                                  			push	cs						;load code selector ...
  3014                                  			pop	ds						;... into data segment
  3015                                  			mov	esi,[tMonthNames+eax]				;month name address
  3016                                  			cld							;forward strings
  3017                                  .10			lodsb							;name character
  3018                                  			stosb							;store in output buffer
  3019                                  			test	al,al						;end of string?
  3020                                  			jnz	.10						;no, continue
  3021                                  			pop	es						;restore non-volatile regs
  3022                                  			pop	ds						;
  3023                                  			pop	edi						;
  3024                                  			pop	esi						;
  3025                                  			ret							;return
  3026                                  ;-----------------------------------------------------------------------------------------------------------------------
  3027                                  ;
  3028                                  ;	Routine:	PutSecondString
  3029                                  ;
  3030                                  ;	Description:	This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3031                                  ;			structure at ds:ebx.
  3032                                  ;
  3033                                  ;	In:		DS:EBX	DATETIME address
  3034                                  ;			DS:EDX	output buffer address
  3035                                  ;
  3036                                  ;-----------------------------------------------------------------------------------------------------------------------
  3037                                  PutSecondString		push	ecx						;save non-volatile regs
  3038                                  			movzx	ecx,byte [ebx+DATETIME.second]			;second
  3039                                  			mov	bh,1						;trim leading zeros; no commas
  3040                                  			call	UnsignedToDecimalString				;store ASCII decimal string
  3041                                  			pop	ecx						;
  3042                                  			ret							;return
  3043                                  ;-----------------------------------------------------------------------------------------------------------------------
  3044                                  ;
  3045                                  ;	Routine:	PutTimeString
  3046                                  ;
  3047                                  ;	Description:	This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3048                                  ;			structure at ds:ebx.
  3049                                  ;
  3050                                  ;	In:		DS:EBX	DATETIME address
  3051                                  ;			DS:EDX	output buffer address
  3052                                  ;
  3053                                  ;-----------------------------------------------------------------------------------------------------------------------
  3054                                  PutTimeString		push	ecx						;save non-volatile regs
  3055                                  			push	edi						;
  3056                                  			push	es						;
  3057                                  			push	ds						;store data selector ...
  3058                                  			pop	es						;... in extra segment reg
  3059                                  			mov	edi,edx						;output buffer address
  3060                                  			mov	cl,10						;divisor
  3061                                  			mov	edx,003a3030h					;ASCIIZ "00:" (reversed)
  3062                                  			movzx	eax,byte [ebx+DATETIME.hour]			;hour
  3063                                  			div	cl						;ah = rem; al = quotient
  3064                                  			or	eax,edx						;apply ASCII zones and delimiter
  3065                                  			cld							;forward strings
  3066                                  			stosd							;store "mm/"nul
  3067                                  			dec	edi						;address of terminator
  3068                                  			movzx	eax,byte [ebx+DATETIME.minute]			;minute
  3069                                  			div	cl						;ah = rem; al = quotient
  3070                                  			or	eax,edx						;apply ASCII zones and delimiter
  3071                                  			stosd							;store "dd/"nul
  3072                                  			dec	edi						;address of terminator
  3073                                  			movzx	eax,byte [ebx+DATETIME.second]			;second
  3074                                  			div	cl						;ah = rem; al = quotient
  3075                                  			or	eax,edx						;apply ASCII zones and delimiter
  3076                                  			stosb							;store quotient
  3077                                  			mov	al,ah						;remainder
  3078                                  			stosb							;store remainder
  3079                                  			xor	al,al						;null terminator
  3080                                  			stosb							;store terminator
  3081                                  			pop	es						;restore non-volatile regs
  3082                                  			pop	edi						;
  3083                                  			pop	ecx						;
  3084                                  			ret							;return
  3085                                  ;-----------------------------------------------------------------------------------------------------------------------
  3086                                  ;
  3087                                  ;	Routine:	PutWeekdayString
  3088                                  ;
  3089                                  ;	Description:	This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3090                                  ;			structure at ds:ebx.
  3091                                  ;
  3092                                  ;	In:		DS:EBX	DATETIME address
  3093                                  ;			DS:EDX	output buffer address
  3094                                  ;
  3095                                  ;-----------------------------------------------------------------------------------------------------------------------
  3096                                  PutWeekdayString	push	ecx						;save non-volatile regs
  3097                                  			movzx	ecx,byte [ebx+DATETIME.weekday]			;weekday
  3098                                  			mov	bh,1						;trim leading zeros; no commas
  3099                                  			call	UnsignedToDecimalString				;store ASCII decimal string
  3100                                  			pop	ecx						;
  3101                                  			ret							;return
  3102                                  ;-----------------------------------------------------------------------------------------------------------------------
  3103                                  ;
  3104                                  ;	Routine:	PutWeekdayNameString
  3105                                  ;
  3106                                  ;	Description:	This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3107                                  ;			structure at ds:ebx.
  3108                                  ;
  3109                                  ;	In:		DS:EBX	DATETIME address
  3110                                  ;			DS:EDX	output buffer address
  3111                                  ;
  3112                                  ;-----------------------------------------------------------------------------------------------------------------------
  3113                                  PutWeekdayNameString	push	esi						;save non-volatile regs
  3114                                  			push	edi						;
  3115                                  			push	ds						;
  3116                                  			push	es						;
  3117                                  			push	ds						;load data selector ...
  3118                                  			pop	es						;... into extra segment
  3119                                  			mov	edi,edx						;output buffer address
  3120                                  			movzx	eax,byte [ebx+DATETIME.weekday]			;weekday (0-6)
  3121                                  			shl	eax,2						;offset into day name lookup table
  3122                                  			push	cs						;load code selector ...
  3123                                  			pop	ds						;... into data segment
  3124                                  			mov	esi,[tDayNames+eax]				;day name address
  3125                                  			cld							;forward strings
  3126                                  .10			lodsb							;name character
  3127                                  			stosb							;store in output buffer
  3128                                  			test	al,al						;end of string?
  3129                                  			jnz	.10						;no, continue
  3130                                  			pop	es						;restore non-volatile regs
  3131                                  			pop	ds						;
  3132                                  			pop	edi						;
  3133                                  			pop	esi						;
  3134                                  			ret							;return
  3135                                  ;-----------------------------------------------------------------------------------------------------------------------
  3136                                  ;
  3137                                  ;	Routine:	PutYearString
  3138                                  ;
  3139                                  ;	Description:	This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3140                                  ;			structure at ds:ebx.
  3141                                  ;
  3142                                  ;	In:		DS:EBX	DATETIME address
  3143                                  ;			DS:EDX	output buffer address
  3144                                  ;
  3145                                  ;-----------------------------------------------------------------------------------------------------------------------
  3146                                  PutYearString		push	ecx						;save non-volatile regs
  3147                                  			call	GetYear						;ECX = YYYY
  3148                                  			mov	bh,1						;trim leading zeros; no commas
  3149                                  			call	UnsignedToDecimalString				;store decimal string at DS:EDX
  3150                                  			pop	ecx						;restore non-volatile regs
  3151                                  			ret							;return
  3152                                  ;-----------------------------------------------------------------------------------------------------------------------
  3153                                  ;
  3154                                  ;	Day Names
  3155                                  ;
  3156                                  ;-----------------------------------------------------------------------------------------------------------------------
  3157                                  czSunday		db	"Sunday",0
  3158                                  czMonday		db	"Monday",0
  3159                                  czTuesday		db	"Tuesday",0
  3160                                  czWednesday		db	"Wednesday",0
  3161                                  czThursday		db	"Thursday",0
  3162                                  czFriday		db	"Friday",0
  3163                                  czSaturday		db	"Saturday",0
  3164                                  ;-----------------------------------------------------------------------------------------------------------------------
  3165                                  ;
  3166                                  ;	Month Names
  3167                                  ;
  3168                                  ;-----------------------------------------------------------------------------------------------------------------------
  3169                                  czJanuary		db	"January",0
  3170                                  czFebruary		db	"February",0
  3171                                  czMarch			db	"March",0
  3172                                  czApril			db	"April",0
  3173                                  czMay			db	"May",0
  3174                                  czJune			db	"June",0
  3175                                  czJuly			db	"July",0
  3176                                  czAugust		db	"August",0
  3177                                  czSeptember		db	"September",0
  3178                                  czOctober		db	"October",0
  3179                                  czNovember		db	"November",0
  3180                                  czDecember		db	"December",0
  3181                                  ;-----------------------------------------------------------------------------------------------------------------------
  3182                                  ;
  3183                                  ;	Day Names Lookup Table
  3184                                  ;
  3185                                  ;-----------------------------------------------------------------------------------------------------------------------
  3186                                  			align	4
  3187                                  tDayNames		equ	$
  3188                                  			dd	czSunday
  3189                                  			dd	czMonday
  3190                                  			dd	czTuesday
  3191                                  			dd	czWednesday
  3192                                  			dd	czThursday
  3193                                  			dd	czFriday
  3194                                  			dd	czSaturday
  3195                                  EDAYNAMESTBLL		equ	($-tDayNames)
  3196                                  EDAYNAMESTBLCNT		equ	EDAYNAMESTBLL/4
  3197                                  ;-----------------------------------------------------------------------------------------------------------------------
  3198                                  ;
  3199                                  ;	Month Names Lookup Table
  3200                                  ;
  3201                                  ;-----------------------------------------------------------------------------------------------------------------------
  3202                                  			align	4
  3203                                  tMonthNames		equ	$
  3204                                  			dd	czJanuary
  3205                                  			dd	czFebruary
  3206                                  			dd	czMarch
  3207                                  			dd	czApril
  3208                                  			dd	czMay
  3209                                  			dd	czJune
  3210                                  			dd	czJuly
  3211                                  			dd	czAugust
  3212                                  			dd	czSeptember
  3213                                  			dd	czOctober
  3214                                  			dd	czNovember
  3215                                  			dd	czDecember
  3216                                  EMONTHNAMESTBLL		equ	($-tMonthNames)
  3217                                  EMONTHNAMESTBLCNT	equ	EMONTHNAMESTBLL/4
  3218                                  ;=======================================================================================================================
  3219                                  ;
  3220                                  ;	String Helper Routines
  3221                                  ;
  3222                                  ;	UpperCaseString
  3223                                  ;	CompareMemory
  3224                                  ;
  3225                                  ;=======================================================================================================================
  3226                                  ;-----------------------------------------------------------------------------------------------------------------------
  3227                                  ;
  3228                                  ;	Routine:	UpperCaseString
  3229                                  ;
  3230                                  ;	Description:	This routine places all characters in the given string to upper case.
  3231                                  ;
  3232                                  ;	In:		DS:EDX	string address
  3233                                  ;
  3234                                  ;	Out:		EDX	string address
  3235                                  ;
  3236                                  ;-----------------------------------------------------------------------------------------------------------------------
  3237                                  UpperCaseString		push	esi						;save non-volatile regs
  3238                                  			mov	esi,edx						;string address
  3239                                  			cld							;forward strings
  3240                                  .10			lodsb							;string character
  3241                                  			test	al,al						;null?
  3242                                  			jz	.20						;yes, skip ahead
  3243                                  			cmp	al,EASCIILOWERA					;lower-case? (lower bounds)
  3244                                  			jb	.10						;no, continue
  3245                                  			cmp	al,EASCIILOWERZ					;lower-case? (upper bounds)
  3246                                  			ja	.10						;no, continue
  3247                                  			and	al,EASCIICASEMASK				;mask for upper case
  3248                                  			mov	[esi-1],al					;upper character
  3249                                  			jmp	.10						;continue
  3250                                  .20			pop	esi						;restore non-volatile regs
  3251                                  			ret							;return
  3252                                  ;-----------------------------------------------------------------------------------------------------------------------
  3253                                  ;
  3254                                  ;	Routine:	CompareMemory
  3255                                  ;
  3256                                  ;	Description:	This routine compares two byte arrays.
  3257                                  ;
  3258                                  ;	In:		DS:EDX	first source address
  3259                                  ;			DS:EBX	second source address
  3260                                  ;			ECX	comparison length
  3261                                  ;
  3262                                  ;	Out:		EDX	first source address
  3263                                  ;			EBX	second source address
  3264                                  ;			ECX	0	array 1 = array 2
  3265                                  ;				<0	array 1 < array 2
  3266                                  ;				>0	array 1 > array 2
  3267                                  ;
  3268                                  ;-----------------------------------------------------------------------------------------------------------------------
  3269                                  CompareMemory		push	esi						;save non-volatile regs
  3270                                  			push	edi						;
  3271                                  			push	es						;
  3272                                  			push	ds						;copy DS
  3273                                  			pop	es						;... to ES
  3274                                  			mov	esi,edx						;first source address
  3275                                  			mov	edi,ebx						;second source address
  3276                                  			cld							;forward strings
  3277                                  			rep	cmpsb						;compare bytes
  3278                                  			mov	al,0						;default result
  3279                                  			jz	.10						;branch if arrays equal
  3280                                  			mov	al,1						;positive result
  3281                                  			jnc	.10						;branch if target > source
  3282                                  			mov	al,-1						;negative result
  3283                                  .10			movsx	ecx,al						;extend sign
  3284                                  			pop	es						;restore non-volatile regs
  3285                                  			pop	edi						;
  3286                                  			pop	esi						;
  3287                                  			ret							;return
  3288                                  ;=======================================================================================================================
  3289                                  ;
  3290                                  ;	Console Helper Routines
  3291                                  ;
  3292                                  ;	PutConsoleString
  3293                                  ;	GetConsoleString
  3294                                  ;	GetConsoleChar
  3295                                  ;	Yield
  3296                                  ;	PreviousConsoleColumn
  3297                                  ;	NextConsoleColumn
  3298                                  ;	FirstConsoleColumn
  3299                                  ;	NextConsoleRow
  3300                                  ;	PutConsoleChar
  3301                                  ;	PutConsoleOIAShift
  3302                                  ;	PutConsoleOIAChar
  3303                                  ;	PutConsoleHexByte
  3304                                  ;
  3305                                  ;=======================================================================================================================
  3306                                  ;-----------------------------------------------------------------------------------------------------------------------
  3307                                  ;
  3308                                  ;	Routine:	PutConsoleString
  3309                                  ;
  3310                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  3311                                  ;			console position as needed.
  3312                                  ;
  3313                                  ;	In:		EDX	source address
  3314                                  ;			DS	OS data selector
  3315                                  ;
  3316                                  ;-----------------------------------------------------------------------------------------------------------------------
  3317                                  PutConsoleString	push	esi						;save non-volatile regs
  3318                                  			mov	esi,edx						;source address
  3319                                  			cld							;forward strings
  3320                                  .10			lodsb							;ASCII character
  3321                                  			or	al,al						;end of string?
  3322                                  			jz	.40						;yes, skip ahead
  3323                                  			cmp	al,EASCIIRETURN					;carriage return?
  3324                                  			jne	.20						;no, skip ahead
  3325                                  			call	FirstConsoleColumn				;move to start of row
  3326                                  			jmp	.10						;next character
  3327                                  .20			cmp	al,EASCIILINEFEED				;line feed?
  3328                                  			jne	.30						;no, skip ahead
  3329                                  			call	NextConsoleRow					;move to next row
  3330                                  			jmp	.10						;next character
  3331                                  .30			call	PutConsoleChar					;output character to console
  3332                                  			call	NextConsoleColumn				;advance to next column
  3333                                  			jmp	.10						;next character
  3334                                  .40			pop	esi						;restore non-volatile regs
  3335                                  			ret							;return
  3336                                  ;-----------------------------------------------------------------------------------------------------------------------
  3337                                  ;
  3338                                  ;	Routine:	GetConsoleString
  3339                                  ;
  3340                                  ;	Description:	This routine accepts keyboard input into a buffer.
  3341                                  ;
  3342                                  ;	In:		DS:EDX	target buffer address
  3343                                  ;			ECX	maximum number of characters to accept
  3344                                  ;			BH	echo to terminal
  3345                                  ;			BL	terminating character
  3346                                  ;
  3347                                  ;-----------------------------------------------------------------------------------------------------------------------
  3348                                  GetConsoleString	push	ecx						;save non-volatile regs
  3349                                  			push	esi						;
  3350                                  			push	edi						;
  3351                                  			push	es						;
  3352                                  			push	ds						;load data segment selector ...
  3353                                  			pop	es						;... into extra segment register
  3354                                  			mov	edi,edx						;edi = target buffer
  3355                                  			push	ecx						;save maximum characters
  3356                                  			xor	al,al						;zero register
  3357                                  			cld							;forward strings
  3358                                  			rep	stosb						;zero fill buffer
  3359                                  			pop	ecx						;maximum characters
  3360                                  			mov	edi,edx						;edi = target buffer
  3361                                  			mov	esi,edx						;esi = target buffer
  3362                                  .10			jecxz	.50						;exit if max-length is zero
  3363                                  .20			call	GetConsoleChar					;al = next input char
  3364                                  			cmp	al,bl						;is this the terminator?
  3365                                  			je	.50						;yes, exit
  3366                                  			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  3367                                  			jne	.30						;no, skip ahead
  3368                                  			cmp	esi,edi						;at start of buffer?
  3369                                  			je	.20						;yes, get next character
  3370                                  			dec	edi						;backup target pointer
  3371                                  			mov	byte [edi],0					;zero previous character
  3372                                  			inc	ecx						;increment remaining chars
  3373                                  			test	bh,1						;echo to console?
  3374                                  			jz	.20						;no, get next character
  3375                                  			call	PreviousConsoleColumn				;backup console position
  3376                                  			mov	al,EASCIISPACE					;ASCII space
  3377                                  			call	PutConsoleChar					;write space to console
  3378                                  			call	PlaceCursor					;position the cursor
  3379                                  			jmp	.20						;get next character
  3380                                  .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  3381                                  			jb	.20						;no, get another character
  3382                                  			cmp	al,EASCIITILDE					;printable? (upper bounds)
  3383                                  			ja	.20						;no, get another character
  3384                                  			stosb							;store character in buffer
  3385                                  			test	bh,1						;echo to console?
  3386                                  			jz	.40						;no, skip ahead
  3387                                  			call	PutConsoleChar					;write character to console
  3388                                  			call	NextConsoleColumn				;advance console position
  3389                                  			call	PlaceCursor					;position the cursor
  3390                                  .40			dec	ecx						;decrement remaining chars
  3391                                  			jmp	.10						;next
  3392                                  .50			xor	al,al						;null
  3393                                  			stosb							;terminate buffer
  3394                                  			pop	es						;restore non-volatile regs
  3395                                  			pop	edi						;
  3396                                  			pop	esi						;
  3397                                  			pop	ecx						;
  3398                                  			ret							;return
  3399                                  ;-----------------------------------------------------------------------------------------------------------------------
  3400                                  ;
  3401                                  ;	Routine:	GetConsoleChar
  3402                                  ;
  3403                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  3404                                  ;
  3405                                  ;	Out:		AL	ASCII character code
  3406                                  ;			AH	keyboard scan code
  3407                                  ;
  3408                                  ;-----------------------------------------------------------------------------------------------------------------------
  3409                                  GetConsoleChar.10	call	Yield						;pass control or halt
  3410                                  GetConsoleChar		call	GetMessage					;get the next message
  3411                                  			or	eax,eax						;do we have a message?
  3412                                  			jz	GetConsoleChar.10				;no, skip ahead
  3413                                  			push	eax						;save key codes
  3414                                  			and	eax,0FFFF0000h					;mask for message type
  3415                                  			cmp	eax,EMSGKEYCHAR					;key-char message?
  3416                                  			pop	eax						;restore key codes
  3417                                  			jne	GetConsoleChar					;no, try again
  3418                                  			and	eax,0000ffffh					;mask for key codes
  3419                                  			ret							;return
  3420                                  ;-----------------------------------------------------------------------------------------------------------------------
  3421                                  ;
  3422                                  ;	Routine:	Yield
  3423                                  ;
  3424                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  3425                                  ;
  3426                                  ;-----------------------------------------------------------------------------------------------------------------------
  3427                                  Yield			sti							;enable maskagle interrupts
  3428                                  			hlt							;halt until external interrupt
  3429                                  			ret							;return
  3430                                  ;-----------------------------------------------------------------------------------------------------------------------
  3431                                  ;
  3432                                  ;	Routine:	PreviousConsoleColumn
  3433                                  ;
  3434                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3435                                  ;			the column is set to the last position in the row and the row is decremented.
  3436                                  ;
  3437                                  ;	In:		DS	OS data selector
  3438                                  ;
  3439                                  ;-----------------------------------------------------------------------------------------------------------------------
  3440                                  PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  3441                                  			or	al,al						;start of row?
  3442                                  			jnz	.10						;no, skip ahead
  3443                                  			mov	ah,[wbConsoleRow]				;current row
  3444                                  			or	ah,ah						;top of screen?
  3445                                  			jz	.20						;yes, exit with no change
  3446                                  			dec	ah						;decrement row
  3447                                  			mov	[wbConsoleRow],ah				;save row
  3448                                  			mov	al,ECONCOLS					;set maximum column
  3449                                  .10			dec	al						;decrement column
  3450                                  			mov	[wbConsoleColumn],al				;save column
  3451                                  .20			ret							;return
  3452                                  ;-----------------------------------------------------------------------------------------------------------------------
  3453                                  ;
  3454                                  ;	Routine:	NextConsoleColumn
  3455                                  ;
  3456                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  3457                                  ;			incremented if the end of the current row is reached.
  3458                                  ;
  3459                                  ;	In:		DS	OS data selector
  3460                                  ;
  3461                                  ;-----------------------------------------------------------------------------------------------------------------------
  3462                                  NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  3463                                  			inc	al						;increment column
  3464                                  			mov	[wbConsoleColumn],al				;save column
  3465                                  			cmp	al,ECONCOLS					;end of row?
  3466                                  			jb	.10						;no, skip ahead
  3467                                  			call	FirstConsoleColumn				;reset column to start of row
  3468                                  			call	NextConsoleRow					;line feed to next row
  3469                                  .10			ret							;return
  3470                                  ;-----------------------------------------------------------------------------------------------------------------------
  3471                                  ;
  3472                                  ;	Routine:	FirstConsoleColumn
  3473                                  ;
  3474                                  ;	Description:	This routine resets the console column to start of the row.
  3475                                  ;
  3476                                  ;	In:		DS	OS data selector
  3477                                  ;
  3478                                  ;-----------------------------------------------------------------------------------------------------------------------
  3479                                  FirstConsoleColumn	xor	al,al						;zero column
  3480                                  			mov	[wbConsoleColumn],al				;save column
  3481                                  			ret							;return
  3482                                  ;-----------------------------------------------------------------------------------------------------------------------
  3483                                  ;
  3484                                  ;	Routine:	NextConsoleRow
  3485                                  ;
  3486                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  3487                                  ;
  3488                                  ;	In:		DS	OS data selector
  3489                                  ;
  3490                                  ;-----------------------------------------------------------------------------------------------------------------------
  3491                                  NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  3492                                  			inc	al						;increment row
  3493                                  			mov	[wbConsoleRow],al				;save row
  3494                                  			cmp	al,ECONROWS					;end of screen?
  3495                                  			jb	.10						;no, skip ahead
  3496                                  			call	ScrollConsoleRow				;scroll up one row
  3497                                  			mov	al,[wbConsoleRow]				;row
  3498                                  			dec	al						;decrement row
  3499                                  			mov	[wbConsoleRow],al				;save row
  3500                                  .10			ret							;return
  3501                                  ;-----------------------------------------------------------------------------------------------------------------------
  3502                                  ;
  3503                                  ;	Routine:	PutConsoleChar
  3504                                  ;
  3505                                  ;	Description:	This routine writes one ASCII character to the console screen.
  3506                                  ;
  3507                                  ;	In:		AL	ASCII character
  3508                                  ;			DS	OS data selector
  3509                                  ;
  3510                                  ;-----------------------------------------------------------------------------------------------------------------------
  3511                                  PutConsoleChar		push	ecx						;save non-volatile regs
  3512                                  			push	es						;
  3513                                  			push	ESELCGA						;load CGA selector ...
  3514                                  			pop	es						;... into extra segment reg
  3515                                  			mov	cl,[wbConsoleColumn]				;column
  3516                                  			mov	ch,[wbConsoleRow]				;row
  3517                                  			call	SetConsoleChar					;put character at row, column
  3518                                  			pop	es						;restore non-volatile regs
  3519                                  			pop	ecx						;
  3520                                  			ret							;return
  3521                                  ;-----------------------------------------------------------------------------------------------------------------------
  3522                                  ;
  3523                                  ;	Routine:	PutConsoleOIAShift
  3524                                  ;
  3525                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3526                                  ;
  3527                                  ;	In:		BL	shift flags
  3528                                  ;			BH	lock flags
  3529                                  ;			DS	OS data selector
  3530                                  ;
  3531                                  ;-----------------------------------------------------------------------------------------------------------------------
  3532                                  PutConsoleOIAShift	push	ecx						;save non-volatile regs
  3533                                  			push	es						;
  3534                                  			push	ESELCGA						;load CGA selector ...
  3535                                  			pop	es						;... into ES register
  3536                                  			mov	ch,ECONOIAROW					;OIA row
  3537                                  			mov	al,EASCIISPACE					;space is default character
  3538                                  			test	bl,EKEYFSHIFTLEFT				;left-shift indicated?
  3539                                  			jz	.10						;no, skip ahead
  3540                                  			mov	al,'S'						;yes, indicate with 'S'
  3541                                  .10			mov	cl,14						;indicator column
  3542                                  			call	SetConsoleChar					;display ASCII character
  3543                                  			mov	al,EASCIISPACE					;ASCII space
  3544                                  			test	bl,EKEYFSHIFTRIGHT				;right-shift indicated?
  3545                                  			jz	.20						;no, skip ahead
  3546                                  			mov	al,'S'						;yes, indicate with 'S'
  3547                                  .20			mov	cl,64						;indicator column
  3548                                  			call	SetConsoleChar					;display ASCII character
  3549                                  			mov	al,EASCIISPACE					;ASCII space
  3550                                  			test	bl,EKEYFCTRLLEFT				;left-ctrl indicated?
  3551                                  			jz	.30						;no, skip ahead
  3552                                  			mov	al,'C'						;yes, indicate with 'C'
  3553                                  .30			mov	cl,15						;indicator column
  3554                                  			call	SetConsoleChar					;display ASCII character
  3555                                  			mov	al,EASCIISPACE					;ASCII space
  3556                                  			test	bl,EKEYFCTRLRIGHT				;right-ctrl indicated?
  3557                                  			jz	.40						;no, skip ahead
  3558                                  			mov	al,'C'						;yes, indicate with 'C'
  3559                                  .40			mov	cl,63						;indicator column
  3560                                  			call	SetConsoleChar					;display ASCII character
  3561                                  			mov	al,EASCIISPACE					;ASCII space
  3562                                  			test	bl,EKEYFALTLEFT					;left-alt indicated?
  3563                                  			jz	.50						;no, skip ahead
  3564                                  			mov	al,'A'						;yes, indicate with 'A'
  3565                                  .50			mov	cl,16						;indicator column
  3566                                  			call	SetConsoleChar					;display ASCII character
  3567                                  			mov	al,EASCIISPACE					;ASCII space
  3568                                  			test	bl,EKEYFALTRIGHT				;right-alt indicated?
  3569                                  			jz	.60						;no, skip ahead
  3570                                  			mov	al,'A'						;yes, indicate with 'A'
  3571                                  .60			mov	cl,62						;indicator column
  3572                                  			call	SetConsoleChar					;display ASCII character
  3573                                  			mov	al,EASCIISPACE					;ASCII space
  3574                                  			test	bh,EKEYFLOCKCAPS				;caps-lock indicated?
  3575                                  			jz	.70						;no, skip ahead
  3576                                  			mov	al,'C'						;yes, indicate with 'C'
  3577                                  .70			mov	cl,78						;indicator column
  3578                                  			call	SetConsoleChar					;display ASCII character
  3579                                  			mov	al,EASCIISPACE					;ASCII space
  3580                                  			test	bh,EKEYFLOCKNUM					;num-lock indicated?
  3581                                  			jz	.80						;no, skip ahead
  3582                                  			mov	al,'N'						;yes, indicate with 'N'
  3583                                  .80			mov	cl,77						;indicator column
  3584                                  			call	SetConsoleChar					;display ASCII character
  3585                                  			mov	al,EASCIISPACE					;ASCII space
  3586                                  			test	bh,EKEYFLOCKSCROLL				;scroll-lock indicated?
  3587                                  			jz	.90						;no, skip ahead
  3588                                  			mov	al,'S'						;yes, indicate with 'S'
  3589                                  .90			mov	cl,76						;indicator column
  3590                                  			call	SetConsoleChar					;display ASCII character
  3591                                  			pop	es						;restore non-volatile regs
  3592                                  			pop	ecx						;
  3593                                  			ret							;return
  3594                                  ;-----------------------------------------------------------------------------------------------------------------------
  3595                                  ;
  3596                                  ;	Routine:	PutConsoleOIAChar
  3597                                  ;
  3598                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  3599                                  ;
  3600                                  ;	In:		DS	OS data selector
  3601                                  ;
  3602                                  ;-----------------------------------------------------------------------------------------------------------------------
  3603                                  PutConsoleOIAChar	push	ebx						;save non-volatile regs
  3604                                  			push	ecx						;
  3605                                  			push	esi						;
  3606                                  			push	ds						;
  3607                                  			push	es						;
  3608                                  			push	ESELDAT						;load OS data selector ...
  3609                                  			pop	ds						;... into data segment register
  3610                                  			push	ESELCGA						;load CGA selector ...
  3611                                  			pop	es						;... into extra segment register
  3612                                  			mov	esi,wbConsoleScan0				;scan codes address
  3613                                  			mov	bh,ECONOIAROW					;OIA row
  3614                                  			mov	bl,0						;starting column
  3615                                  			mov	ecx,6						;maximum scan codes
  3616                                  .10			push	ecx						;save remaining count
  3617                                  			mov	ecx,ebx						;row, column
  3618                                  			lodsb							;read scan code
  3619                                  			or	al,al						;scan code present?
  3620                                  			jz	.20						;no, skip ahead
  3621                                  			call	PutConsoleHexByte				;display scan code
  3622                                  			jmp	.30						;continue
  3623                                  .20			mov	al,' '						;ASCII space
  3624                                  			call	SetConsoleChar					;display space
  3625                                  			mov	al,' '						;ASCII space
  3626                                  			call	SetConsoleChar					;display space
  3627                                  .30			add	bl,2						;next column (+2)
  3628                                  			pop	ecx						;restore remaining
  3629                                  			loop	.10						;next code
  3630                                  			mov	al,[wbConsoleChar]				;console ASCII character
  3631                                  			cmp	al,32						;printable? (lower-bounds)
  3632                                  			jb	.40						;no, skip ahead
  3633                                  			cmp	al,126						;printable? (upper-bounds)
  3634                                  			ja	.40						;no, skip ahead
  3635                                  			mov	ch,bh						;OIA row
  3636                                  			mov	cl,40						;character display column
  3637                                  			call	SetConsoleChar					;display ASCII character
  3638                                  .40			pop	es						;restore non-volatile regs
  3639                                  			pop	ds						;
  3640                                  			pop	esi						;
  3641                                  			pop	ecx						;
  3642                                  			pop	ebx						;
  3643                                  			ret							;return
  3644                                  ;-----------------------------------------------------------------------------------------------------------------------
  3645                                  ;
  3646                                  ;	Routine:	PutConsoleHexDword
  3647                                  ;
  3648                                  ;	Description:	This routine writes eight ASCII characters to the console representing a doubleword value.
  3649                                  ;
  3650                                  ;	In:		EAX	value
  3651                                  ;			CL	column
  3652                                  ;			CH	row
  3653                                  ;			DS	OS data selector
  3654                                  ;			ES	CGA selector
  3655                                  ;
  3656                                  ;-----------------------------------------------------------------------------------------------------------------------
  3657                                  PutConsoleHexDword	push	eax
  3658                                  			shr	eax,16
  3659                                  			call	PutConsoleHexWord
  3660                                  			pop	eax
  3661                                  			call	PutConsoleHexWord
  3662                                  			ret
  3663                                  ;-----------------------------------------------------------------------------------------------------------------------
  3664                                  ;
  3665                                  ;	Routine:	PutConsoleHexWord
  3666                                  ;
  3667                                  ;	Description:	This routine writes four ASCII characters to the console representing a word value.
  3668                                  ;
  3669                                  ;	In:		EAX	value
  3670                                  ;			CL	column
  3671                                  ;			CH	row
  3672                                  ;			DS	OS data selector
  3673                                  ;			ES	CGA selector
  3674                                  ;
  3675                                  ;-----------------------------------------------------------------------------------------------------------------------
  3676                                  PutConsoleHexWord	push	eax
  3677                                  			shr	eax,8
  3678                                  			call	PutConsoleHexByte
  3679                                  			pop	eax
  3680                                  			call	PutConsoleHexByte
  3681                                  			ret
  3682                                  ;-----------------------------------------------------------------------------------------------------------------------
  3683                                  ;
  3684                                  ;	Routine:	PutConsoleHexByte
  3685                                  ;
  3686                                  ;	Description:	This routine writes two ASCII characters to the console representing a byte value.
  3687                                  ;
  3688                                  ;	In:		AL	byte value
  3689                                  ;			CL	column
  3690                                  ;			CH	row
  3691                                  ;			DS	OS data selector
  3692                                  ;			ES	CGA selector
  3693                                  ;
  3694                                  ;-----------------------------------------------------------------------------------------------------------------------
  3695                                  PutConsoleHexByte	push	ebx						;save non-volatile regs
  3696                                  			mov	bl,al						;save byte value
  3697                                  			shr	al,4						;hi-order nybble
  3698                                  			or	al,030h						;apply ASCII zone
  3699                                  			cmp	al,03ah						;numeric?
  3700                                  			jb	.10						;yes, skip ahead
  3701                                  			add	al,7						;add ASCII offset for alpha
  3702                                  .10			call	SetConsoleChar					;display ASCII character
  3703                                  			mov	al,bl						;byte value
  3704                                  			and	al,0fh						;lo-order nybble
  3705                                  			or	al,30h						;apply ASCII zone
  3706                                  			cmp	al,03ah						;numeric?
  3707                                  			jb	.20						;yes, skip ahead
  3708                                  			add	al,7						;add ASCII offset for alpha
  3709                                  .20			call	SetConsoleChar					;display ASCII character
  3710                                  			pop	ebx						;restore non-volatile regs
  3711                                  			ret							;return
  3712                                  ;=======================================================================================================================
  3713                                  ;
  3714                                  ;	Data-Type Conversion Helper Routines
  3715                                  ;
  3716                                  ;	UnsignedToDecimalString
  3717                                  ;	UnsignedToHexadecimal
  3718                                  ;	HexadecimalToUnsigned
  3719                                  ;
  3720                                  ;=======================================================================================================================
  3721                                  ;-----------------------------------------------------------------------------------------------------------------------
  3722                                  ;
  3723                                  ;	Routine:	UnsignedToDecimalString
  3724                                  ;
  3725                                  ;	Description:	This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  3726                                  ;
  3727                                  ;	Input:		BH	flags		bit 0: 1 = trim leading zeros
  3728                                  ;						bit 1: 1 = include comma grouping delimiters
  3729                                  ;						bit 4: 1 = non-zero digit found (internal)
  3730                                  ;			ECX	32-bit binary
  3731                                  ;			DS:EDX	output buffer address
  3732                                  ;
  3733                                  ;-----------------------------------------------------------------------------------------------------------------------
  3734                                  UnsignedToDecimalString push	ebx						;save non-volatile regs
  3735                                  			push	ecx						;
  3736                                  			push	edi						;
  3737                                  			push	es						;
  3738                                  			push	ds						;load data selector
  3739                                  			pop	es						;... into extra segment reg
  3740                                  			mov	edi,edx 					;output buffer address
  3741                                  			and	bh,00001111b					;zero internal flags
  3742                                  			mov	edx,ecx 					;binary
  3743                                  			mov	ecx,1000000000					;10^9 divisor
  3744                                  			call	.30						;divide and store
  3745                                  			mov	ecx,100000000					;10^8 divisor
  3746                                  			call	.10						;divide and store
  3747                                  			mov	ecx,10000000					;10^7 divisor
  3748                                  			call	.30						;divide and store
  3749                                  			mov	ecx,1000000					;10^6 divisor
  3750                                  			call	.30						;divide and store
  3751                                  			mov	ecx,100000					;10^5 divisor
  3752                                  			call	.10						;divide and store
  3753                                  			mov	ecx,10000					;10^4 divisor
  3754                                  			call	.30						;divide and store
  3755                                  			mov	ecx,1000					;10^3 divisor
  3756                                  			call	.30						;divide and store
  3757                                  			mov	ecx,100 					;10^2 divisor
  3758                                  			call	.10						;divide and store
  3759                                  			mov	ecx,10						;10^2 divisor
  3760                                  			call	.30						;divide and store
  3761                                  			mov	eax,edx 					;10^1 remainder
  3762                                  			call	.40						;store
  3763                                  			xor	al,al						;null terminator
  3764                                  			stosb
  3765                                  			pop	es						;restore non-volatile regs
  3766                                  			pop	edi						;
  3767                                  			pop	ecx						;
  3768                                  			pop	ebx						;
  3769                                  			ret							;return
  3770                                  .10			test	bh,00000010b					;comma group delims?
  3771                                  			jz	.30						;no, branch
  3772                                  			test	bh,00000001b					;trim leading zeros?
  3773                                  			jz	.20						;no, store delim
  3774                                  			test	bh,00010000b					;non-zero found?
  3775                                  			jz	.30						;no, branch
  3776                                  .20			mov	al,','						;delimiter
  3777                                  			stosb							;store delimiter
  3778                                  .30			mov	eax,edx 					;lo-orer dividend
  3779                                  			xor	edx,edx 					;zero hi-order
  3780                                  			div	ecx						;divide by power of 10
  3781                                  			test	al,al						;zero?
  3782                                  			jz	.50						;yes, branch
  3783                                  			or	bh,00010000b					;non-zero found
  3784                                  .40			or	al,30h						;ASCII zone
  3785                                  			stosb							;store digit
  3786                                  			ret							;return
  3787                                  .50			test	bh,00000001b					;trim leading zeros?
  3788                                  			jz	.40						;no, store and continue
  3789                                  			test	bh,00010000b					;non-zero found?
  3790                                  			jnz	.40						;yes, store and continue
  3791                                  			ret							;return
  3792                                  ;=======================================================================================================================
  3793                                  ;
  3794                                  ;	Message Queue Helper Routines
  3795                                  ;
  3796                                  ;	PutMessage
  3797                                  ;	GetMessage
  3798                                  ;
  3799                                  ;=======================================================================================================================
  3800                                  ;-----------------------------------------------------------------------------------------------------------------------
  3801                                  ;
  3802                                  ;	Routine:	PutMessage
  3803                                  ;
  3804                                  ;	Description:	This routine adda a message to the message queue.
  3805                                  ;
  3806                                  ;	In:		ECX	hi-order data word
  3807                                  ;			EDX	lo-order data word
  3808                                  ;
  3809                                  ;	Out:		CY	0 = success
  3810                                  ;				1 = fail: queue is full
  3811                                  ;
  3812                                  ;-----------------------------------------------------------------------------------------------------------------------
  3813                                  PutMessage		push	ds						;save non-volatile regs
  3814                                  			push	ESELMQ						;load task message queue selector ...
  3815                                  			pop	ds						;... into data segment register
  3816                                  			mov	eax,[MQTail]					;tail ptr
  3817                                  			cmp	dword [eax],0					;is queue full?
  3818                                  			stc							;assume failure
  3819                                  			jne	.20						;yes, cannot store
  3820                                  			mov	[eax],edx					;store lo-order data
  3821                                  			mov	[eax+4],ecx					;store hi-order data
  3822                                  			add	eax,8						;next queue element adr
  3823                                  			and	eax,03fch					;at end of queue?
  3824                                  			jnz	.10						;no, skip ahead
  3825                                  			mov	al,8						;reset to top of queue
  3826                                  .10			mov	[MQTail],eax					;save new tail ptr
  3827                                  			clc							;indicate success
  3828                                  .20			pop	ds						;restore non-volatile regs
  3829                                  			ret							;return
  3830                                  ;-----------------------------------------------------------------------------------------------------------------------
  3831                                  ;
  3832                                  ;	Routine:	GetMessage
  3833                                  ;
  3834                                  ;	Description:	This routine reads and removes a message from the message queue.
  3835                                  ;
  3836                                  ;	Out:		EAX	lo-order message data
  3837                                  ;			EDX	hi-order message data
  3838                                  ;
  3839                                  ;			CY	0 = message read
  3840                                  ;				1 = no message to read
  3841                                  ;
  3842                                  ;-----------------------------------------------------------------------------------------------------------------------
  3843                                  GetMessage		push	ebx						;save non-volatile regs
  3844                                  			push	ecx						;
  3845                                  			push	ds						;
  3846                                  			push	ESELMQ						;load message queue selector ...
  3847                                  			pop	ds						;... into data segment register
  3848                                  			mov	ebx,[MQHead]					;head ptr
  3849                                  			mov	eax,[ebx]					;lo-order 32 bits
  3850                                  			mov	edx,[ebx+4]					;hi-order 32 bits
  3851                                  			or	eax,edx						;is queue empty?
  3852                                  			stc							;assume queue is emtpy
  3853                                  			jz	.20						;yes, skip ahead
  3854                                  			xor	ecx,ecx						;store zero
  3855                                  			mov	[ebx],ecx					;... in lo-order dword
  3856                                  			mov	[ebx+4],ecx					;... in hi-order dword
  3857                                  			add	ebx,8						;next queue element
  3858                                  			and	ebx,03fch					;at end of queue?
  3859                                  			jnz	.10						;no, skip ahead
  3860                                  			mov	bl,8						;reset to 1st entry
  3861                                  .10			mov	[MQHead],ebx					;save new head ptr
  3862                                  			clc							;indicate message read
  3863                                  .20			pop	ds						;restore non-volatile regs
  3864                                  			pop	ecx						;
  3865                                  			pop	ebx						;
  3866                                  			ret							;return
  3867                                  ;=======================================================================================================================
  3868                                  ;
  3869                                  ;	Memory-Mapped Video Routines
  3870                                  ;
  3871                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  3872                                  ;
  3873                                  ;	ClearConsoleScreen
  3874                                  ;	ScrollConsoleRow
  3875                                  ;	SetConsoleChar
  3876                                  ;
  3877                                  ;=======================================================================================================================
  3878                                  ;-----------------------------------------------------------------------------------------------------------------------
  3879                                  ;
  3880                                  ;	Routine:	ClearConsoleScreen
  3881                                  ;
  3882                                  ;	Description:	This routine clears the console (CGA) screen.
  3883                                  ;
  3884                                  ;-----------------------------------------------------------------------------------------------------------------------
  3885                                  ClearConsoleScreen	push	ecx						;save non-volatile regs
  3886                                  			push	edi						;
  3887                                  			push	ds						;
  3888                                  			push	es						;
  3889                                  			push	ESELDAT						;load OS Data selector ...
  3890                                  			pop	ds						;... into DS register
  3891                                  			push	ESELCGA						;load CGA selector ...
  3892                                  			pop	es						;... into ES register
  3893                                  			mov	eax,ECONCLEARDWORD				;initializtion value
  3894                                  			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  3895                                  			xor	edi,edi						;target offset
  3896                                  			cld							;forward strings
  3897                                  			rep	stosd						;reset screen body
  3898                                  			mov	eax,ECONOIADWORD				;OIA attribute and space
  3899                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  3900                                  			rep	stosd						;reset OIA line
  3901                                  			xor	al,al						;zero register
  3902                                  			mov	[wbConsoleRow],al				;reset console row
  3903                                  			mov	[wbConsoleColumn],al				;reset console column
  3904                                  			call	PlaceCursor					;place cursor at current position
  3905                                  			pop	es						;restore non-volatile regs
  3906                                  			pop	ds						;
  3907                                  			pop	edi						;
  3908                                  			pop	ecx						;
  3909                                  			ret							;return
  3910                                  ;-----------------------------------------------------------------------------------------------------------------------
  3911                                  ;
  3912                                  ;	Routine:	ScrollConsoleRow
  3913                                  ;
  3914                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  3915                                  ;
  3916                                  ;-----------------------------------------------------------------------------------------------------------------------
  3917                                  ScrollConsoleRow	push	ecx						;save non-volatile regs
  3918                                  			push	esi						;
  3919                                  			push	edi						;
  3920                                  			push	ds						;
  3921                                  			push	es						;
  3922                                  			push	ESELCGA						;load CGA video selector ...
  3923                                  			pop	ds						;... into DS
  3924                                  			push	ESELCGA						;load CGA video selector ...
  3925                                  			pop	es						;... into ES
  3926                                  			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  3927                                  			mov	esi,ECONROWBYTES				;esi = source (line 2)
  3928                                  			xor	edi,edi						;edi = target (line 1)
  3929                                  			cld							;forward strings
  3930                                  			rep	movsd						;move 24 lines up
  3931                                  			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  3932                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  3933                                  			rep	stosd						;clear bottom row
  3934                                  			pop	es						;restore non-volatile regs
  3935                                  			pop	ds						;
  3936                                  			pop	edi						;
  3937                                  			pop	esi						;
  3938                                  			pop	ecx						;
  3939                                  			ret							;return
  3940                                  ;-----------------------------------------------------------------------------------------------------------------------
  3941                                  ;
  3942                                  ;	Routine:	SetConsoleString
  3943                                  ;
  3944                                  ;	Description:	This routine outputs a sequence of ASCII character at the given row and column.
  3945                                  ;
  3946                                  ;	In:		ESI	source offset (DS:)
  3947                                  ;			CL	column
  3948                                  ;			CH	row
  3949                                  ;			ES	CGA selector
  3950                                  ;
  3951                                  ;-----------------------------------------------------------------------------------------------------------------------
  3952                                  SetConsoleString	push	esi						;save non-volatile regs
  3953                                  			cld							;forward strings
  3954                                  .10			lodsb							;next ASCII character
  3955                                  			test	al,al						;end of string?
  3956                                  			jz	.20						;yes, branch
  3957                                  			call	SetConsoleChar					;store character
  3958                                  			jmp	.10						;continue
  3959                                  .20			pop	esi						;restore non-volatile regs
  3960                                  			ret							;return
  3961                                  ;-----------------------------------------------------------------------------------------------------------------------
  3962                                  ;
  3963                                  ;	Routine:	SetConsoleChar
  3964                                  ;
  3965                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  3966                                  ;
  3967                                  ;	In:		AL	ASCII character
  3968                                  ;			CL	column
  3969                                  ;			CH	row
  3970                                  ;			ES	CGA selector
  3971                                  ;
  3972                                  ;	Out:		EAX	last target address written (ES:)
  3973                                  ;			CL	column + 1
  3974                                  ;
  3975                                  ;-----------------------------------------------------------------------------------------------------------------------
  3976                                  SetConsoleChar		mov	dl,al						;ASCII character
  3977                                  			movzx	eax,ch						;row
  3978                                  			mov	ah,ECONCOLS					;cols/row
  3979                                  			mul	ah						;row * cols/row
  3980                                  			add	al,cl						;add column
  3981                                  			adc	ah,0						;handle carry
  3982                                  			shl	eax,1						;screen offset
  3983                                  			mov	[es:eax],dl					;store character
  3984                                  			inc	cl						;next column
  3985                                  			ret							;return
  3986                                  ;=======================================================================================================================
  3987                                  ;
  3988                                  ;	Input/Output Routines
  3989                                  ;
  3990                                  ;	These routines read and/or write directly to ports.
  3991                                  ;
  3992                                  ;	PlaceCursor
  3993                                  ;	PutPrimaryEndOfInt
  3994                                  ;	PutSecondaryEndOfInt
  3995                                  ;	ReadRealTimeClock
  3996                                  ;	ResetSystem
  3997                                  ;	SetKeyboardLamps
  3998                                  ;	WaitForKeyInBuffer
  3999                                  ;	WaitForKeyOutBuffer
  4000                                  ;
  4001                                  ;=======================================================================================================================
  4002                                  ;-----------------------------------------------------------------------------------------------------------------------
  4003                                  ;
  4004                                  ;	Routine:	PlaceCursor
  4005                                  ;
  4006                                  ;	Description:	This routine positions the cursor on the console.
  4007                                  ;
  4008                                  ;	In:		DS	OS data selector
  4009                                  ;
  4010                                  ;-----------------------------------------------------------------------------------------------------------------------
  4011                                  PlaceCursor		push	ecx						;save non-volatile regs
  4012                                  			mov	al,[wbConsoleRow]				;al = row
  4013                                  			mov	ah,ECONCOLS					;ah = cols/row
  4014                                  			mul	ah						;row offset
  4015                                  			add	al,[wbConsoleColumn]				;add column
  4016                                  			adc	ah,0						;add overflow
  4017                                  			mov	ecx,eax						;screen offset
  4018                                  			mov	dl,ECRTPORTLO					;crt controller port lo
  4019                                  			mov	dh,ECRTPORTHI					;crt controller port hi
  4020                                  			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  4021                                  			out	dx,al						;select register
  4022                                  			inc	edx						;data port
  4023                                  			mov	al,ch						;hi-order cursor loc
  4024                                  			out	dx,al						;store hi-order loc
  4025                                  			dec	edx						;register select port
  4026                                  			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  4027                                  			out	dx,al						;select register
  4028                                  			inc	edx						;data port
  4029                                  			mov	al,cl						;lo-order cursor loc
  4030                                  			out	dx,al						;store lo-order loc
  4031                                  			pop	ecx						;restore non-volatile regs
  4032                                  			ret							;return
  4033                                  ;-----------------------------------------------------------------------------------------------------------------------
  4034                                  ;
  4035                                  ;	Routine:	PutPrimaryEndOfInt
  4036                                  ;
  4037                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4038                                  ;
  4039                                  ;-----------------------------------------------------------------------------------------------------------------------
  4040                                  PutPrimaryEndOfInt	sti							;enable maskable interrupts
  4041                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  4042                                  			out	EPICPORTPRI,al					;send EOI to primary PIC
  4043                                  			ret							;return
  4044                                  ;-----------------------------------------------------------------------------------------------------------------------
  4045                                  ;
  4046                                  ;	Routine:	PutSecondaryEndOfInt
  4047                                  ;
  4048                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4049                                  ;
  4050                                  ;-----------------------------------------------------------------------------------------------------------------------
  4051                                  PutSecondaryEndOfInt	sti							;enable maskable interrupts
  4052                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  4053                                  			out	EPICPORTSEC,al					;send EOI to secondary PIC
  4054                                  			ret							;return
  4055                                  ;-----------------------------------------------------------------------------------------------------------------------
  4056                                  ;
  4057                                  ;	Routine:	ReadRealTimeClock
  4058                                  ;
  4059                                  ;	Description:	This routine gets current date time from the real-time clock.
  4060                                  ;
  4061                                  ;	In:		DS:EBX	DATETIME structure
  4062                                  ;
  4063                                  ;-----------------------------------------------------------------------------------------------------------------------
  4064                                  ReadRealTimeClock	push	esi						;save non-volatile regs
  4065                                  			push	edi						;
  4066                                  			push	es						;
  4067                                  			push	ds						;store data selector ...
  4068                                  			pop	es						;... in es register
  4069                                  			mov	edi,ebx						;date-time structure
  4070                                  			mov	al,ERTCSECONDREG				;second register
  4071                                  			out	ERTCREGPORT,al					;select second register
  4072                                  			in	al,ERTCDATAPORT					;read second register
  4073                                  			cld							;forward strings
  4074                                  			stosb							;store second value
  4075                                  			mov	al,ERTCMINUTEREG				;minute register
  4076                                  			out	ERTCREGPORT,al					;select minute register
  4077                                  			in	al,ERTCDATAPORT					;read minute register
  4078                                  			stosb							;store minute value
  4079                                  			mov	al,ERTCHOURREG					;hour register
  4080                                  			out	ERTCREGPORT,al					;select hour register
  4081                                  			in	al,ERTCDATAPORT					;read hour register
  4082                                  			stosb							;store hour value
  4083                                  			mov	al,ERTCWEEKDAYREG				;weekday register
  4084                                  			out	ERTCREGPORT,al					;select weekday register
  4085                                  			in	al,ERTCDATAPORT					;read weekday register
  4086                                  			stosb							;store weekday value
  4087                                  			mov	al,ERTCDAYREG					;day register
  4088                                  			out	ERTCREGPORT,al					;select day register
  4089                                  			in	al,ERTCDATAPORT					;read day register
  4090                                  			stosb							;store day value
  4091                                  			mov	al,ERTCMONTHREG					;month register
  4092                                  			out	ERTCREGPORT,al					;select month register
  4093                                  			in	al,ERTCDATAPORT					;read month register
  4094                                  			stosb							;store month value
  4095                                  			mov	al,ERTCYEARREG					;year register
  4096                                  			out	ERTCREGPORT,al					;select year register
  4097                                  			in	al,ERTCDATAPORT					;read year register
  4098                                  			stosb							;store year value
  4099                                  			mov	al,ERTCCENTURYREG				;century register
  4100                                  			out	ERTCREGPORT,al					;select century register
  4101                                  			in	al,ERTCDATAPORT					;read century register
  4102                                  			stosb							;store century value
  4103                                  			mov	al,ERTCSTATUSREG				;status register
  4104                                  			out	ERTCREGPORT,al					;select status register
  4105                                  			in	al,ERTCDATAPORT					;read status register
  4106                                  			test	al,ERTCBINARYVALS				;test if values are binary
  4107                                  			jnz	.20						;skip ahead if binary values
  4108                                  			mov	esi,ebx						;date-time structure address
  4109                                  			mov	edi,ebx						;date-time structure address
  4110                                  			mov	ecx,8						;loop counter
  4111                                  .10			lodsb							;BCD value
  4112                                  			mov	ah,al						;BCD value
  4113                                  			and	al,00001111b					;low-order decimal zone
  4114                                  			and	ah,11110000b					;hi-order decimal zone
  4115                                  			shr	ah,1						;hi-order decimal * 8
  4116                                  			add	al,ah						;low-order + hi-order * 8
  4117                                  			shr	ah,2						;hi-order decimal * 2
  4118                                  			add	al,ah						;low-order + hi-order * 10
  4119                                  			stosb							;replace BCD with binary
  4120                                  			loop	.10						;next value
  4121                                  .20			pop	es						;restore non-volatile regs
  4122                                  			pop	edi						;
  4123                                  			pop	esi						;
  4124                                  			ret							;return
  4125                                  ;-----------------------------------------------------------------------------------------------------------------------
  4126                                  ;
  4127                                  ;	Routine:	ResetSystem
  4128                                  ;
  4129                                  ;	Description:	This routine restarts the system using the 8042 controller.
  4130                                  ;
  4131                                  ;	Out:		N/A	This routine does not return.
  4132                                  ;
  4133                                  ;-----------------------------------------------------------------------------------------------------------------------
  4134                                  ResetSystem		mov	ecx,001fffffh					;delay to clear ints
  4135                                  			loop	$						;clear interrupts
  4136                                  			mov	al,EKEYBCMDRESET				;mask out bit zero
  4137                                  			out	EKEYBPORTSTAT,al				;drive bit zero low
  4138                                  .10			sti							;enable maskable interrupts
  4139                                  			hlt							;halt until interrupt
  4140                                  			jmp	.10						;repeat until reset kicks in
  4141                                  ;-----------------------------------------------------------------------------------------------------------------------
  4142                                  ;
  4143                                  ;	Routine:	SetKeyboardLamps
  4144                                  ;
  4145                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  4146                                  ;
  4147                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4148                                  ;
  4149                                  ;-----------------------------------------------------------------------------------------------------------------------
  4150                                  SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  4151                                  			mov	al,EKEYBCMDLAMPS				;set/reset lamps command
  4152                                  			out	EKEYBPORTDATA,al				;send command to 8042
  4153                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  4154                                  			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  4155                                  			call	WaitForKeyInBuffer				;wait for input buffer ready
  4156                                  			mov	al,bh						;set/reset lamps value
  4157                                  			out	EKEYBPORTDATA,al				;send lamps value
  4158                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  4159                                  			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  4160                                  			ret							;return
  4161                                  ;-----------------------------------------------------------------------------------------------------------------------
  4162                                  ;
  4163                                  ;	Routine:	WaitForKeyInBuffer
  4164                                  ;
  4165                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  4166                                  ;
  4167                                  ;	Out:		ZF	1 = Input buffer ready
  4168                                  ;				0 = Input buffer not ready after timeout
  4169                                  ;
  4170                                  ;-----------------------------------------------------------------------------------------------------------------------
  4171                                  WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  4172                                  			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  4173                                  .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  4174                                  			test	al,EKEYBBITIN					;is input buffer still full?
  4175                                  			loopnz	.10						;yes, repeat till timeout
  4176                                  			pop	ecx						;restore non-volatile regs
  4177                                  			ret							;return
  4178                                  ;-----------------------------------------------------------------------------------------------------------------------
  4179                                  ;
  4180                                  ;	Routine:	WaitForKeyOutBuffer
  4181                                  ;
  4182                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  4183                                  ;
  4184                                  ;	Out:		ZF	1 = Output buffer has data from controller
  4185                                  ;				0 = Output buffer empty after timeout
  4186                                  ;
  4187                                  ;-----------------------------------------------------------------------------------------------------------------------
  4188                                  WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  4189                                  			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  4190                                  .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  4191                                  			test	al,EKEYBBITOUT					;output buffer status bit
  4192                                  			loopz	.10						;loop until output buffer bit
  4193                                  			pop	ecx						;restore non-volatile regs
  4194                                  			ret							;return
  4195                                  ;-----------------------------------------------------------------------------------------------------------------------
  4196                                  ;
  4197                                  ;	End of the Kernel Function Library
  4198                                  ;
  4199                                  ;-----------------------------------------------------------------------------------------------------------------------
  4200                                  			times	8190-($-$$) db 0h				;zero fill to end of section
  4201                                  			db	055h,0AAh					;end of segment
  4202                                  ;=======================================================================================================================
  4203                                  ;
  4204                                  ;	Console Task
  4205                                  ;
  4206                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  4207                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  4208                                  ;	screen and responds to user commands.
  4209                                  ;
  4210                                  ;=======================================================================================================================
  4211                                  ;-----------------------------------------------------------------------------------------------------------------------
  4212                                  ;
  4213                                  ;	Console Stack								@disk: 007400	@mem:  004000
  4214                                  ;
  4215                                  ;	This is the stack for the console task. It supports 448 nested calls.
  4216                                  ;
  4217                                  ;-----------------------------------------------------------------------------------------------------------------------
  4218                                  section			constack						;console task stack
  4219                                  			times	1792-($-$$) db 0h				;zero fill to end of section
  4220                                  ;-----------------------------------------------------------------------------------------------------------------------
  4221                                  ;
  4222                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  4223                                  ;
  4224                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  4225                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  4226                                  ;	16 descriptors. Six are initially defined.
  4227                                  ;
  4228                                  ;-----------------------------------------------------------------------------------------------------------------------
  4229                                  section			conldt							;console local descriptors
  4230                                  			dq	004093004780007Fh				;04 TSS alias
  4231                                  			dq	004093004700007Fh				;0C LDT alias
  4232                                  			dq	00409300400006FFh				;14 stack
  4233                                  			dq	00CF93000000FFFFh				;1C data
  4234                                  			dq	00409B0050000FFFh				;24 code
  4235                                  			dq	00409300480007FFh				;2C message queue
  4236                                  			times	128-($-$$) db 0h				;zero fill to end of section
  4237                                  ;-----------------------------------------------------------------------------------------------------------------------
  4238                                  ;
  4239                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  4240                                  ;
  4241                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  4242                                  ;	segment. CS to console code.
  4243                                  ;
  4244                                  ;-----------------------------------------------------------------------------------------------------------------------
  4245                                  section			contss							;console task state segment
  4246                                  			dd	0						;00 back-link tss
  4247                                  			dd	0700h						;04 esp ring 0
  4248                                  			dd	0014h						;08 ss ring 0
  4249                                  			dd	0700h						;0C esp ring 1
  4250                                  			dd	0014h						;10 es ring 1
  4251                                  			dd	0700h						;14 esp ring 2
  4252                                  			dd	0014h						;18 ss ring 2
  4253                                  			dd	0						;1C cr ring 3
  4254                                  			dd	0						;20 eip
  4255                                  			dd	0200h						;24 eflags
  4256                                  			dd	0						;28 eax
  4257                                  			dd	0						;2C ecx
  4258                                  			dd	0						;30 edx
  4259                                  			dd	0						;34 ebx
  4260                                  			dd	0700h						;38 esp ring 3
  4261                                  			dd	0						;3C ebp
  4262                                  			dd	0						;40 esi
  4263                                  			dd	0						;44 edi
  4264                                  			dd	001Ch						;48 es
  4265                                  			dd	0024h						;4C cs
  4266                                  			dd	0014h						;50 ss ring 3
  4267                                  			dd	001Ch						;54 ds
  4268                                  			dd	0						;58 fs
  4269                                  			dd	0						;5c gs
  4270                                  			dd	ESELCONSOLELDT					;60 ldt selector in gdt
  4271                                  			times	128-($-$$) db 0h				;zero fill to end of section
  4272                                  ;-----------------------------------------------------------------------------------------------------------------------
  4273                                  ;
  4274                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  4275                                  ;
  4276                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  4277                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  4278                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  4279                                  ;	event.
  4280                                  ;
  4281                                  ;-----------------------------------------------------------------------------------------------------------------------
  4282                                  section			conmque							;console message queue
  4283                                  			dd	8						;head pointer
  4284                                  			dd	8						;tail pointer
  4285                                  			times	510 dd 0					;queue elements
  4286                                  ;-----------------------------------------------------------------------------------------------------------------------
  4287                                  ;
  4288                                  ;	Console Code								@disk: 008400	@mem: 005000
  4289                                  ;
  4290                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  4291                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  4292                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  4293                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  4294                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  4295                                  ;	board input, echoing to the console screen and responding to user commands.
  4296                                  ;
  4297                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  4298                                  ;
  4299                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  4300                                  ;				|  Real Mode Interrupt Vectors			|
  4301                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  4302                                  ;				|  Reserved BIOS Memory Area			|
  4303                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  4304                                  ;				|  Shared Kernel Memory Area			|
  4305                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  4306                                  ;				|  Global Descriptor Table (GDT)		|
  4307                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  4308                                  ;				|  Interrupt Descriptor Table (IDT)		|
  4309                                  ;			002000	+-----------------------------------------------+
  4310                                  ;				|  Interrupt Handlers				|
  4311                                  ;				|  Kernel Function Library			|
  4312                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  4313                                  ;				|  Console Task Stack Area			|
  4314                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  4315                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  4316                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  4317                                  ;				|  Console Task Task State Segment (TSS)	|
  4318                                  ;			004800	+-----------------------------------------------+
  4319                                  ;				|  Console Task Message Queue			|
  4320                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  4321                                  ;				|  Console Task Code				|
  4322                                  ;				|  Console Task Constants			|
  4323                                  ;			006000	+===============================================+
  4324                                  ;
  4325                                  ;-----------------------------------------------------------------------------------------------------------------------
  4326                                  section			concode	vstart=05000h					;labels relative to 5000h
  4327                                  ConCode			call	ConInitializeData				;initialize console variables
  4328                                  
  4329                                  			clearConsoleScreen					;clear the console screen
  4330                                  			putConsoleString czTitle				;display startup message
  4331                                  .10			putConsoleString czPrompt				;display input prompt
  4332                                  			placeCursor						;set CRT cursor location
  4333                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  4334                                  			putConsoleString czNewLine				;newline
  4335                                  
  4336                                  			mov	byte [wzConsoleToken],0				;null-terminate token buffer
  4337                                  			mov	edx,wzConsoleInBuffer				;console input buffer
  4338                                  			mov	ebx,wzConsoleToken				;token buffer
  4339                                  			call	ConTakeToken					;handle console input
  4340                                  			mov	edx,wzConsoleToken				;token buffer
  4341                                  			call	ConDetermineCommand				;determine command number
  4342                                  			cmp	eax,ECONJMPTBLCNT				;valid command number?
  4343                                  			jb	.20						;yes, branch
  4344                                  
  4345                                  			putConsoleString czUnknownCommand			;display error message
  4346                                  
  4347                                  			jmp	.10						;next command
  4348                                  .20			shl	eax,2						;index into jump table
  4349                                  			mov	edx,tConJmpTbl					;jump table base address
  4350                                  			mov	eax,[edx+eax]					;command handler routine address
  4351                                  			call	eax						;call command handler
  4352                                  			jmp	.10						;next command
  4353                                  ;-----------------------------------------------------------------------------------------------------------------------
  4354                                  ;
  4355                                  ;	Routine:	ConInitializeData
  4356                                  ;
  4357                                  ;	Description:	This routine initializes console task variables.
  4358                                  ;
  4359                                  ;-----------------------------------------------------------------------------------------------------------------------
  4360                                  ConInitializeData	push	ecx						;save non-volatile regs
  4361                                  			push	edi						;
  4362                                  			push	es						;
  4363                                  ;
  4364                                  ;	Initialize console work areas
  4365                                  ;
  4366                                  			push	ESELDAT						;load OS data selector ...
  4367                                  			pop	es						;... into extra segment register
  4368                                  			mov	edi,ECONDATA					;OS console data address
  4369                                  			xor	al,al						;initialization value
  4370                                  			mov	ecx,ECONDATALEN					;size of OS console data
  4371                                  			cld							;forward strings
  4372                                  			rep	stosb						;initialize data
  4373                                  ;
  4374                                  ;	Restore and return
  4375                                  ;
  4376                                  			pop	es						;restore non-volatile regs
  4377                                  			pop	edi						;
  4378                                  			pop	ecx						;
  4379                                  			ret							;return
  4380                                  ;-----------------------------------------------------------------------------------------------------------------------
  4381                                  ;
  4382                                  ;	Routine:	ConTakeToken
  4383                                  ;
  4384                                  ;	Description:	This routine extracts the next token from the given source buffer.
  4385                                  ;
  4386                                  ;	In:		DS:EDX	source buffer address
  4387                                  ;			DS:EBX	target buffer address
  4388                                  ;
  4389                                  ;	Out:		DS:EDX	source buffer address
  4390                                  ;			DS:EBX	target buffer address
  4391                                  ;
  4392                                  ;	Command Form:	Line	= *3( *SP 1*ALNUM )
  4393                                  ;
  4394                                  ;-----------------------------------------------------------------------------------------------------------------------
  4395                                  ConTakeToken		push	esi						;save non-volatile regs
  4396                                  			push	edi						;
  4397                                  			mov	esi,edx						;source buffer address
  4398                                  			mov	edi,ebx						;target buffer address
  4399                                  			cld							;forward strings
  4400                                  .10			lodsb							;load byte
  4401                                  			cmp	al,EASCIISPACE					;space?
  4402                                  			je	.10						;yes, continue
  4403                                  			test	al,al						;end of line?
  4404                                  			jz	.40						;yes, branch
  4405                                  .20			stosb							;store byte
  4406                                  			lodsb							;load byte
  4407                                  			test	al,al						;end of line?
  4408                                  			jz	.40						;no, continue
  4409                                  			cmp	al,EASCIISPACE					;space?
  4410                                  			jne	.20						;no, continue
  4411                                  .30			lodsb							;load byte
  4412                                  			cmp	al,EASCIISPACE					;space?
  4413                                  			je	.30						;yes, continue
  4414                                  			dec	esi						;pre-position
  4415                                  .40			mov	byte [edi],0					;terminate buffer
  4416                                  			mov	edi,edx						;source buffer address
  4417                                  .50			lodsb							;remaining byte
  4418                                  			stosb							;move to front of buffer
  4419                                  			test	al,al						;end of line?
  4420                                  			jnz	.50						;no, continue
  4421                                  			pop	edi						;restore non-volatile regs
  4422                                  			pop	esi						;
  4423                                  			ret							;return
  4424                                  ;-----------------------------------------------------------------------------------------------------------------------
  4425                                  ;
  4426                                  ;	Routine:	ConDetermineCommand
  4427                                  ;
  4428                                  ;	Description:	This routine determines the command number for the command at DS:EDX.
  4429                                  ;
  4430                                  ;	input:		DS:EDX	command address
  4431                                  ;
  4432                                  ;	output:		EAX	>=0	= command nbr
  4433                                  ;				0	= unknown command
  4434                                  ;
  4435                                  ;-----------------------------------------------------------------------------------------------------------------------
  4436                                  ConDetermineCommand	push	ebx						;save non-volatile regs
  4437                                  			push	ecx						;
  4438                                  			push	esi						;
  4439                                  			push	edi						;
  4440                                  
  4441                                  			upperCaseString						;upper-case string at EDX
  4442                                  
  4443                                  			mov	esi,tConCmdTbl					;commands table
  4444                                  			xor	edi,edi						;intialize command number
  4445                                  			cld							;forward strings
  4446                                  .10			lodsb							;command length
  4447                                  			movzx	ecx,al						;command length
  4448                                  			jecxz	.20						;branch if end of table
  4449                                  			mov	ebx,esi						;table entry address
  4450                                  			add	esi,ecx						;next table entry address
  4451                                  
  4452                                  			compareMemory						;compare byte arrays at EDX, EBX
  4453                                  
  4454                                  			jecxz	.20						;branch if equal
  4455                                  			inc	edi						;increment command nbr
  4456                                  			jmp	.10						;repeat
  4457                                  .20			mov	eax,edi						;command number
  4458                                  			pop	edi						;restore non-volatile regs
  4459                                  			pop	esi						;
  4460                                  			pop	ecx						;
  4461                                  			pop	ebx						;
  4462                                  			ret							;return
  4463                                  ;-----------------------------------------------------------------------------------------------------------------------
  4464                                  ;
  4465                                  ;	Routine:	ConClear
  4466                                  ;
  4467                                  ;	Description:	This routine handles the CLEAR command and its CLS alias.
  4468                                  ;
  4469                                  ;-----------------------------------------------------------------------------------------------------------------------
  4470                                  ConClear		clearConsoleScreen					;clear console screen
  4471                                  			ret							;return
  4472                                  ;-----------------------------------------------------------------------------------------------------------------------
  4473                                  ;
  4474                                  ;	Routine:	ConDate
  4475                                  ;
  4476                                  ;	Description:	This routine handles the DATE command.
  4477                                  ;
  4478                                  ;-----------------------------------------------------------------------------------------------------------------------
  4479                                  ConDate			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4480                                  			putDateString	  wsConsoleDateTime,wzConsoleOutBuffer	;format date string
  4481                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4482                                  			putConsoleString  czNewLine				;write newline to console
  4483                                  			ret							;return
  4484                                  ;-----------------------------------------------------------------------------------------------------------------------
  4485                                  ;
  4486                                  ;	Routine:	ConDay
  4487                                  ;
  4488                                  ;	Description:	This routine handles the DAY command.
  4489                                  ;
  4490                                  ;-----------------------------------------------------------------------------------------------------------------------
  4491                                  ConDay			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4492                                  			putDayString      wsConsoleDateTime,wzConsoleOutBuffer	;format day string
  4493                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4494                                  			putConsoleString  czNewLine				;write newline to console
  4495                                  			ret							;return
  4496                                  ;-----------------------------------------------------------------------------------------------------------------------
  4497                                  ;
  4498                                  ;	Routine:	ConExit
  4499                                  ;
  4500                                  ;	Description:	This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  4501                                  ;
  4502                                  ;-----------------------------------------------------------------------------------------------------------------------
  4503                                  ConExit			resetSystem						;issue system reset
  4504                                  			ret							;return
  4505                                  ;-----------------------------------------------------------------------------------------------------------------------
  4506                                  ;
  4507                                  ;	Routine:	ConHour
  4508                                  ;
  4509                                  ;	Description:	This routine Handles the HOUR command.
  4510                                  ;
  4511                                  ;-----------------------------------------------------------------------------------------------------------------------
  4512                                  ConHour			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4513                                  			putHourString     wsConsoleDateTime,wzConsoleOutBuffer	;format hour string
  4514                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4515                                  			putConsoleString  czNewLine				;write newline to console
  4516                                  			ret							;return
  4517                                  ;-----------------------------------------------------------------------------------------------------------------------
  4518                                  ;
  4519                                  ;	Routine:	ConInt6
  4520                                  ;
  4521                                  ;	Description:	This routine issues an interrupt 6 to exercise the interrupt handler.
  4522                                  ;
  4523                                  ;-----------------------------------------------------------------------------------------------------------------------
  4524                                  ConInt6			ud2							;raise bad opcode exception
  4525                                  			ret							;return (not executed)
  4526                                  ;-----------------------------------------------------------------------------------------------------------------------
  4527                                  ;
  4528                                  ;	Routine:	ConMinute
  4529                                  ;
  4530                                  ;	Description:	This routine Handles the MINUTE command.
  4531                                  ;
  4532                                  ;-----------------------------------------------------------------------------------------------------------------------
  4533                                  ConMinute		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4534                                  			putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer	;format minute string
  4535                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4536                                  			putConsoleString  czNewLine				;write newline to console
  4537                                  			ret							;return
  4538                                  ;-----------------------------------------------------------------------------------------------------------------------
  4539                                  ;
  4540                                  ;	Routine:	ConMonth
  4541                                  ;
  4542                                  ;	Description:	This routine Handles the MONTH command.
  4543                                  ;
  4544                                  ;-----------------------------------------------------------------------------------------------------------------------
  4545                                  ConMonth		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4546                                  			putMonthString    wsConsoleDateTime,wzConsoleOutBuffer	;format month string
  4547                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4548                                  			putConsoleString  czNewLine				;write newline to console
  4549                                  			ret							;return
  4550                                  ;-----------------------------------------------------------------------------------------------------------------------
  4551                                  ;
  4552                                  ;	Routine:	ConMonthName
  4553                                  ;
  4554                                  ;	Description:	This routine Handles the MONTH.NAME command.
  4555                                  ;
  4556                                  ;-----------------------------------------------------------------------------------------------------------------------
  4557                                  ConMonthName		readRealTimeClock  wsConsoleDateTime			;read RTC data into structure
  4558                                  			putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer	;format month name string
  4559                                  			putConsoleString   wzConsoleOutBuffer			;write string to console
  4560                                  			putConsoleString   czNewLine				;write newline to console
  4561                                  			ret							;return
  4562                                  ;-----------------------------------------------------------------------------------------------------------------------
  4563                                  ;
  4564                                  ;	Routine:	ConSecond
  4565                                  ;
  4566                                  ;	Description:	This routine Handles the SECOND command.
  4567                                  ;
  4568                                  ;-----------------------------------------------------------------------------------------------------------------------
  4569                                  ConSecond		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4570                                  			putSecondString   wsConsoleDateTime,wzConsoleOutBuffer	;format second string
  4571                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4572                                  			putConsoleString  czNewLine				;write newline to console
  4573                                  			ret							;return
  4574                                  ;-----------------------------------------------------------------------------------------------------------------------
  4575                                  ;
  4576                                  ;	Routine:	ConTime
  4577                                  ;
  4578                                  ;	Description:	This routine Handles the TIME command.
  4579                                  ;
  4580                                  ;-----------------------------------------------------------------------------------------------------------------------
  4581                                  ConTime			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4582                                  			putTimeString	  wsConsoleDateTime,wzConsoleOutBuffer	;format time string
  4583                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4584                                  			putConsoleString  czNewLine				;write newline to console
  4585                                  			ret							;return
  4586                                  ;-----------------------------------------------------------------------------------------------------------------------
  4587                                  ;
  4588                                  ;	Routine:	ConWeekday
  4589                                  ;
  4590                                  ;	Description:	This routine handles the WEEKDAY command.
  4591                                  ;
  4592                                  ;-----------------------------------------------------------------------------------------------------------------------
  4593                                  ConWeekday		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4594                                  			putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer	;format weekday string
  4595                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4596                                  			putConsoleString  czNewLine				;write newline to console
  4597                                  			ret							;return
  4598                                  ;-----------------------------------------------------------------------------------------------------------------------
  4599                                  ;
  4600                                  ;	Routine:	ConWeekdayName
  4601                                  ;
  4602                                  ;	Description:	This routine Handles the WEEKDAY.NAME command.
  4603                                  ;
  4604                                  ;-----------------------------------------------------------------------------------------------------------------------
  4605                                  ConWeekdayName		readRealTimeClock    wsConsoleDateTime				;read RTC data into structure
  4606                                  			putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer	;format day name string
  4607                                  			putConsoleString     wzConsoleOutBuffer				;write string to console
  4608                                  			putConsoleString     czNewLine					;write newline to console
  4609                                  			ret								;return
  4610                                  ;-----------------------------------------------------------------------------------------------------------------------
  4611                                  ;
  4612                                  ;	Routine:	ConYear
  4613                                  ;
  4614                                  ;	Description:	This routine Handles the YEAR command.
  4615                                  ;
  4616                                  ;-----------------------------------------------------------------------------------------------------------------------
  4617                                  ConYear			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4618                                  			putYearString	  wsConsoleDateTime,wzConsoleOutBuffer	;format year string
  4619                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4620                                  			putConsoleString  czNewLine				;write newline to console
  4621                                  			ret							;return
  4622                                  ;-----------------------------------------------------------------------------------------------------------------------
  4623                                  ;
  4624                                  ;	Routine:	ConYearIsLeap
  4625                                  ;
  4626                                  ;	Description:	This routine handles the YEAR.ISLEAP command
  4627                                  ;
  4628                                  ;-----------------------------------------------------------------------------------------------------------------------
  4629                                  ConYearIsLeap		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4630                                  			isLeapYear        wsConsoleDateTime			;indicate if year is leap year
  4631                                  
  4632                                  			jecxz	.10						;branch if not leap
  4633                                  
  4634                                  			putConsoleString  czYearIsLeap				;display year is leap message
  4635                                  
  4636                                  			jmp	.20						;continue
  4637                                  
  4638                                  .10			putConsoleString  czYearIsNotLeap			;display year is not leap mesage
  4639                                  .20			ret							;return
  4640                                  ;-----------------------------------------------------------------------------------------------------------------------
  4641                                  ;
  4642                                  ;	Routine:	ConVersion
  4643                                  ;
  4644                                  ;	Description:	This routine handles the VERSION command and its alias, VER.
  4645                                  ;
  4646                                  ;-----------------------------------------------------------------------------------------------------------------------
  4647                                  ConVersion		putConsoleString czTitle				;display version message
  4648                                  			ret							;return
  4649                                  ;-----------------------------------------------------------------------------------------------------------------------
  4650                                  ;
  4651                                  ;	Tables
  4652                                  ;
  4653                                  ;-----------------------------------------------------------------------------------------------------------------------
  4654                                  										;---------------------------------------
  4655                                  										;  Command Jump Table
  4656                                  										;---------------------------------------
  4657                                  tConJmpTbl		equ	$						;command jump table
  4658                                  			dd	ConWeekdayName	- ConCode			;weekday.name command routine offset
  4659                                  			dd	ConYearIsLeap	- ConCode			;year.isleap command routine offset
  4660                                  			dd	ConMonthName	- ConCode			;month.name command routine offset
  4661                                  			dd	ConExit		- ConCode			;shutdown command routine offset
  4662                                  			dd	ConVersion	- ConCode			;version command routine offset
  4663                                  			dd	ConWeekday	- ConCode			;weekday command routine offset
  4664                                  			dd	ConMinute	- ConCode			;minute command routine offset
  4665                                  			dd	ConSecond	- ConCode			;second command routine offset
  4666                                  			dd	ConClear	- ConCode			;clear command routine offset
  4667                                  			dd	ConMonth	- ConCode			;month command routine offset
  4668                                  			dd	ConDate		- ConCode			;date command routine offset
  4669                                  			dd	ConExit		- ConCode			;exit command routine offset
  4670                                  			dd	ConHour		- ConCode			;hour command routine offset
  4671                                  			dd	ConInt6		- ConCode			;int6 command routine offset
  4672                                  			dd	ConExit		- ConCode			;quit command routine offset
  4673                                  			dd	ConTime		- ConCode			;time command routine offset
  4674                                  			dd	ConYear		- ConCode			;year command routine offset
  4675                                  			dd	ConClear	- ConCode			;cls command routine offset
  4676                                  			dd	ConDay		- ConCode			;day command routine offset
  4677                                  			dd	ConVersion	- ConCode			;ver command routine offset
  4678                                  ECONJMPTBLL		equ	($-tConJmpTbl)					;table length
  4679                                  ECONJMPTBLCNT		equ	ECONJMPTBLL/4					;table entries
  4680                                  										;---------------------------------------
  4681                                  										;  Command Name Table
  4682                                  										;---------------------------------------
  4683                                  tConCmdTbl		equ	$						;command name table
  4684                                  			db	13,"WEEKDAY.NAME",0				;weekday.name command
  4685                                  			db	12,"YEAR.ISLEAP",0				;year.isleap command
  4686                                  			db	11,"MONTH.NAME",0				;month.name command
  4687                                  			db	9,"SHUTDOWN",0					;shutdown command
  4688                                  			db	8,"VERSION",0					;version command
  4689                                  			db	8,"WEEKDAY",0					;weekday command
  4690                                  			db	7,"MINUTE",0					;minute command
  4691                                  			db	7,"SECOND",0					;second command
  4692                                  			db	6,"CLEAR",0					;clear command
  4693                                  			db	6,"MONTH",0					;month command
  4694                                  			db	5,"DATE",0					;date command
  4695                                  			db	5,"EXIT",0					;exit command
  4696                                  			db	5,"HOUR",0					;hour command
  4697                                  			db	5,"INT6",0					;int6 command
  4698                                  			db	5,"QUIT",0					;quit command
  4699                                  			db	5,"TIME",0					;time command
  4700                                  			db	5,"YEAR",0					;year command
  4701                                  			db	4,"CLS",0					;cls command
  4702                                  			db	4,"DAY",0					;day command
  4703                                  			db	4,"VER",0					;ver command
  4704                                  			db	0						;end of table
  4705                                  ;-----------------------------------------------------------------------------------------------------------------------
  4706                                  ;
  4707                                  ;	Constants
  4708                                  ;
  4709                                  ;-----------------------------------------------------------------------------------------------------------------------
  4710                                  czNewLine		db	13,10,0						;new line string
  4711                                  czPrompt		db	":",0						;prompt string
  4712                                  czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  4713                                  czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  4714                                  czYearIsLeap		db	"The year is a leap year.",13,10,0		;leap year message
  4715                                  czYearIsNotLeap		db	"The year is not a leap year.",13,10,0		;not leap year message
  4716                                  			times	4094-($-$$) db 0h				;zero fill to end of section
  4717                                  			db	055h,0AAh					;end of section
  4718                                  %endif
  4719                                  %ifdef BUILDDISK
  4720                                  ;-----------------------------------------------------------------------------------------------------------------------
  4721                                  ;
  4722                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  4723                                  ;
  4724                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4725                                  ;
  4726                                  ;-----------------------------------------------------------------------------------------------------------------------
  4727                                  section			unused							;unused disk space
  4728                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  4729                                  %endif
  4730                                  ;=======================================================================================================================
  4731                                  ;
  4732                                  ;	End of Program Code
  4733                                  ;
  4734                                  ;=======================================================================================================================
