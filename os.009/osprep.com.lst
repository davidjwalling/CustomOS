     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.009
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support the "mem" and "memory" commands.
     8                                  ;
     9                                  ;       Revised:        July 4, 2018
    10                                  ;
    11                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.01, May 1 2017
    17                                  ;
    18                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;       Assembly Directives
    24                                  ;
    25                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    34                                  %define BUILDBOOT                                                               ;... build the boot sector
    35                                  %define BUILDCOM                                                                ;... and the OS kernel
    36                                  %endif
    37                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    38                                  %define BUILDBOOT                                                               ;... also build the boot sector
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;       Conventions
    43                                  ;
    44                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    45                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    46                                  ;                       Assembly operands begin in column 33.
    47                                  ;                       Inline comments begin in column 81.
    48                                  ;                       Lines should not extend beyond column 120.
    49                                  ;
    50                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    51                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    52                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    53                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    54                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    55                                  ;                       ouput buffers, respectively.
    56                                  ;
    57                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    58                                  ;                       Negative relative call or jump addresses indicate reuse.
    59                                  ;
    60                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    61                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    62                                  ;                       Register names in comments are in upper case (EAX, EDI).
    63                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    64                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    65                                  ;                       register contents on entry and exit.
    66                                  ;
    67                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    68                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    69                                  ;                       The 2nd letter of the constant label indicates the storage type.
    70                                  ;
    71                                  ;                       cq......        constant quad-word (dq)
    72                                  ;                       cd......        constant double-word (dd)
    73                                  ;                       cw......        constant word (dw)
    74                                  ;                       cb......        constant byte (db)
    75                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    76                                  ;
    77                                  ;       Instructions:   32-bit instructions are generally favored.
    78                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    79                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    80                                  ;
    81                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    82                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    83                                  ;
    84                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    85                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    86                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    87                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    88                                  ;                       Octal literal values are avoided.
    89                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    90                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    91                                  ;
    92                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    93                                  ;                       Macro names describe an action and so DO begin with a verb.
    94                                  ;
    95                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    96                                  ;                       Buffers are kept to as small a size as practicable.
    97                                  ;                       Data and code intermingling is avoided wherever possible.
    98                                  ;
    99                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   100                                  ;                       Register names in source code are in lower case (eax, edx).
   101                                  ;
   102                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   103                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   104                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   105                                  ;
   106                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   107                                  ;                       Routine names begin with a verb (Get, Read, Load).
   108                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   109                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   110                                  ;                       function but begin with a leading underscore (_) character.
   111                                  ;
   112                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   113                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   114                                  ;
   115                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   116                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   117                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   118                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   119                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   120                                  ;
   121                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   122                                  ;                       The 2nd letter of the variable label indicates the storage type.
   123                                  ;
   124                                  ;                       wq......        variable quad-word (resq)
   125                                  ;                       wd......        variable double-word (resd)
   126                                  ;                       ww......        variable word (resw)
   127                                  ;                       wb......        variable byte (resb)
   128                                  ;                       ws......        writable structure
   129                                  ;
   130                                  ;-----------------------------------------------------------------------------------------------------------------------
   131                                  ;=======================================================================================================================
   132                                  ;
   133                                  ;       Equates
   134                                  ;
   135                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   136                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   137                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   138                                  ;       sets. Equates here are defined in the following groupings:
   139                                  ;
   140                                  ;       Hardware-Defined Values
   141                                  ;
   142                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   143                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   144                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   145                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   146                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   147                                  ;       EX86...         Intel x86 CPU architecture values
   148                                  ;
   149                                  ;       Firmware-Defined Values
   150                                  ;
   151                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   152                                  ;
   153                                  ;       Standards-Based Values
   154                                  ;
   155                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   156                                  ;
   157                                  ;       Operating System Values
   158                                  ;
   159                                  ;       EBOOT...        Boot sector and loader values
   160                                  ;       ECON...         Console values (dimensions and attributes)
   161                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   162                                  ;       EKEYF...        Keyboard status flags
   163                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   164                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   165                                  ;       EMSG...         Message identifers
   166                                  ;
   167                                  ;=======================================================================================================================
   168                                  ;-----------------------------------------------------------------------------------------------------------------------
   169                                  ;
   170                                  ;       Hardware-Defined Values
   171                                  ;
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;
   175                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   176                                  ;
   177                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   178                                  ;       for CGA, EGA, VGA and compatible video modes.
   179                                  ;
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   182                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   183                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   184                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   185                                  ;-----------------------------------------------------------------------------------------------------------------------
   186                                  ;
   187                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   188                                  ;
   189                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   190                                  ;
   191                                  ;-----------------------------------------------------------------------------------------------------------------------
   192                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   193                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   194                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   195                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   196                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   197                                  ;-----------------------------------------------------------------------------------------------------------------------
   198                                  ;
   199                                  ;       8042 Keyboard Controller                                                EKEYB...
   200                                  ;
   201                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   202                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   203                                  ;
   204                                  ;-----------------------------------------------------------------------------------------------------------------------
   205                                  EKEYBPORTDATA           equ     060h                                            ;data port
   206                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   207                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   208                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   209                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   210                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   211                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   212                                                                                                                  ;---------------------------------------
   213                                                                                                                  ;       Keyboard Scan Codes
   214                                                                                                                  ;---------------------------------------
   215                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   216                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   217                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   218                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   219                                  EKEYBSLASH              equ     035h                                            ;slash
   220                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   221                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   222                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   223                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   224                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   225                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   226                                  EKEYBUP                 equ     080h                                            ;up
   227                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   228                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   229                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   230                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   231                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   232                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   233                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   234                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   235                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   236                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   237                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   238                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   239                                  ;-----------------------------------------------------------------------------------------------------------------------
   240                                  ;
   241                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   242                                  ;
   243                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   244                                  ;       external devices and signals a hardware interrupt to the CPU.
   245                                  ;
   246                                  ;-----------------------------------------------------------------------------------------------------------------------
   247                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   248                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   249                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   250                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   251                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   252                                  ;-----------------------------------------------------------------------------------------------------------------------
   253                                  ;
   254                                  ;       8253 Programmable Interval Timer                                        EPIT...
   255                                  ;
   256                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   257                                  ;       approximately 18.2 times per second.
   258                                  ;
   259                                  ;-----------------------------------------------------------------------------------------------------------------------
   260                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  ;
   263                                  ;       x86 CPU Architecture                                                    ;EX86...
   264                                  ;
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;
   269                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   270                                  ;
   271                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   272                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   273                                  ;
   274                                  ;       0.......        Segment is not present in memory (triggers int 11)
   275                                  ;       1.......        Segment is present in memory
   276                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   277                                  ;       ...0....        Segment is a system segment
   278                                  ;       ...00010                Local Descriptor Table
   279                                  ;       ...00101                Task Gate
   280                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   281                                  ;       ...01100                Call Gate (386)
   282                                  ;       ...01110                Interrupt Gate (386)
   283                                  ;       ...01111                Trap Gate (386)
   284                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   285                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   286                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   287                                  ;
   288                                  ;-----------------------------------------------------------------------------------------------------------------------
   289                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   290                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   291                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   292                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   293                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   294                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   295                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   296                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  ;
   299                                  ;       Firmware-Defined Values
   300                                  ;
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  ;
   304                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   305                                  ;
   306                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   307                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   308                                  ;
   309                                  ;-----------------------------------------------------------------------------------------------------------------------
   310                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   311                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   312                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   313                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   314                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   315                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   316                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   317                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   318                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  ;
   321                                  ;       Standards-Based Values
   322                                  ;
   323                                  ;-----------------------------------------------------------------------------------------------------------------------
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;
   326                                  ;       ASCII                                                                   EASCII...
   327                                  ;
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   330                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   331                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   332                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   333                                  EASCIISPACE             equ     020h                                            ;space
   334                                  EASCIIUPPERA            equ     041h                                            ;'A'
   335                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   336                                  EASCIILOWERA            equ     061h                                            ;'a'
   337                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   338                                  EASCIITILDE             equ     07Eh                                            ;'~'
   339                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   340                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   341                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   342                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   343                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   344                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   345                                  EASCIICASE              equ     00100000b                                       ;case bit
   346                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   347                                  ;-----------------------------------------------------------------------------------------------------------------------
   348                                  ;
   349                                  ;       Operating System Values
   350                                  ;
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;
   354                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   355                                  ;
   356                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   357                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   358                                  ;
   359                                  ;-----------------------------------------------------------------------------------------------------------------------
   360                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   361                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   362                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   363                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   364                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   365                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   366                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   367                                  ;-----------------------------------------------------------------------------------------------------------------------
   368                                  ;       Console Constants                                                       ECON...
   369                                  ;-----------------------------------------------------------------------------------------------------------------------
   370                                  ECONCOLS                equ     80                                              ;columns per row
   371                                  ECONROWS                equ     24                                              ;console rows
   372                                  ECONOIAROW              equ     24                                              ;operator information area row
   373                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   374                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   375                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   376                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   377                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   378                                  ;-----------------------------------------------------------------------------------------------------------------------
   379                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   380                                  ;-----------------------------------------------------------------------------------------------------------------------
   381                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   382                                  EGDTCGA                 equ     020h                                            ;cga video selector
   383                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   384                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   385                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   386                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   387                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   388                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   389                                  ;-----------------------------------------------------------------------------------------------------------------------
   390                                  ;       Keyboard Flags                                                          EKEYF...
   391                                  ;-----------------------------------------------------------------------------------------------------------------------
   392                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   393                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   394                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   395                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   396                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   397                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   398                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   399                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   400                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   401                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   402                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   403                                  ;-----------------------------------------------------------------------------------------------------------------------
   404                                  ;       Kernel Constants                                                        EKRN...
   405                                  ;-----------------------------------------------------------------------------------------------------------------------
   406                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   407                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   408                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   409                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   412                                  ;-----------------------------------------------------------------------------------------------------------------------
   413                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   414                                  ;-----------------------------------------------------------------------------------------------------------------------
   415                                  ;       Message Identifiers                                                     EMSG...
   416                                  ;-----------------------------------------------------------------------------------------------------------------------
   417                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   418                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   419                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   420                                  ;=======================================================================================================================
   421                                  ;
   422                                  ;       Structures
   423                                  ;
   424                                  ;=======================================================================================================================
   425                                  ;-----------------------------------------------------------------------------------------------------------------------
   426                                  ;
   427                                  ;       MQUEUE
   428                                  ;
   429                                  ;       The MQUEUE structure maps memory used for a message queue.
   430                                  ;
   431                                  ;-----------------------------------------------------------------------------------------------------------------------
   432                                  struc                   MQUEUE
   433 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   434 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   435 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   436                                  endstruc
   437                                  ;-----------------------------------------------------------------------------------------------------------------------
   438                                  ;
   439                                  ;       OSDATA
   440                                  ;
   441                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   442                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   443                                  ;
   444                                  ;-----------------------------------------------------------------------------------------------------------------------
   445                                  struc                   OSDATA
   446 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   447 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   448 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   449 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   450 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   451 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   452 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   453 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   454 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   455 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   456 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   457 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   458 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   459 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   460 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   461 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   462 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   463 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   464 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   465 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   466 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   467 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   468 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   469 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   470 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   471 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   472 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   473 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   474 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   475 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   476 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   477 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   478 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   479 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   480 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   481 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   482 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   483 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   484 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   485 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   486 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   487 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   488 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   489 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   490 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   491 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   492 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   493 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   494 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   495 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   496 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   497 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   498 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   499 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   500 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   501 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   502 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   503 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   504 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   505 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   506 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   507 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   508 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   509 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   510 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   511 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   512 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   513 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   514 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   515 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   516 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   517 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   518 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   519 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   520 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   521 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   522 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   523 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   524 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   525 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   526 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   527 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   528 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   529 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   530 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   531 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   532 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   533 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   534 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   535 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   536 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   537 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   538 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   539 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   540 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   541 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   542 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   543 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   544 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   545 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   546 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   547                                  ;-----------------------------------------------------------------------------------------------------------------------
   548                                  ;
   549                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   550                                  ;
   551                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   552                                  ;
   553                                  ;-----------------------------------------------------------------------------------------------------------------------
   554                                  ECONDATA                equ     ($)
   555 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   556 00000804 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   557 00000805 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   558 00000806 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   559 00000807 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   560 00000808 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   561 00000809 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   562 0000080A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   563 0000080B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   564 0000080C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   565 0000080D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   566 0000080E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   567 0000080F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   568 00000810 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   569 00000860 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   570 000008B0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   571                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   572                                  ;-----------------------------------------------------------------------------------------------------------------------
   573                                  ;
   574                                  ;       End of OS Variables
   575                                  ;
   576                                  ;-----------------------------------------------------------------------------------------------------------------------
   577                                  endstruc
   578                                  ;-----------------------------------------------------------------------------------------------------------------------
   579                                  ;
   580                                  ;       Macros
   581                                  ;
   582                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   583                                  ;
   584                                  ;-----------------------------------------------------------------------------------------------------------------------
   585                                  %macro                  mint    1
   586                                  _%1                     equ     ($-$$) / EX86DESCLEN
   587                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   588                                  %endmacro
   589                                  %macro                  mtrap   1
   590                                  _%1                     equ     ($-$$) / EX86DESCLEN
   591                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   592                                  %endmacro
   593                                  %macro                  menter  1
   594                                  ?%1                     equ     ($-$$)
   595                                  %endmacro
   596                                  %macro                  tsvce   1
   597                                  e%1                     equ     ($-tsvc)/4
   598                                                          dd      %1
   599                                  %endmacro
   600                                  %ifdef BUILDBOOT
   601                                  ;=======================================================================================================================
   602                                  ;
   603                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   604                                  ;
   605                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   606                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   607                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   608                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   609                                  ;
   610                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   611                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   612                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   613                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   614                                  ;       immediately followed by a disk parameter table.
   615                                  ;
   616                                  ;=======================================================================================================================
   617                                                          cpu     8086                                            ;assume minimal CPU
   618                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   619                                                          bits    16                                              ;16-bit code at power-up
   620                                  %ifdef BUILDPREP
   621 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   622                                  %else
   623                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   624                                  %endif
   625                                  ;-----------------------------------------------------------------------------------------------------------------------
   626                                  ;
   627                                  ;       Disk Parameter Table
   628                                  ;
   629                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   630                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   631                                  ;
   632                                  ;-----------------------------------------------------------------------------------------------------------------------
   633 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   634 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   635 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   636 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   637 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   638 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   639 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   640 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   641 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   642                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   643 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   644 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   645 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   646                                  ;
   647                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   648                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   649                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   650                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   651                                  ;       given several possible starting values for CS:IP.
   652                                  ;
   653                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   654 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   655                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   656 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   657 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   658 00000025 B104                                            mov     cl,4                                            ;shift count
   659 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   660 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   661 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   662                                  ;
   663                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   664                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   665                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   666                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   667                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   668                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   669                                  ;
   670 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   671 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   672 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   673 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   674 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   675                                  ;
   676                                  ;       Our boot addressability is now set up according to the following diagram.
   677                                  ;
   678                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   679                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   680                                  ;                               |  256 = 100h bytes                             |
   681                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   682                                  ;                               |  Boot Sector (vstart=0100h)                   |
   683                                  ;                               |  1 sector = 512 = 200h bytes                  |
   684                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   685                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   686                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   687                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   688                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   689                                  ;                               |  2 sectors = 1024 = 400h bytes
   690                                  ;                       009400  +-----------------------------------------------+ DS:1900
   691                                  ;
   692                                  ;       On entry, DL indicates the drive being booted from.
   693                                  ;
   694 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   695                                  ;
   696                                  ;       Compute directory i/o buffer address.
   697                                  ;
   698 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   699 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   700 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   701 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   702                                  ;
   703                                  ;       Compute segment where os.com will be loaded.
   704                                  ;
   705 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   706 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   707 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   708 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   709                                  ;
   710                                  ;       Set the video mode to 80 column, 25 row, text.
   711                                  ;
   712 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   713 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   714                                  ;
   715                                  ;       Write a message to the console so we know we have our addressability established.
   716                                  ;
   717 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   718 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   719                                  ;
   720                                  ;       Initialize the number of directory sectors to search.
   721                                  ;
   722 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   723 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   724                                  ;
   725                                  ;       Compute number of directory sectors and initialize overhead count.
   726                                  ;
   727 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   728 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   729 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   730 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   731                                  ;
   732                                  ;       Compute directory entries per sector.
   733                                  ;
   734 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   735 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   736 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   737                                  ;
   738                                  ;       Compute first logical directory sector and update overhead count.
   739                                  ;
   740 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   741 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   742 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   743 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   744 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   745 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   746                                  ;
   747                                  ;       Read directory sector.
   748                                  ;
   749 0000008E B001                    .30                     mov     al,1                                            ;sector count
   750 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   751 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   752 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   753                                  ;
   754                                  ;       Setup variables to search this directory sector.
   755                                  ;
   756 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   757 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   758 000000A1 7603                                            jna     .40                                             ;no, continue
   759 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   760 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   761 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   762 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   763                                  ;
   764                                  ;       Loop through directory sectors searching for kernel program.
   765                                  ;
   766 000000B1 56                      .50                     push    si                                              ;save kernel name address
   767 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   768 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   769 000000B6 FC                                              cld                                                     ;forward strings
   770 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   771 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   772 000000BA 5E                                              pop     si                                              ;restore kernel name address
   773 000000BB 7418                                            je      .60                                             ;exit loop if found
   774 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   775 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   776 000000C2 75ED                                            jnz     .50                                             ;next entry
   777                                  ;
   778                                  ;       Repeat search if we are not at the end of the directory.
   779                                  ;
   780 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   781 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   782 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   783 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   784 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   785                                  ;
   786                                  ;       If we find the kernel program in the directory, read the FAT.
   787                                  ;
   788 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   789 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   790 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   791 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   792 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   793 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   794                                  ;
   795                                  ;       Get the starting cluster of the kernel program and target address.
   796                                  ;
   797 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   798 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   799                                  ;
   800                                  ;       Read each program cluster into RAM.
   801                                  ;
   802 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   803 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   804 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   805 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   806 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   807 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   808 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   809 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   810 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   811                                  ;
   812                                  ;       Update buffer pointer for next cluster.
   813                                  ;
   814 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   815 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   816 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   817 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   818 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   819                                  ;
   820                                  ;       Compute next cluster number.
   821                                  ;
   822 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   823 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   824 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   825 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   826 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   827 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   828 00000120 83E701                                          and     di,1                                            ;get low bit
   829 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   830 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   831 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   832                                  ;
   833                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   834                                  ;
   835 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   836 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   837 00000130 B104                                            mov     cl,4                                            ;shift count
   838 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   839 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   840 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   841 0000013A 75B2                                            jne     .70                                             ;no, continue
   842                                  ;
   843                                  ;       Transfer control to the operating system program.
   844                                  ;
   845 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   846 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   847 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   848                                  ;
   849                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   850                                  ;
   851 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   852 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   853 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   854 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   855 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   856 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   857 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   858 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   859 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   860 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   861                                  ;
   862                                  ;       Try maxtries times to read sector.
   863                                  ;
   864 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   865 00000160 53                      .10                     push    bx                                              ;save buffer address
   866 00000161 51                                              push    cx                                              ;save retry count
   867 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   868 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   869 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   870 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   871 0000016F 59                                              pop     cx                                              ;restore retry count
   872 00000170 5B                                              pop     bx                                              ;restore buffer address
   873 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   874 00000173 E2EB                                            loop    .10                                             ;retry
   875                                  ;
   876                                  ;       Handle disk error: convert to ASCII and store in error string.
   877                                  ;
   878 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   879 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   880 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   881 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   882 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   883 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   884 00000183 7203                                            jb      .20                                             ;continue if numeral
   885 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   886 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   887 0000018A 7203                                            jb      .30                                             ;continue if numeral
   888 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   889 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   890 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   891 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   892                                  ;
   893                                  ;       Wait for a key press.
   894                                  ;
   895 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   896 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   897 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   898 0000019E FB                                              sti                                                     ;enable maskable interrupts
   899 0000019F F4                                              hlt                                                     ;wait for interrupt
   900 000001A0 EBF6                                            jmp     .10                                             ;repeat
   901                                  ;
   902                                  ;       Reset the system.
   903                                  ;
   904 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   905 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   906 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   907 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   908 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   909                                  ;
   910                                  ;       Display text message.
   911                                  ;
   912 000001AA FC                      BootPrint               cld                                                     ;forward strings
   913 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   914 000001AC 84C0                                            test    al,al                                           ;end of string?
   915 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   916 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   917 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   918 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   919 000001B6 C3                      BootReturn              ret                                                     ;return
   920                                  ;-----------------------------------------------------------------------------------------------------------------------
   921                                  ;
   922                                  ;       Constants
   923                                  ;
   924                                  ;-----------------------------------------------------------------------------------------------------------------------
   925 000001B7 90                                              align   2
   926 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   927 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   927 000001C3 4F4D               
   928 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   928 000001CE 530D0A00           
   929 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   929 000001DB 7220               
   930 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   931 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   931 000001E9 6700               
   932                                  ;-----------------------------------------------------------------------------------------------------------------------
   933                                  ;
   934                                  ;       Work Areas
   935                                  ;
   936                                  ;-----------------------------------------------------------------------------------------------------------------------
   937 000001EB 90                                              align   2
   938 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   939 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   940 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   941 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   942 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   943                                  wwReadCountCommand      equ     $                                               ;read count and command
   944 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   945 000001F7 02                      cbReadCommand           db      2                                               ;BIOS read disk fn code
   946                                  wwDriveHead             equ     $                                               ;drive, head (word)
   947 000001F8 00                      wbDrive                 db      0                                               ;drive
   948 000001F9 00                      wbHead                  db      0                                               ;head
   949                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   950 000001FA 00                                              db      0                                               ;sector
   951 000001FB 00                      wbTrack                 db      0                                               ;track
   952 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   953 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   954                                  %endif
   955                                  %ifdef BUILDPREP
   956                                  ;=======================================================================================================================
   957                                  ;
   958                                  ;       Diskette Preparation Code
   959                                  ;
   960                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   961                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   962                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   963                                  ;
   964                                  ;=======================================================================================================================
   965                                  ;
   966                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   967                                  ;
   968 00000200 BE[CA02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
   969 00000203 E8A4FF                                          call    BootPrint                                       ;display message
   970                                  ;
   971                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   972                                  ;
   973 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   974 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   975 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
   976 0000020C FB                                              sti                                                     ;enable interrupts
   977 0000020D F4                                              hlt                                                     ;wait for interrupt
   978 0000020E EBF6                                            jmp     .10                                             ;repeat
   979 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   980 00000212 7407                                            je      .30                                             ;yes, branch
   981 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   982 00000216 75EE                                            jne     .10                                             ;no, repeat
   983 00000218 E9A900                                          jmp     .120                                            ;yes, exit program
   984                                  ;
   985                                  ;       Display writing-sector message and patch the JMP instruction.
   986                                  ;
   987 0000021B BE[6E04]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   988 0000021E E889FF                                          call    BootPrint                                       ;display message
   989 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
   990 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
   991 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
   992                                  ;
   993                                  ;       Try to read the boot sector.
   994                                  ;
   995 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   996 0000022C 51                      .40                     push    cx                                              ;save remaining tries
   997 0000022D BB[760A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
   998 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
   999 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
  1000 00000236 B80102                                          mov     ax,0201h                                        ;read one sector
  1001 00000239 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
  1002 0000023B 59                                              pop     cx                                              ;restore remaining retries
  1003 0000023C 7307                                            jnc     .50                                             ;skip ahead if successful
  1004 0000023E E2EC                                            loop    .40                                             ;try again
  1005 00000240 BE[9E04]                                        mov     si,czPrepMsg20                                  ;read-error message address
  1006 00000243 EB2C                                            jmp     .70                                             ;branch to error routine
  1007                                  ;
  1008                                  ;       Copy diskette parms from input buffer to output buffer.
  1009                                  ;
  1010 00000245 BE[760A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1011 00000248 83C60B                                          add     si,11                                           ;skip over JMP and system ID
  1012 0000024B BF[0000]                                        mov     di,Boot                                         ;output buffer address
  1013 0000024E 83C70B                                          add     di,11                                           ;skip over JMP and system ID
  1014 00000251 B91300                                          mov     cx,19                                           ;length of diskette parameters
  1015 00000254 FC                                              cld                                                     ;forward string copies
  1016 00000255 F3A4                                            rep     movsb                                           ;copy diskette parameters
  1017                                  ;
  1018                                  ;       Try to write boot sector to diskette.
  1019                                  ;
  1020 00000257 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1021 0000025A 51                      .60                     push    cx                                              ;save remaining tries
  1022 0000025B BB[0000]                                        mov     bx,Boot                                         ;output buffer address
  1023 0000025E BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1024 00000261 B90100                                          mov     cx,1                                            ;track zero, sector one
  1025 00000264 B80103                                          mov     ax,0301h                                        ;write one sector
  1026 00000267 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
  1027 00000269 59                                              pop     cx                                              ;restore remaining retries
  1028 0000026A 7326                                            jnc     .100                                            ;skip ahead if successful
  1029 0000026C E2EC                                            loop    .60                                             ;try again
  1030 0000026E BE[EC04]                                        mov     si,czPrepMsg30                                  ;write-error message address
  1031                                  ;
  1032                                  ;       Convert the error code to ASCII and display the error message.
  1033                                  ;
  1034 00000271 50                      .70                     push    ax                                              ;save error code
  1035 00000272 88E0                                            mov     al,ah                                           ;copy error code
  1036 00000274 B400                                            mov     ah,0                                            ;AX = error code
  1037 00000276 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1038 00000278 F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1039 0000027A 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1040 0000027D 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1041 00000280 7203                                            jb      .80                                             ;yes, continue
  1042 00000282 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1043 00000285 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1044 00000287 7202                                            jb      .90                                             ;yes, continue
  1045 00000289 0407                                            add     al,7                                            ;no, make ASCII
  1046 0000028B 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1047 0000028E E819FF                                          call    BootPrint                                       ;write error message
  1048 00000291 58                                              pop     ax                                              ;restore error code
  1049                                  ;
  1050                                  ;       Display the completion message.
  1051                                  ;
  1052 00000292 BE[3805]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1053 00000295 88E0                                            mov     al,ah                                           ;BIOS return code
  1054 00000297 3C00                                            cmp     al,0                                            ;success?
  1055 00000299 7426                                            je      .110                                            ;yes, continue
  1056 0000029B BE[D705]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1057 0000029E 3C01                                            cmp     al,1                                            ;disk parameter error?
  1058 000002A0 741F                                            je      .110                                            ;yes, continue
  1059 000002A2 BE[A106]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1060 000002A5 3C02                                            cmp     al,2                                            ;address mark not found?
  1061 000002A7 7418                                            je      .110                                            ;yes, continue
  1062 000002A9 BE[2A07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1063 000002AC 3C03                                            cmp     al,3                                            ;protected disk?
  1064 000002AE 7411                                            je      .110                                            ;yes, continue
  1065 000002B0 BE[E407]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1066 000002B3 3C06                                            cmp     al,6                                            ;diskette removed?
  1067 000002B5 740A                                            je      .110                                            ;yes, continue
  1068 000002B7 BE[1409]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1069 000002BA 3C80                                            cmp     al,80H                                          ;drive timed out?
  1070 000002BC 7403                                            je      .110                                            ;yes, continue
  1071 000002BE BE[C509]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1072 000002C1 E8E6FE                  .110                    call    BootPrint                                       ;display result message
  1073 000002C4 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1074 000002C7 CD21                                            int     021h                                            ;terminate DOS program
  1075 000002C9 C3                                              ret                                                     ;return (should not execute)
  1076                                  ;-----------------------------------------------------------------------------------------------------------------------
  1077                                  ;
  1078                                  ;       Diskette Preparation Messages
  1079                                  ;
  1080                                  ;-----------------------------------------------------------------------------------------------------------------------
  1081 000002CA 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1081 000002D3 5320426F6F742D4469-
  1081 000002DC 736B65747465205072-
  1081 000002E5 657061726174696F6E-
  1081 000002EE 2050726F6772616D   
  1082 000002F6 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1082 000002FF 687420284329203230-
  1082 00000308 31302D323031372044-
  1082 00000311 61766964204A2E2057-
  1082 0000031A 616C6C696E672E2041-
  1082 00000323 6C6C20726967687473-
  1082 0000032C 207265736572766564-
  1082 00000335 2E                 
  1083 00000336 0D0A                                            db      13,10
  1084 00000338 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1084 00000341 6F6772616D206F7665-
  1084 0000034A 727772697465732074-
  1084 00000353 686520626F6F742073-
  1084 0000035C 6563746F72206F6620-
  1084 00000365 61206469736B657474-
  1084 0000036E 652077697468207374-
  1084 00000377 617274757020636F64-
  1084 00000380 652074686174       
  1085 00000386 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1085 0000038F 616420746865206F70-
  1085 00000398 65726174696E672073-
  1085 000003A1 797374656D20696E74-
  1085 000003AA 6F206D656D6F727920-
  1085 000003B3 7768656E2074686520-
  1085 000003BC 636F6D707574657220-
  1085 000003C5 697320726573746172-
  1085 000003CE 7465642E           
  1086 000003D2 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1086 000003DB 6565642C20706C6163-
  1086 000003E4 65206120666F726D61-
  1086 000003ED 74746564206469736B-
  1086 000003F6 6574746520696E746F-
  1086 000003FF 20647269766520413A-
  1086 00000408 20616E642070726573-
  1086 00000411 732074686520456E74-
  1086 0000041A 6572206B65792E     
  1087 00000421 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1087 0000042A 20746869732070726F-
  1087 00000433 6772616D2077697468-
  1087 0000043C 6F7574207072657061-
  1087 00000445 72696E672061206469-
  1087 0000044E 736B657474652C2070-
  1087 00000457 726573732074686520-
  1087 00000460 457363617065206B65-
  1087 00000469 792E               
  1088 0000046B 0D0A00                                          db      13,10,0
  1089 0000046E 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1089 00000477 2074686520626F6F74-
  1089 00000480 20736563746F722074-
  1089 00000489 6F2074686520646973-
  1089 00000492 6B65747465202E2E2E 
  1090 0000049B 0D0A00                                          db      13,10,0
  1091 0000049E 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1091 000004A7 6F722D636F6465202E-
  1091 000004B0 2E2077617320726574-
  1091 000004B9 75726E65642066726F-
  1091 000004C2 6D207468652042494F-
  1091 000004CB 53207768696C652072-
  1091 000004D4 656164696E67206672-
  1091 000004DD 6F6D20746865206469-
  1091 000004E6 736B2E             
  1092 000004E9 0D0A00                                          db      13,10,0
  1093 000004EC 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1093 000004F5 6F722D636F6465202E-
  1093 000004FE 2E2077617320726574-
  1093 00000507 75726E65642066726F-
  1093 00000510 6D207468652042494F-
  1093 00000519 53207768696C652077-
  1093 00000522 726974696E6720746F-
  1093 0000052B 20746865206469736B-
  1093 00000534 2E                 
  1094 00000535 0D0A00                                          db      13,10,0
  1095 00000538 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1095 00000541 742D736563746F7220-
  1095 0000054A 776173207772697474-
  1095 00000553 656E20746F20746865-
  1095 0000055C 206469736B65747465-
  1095 00000565 2E204265666F726520-
  1095 0000056E 626F6F74696E672079-
  1095 00000577 6F757220636F6D7075-
  1095 00000580 7465722077697468   
  1096 00000588 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1096 00000591 736B657474652C206D-
  1096 0000059A 616B65207375726520-
  1096 000005A3 746861742074686520-
  1096 000005AC 66696C65204F532E43-
  1096 000005B5 4F4D20697320636F70-
  1096 000005BE 696564206F6E746F20-
  1096 000005C7 746865206469736B65-
  1096 000005D0 7474652E           
  1097 000005D4 0D0A00                                          db      13,10,0
  1098 000005D7 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1098 000005E0 76616C696420446973-
  1098 000005E9 6B20506172616D6574-
  1098 000005F2 6572               
  1099 000005F4 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1099 000005FD 20616E20696E746572-
  1099 00000606 6E616C206572726F72-
  1099 0000060F 206361757365642062-
  1099 00000618 7920616E20696E7661-
  1099 00000621 6C69642076616C7565-
  1099 0000062A 206265696E67207061-
  1099 00000633 7373656420746F2061-
  1099 0000063C 2073797374656D     
  1100 00000643 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1100 0000064C 6E2E20546865204F53-
  1100 00000655 424F4F542E434F4D20-
  1100 0000065E 66696C65206D617920-
  1100 00000667 626520636F72727570-
  1100 00000670 742E20436F7079206F-
  1100 00000679 7220646F776E6C6F61-
  1100 00000682 64207468652066696C-
  1100 0000068B 6520616761696E     
  1101 00000692 0D0A616E6420726574-                             db      13,10,"and retry."
  1101 0000069B 72792E             
  1102 0000069E 0D0A00                                          db      13,10,0
  1103 000006A1 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1103 000006AA 6472657373204D6172-
  1103 000006B3 6B204E6F7420466F75-
  1103 000006BC 6E64               
  1104 000006BE 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1104 000006C7 726F7220696E646963-
  1104 000006D0 617465732061207068-
  1104 000006D9 79736963616C207072-
  1104 000006E2 6F626C656D20776974-
  1104 000006EB 682074686520666C6F-
  1104 000006F4 707079206469736B65-
  1104 000006FD 7474652E20506C6561-
  1104 00000706 7365207265747279   
  1105 0000070E 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1105 00000717 6E6F74686572206469-
  1105 00000720 736B657474652E     
  1106 00000727 0D0A00                                          db      13,10,0
  1107 0000072A 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1107 00000733 6F7465637465642044-
  1107 0000073C 69736B             
  1108 0000073F 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1108 00000748 726F72206973207573-
  1108 00000751 75616C6C7920636175-
  1108 0000075A 736564206279206174-
  1108 00000763 74656D7074696E6720-
  1108 0000076C 746F20777269746520-
  1108 00000775 746F20612077726974-
  1108 0000077E 652D70726F74656374-
  1108 00000787 6564206469736B2E   
  1109 0000078F 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1109 00000798 686520277772697465-
  1109 000007A1 2D70726F7465637427-
  1109 000007AA 2073657474696E6720-
  1109 000007B3 6F6E20746865206469-
  1109 000007BC 736B206F7220726574-
  1109 000007C5 7279207573696E6720-
  1109 000007CE 7573696E6720616E6F-
  1109 000007D7 74686572206469736B-
  1109 000007E0 2E                 
  1110 000007E1 0D0A00                                          db      13,10,0
  1111 000007E4 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1111 000007ED 736B65747465205265-
  1111 000007F6 6D6F766564         
  1112 000007FB 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1112 00000804 726F72206D61792069-
  1112 0000080D 6E6469636174652074-
  1112 00000816 686174207468652066-
  1112 0000081F 6C6F70707920646973-
  1112 00000828 6B6574746520686173-
  1112 00000831 206265656E2072656D-
  1112 0000083A 6F7665642066726F6D-
  1112 00000843 20746865           
  1113 00000847 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1113 00000850 652064726976652E20-
  1113 00000859 4F6E20736F6D652073-
  1113 00000862 797374656D732C2074-
  1113 0000086B 68697320636F646520-
  1113 00000874 6D617920616C736F20-
  1113 0000087D 6F6363757220696620-
  1113 00000886 746865206469736B65-
  1113 0000088F 747465206973       
  1114 00000895 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1114 0000089E 70726F746563746564-
  1114 000008A7 2E2720506C65617365-
  1114 000008B0 207665726966792074-
  1114 000008B9 686174207468652064-
  1114 000008C2 69736B657474652069-
  1114 000008CB 73206E6F7420777269-
  1114 000008D4 74652D70726F746563-
  1114 000008DD 74656420616E64     
  1115 000008E4 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1115 000008ED 65726C7920696E7365-
  1115 000008F6 7274656420696E2074-
  1115 000008FF 6865206469736B6574-
  1115 00000908 74652064726976652E 
  1116 00000911 0D0A00                                          db      13,10,0
  1117 00000914 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1117 0000091D 6976652054696D6564-
  1117 00000926 204F7574           
  1118 0000092A 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1118 00000933 726F7220757375616C-
  1118 0000093C 6C7920696E64696361-
  1118 00000945 746573207468617420-
  1118 0000094E 6E6F206469736B6574-
  1118 00000957 746520697320696E20-
  1118 00000960 746865206469736B65-
  1118 00000969 747465206472697665-
  1118 00000972 2E20506C65617365   
  1119 0000097A 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1119 00000983 726520746861742074-
  1119 0000098C 6865206469736B6574-
  1119 00000995 74652069732070726F-
  1119 0000099E 7065726C7920736561-
  1119 000009A7 74656420696E207468-
  1119 000009B0 652064726976652061-
  1119 000009B9 6E642072657472792E 
  1120 000009C2 0D0A00                                          db      13,10,0
  1121 000009C5 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1121 000009CE 6B6E6F776E20457272-
  1121 000009D7 6F72               
  1122 000009D9 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1122 000009E2 6F722D636F64652072-
  1122 000009EB 657475726E65642062-
  1122 000009F4 79207468652042494F-
  1122 000009FD 53206973206E6F7420-
  1122 00000A06 61207265636F676E69-
  1122 00000A0F 7A6564206572726F72-
  1122 00000A18 2E20506C6561736520-
  1122 00000A21 636F6E73756C74     
  1123 00000A28 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1123 00000A31 6D7075746572277320-
  1123 00000A3A 746563686E6963616C-
  1123 00000A43 207265666572656E63-
  1123 00000A4C 6520666F7220612064-
  1123 00000A55 65736372697074696F-
  1123 00000A5E 6E206F662074686973-
  1123 00000A67 206572726F7220636F-
  1123 00000A70 64652E             
  1124 00000A73 0D0A00                                          db      13,10,0
  1125                                  wcPrepInBuf             equ     $
  1126                                  %endif
  1127                                  %ifdef BUILDDISK
  1128                                  ;=======================================================================================================================
  1129                                  ;
  1130                                  ;       File Allocation Tables
  1131                                  ;
  1132                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1133                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1134                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1135                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1136                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1137                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1138                                  ;       the last cluster in the chain.
  1139                                  ;
  1140                                  ;       Every three bytes encode two FAT entries as follows:
  1141                                  ;
  1142                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1143                                  ;
  1144                                  ;=======================================================================================================================
  1145                                  ;-----------------------------------------------------------------------------------------------------------------------
  1146                                  ;
  1147                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1148                                  ;
  1149                                  ;-----------------------------------------------------------------------------------------------------------------------
  1150                                  section                 fat1                                                    ;first copy of FAT
  1151                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1152                                                          db      005h,060h,000h, 007h,080h,000h
  1153                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1154                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1155                                                          db      011h,020h,001h, 013h,040h,001h
  1156                                                          db      015h,060h,001h, 017h,080h,001h
  1157                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1158                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1159                                                          db      021h,020h,002h, 023h,040h,002h
  1160                                                          db      025h,060h,002h, 027h,080h,002h
  1161                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1162                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1163                                  ;-----------------------------------------------------------------------------------------------------------------------
  1164                                  ;
  1165                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1166                                  ;
  1167                                  ;-----------------------------------------------------------------------------------------------------------------------
  1168                                  section                 fat2                                                    ;second copy of FAT
  1169                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1170                                                          db      005h,060h,000h, 007h,080h,000h
  1171                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1172                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1173                                                          db      011h,020h,001h, 013h,040h,001h
  1174                                                          db      015h,060h,001h, 017h,080h,001h
  1175                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1176                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1177                                                          db      021h,020h,002h, 023h,040h,002h
  1178                                                          db      025h,060h,002h, 027h,080h,002h
  1179                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1180                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1181                                  ;-----------------------------------------------------------------------------------------------------------------------
  1182                                  ;
  1183                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1184                                  ;
  1185                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1186                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1187                                  ;       copy.
  1188                                  ;
  1189                                  ;-----------------------------------------------------------------------------------------------------------------------
  1190                                  section                 dir                                                     ;diskette directory
  1191                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1192                                                          db      020h                                            ;attribute (archive bit set)
  1193                                                          times   10 db 0                                         ;unused
  1194                                                          dw      0h                                              ;time
  1195                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1196                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1197                                                          dw      2                                               ;first cluster
  1198                                                          dd      05400h                                          ;file size
  1199                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1200                                  %endif
  1201                                  %ifdef BUILDCOM
  1202                                  ;=======================================================================================================================
  1203                                  ;
  1204                                  ;       OS.COM
  1205                                  ;
  1206                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1207                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1208                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1209                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1210                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1211                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1212                                  ;
  1213                                  ;       Our loader addressability is set up according to the following diagram.
  1214                                  ;
  1215                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1216                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1217                                  ;                               |  256 = 100h bytes                             |
  1218                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1219                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1220                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1221                                  ;                       007e00  +-----------------------------------------------+
  1222                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1223                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1224                                  ;                               |                                               |
  1225                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1226                                  ;                               |                                               |
  1227                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1228                                  ;                               |  Loader Code                                  |
  1229                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1230                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1231                                  ;
  1232                                  ;=======================================================================================================================
  1233                                  ;-----------------------------------------------------------------------------------------------------------------------
  1234                                  ;
  1235                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1236                                  ;
  1237                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1238                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1239                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1240                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1241                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1242                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1243                                  ;       disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1244                                  ;       registers.
  1245                                  ;
  1246                                  ;-----------------------------------------------------------------------------------------------------------------------
  1247                                                          cpu     8086                                            ;assume minimal CPU
  1248                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1249                                                          bits    16                                              ;this is 16-bit code
  1250                                  Loader                  push    cs                                              ;use the code segment
  1251                                                          pop     ds                                              ;...as our data segment
  1252                                                          push    cs                                              ;use the code segment
  1253                                                          pop     es                                              ;...as our extra segment
  1254                                  ;
  1255                                  ;       Write a message to the console so we know we have our addressability established.
  1256                                  ;
  1257                                                          mov     si,czStartingMsg                                ;starting message
  1258                                                          call    PutTTYString                                    ;display loader message
  1259                                  ;
  1260                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1261                                  ;
  1262                                                          call    GetCPUType                                      ;AL = cpu type
  1263                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1264                                                          cmp     al,3                                            ;80386+?
  1265                                                          jb      LoaderExit                                      ;no, exit with error message
  1266                                                          cpu     386                                             ;allow 80386 instructions
  1267                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1268                                                          call    PutTTYString                                    ;display message
  1269                                  ;
  1270                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1271                                  ;
  1272                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1273                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1274                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1275                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1276                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1277                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1278                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1279                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1280                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1281                                                          call    PutTTYString                                    ;display message
  1282                                  ;
  1283                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1284                                  ;
  1285                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1286                                                          pop     es                                              ;... as target segment
  1287                                                          xor     di,di                                           ;ES:DI = target address
  1288                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1289                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1290                                                          cld                                                     ;forward strings
  1291                                                          rep     movsb                                           ;copy kernel image
  1292                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1293                                                          call    PutTTYString                                    ;display message
  1294                                  ;
  1295                                  ;       Switch to protected mode.
  1296                                  ;
  1297                                                          xor     si,si                                           ;ES:SI = gdt addr
  1298                                                          mov     ss,si                                           ;protected mode ss
  1299                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1300                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1301                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1302                                                          mov     dx,001Fh                                        ;outer delay loop count
  1303                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1304                                                          loop    $                                               ;wait out pending interrupts
  1305                                                          dec     dx                                              ;restore outer loop count
  1306                                                          jnz     .10                                             ;continue outer loop
  1307                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1308                                  ;
  1309                                  ;       Enable hardware and maskable interrupts.
  1310                                  ;
  1311                                                          xor     al,al                                           ;enable all registers code
  1312                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1313                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1314                                                          sti                                                     ;enable maskable interrupts
  1315                                  ;
  1316                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1317                                  ;
  1318                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1319                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1320                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1321                                  ;-----------------------------------------------------------------------------------------------------------------------
  1322                                  ;
  1323                                  ;       Routine:        LoaderExit
  1324                                  ;
  1325                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1326                                  ;
  1327                                  ;       In:             DS:SI   string address
  1328                                  ;
  1329                                  ;-----------------------------------------------------------------------------------------------------------------------
  1330                                  LoaderExit              call    PutTTYString                                    ;display error message
  1331                                  ;
  1332                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1333                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1334                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1335                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1336                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1337                                  ;
  1338                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1339                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1340                                                          jnz     .40                                             ;exit if key pressed
  1341                                                          sti                                                     ;enable maskable interrupts
  1342                                                          hlt                                                     ;wait for interrupt
  1343                                                          jmp     .30                                             ;repeat until keypress
  1344                                  ;
  1345                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1346                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1347                                  ;       HLT until the system resets.
  1348                                  ;
  1349                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1350                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1351                                  .50                     sti                                                     ;enable maskable interrupts
  1352                                                          hlt                                                     ;stop until reset, int, nmi
  1353                                                          jmp     .50                                             ;loop until restart kicks in
  1354                                  ;-----------------------------------------------------------------------------------------------------------------------
  1355                                  ;
  1356                                  ;       Routine:        GetCPUType
  1357                                  ;
  1358                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1359                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1360                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1361                                  ;
  1362                                  ;       Out:            AX      0 = 808x, v20, etc.
  1363                                  ;                               1 = 80186
  1364                                  ;                               2 = 80286
  1365                                  ;                               3 = 80386
  1366                                  ;
  1367                                  ;-----------------------------------------------------------------------------------------------------------------------
  1368                                  GetCPUType              mov     al,1                                            ;AL = 1
  1369                                                          mov     cl,32                                           ;shift count
  1370                                                          shr     al,cl                                           ;try a 32-bit shift
  1371                                                          or      al,al                                           ;did the shift happen?
  1372                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1373                                                          cpu     186
  1374                                                          push    sp                                              ;save stack pointer
  1375                                                          pop     cx                                              ;...into cx
  1376                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1377                                                          jne     .10                                             ;yes, cpu is 80186
  1378                                                          cpu     286
  1379                                                          inc     ax                                              ;AX = 2
  1380                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1381                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1382                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1383                                                          jz      .10                                             ;yes, cpu is 80286
  1384                                                          inc     ax                                              ;AX = 3
  1385                                  .10                     ret                                                     ;return
  1386                                  ;-----------------------------------------------------------------------------------------------------------------------
  1387                                  ;
  1388                                  ;       Routine:        PutTTYString
  1389                                  ;
  1390                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1391                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1392                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1393                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1394                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1395                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1396                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1397                                  ;                       to LODSB is not needed.
  1398                                  ;
  1399                                  ;       In:             DS:SI   address of string
  1400                                  ;
  1401                                  ;       Out:            DF      0
  1402                                  ;                       ZF      1
  1403                                  ;                       AL      0
  1404                                  ;
  1405                                  ;-----------------------------------------------------------------------------------------------------------------------
  1406                                  PutTTYString            cld                                                     ;forward strings
  1407                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1408                                                          test    al,al                                           ;end of string?
  1409                                                          jz      .20                                             ;... yes, exit our loop
  1410                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1411                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1412                                                          jmp     .10                                             ;repeat until done
  1413                                  .20                     ret                                                     ;return
  1414                                  ;-----------------------------------------------------------------------------------------------------------------------
  1415                                  ;
  1416                                  ;       Loader Data
  1417                                  ;
  1418                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1419                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1420                                  ;
  1421                                  ;-----------------------------------------------------------------------------------------------------------------------
  1422                                                          align   2
  1423                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1424                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1425                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1426                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1427                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1428                                                          db      "Please press any key to restart the computer.",13,10,0
  1429                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1430                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1431                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1432                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1433                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1434                                  ;=======================================================================================================================
  1435                                  ;
  1436                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1437                                  ;
  1438                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1439                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1440                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1441                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1442                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1443                                  ;
  1444                                  ;=======================================================================================================================
  1445                                  ;=======================================================================================================================
  1446                                  ;
  1447                                  ;       Kernel Tables
  1448                                  ;
  1449                                  ;=======================================================================================================================
  1450                                  ;-----------------------------------------------------------------------------------------------------------------------
  1451                                  ;
  1452                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1453                                  ;
  1454                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1455                                  ;       first descriptor must be all nulls.
  1456                                  ;
  1457                                  ;       6   5         4         3         2         1         0
  1458                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1459                                  ;       ----------------------------------------------------------------
  1460                                  ;       h......hffffmmmma......ab......................bn..............n
  1461                                  ;       00000000                        all areas have base addresses below 2^24
  1462                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1463                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1464                                  ;                   1001                present, ring-0, selector
  1465                                  ;
  1466                                  ;       h...h   hi-order base address (bits 24-31)
  1467                                  ;       ffff    flags
  1468                                  ;       mmmm    hi-order limit (bits 16-19)
  1469                                  ;       a...a   access
  1470                                  ;       b...b   lo-order base address (bits 0-23)
  1471                                  ;       n...n   lo-order limit (bits 0-15)
  1472                                  ;
  1473                                  ;-----------------------------------------------------------------------------------------------------------------------
  1474                                  section                 gdt                                                     ;global descriptor table
  1475                                                          dq      0000000000000000h                               ;00 required null selector
  1476                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1477                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1478                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1479                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1480                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1481                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1482                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1483                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1484                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1485                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1486                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1487                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1488                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1489                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1490                                  ;-----------------------------------------------------------------------------------------------------------------------
  1491                                  ;
  1492                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1493                                  ;
  1494                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1495                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1496                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1497                                  ;
  1498                                  ;       6   5         4         3         2         1         0
  1499                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1500                                  ;       ----------------------------------------------------------------
  1501                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1502                                  ;
  1503                                  ;       h...h   high-order offset (bits 16-31)
  1504                                  ;       P       present (0=unused interrupt)
  1505                                  ;       zz      descriptor privilege level
  1506                                  ;       S       storage segment (must be zero for IDT)
  1507                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1508                                  ;       S...S   handling code selector in GDT
  1509                                  ;       l...l   lo-order offset (bits 0-15)
  1510                                  ;
  1511                                  ;-----------------------------------------------------------------------------------------------------------------------
  1512                                  section                 idt                                                     ;interrupt descriptor table
  1513                                                          mint    dividebyzero                                    ;00 divide by zero
  1514                                                          mint    singlestep                                      ;01 single step
  1515                                                          mint    nmi                                             ;02 non-maskable
  1516                                                          mint    break                                           ;03 break
  1517                                                          mint    into                                            ;04 into
  1518                                                          mint    bounds                                          ;05 bounds
  1519                                                          mint    badopcode                                       ;06 bad op code
  1520                                                          mint    nocoproc                                        ;07 no coprocessor
  1521                                                          mint    doublefault                                     ;08 double-fault
  1522                                                          mint    operand                                         ;09 operand
  1523                                                          mint    badtss                                          ;0a bad TSS
  1524                                                          mint    notpresent                                      ;0b not-present
  1525                                                          mint    stacklimit                                      ;0c stack limit
  1526                                                          mint    protection                                      ;0d general protection fault
  1527                                                          mint    int14                                           ;0e (reserved)
  1528                                                          mint    int15                                           ;0f (reserved)
  1529                                                          mint    coproccalc                                      ;10 (reserved)
  1530                                                          mint    int17                                           ;11 (reserved)
  1531                                                          mint    int18                                           ;12 (reserved)
  1532                                                          mint    int19                                           ;13 (reserved)
  1533                                                          mint    int20                                           ;14 (reserved)
  1534                                                          mint    int21                                           ;15 (reserved)
  1535                                                          mint    int22                                           ;16 (reserved)
  1536                                                          mint    int23                                           ;17 (reserved)
  1537                                                          mint    int24                                           ;18 (reserved)
  1538                                                          mint    int25                                           ;19 (reserved)
  1539                                                          mint    int26                                           ;1a (reserved)
  1540                                                          mint    int27                                           ;1b (reserved)
  1541                                                          mint    int28                                           ;1c (reserved)
  1542                                                          mint    int29                                           ;1d (reserved)
  1543                                                          mint    int30                                           ;1e (reserved)
  1544                                                          mint    int31                                           ;1f (reserved)
  1545                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1546                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1547                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1548                                                          mtrap   com2                                            ;23 IRQ3 com2
  1549                                                          mtrap   com1                                            ;24 IRQ4 com1
  1550                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1551                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1552                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1553                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1554                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1555                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1556                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1557                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1558                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1559                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1560                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1561                                                          mtrap   svc                                             ;30 OS services
  1562                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1563                                  ;=======================================================================================================================
  1564                                  ;
  1565                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1566                                  ;
  1567                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1568                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1569                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1570                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1571                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1572                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1573                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1574                                  ;
  1575                                  ;=======================================================================================================================
  1576                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1577                                                          cpu     386                                             ;allow 80386 instructions
  1578                                                          bits    32                                              ;this is 32-bit code
  1579                                  ;=======================================================================================================================
  1580                                  ;
  1581                                  ;       CPU Interrupt Handlers
  1582                                  ;
  1583                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1584                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1585                                  ;
  1586                                  ;=======================================================================================================================
  1587                                  ;-----------------------------------------------------------------------------------------------------------------------
  1588                                  ;
  1589                                  ;       INT0    Divide By Zero
  1590                                  ;
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                                          menter  dividebyzero                                    ;divide by zero
  1593                                                          push    0                                               ;store interrupt nbr
  1594                                                          push    czIntDivideByZero                               ;store message offset
  1595                                                          jmp     ReportInterrupt                                 ;report interrupt
  1596                                  ;-----------------------------------------------------------------------------------------------------------------------
  1597                                  ;
  1598                                  ;       INT1    Single Step
  1599                                  ;
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601                                                          menter  singlestep                                      ;single step
  1602                                                          push    1                                               ;store interrupt nbr
  1603                                                          push    czIntSingleStep                                 ;store message offset
  1604                                                          jmp     ReportInterrupt                                 ;report interrupt
  1605                                  ;-----------------------------------------------------------------------------------------------------------------------
  1606                                  ;
  1607                                  ;       INT2    Non-Maskable Interrupt
  1608                                  ;
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                                          menter  nmi                                             ;non-maskable
  1611                                                          push    2                                               ;store interrupt nbr
  1612                                                          push    czIntNonMaskable                                ;store message offset
  1613                                                          jmp     ReportInterrupt                                 ;report interrupt
  1614                                  ;-----------------------------------------------------------------------------------------------------------------------
  1615                                  ;
  1616                                  ;       INT3    Break
  1617                                  ;
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                                          menter  break                                           ;break
  1620                                                          push    3                                               ;store interrupt nbr
  1621                                                          push    czIntBreak                                      ;store message offset
  1622                                                          jmp     ReportInterrupt                                 ;report interrupt
  1623                                  ;-----------------------------------------------------------------------------------------------------------------------
  1624                                  ;
  1625                                  ;       INT4    Into
  1626                                  ;
  1627                                  ;-----------------------------------------------------------------------------------------------------------------------
  1628                                                          menter  into                                            ;into
  1629                                                          push    4                                               ;store interrupt nbr
  1630                                                          push    czIntInto                                       ;store message offset
  1631                                                          jmp     ReportInterrupt                                 ;report interrupt
  1632                                  ;-----------------------------------------------------------------------------------------------------------------------
  1633                                  ;
  1634                                  ;       INT5    Bounds
  1635                                  ;
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                                          menter  bounds                                          ;bounds
  1638                                                          push    5                                               ;store interrupt nbr
  1639                                                          push    czIntBounds                                     ;store message offset
  1640                                                          jmp     ReportInterrupt                                 ;report interrupt
  1641                                  ;-----------------------------------------------------------------------------------------------------------------------
  1642                                  ;
  1643                                  ;       INT6    Bad Operation Code
  1644                                  ;
  1645                                  ;-----------------------------------------------------------------------------------------------------------------------
  1646                                                          menter  badopcode                                       ;bad opcode interrupt
  1647                                                          push    6                                               ;store interrupt nbr
  1648                                                          push    czIntBadOpCode                                  ;store message offset
  1649                                                          jmp     ReportInterrupt                                 ;report interrupt
  1650                                  ;-----------------------------------------------------------------------------------------------------------------------
  1651                                  ;
  1652                                  ;       INT7    No Coprocessor
  1653                                  ;
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1656                                                          push    7                                               ;store interrupt nbr
  1657                                                          push    czIntNoCoprocessor                              ;store message offset
  1658                                                          jmp     ReportInterrupt                                 ;report interrupt
  1659                                  ;-----------------------------------------------------------------------------------------------------------------------
  1660                                  ;
  1661                                  ;       INT8    Double Fault
  1662                                  ;
  1663                                  ;-----------------------------------------------------------------------------------------------------------------------
  1664                                                          menter  doublefault                                     ;doublefault interrupt
  1665                                                          push    8                                               ;store interrupt nbr
  1666                                                          push    czIntDoubleFault                                ;store message offset
  1667                                                          jmp     ReportInterrupt                                 ;report interrupt
  1668                                  ;-----------------------------------------------------------------------------------------------------------------------
  1669                                  ;
  1670                                  ;       INT9    Operand
  1671                                  ;
  1672                                  ;-----------------------------------------------------------------------------------------------------------------------
  1673                                                          menter  operand                                         ;operand interrupt
  1674                                                          push    9                                               ;store interrupt nbr
  1675                                                          push    czIntOperand                                    ;store message offset
  1676                                                          jmp     ReportInterrupt                                 ;report interrupt
  1677                                  ;-----------------------------------------------------------------------------------------------------------------------
  1678                                  ;
  1679                                  ;       INT10   Bad Task State Segment
  1680                                  ;
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                                          menter  badtss                                          ;bad TSS interrupt
  1683                                                          push    10                                              ;store interrupt nbr
  1684                                                          push    czIntBadTSS                                     ;store message offset
  1685                                                          jmp     ReportInterrupt                                 ;report interrupt
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                  ;
  1688                                  ;       INT11   Not Present
  1689                                  ;
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                                          menter  notpresent                                      ;not present interrupt
  1692                                                          push    11                                              ;store interrupt nbr
  1693                                                          push    czIntNotPresent                                 ;store message offset
  1694                                                          jmp     ReportInterrupt                                 ;report interrupt
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                  ;
  1697                                  ;       INT12   Stack Limit
  1698                                  ;
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                                          menter  stacklimit                                      ;stack limit interrupt
  1701                                                          push    12                                              ;store interrupt nbr
  1702                                                          push    czIntStackLimit                                 ;store message offset
  1703                                                          jmp     ReportInterrupt                                 ;report interrupt
  1704                                  ;-----------------------------------------------------------------------------------------------------------------------
  1705                                  ;
  1706                                  ;       INT13   General Protection Fault
  1707                                  ;
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                                          menter  protection                                      ;protection fault interrupt
  1710                                                          push    13                                              ;store interrupt nbr
  1711                                                          push    czIntProtection                                 ;store message offset
  1712                                                          jmp     ReportInterrupt                                 ;report interrupt
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                  ;
  1715                                  ;       INT14   Reserved
  1716                                  ;
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                                          menter  int14                                           ;(reserved)
  1719                                                          push    14                                              ;store interrupt nbr
  1720                                                          push    czIntReserved                                   ;store message offset
  1721                                                          jmp     ReportInterrupt                                 ;report interrupt
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                  ;
  1724                                  ;       INT15   Reserved
  1725                                  ;
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                                          menter  int15                                           ;(reserved)
  1728                                                          push    15                                              ;store interrupt nbr
  1729                                                          push    czIntReserved                                   ;store message offset
  1730                                                          jmp     ReportInterrupt                                 ;report interrupt
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  ;
  1733                                  ;       INT16   Coprocessor Calculation
  1734                                  ;
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                                          menter  coproccalc                                      ;coprocessor calculation
  1737                                                          push    16                                              ;store interrupt nbr
  1738                                                          push    czIntCoprocessorCalc                            ;store message offset
  1739                                                          jmp     ReportInterrupt                                 ;report interrupt
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                  ;
  1742                                  ;       INT17   Reserved
  1743                                  ;
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                                          menter  int17                                           ;(reserved)
  1746                                                          push    17                                              ;store interrupt nbr
  1747                                                          push    czIntReserved                                   ;store message offset
  1748                                                          jmp     ReportInterrupt                                 ;report interrupt
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                  ;
  1751                                  ;       INT18   Reserved
  1752                                  ;
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                                          menter  int18                                           ;(reserved)
  1755                                                          push    18                                              ;store interrupt nbr
  1756                                                          push    czIntReserved                                   ;store message offset
  1757                                                          jmp     ReportInterrupt                                 ;report interrupt
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                  ;
  1760                                  ;       INT19   Reserved
  1761                                  ;
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                                          menter  int19                                           ;(reserved)
  1764                                                          push    19                                              ;store interrupt nbr
  1765                                                          push    czIntReserved                                   ;store message offset
  1766                                                          jmp     ReportInterrupt                                 ;report interrupt
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                  ;
  1769                                  ;       INT20   Reserved
  1770                                  ;
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                                          menter  int20                                           ;(reserved)
  1773                                                          push    20                                              ;store interrupt nbr
  1774                                                          push    czIntReserved                                   ;store message offset
  1775                                                          jmp     ReportInterrupt                                 ;report interrupt
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                  ;
  1778                                  ;       INT21   Reserved
  1779                                  ;
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                                          menter  int21                                           ;(reserved)
  1782                                                          push    21                                              ;store interrupt nbr
  1783                                                          push    czIntReserved                                   ;store message offset
  1784                                                          jmp     ReportInterrupt                                 ;report interrupt
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                  ;
  1787                                  ;       INT22   Reserved
  1788                                  ;
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                                          menter  int22                                           ;(reserved)
  1791                                                          push    22                                              ;store interrupt nbr
  1792                                                          push    czIntReserved                                   ;store message offset
  1793                                                          jmp     ReportInterrupt                                 ;report interrupt
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                  ;
  1796                                  ;       INT23   Reserved
  1797                                  ;
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                                          menter  int23                                           ;(reserved)
  1800                                                          push    23                                              ;store interrupt nbr
  1801                                                          push    czIntReserved                                   ;store message offset
  1802                                                          jmp     ReportInterrupt                                 ;report interrupt
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                  ;
  1805                                  ;       INT24   Reserved
  1806                                  ;
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                                          menter  int24                                           ;(reserved)
  1809                                                          push    24                                              ;store interrupt nbr
  1810                                                          push    czIntReserved                                   ;store message offset
  1811                                                          jmp     ReportInterrupt                                 ;report interrupt
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                  ;
  1814                                  ;       INT25   Reserved
  1815                                  ;
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                                          menter  int25                                           ;(reserved)
  1818                                                          push    25                                              ;store interrupt nbr
  1819                                                          push    czIntReserved                                   ;store message offset
  1820                                                          jmp     ReportInterrupt                                 ;report interrupt
  1821                                  ;-----------------------------------------------------------------------------------------------------------------------
  1822                                  ;
  1823                                  ;       INT26   Reserved
  1824                                  ;
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                                          menter  int26                                           ;(reserved)
  1827                                                          push    26                                              ;store interrupt nbr
  1828                                                          push    czIntReserved                                   ;store message offset
  1829                                                          jmp     ReportInterrupt                                 ;report interrupt
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                  ;
  1832                                  ;       INT27   Reserved
  1833                                  ;
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                                          menter  int27                                           ;(reserved)
  1836                                                          push    27                                              ;store interrupt nbr
  1837                                                          push    czIntReserved                                   ;store message offset
  1838                                                          jmp     ReportInterrupt                                 ;report interrupt
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                  ;
  1841                                  ;       INT28   Reserved
  1842                                  ;
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                                          menter  int28                                           ;(reserved)
  1845                                                          push    28                                              ;store interrupt nbr
  1846                                                          push    czIntReserved                                   ;store message offset
  1847                                                          jmp     ReportInterrupt                                 ;report interrupt
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                  ;
  1850                                  ;       INT29   Reserved
  1851                                  ;
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                                          menter  int29                                           ;(reserved)
  1854                                                          push    29                                              ;store interrupt nbr
  1855                                                          push    czIntReserved                                   ;store message offset
  1856                                                          jmp     ReportInterrupt                                 ;report interrupt
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                  ;
  1859                                  ;       INT30   Reserved
  1860                                  ;
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                                          menter  int30                                           ;(reserved)
  1863                                                          push    30                                              ;store interrupt nbr
  1864                                                          push    czIntReserved                                   ;store message offset
  1865                                                          jmp     ReportInterrupt                                 ;report interrupt
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                  ;
  1868                                  ;       INT31   Reserved
  1869                                  ;
  1870                                  ;-----------------------------------------------------------------------------------------------------------------------
  1871                                                          menter  int31                                           ;(reserved)
  1872                                                          push    31                                              ;store interrupt nbr
  1873                                                          push    czIntReserved                                   ;store message offset
  1874                                                          jmp     ReportInterrupt                                 ;report interrupt
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                  ;
  1877                                  ;       Routine:        ReportInterrupt
  1878                                  ;
  1879                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1880                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1881                                  ;
  1882                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  1883                                  ;                       [esp+12]        cs                                      stored by interrupt call
  1884                                  ;                       [esp+8]         eip                                     stored by interrupt call
  1885                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  1886                                  ;                       [esp+0]         error message address                   stored by push instructions
  1887                                  ;
  1888                                  ;       Out:            N/A             This routine does not exit.
  1889                                  ;
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1892                                                          push    es                                              ;save ES at time of interrupt
  1893                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1894                                                          mov     ebp,esp                                         ;ebp --> [EDI]
  1895                                  ;
  1896                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1897                                  ;
  1898                                  ;                       [ebp+56]        eflags
  1899                                  ;                       [ebp+52]        cs
  1900                                  ;                       [ebp+48]        eip
  1901                                  ;                       [ebp+44]        interrupt number (0-31)
  1902                                  ;                       [ebp+40]        error message address
  1903                                  ;                       [ebp+36]        ds
  1904                                  ;                       [ebp+32]        es
  1905                                  ;                       [ebp+28]        eax
  1906                                  ;                       [ebp+24]        ecx
  1907                                  ;                       [ebp+20]        edx
  1908                                  ;                       [ebp+16]        ebx
  1909                                  ;                       [ebp+12]        esp
  1910                                  ;                       [ebp+8]         ebp
  1911                                  ;                       [ebp+4]         esi
  1912                                  ;                       [ebp+0]         edi
  1913                                  ;
  1914                                                          push    cs                                              ;load code selector ...
  1915                                                          pop     ds                                              ;... into DS
  1916                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  1917                                                          pop     es                                              ;... into ES
  1918                                  ;
  1919                                  ;       Display the interrupt report boundary box
  1920                                  ;
  1921                                                          mov     cl,13                                           ;column
  1922                                                          mov     ch,6                                            ;row
  1923                                                          mov     dl,50                                           ;width
  1924                                                          mov     dh,8                                            ;height
  1925                                                          mov     bh,07h                                          ;attribute
  1926                                                          call    DrawTextDialogBox                               ;draw text dialog box
  1927                                  ;
  1928                                  ;       Display the report header
  1929                                  ;
  1930                                                          mov     cl,15                                           ;column
  1931                                                          mov     ch,7                                            ;row
  1932                                                          mov     esi,czIntHeader                                 ;interrupt message header
  1933                                                          call    SetConsoleString                                ;draw text string
  1934                                  ;
  1935                                  ;       Display the interrupt description label
  1936                                  ;
  1937                                                          mov     cl,15                                           ;column
  1938                                                          mov     ch,8                                            ;row
  1939                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  1940                                                          call    SetConsoleString                                ;draw text string
  1941                                  ;
  1942                                  ;       Display the interrupt number
  1943                                  ;
  1944                                                          mov     eax,[ebp+44]                                    ;interrupt number
  1945                                                          mov     cl,26                                           ;column
  1946                                                          mov     ch,8                                            ;row
  1947                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  1948                                  ;
  1949                                  ;       Display the interrupt name
  1950                                  ;
  1951                                                          mov     cl,29                                           ;column
  1952                                                          mov     ch,8                                            ;row
  1953                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  1954                                                          call    SetConsoleString                                ;display interrupt description
  1955                                  ;
  1956                                  ;       Display the register values header
  1957                                  ;
  1958                                                          mov     cl,15                                           ;column
  1959                                                          mov     ch,10                                           ;row
  1960                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  1961                                                          call    SetConsoleString                                ;draw text string
  1962                                  ;
  1963                                  ;       Display the EAX register label and value
  1964                                  ;
  1965                                                          mov     cl,15                                           ;column
  1966                                                          mov     ch,11                                           ;row
  1967                                                          mov     esi,czIntEAX                                    ;register EAX label
  1968                                                          call    SetConsoleString                                ;draw label
  1969                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  1970                                                          mov     cl,19                                           ;column
  1971                                                          mov     ch,11                                           ;row
  1972                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1973                                  ;
  1974                                  ;       Display the ECX register label and value
  1975                                  ;
  1976                                                          mov     cl,15                                           ;column
  1977                                                          mov     ch,12                                           ;row
  1978                                                          mov     esi,czIntECX                                    ;label
  1979                                                          call    SetConsoleString                                ;draw label
  1980                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  1981                                                          mov     cl,19                                           ;column
  1982                                                          mov     ch,12                                           ;row
  1983                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1984                                  ;
  1985                                  ;       Display the EDX register label and value
  1986                                  ;
  1987                                                          mov     cl,15                                           ;column
  1988                                                          mov     ch,13                                           ;row
  1989                                                          mov     esi,czIntEDX                                    ;label
  1990                                                          call    SetConsoleString                                ;draw label
  1991                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  1992                                                          mov     cl,19                                           ;column
  1993                                                          mov     ch,13                                           ;row
  1994                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1995                                  ;
  1996                                  ;       Display the EBX register label and value
  1997                                  ;
  1998                                                          mov     cl,15                                           ;column
  1999                                                          mov     ch,14                                           ;row
  2000                                                          mov     esi,czIntEBX                                    ;label
  2001                                                          call    SetConsoleString                                ;draw label
  2002                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2003                                                          mov     cl,19                                           ;column
  2004                                                          mov     ch,14                                           ;row
  2005                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2006                                  ;
  2007                                  ;       Display the ESI register label and value
  2008                                  ;
  2009                                                          mov     cl,29                                           ;column
  2010                                                          mov     ch,11                                           ;row
  2011                                                          mov     esi,czIntESI                                    ;label
  2012                                                          call    SetConsoleString                                ;draw label
  2013                                                          mov     eax,[ebp+4]                                     ;ESI
  2014                                                          mov     cl,33                                           ;column
  2015                                                          mov     ch,11                                           ;row
  2016                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2017                                  ;
  2018                                  ;       Display the EDI register label and value
  2019                                  ;
  2020                                                          mov     cl,29                                           ;column
  2021                                                          mov     ch,12                                           ;row
  2022                                                          mov     esi,czIntEDI                                    ;label
  2023                                                          call    SetConsoleString                                ;draw label
  2024                                                          mov     eax,[ebp+0]                                     ;EDI
  2025                                                          mov     cl,33                                           ;column
  2026                                                          mov     ch,12                                           ;row
  2027                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2028                                  ;
  2029                                  ;       Display the EBP register label and value
  2030                                  ;
  2031                                                          mov     cl,29                                           ;column
  2032                                                          mov     ch,13                                           ;row
  2033                                                          mov     esi,czIntEBP                                    ;label
  2034                                                          call    SetConsoleString                                ;draw label
  2035                                                          mov     eax,[ebp+8]                                     ;EBP
  2036                                                          mov     cl,33                                           ;column
  2037                                                          mov     ch,13                                           ;row
  2038                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2039                                  ;
  2040                                  ;       Display the DS register label and value
  2041                                  ;
  2042                                                          mov     cl,42                                           ;column
  2043                                                          mov     ch,11                                           ;row
  2044                                                          mov     esi,czIntDS                                     ;label
  2045                                                          call    SetConsoleString                                ;draw label
  2046                                                          xor     eax,eax                                         ;zero register
  2047                                                          mov     ax,[ebp+36]                                     ;DS
  2048                                                          mov     cl,46                                           ;column
  2049                                                          mov     ch,11                                           ;row
  2050                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2051                                  ;
  2052                                  ;       Display the ES register label and value
  2053                                  ;
  2054                                                          mov     cl,42                                           ;column
  2055                                                          mov     ch,12                                           ;row
  2056                                                          mov     esi,czIntES                                     ;label
  2057                                                          call    SetConsoleString                                ;draw label
  2058                                                          xor     eax,eax                                         ;zero register
  2059                                                          mov     ax,[ebp+32]                                     ;ES
  2060                                                          mov     cl,46                                           ;column
  2061                                                          mov     ch,12                                           ;row
  2062                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2063                                  ;
  2064                                  ;       Display the SS register label and value
  2065                                  ;
  2066                                                          mov     cl,42                                           ;column
  2067                                                          mov     ch,13                                           ;row
  2068                                                          mov     esi,czIntSS                                     ;label
  2069                                                          call    SetConsoleString                                ;draw label
  2070                                                          xor     eax,eax                                         ;zero register
  2071                                                          mov     ax,ss                                           ;SS
  2072                                                          mov     cl,46                                           ;column
  2073                                                          mov     ch,13                                           ;row
  2074                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2075                                  ;
  2076                                  ;       Display the CS register lable and value
  2077                                  ;
  2078                                                          mov     cl,42                                           ;column
  2079                                                          mov     ch,14                                           ;row
  2080                                                          mov     esi,czIntCS                                     ;label
  2081                                                          call    SetConsoleString                                ;draw label
  2082                                                          xor     eax,eax                                         ;zero register
  2083                                                          mov     ax,[ebp+52]                                     ;CS
  2084                                                          mov     cl,46                                           ;column
  2085                                                          mov     ch,14                                           ;row
  2086                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2087                                  ;
  2088                                  ;       Display the EFLAGS register label and value
  2089                                  ;
  2090                                                          mov     cl,51                                           ;column
  2091                                                          mov     ch,11                                           ;row
  2092                                                          mov     esi,czIntEFLAGS                                 ;label
  2093                                                          call    SetConsoleString                                ;draw label
  2094                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2095                                                          mov     cl,55                                           ;column
  2096                                                          mov     ch,11                                           ;row
  2097                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2098                                  ;
  2099                                  ;       Display the ESP register label and value
  2100                                  ;
  2101                                                          mov     cl,51                                           ;column
  2102                                                          mov     ch,13                                           ;row
  2103                                                          mov     esi,czIntESP                                    ;label
  2104                                                          call    SetConsoleString                                ;draw label
  2105                                                          mov     eax,[ebp+12]                                    ;ESP
  2106                                                          mov     cl,55                                           ;column
  2107                                                          mov     ch,13                                           ;row
  2108                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2109                                  ;
  2110                                  ;       Display the EIP register label and value
  2111                                  ;
  2112                                                          mov     cl,51                                           ;column
  2113                                                          mov     ch,14                                           ;row
  2114                                                          mov     esi,czIntEIP                                    ;label
  2115                                                          call    SetConsoleString                                ;draw label
  2116                                                          mov     eax,[ebp+48]                                    ;EIP
  2117                                                          mov     cl,55                                           ;column
  2118                                                          mov     ch,14                                           ;row
  2119                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2120                                  ;
  2121                                  ;       Halt and loop until reset
  2122                                  ;
  2123                                  .10                     sti                                                     ;enable maskable interrupts
  2124                                                          hlt                                                     ;halt processor
  2125                                                          jmp     .10                                             ;resume on interrupt
  2126                                  ;-----------------------------------------------------------------------------------------------------------------------
  2127                                  ;
  2128                                  ;       Processor Interrupt Name Strings
  2129                                  ;
  2130                                  ;-----------------------------------------------------------------------------------------------------------------------
  2131                                  czIntDivideByZero       db      "Division by zero",0
  2132                                  czIntSingleStep         db      "Single step",0
  2133                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2134                                  czIntBreak              db      "Break",0
  2135                                  czIntInto               db      "Into",0
  2136                                  czIntBounds             db      "Bounds",0
  2137                                  czIntBadOpCode          db      "Bad Operation Code",0
  2138                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2139                                  czIntDoubleFault        db      "Double Fault",0
  2140                                  czIntOperand            db      "Operand",0
  2141                                  czIntBadTSS             db      "Bad Task State Segment",0
  2142                                  czIntNotPresent         db      "Not Present",0
  2143                                  czIntStackLimit         db      "Stack Limit",0
  2144                                  czIntProtection         db      "General Protection Fault",0
  2145                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2146                                  czIntReserved           db      "Reserved",0
  2147                                  ;-----------------------------------------------------------------------------------------------------------------------
  2148                                  ;
  2149                                  ;       Processor Interrupt Handling Strings
  2150                                  ;
  2151                                  ;-----------------------------------------------------------------------------------------------------------------------
  2152                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2153                                  czIntLabel              db      "Interrupt #",0
  2154                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2155                                  czIntEAX                db      "EAX:",0
  2156                                  czIntECX                db      "ECX:",0
  2157                                  czIntEDX                db      "EDX:",0
  2158                                  czIntEBX                db      "EBX:",0
  2159                                  czIntESI                db      "ESI:",0
  2160                                  czIntEDI                db      "EDI:",0
  2161                                  czIntEBP                db      "EBP:",0
  2162                                  czIntESP                db      "ESP:",0
  2163                                  czIntDS                 db      " DS:",0
  2164                                  czIntES                 db      " ES:",0
  2165                                  czIntSS                 db      " SS:",0
  2166                                  czIntCS                 db      " CS:",0
  2167                                  czIntEFLAGS             db      "FLG:",0
  2168                                  czIntEIP                db      "EIP:",0
  2169                                  ;-----------------------------------------------------------------------------------------------------------------------
  2170                                  ;
  2171                                  ;       Routine:        DrawTextDialogBox
  2172                                  ;
  2173                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2174                                  ;
  2175                                  ;       In:             CL      upper left column (0-79)
  2176                                  ;                       CH      upper left row (0-24)
  2177                                  ;                       DL      column width, excluding border
  2178                                  ;                       DH      row height, excluding border
  2179                                  ;                       BH      color attribute
  2180                                  ;
  2181                                  ;-----------------------------------------------------------------------------------------------------------------------
  2182                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2183                                                          push    esi                                             ;
  2184                                                          push    edi                                             ;
  2185                                                          push    es                                              ;
  2186                                                          push    EGDTCGA                                         ;load CGA selector ...
  2187                                                          pop     es                                              ;... into ES
  2188                                  ;
  2189                                  ;       Compute target display offset
  2190                                  ;
  2191                                                          xor     eax,eax                                         ;zero register
  2192                                                          mov     al,ch                                           ;row
  2193                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2194                                                          mul     ah                                              ;row offset
  2195                                                          add     al,cl                                           ;add column
  2196                                                          adc     ah,0                                            ;add overflow
  2197                                                          add     al,cl                                           ;add column
  2198                                                          adc     ah,0                                            ;add overflow
  2199                                                          mov     edi,eax                                         ;target row offset
  2200                                  ;
  2201                                  ;       Display top border row
  2202                                  ;
  2203                                                          push    edi                                             ;save target row offset
  2204                                                          mov     ah,bh                                           ;attribute
  2205                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2206                                                          stosw                                                   ;display character and attribute
  2207                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2208                                                          xor     ecx,ecx                                         ;zero register
  2209                                                          mov     cl,dl                                           ;width, excluding border
  2210                                                          rep     stosw                                           ;display horizontal border
  2211                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2212                                                          stosw                                                   ;display character and attribute
  2213                                                          pop     edi                                             ;restore target row offset
  2214                                                          add     edi,ECONROWBYTES                                ;next row
  2215                                  ;
  2216                                  ;       Display dialog box body rows
  2217                                  ;
  2218                                                          xor     ecx,ecx                                         ;zero register
  2219                                                          mov     cl,dh                                           ;height, excluding border
  2220                                  .10                     push    ecx                                             ;save remaining rows
  2221                                                          push    edi                                             ;save target row offset
  2222                                                          mov     ah,bh                                           ;attribute
  2223                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2224                                                          stosw                                                   ;display character and attribute
  2225                                                          mov     al,EASCIISPACE                                  ;space
  2226                                                          xor     ecx,ecx                                         ;zero register
  2227                                                          mov     cl,dl                                           ;width, excluding border
  2228                                                          rep     stosw                                           ;display row
  2229                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2230                                                          stosw                                                   ;display character and attribute
  2231                                                          pop     edi                                             ;restore target row offset
  2232                                                          add     edi,ECONROWBYTES                                ;next row
  2233                                                          pop     ecx                                             ;remaining rows
  2234                                                          loop    .10                                             ;next row
  2235                                  ;
  2236                                  ;       Display bottom border row
  2237                                  ;
  2238                                                          push    edi                                             ;save target row offset
  2239                                                          mov     ah,bh                                           ;attribute
  2240                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2241                                                          stosw                                                   ;display character and attribute
  2242                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2243                                                          xor     ecx,ecx                                         ;zero register
  2244                                                          mov     cl,dl                                           ;width, excluding border
  2245                                                          rep     stosw                                           ;display horizontal border
  2246                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2247                                                          stosw                                                   ;display character and attribute
  2248                                                          pop     edi                                             ;restore target row offset
  2249                                                          add     edi,ECONROWBYTES                                ;next row
  2250                                  ;
  2251                                  ;       Restore and return
  2252                                  ;
  2253                                                          pop     es                                              ;restore non-volatile regs
  2254                                                          pop     edi                                             ;
  2255                                                          pop     esi                                             ;
  2256                                                          pop     ecx                                             ;
  2257                                                          ret                                                     ;return
  2258                                  ;=======================================================================================================================
  2259                                  ;
  2260                                  ;       Hardware Device Interupts
  2261                                  ;
  2262                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2263                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2264                                  ;       (BX=2028h).
  2265                                  ;
  2266                                  ;=======================================================================================================================
  2267                                  ;-----------------------------------------------------------------------------------------------------------------------
  2268                                  ;
  2269                                  ;       IRQ0    Clock Tick Interrupt
  2270                                  ;
  2271                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2272                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2273                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2274                                  ;
  2275                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2276                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2277                                  ;
  2278                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2279                                  ;       zero, the floppy disk motors are turned off.
  2280                                  ;
  2281                                  ;-----------------------------------------------------------------------------------------------------------------------
  2282                                                          menter  clocktick                                       ;clock tick interrupt
  2283                                                          push    eax                                             ;save modified regs
  2284                                                          push    edx                                             ;
  2285                                                          push    ds                                              ;
  2286                                  ;
  2287                                  ;       Update the clock tick count and the elapsed days as needed.
  2288                                  ;
  2289                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2290                                                          pop     ds                                              ;... into data segment register
  2291                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2292                                                          inc     eax                                             ;increment clock ticks
  2293                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2294                                                          jb      irq0.10                                         ;no, skip ahead
  2295                                                          inc     byte [wbClockDays]                              ;increment clock days
  2296                                                          xor     eax,eax                                         ;reset clock ticks
  2297                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2298                                  ;
  2299                                  ;       Decrement floppy disk motor timeout.
  2300                                  ;
  2301                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2302                                                          je      irq0.20                                         ;yes, skip ahead
  2303                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2304                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2305                                  ;
  2306                                  ;       Turn off the floppy disk motor if appropriate.
  2307                                  ;
  2308                                                          sti                                                     ;enable maskable interrupts
  2309                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2310                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2311                                                          in      al,dx                                           ;FDC main status byte
  2312                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2313                                                          jnz     irq0.15                                         ;wait while busy
  2314                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2315                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2316                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2317                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2318                                                          out     dx,al                                           ;turn motor off
  2319                                  ;
  2320                                  ;       Signal the end of the hardware interrupt.
  2321                                  ;
  2322                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2323                                  ;
  2324                                  ;       Restore and return.
  2325                                  ;
  2326                                                          pop     ds                                              ;restore modified regs
  2327                                                          pop     edx                                             ;
  2328                                                          pop     eax                                             ;
  2329                                                          iretd                                                   ;return
  2330                                  ;-----------------------------------------------------------------------------------------------------------------------
  2331                                  ;
  2332                                  ;       IRQ1    Keyboard Interrupt
  2333                                  ;
  2334                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2335                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2336                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2337                                  ;       ALL modified registers upon return.
  2338                                  ;
  2339                                  ;-----------------------------------------------------------------------------------------------------------------------
  2340                                                          menter  keyboard                                        ;keyboard interrrupt
  2341                                                          push    eax                                             ;save non-volatile regs
  2342                                                          push    ebx                                             ;
  2343                                                          push    ecx                                             ;
  2344                                                          push    esi                                             ;
  2345                                                          push    ds                                              ;
  2346                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2347                                                          pop     ds                                              ;... into data segment register
  2348                                                          xor     al,al                                           ;zero
  2349                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2350                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2351                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2352                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2353                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2354                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2355                                                          mov     al,' '                                          ;space
  2356                                                          mov     [wbConsoleChar],al                              ;set character to space
  2357                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2358                                                          not     al                                              ;controller timeout mask
  2359                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2360                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2361                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2362                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2363                                                          jz      irq1.140                                        ;yes, skip ahead
  2364                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2365                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2366                                                          mov     ah,al                                           ;copy scan code 0
  2367                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2368                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2369                                                          je      irq1.30                                         ;yes, set flag
  2370                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2371                                                          je      irq1.40                                         ;yes, reset flag
  2372                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2373                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2374                                                          je      irq1.30                                         ;yes, set flag
  2375                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2376                                                          je      irq1.40                                         ;yes, reset flag
  2377                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2378                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2379                                                          je      irq1.30                                         ;yes, set flag
  2380                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2381                                                          je      irq1.40                                         ;yes, reset flag
  2382                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2383                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2384                                                          je      irq1.30                                         ;yes, set flag
  2385                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2386                                                          je      irq1.40                                         ;yes, reset flag
  2387                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2388                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2389                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2390                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2391                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2392                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2393                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2394                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2395                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2396                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2397                                                          jne     irq1.70                                         ;no, skip ahead
  2398                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2399                                                          jz      irq1.140                                        ;yes, skip ahead
  2400                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2401                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2402                                                          mov     ah,al                                           ;copy scan code 1
  2403                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2404                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2405                                                          je      irq1.30                                         ;yes, set flag
  2406                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2407                                                          je      irq1.40                                         ;yes, reset flag
  2408                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2409                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2410                                                          je      irq1.30                                         ;yes, set flag
  2411                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2412                                                          je      irq1.40                                         ;yes, reset flag
  2413                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2414                                                          je      irq1.80                                         ;yes, skip ahead
  2415                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2416                                                          je      irq1.80                                         ;yes, skip ahead
  2417                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2418                                                          je      irq1.10                                         ;yes, continue
  2419                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2420                                                          jne     irq1.20                                         ;no, skip ahead
  2421                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2422                                                          jz      irq1.140                                        ;yes, skip ahead
  2423                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2424                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2425                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2426                                                          jz      irq1.140                                        ;yes, skip ahead
  2427                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2428                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2429                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2430                                  irq1.30                 or      bl,al                                           ;set shift flag
  2431                                                          jmp     irq1.60                                         ;skip ahead
  2432                                  irq1.40                 not     al                                              ;convert flag to mask
  2433                                                          and     bl,al                                           ;reset shift flag
  2434                                                          jmp     irq1.60                                         ;skip ahead
  2435                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2436                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2437                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2438                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2439                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2440                                                          jmp     irq1.150                                        ;finish keyboard handling
  2441                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2442                                                          jne     irq1.80                                         ;no continue
  2443                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2444                                                          jz      irq1.140                                        ;yes, skip ahead
  2445                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2446                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2447                                                          mov     ah,al                                           ;copy scan code 1
  2448                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2449                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2450                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2451                                                          jz      irq1.140                                        ;yes, skip ahead
  2452                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2453                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2454                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2455                                                          jz      irq1.140                                        ;yes, skip ahead
  2456                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2457                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2458                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2459                                                          jz      irq1.140                                        ;yes, skip ahead
  2460                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2461                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2462                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2463                                                          jz      irq1.140                                        ;yes, skip ahead
  2464                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2465                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2466                                                          jmp     irq1.150                                        ;continue
  2467                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2468                                                          test    ah,EKEYBUP                                      ;release code?
  2469                                                          jnz     irq1.130                                        ;yes, skip ahead
  2470                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2471                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2472                                                          jz      irq1.90                                         ;no, skip ahead
  2473                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2474                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2475                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2476                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2477                                                          jz      irq1.100                                        ;no skip ahead
  2478                                                          mov     cl,al                                           ;copy ASCII code
  2479                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2480                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2481                                                          jb      irq1.100                                        ;yes, skip ahead
  2482                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2483                                                          ja      irq1.100                                        ;yes, skip ahead
  2484                                                          xor     al,EASCIICASE                                   ;switch case
  2485                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2486                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2487                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2488                                                          jz      irq1.120                                        ;no, skip ahead
  2489                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2490                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2491                                                          or      edx,eax                                         ;msg id and codes
  2492                                                          xor     ecx,ecx                                         ;null param
  2493                                                          push    eax                                             ;save codes
  2494                                                          call    PutMessage                                      ;put message to console
  2495                                                          pop     eax                                             ;restore codes
  2496                                                          test    al,al                                           ;ASCII translation?
  2497                                                          jz      irq1.130                                        ;no, skip ahead
  2498                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2499                                                          and     eax,0FFFFh                                      ;clear high-order word
  2500                                                          or      edx,eax                                         ;msg id and codes
  2501                                                          xor     ecx,ecx                                         ;null param
  2502                                                          call    PutMessage                                      ;put message to console
  2503                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2504                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2505                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2506                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2507                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2508                                                          pop     ds                                              ;restore non-volatile regs
  2509                                                          pop     esi                                             ;
  2510                                                          pop     ecx                                             ;
  2511                                                          pop     ebx                                             ;
  2512                                                          pop     eax                                             ;
  2513                                                          iretd                                                   ;return
  2514                                  ;-----------------------------------------------------------------------------------------------------------------------
  2515                                  ;       Scan-Code to ASCII Translation Tables
  2516                                  ;-----------------------------------------------------------------------------------------------------------------------
  2517                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2518                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2519                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2520                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2521                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2522                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2523                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2524                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2525                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2526                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2527                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2528                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2529                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2530                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2531                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2532                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2533                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2534                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2535                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2536                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2537                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2538                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2539                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2540                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2541                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2542                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2543                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2544                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2545                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2546                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2547                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2548                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2549                                  ;-----------------------------------------------------------------------------------------------------------------------
  2550                                  ;
  2551                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2552                                  ;
  2553                                  ;-----------------------------------------------------------------------------------------------------------------------
  2554                                                          menter  iochannel                                       ;secondary 8259A cascade
  2555                                                          push    eax                                             ;save modified regs
  2556                                                          jmp     hwint                                           ;end interrupt and return
  2557                                  ;-----------------------------------------------------------------------------------------------------------------------
  2558                                  ;
  2559                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2560                                  ;
  2561                                  ;-----------------------------------------------------------------------------------------------------------------------
  2562                                                          menter  com2                                            ;serial port 2 interrupt
  2563                                                          push    eax                                             ;save modified regs
  2564                                                          jmp     hwint                                           ;end interrupt and return
  2565                                  ;-----------------------------------------------------------------------------------------------------------------------
  2566                                  ;
  2567                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2568                                  ;
  2569                                  ;-----------------------------------------------------------------------------------------------------------------------
  2570                                                          menter  com1                                            ;serial port 1 interrupt
  2571                                                          push    eax                                             ;save modified regs
  2572                                                          jmp     hwint                                           ;end interrupt and return
  2573                                  ;-----------------------------------------------------------------------------------------------------------------------
  2574                                  ;
  2575                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2576                                  ;
  2577                                  ;-----------------------------------------------------------------------------------------------------------------------
  2578                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2579                                                          push    eax                                             ;save modified regs
  2580                                                          jmp     hwint                                           ;end interrupt and return
  2581                                  ;-----------------------------------------------------------------------------------------------------------------------
  2582                                  ;
  2583                                  ;       IRQ6    Diskette Hardware Interrupt
  2584                                  ;
  2585                                  ;-----------------------------------------------------------------------------------------------------------------------
  2586                                                          menter  diskette                                        ;floppy disk interrupt
  2587                                                          push    eax                                             ;save non-volatile regs
  2588                                                          push    ds                                              ;
  2589                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2590                                                          pop     ds                                              ;... into DS register
  2591                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2592                                                          or      al,10000000b                                    ;set IRQ flag
  2593                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2594                                                          pop     ds                                              ;restore non-volatile regs
  2595                                                          jmp     hwint                                           ;end primary PIC interrupt
  2596                                  ;-----------------------------------------------------------------------------------------------------------------------
  2597                                  ;
  2598                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2599                                  ;
  2600                                  ;-----------------------------------------------------------------------------------------------------------------------
  2601                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2602                                                          push    eax                                             ;save modified regs
  2603                                                          jmp     hwint                                           ;end interrupt and return
  2604                                  ;-----------------------------------------------------------------------------------------------------------------------
  2605                                  ;
  2606                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2607                                  ;
  2608                                  ;-----------------------------------------------------------------------------------------------------------------------
  2609                                                          menter  rtclock                                         ;real-time clock interrupt
  2610                                                          push    eax                                             ;save modified regs
  2611                                                          jmp     hwwint                                          ;end interrupt and return
  2612                                  ;-----------------------------------------------------------------------------------------------------------------------
  2613                                  ;
  2614                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2615                                  ;
  2616                                  ;-----------------------------------------------------------------------------------------------------------------------
  2617                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2618                                                          push    eax                                             ;save modified regs
  2619                                                          jmp     hwwint                                          ;end interrupt and return
  2620                                  ;-----------------------------------------------------------------------------------------------------------------------
  2621                                  ;
  2622                                  ;       IRQ10   Reserved Hardware Interrupt
  2623                                  ;
  2624                                  ;-----------------------------------------------------------------------------------------------------------------------
  2625                                                          menter  irq10                                           ;reserved
  2626                                                          push    eax                                             ;save modified regs
  2627                                                          jmp     hwwint                                          ;end interrupt and return
  2628                                  ;-----------------------------------------------------------------------------------------------------------------------
  2629                                  ;
  2630                                  ;       IRQ11   Reserved Hardware Interrupt
  2631                                  ;
  2632                                  ;-----------------------------------------------------------------------------------------------------------------------
  2633                                                          menter  irq11                                           ;reserved
  2634                                                          push    eax                                             ;save modified regs
  2635                                                          jmp     hwwint                                          ;end interrupt and return
  2636                                  ;-----------------------------------------------------------------------------------------------------------------------
  2637                                  ;
  2638                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2639                                  ;
  2640                                  ;-----------------------------------------------------------------------------------------------------------------------
  2641                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2642                                                          push    eax                                             ;save modified regs
  2643                                                          jmp     hwwint                                          ;end interrupt and return
  2644                                  ;-----------------------------------------------------------------------------------------------------------------------
  2645                                  ;
  2646                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2647                                  ;
  2648                                  ;-----------------------------------------------------------------------------------------------------------------------
  2649                                                          menter  coprocessor                                     ;coprocessor interrupt
  2650                                                          push    eax                                             ;save modified regs
  2651                                                          jmp     hwwint                                          ;end interrupt and return
  2652                                  ;-----------------------------------------------------------------------------------------------------------------------
  2653                                  ;
  2654                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2655                                  ;
  2656                                  ;-----------------------------------------------------------------------------------------------------------------------
  2657                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2658                                                          push    eax                                             ;save modified regs
  2659                                                          jmp     hwwint                                          ;end interrupt and return
  2660                                  ;-----------------------------------------------------------------------------------------------------------------------
  2661                                  ;
  2662                                  ;       IRQ15   Reserved Hardware Interrupt
  2663                                  ;
  2664                                  ;-----------------------------------------------------------------------------------------------------------------------
  2665                                                          menter  irq15                                           ;reserved
  2666                                                          push    eax                                             ;save modified regs
  2667                                                          jmp     hwwint                                          ;end interrupt and return
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669                                  ;
  2670                                  ;       Exit from hardware interrupt
  2671                                  ;
  2672                                  ;-----------------------------------------------------------------------------------------------------------------------
  2673                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2674                                                          jmp     hwint90                                         ;skip ahead
  2675                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2676                                  hwint90                 pop     eax                                             ;restore modified regs
  2677                                                          iretd                                                   ;return from interrupt
  2678                                  ;-----------------------------------------------------------------------------------------------------------------------
  2679                                  ;
  2680                                  ;       INT 30h Operating System Software Service Interrupt
  2681                                  ;
  2682                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2683                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2684                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2685                                  ;       the entry address of the specific function from a table.
  2686                                  ;
  2687                                  ;-----------------------------------------------------------------------------------------------------------------------
  2688                                                          menter  svc
  2689                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2690                                                          jae     svc90                                           ;yes, skip ahead
  2691                                                          movzx   eax,al                                          ;function
  2692                                                          shl     eax,2                                           ;offset into table
  2693                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2694                                  svc90                   iretd                                                   ;return from interrupt
  2695                                  ;-----------------------------------------------------------------------------------------------------------------------
  2696                                  ;
  2697                                  ;       Service Request Table
  2698                                  ;
  2699                                  ;
  2700                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2701                                  ;
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2704                                                          tsvce   CompareMemory                                   ;compare memory
  2705                                                          tsvce   GetConsoleString                                ;get string input
  2706                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2707                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2708                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2709                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2710                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2711                                                          tsvce   UpperCaseString                                 ;upper-case string
  2712                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2713                                  ;-----------------------------------------------------------------------------------------------------------------------
  2714                                  ;
  2715                                  ;       Service Request Macros
  2716                                  ;
  2717                                  ;       These macros provide positional parameterization of service request calls.
  2718                                  ;
  2719                                  ;-----------------------------------------------------------------------------------------------------------------------
  2720                                  %macro                  clearConsoleScreen 0
  2721                                                          mov     al,eClearConsoleScreen                          ;function code
  2722                                                          int     _svc                                            ;invoke OS service
  2723                                  %endmacro
  2724                                  %macro                  compareMemory 0
  2725                                                          mov     al,eCompareMemory                               ;function code
  2726                                                          int     _svc                                            ;invoke OS service
  2727                                  %endmacro
  2728                                  %macro                  getConsoleString 4
  2729                                                          mov     edx,%1                                          ;buffer address
  2730                                                          mov     ecx,%2                                          ;max characters
  2731                                                          mov     bh,%3                                           ;echo indicator
  2732                                                          mov     bl,%4                                           ;terminator
  2733                                                          mov     al,eGetConsoleString                            ;function code
  2734                                                          int     _svc                                            ;invoke OS service
  2735                                  %endmacro
  2736                                  %macro                  hexadecimalToUnsigned 0
  2737                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2738                                                          int     _svc                                            ;invoke OS service
  2739                                  %endmacro
  2740                                  %macro                  placeCursor 0
  2741                                                          mov     al,ePlaceCursor                                 ;function code
  2742                                                          int     _svc                                            ;invoke OS service
  2743                                  %endmacro
  2744                                  %macro                  putConsoleString 1
  2745                                                          mov     edx,%1                                          ;string address
  2746                                                          mov     al,ePutConsoleString                            ;function code
  2747                                                          int     _svc                                            ;invoke OS service
  2748                                  %endmacro
  2749                                  %macro                  resetSystem 0
  2750                                                          mov     al,eResetSystem                                 ;function code
  2751                                                          int     _svc                                            ;invoke OS service
  2752                                  %endmacro
  2753                                  %macro                  unsignedToHexadecimal 0
  2754                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2755                                                          int     _svc                                            ;invoke OS service
  2756                                  %endmacro
  2757                                  %macro                  upperCaseString 0
  2758                                                          mov     al,eUpperCaseString                             ;function code
  2759                                                          int     _svc                                            ;invoke OS service
  2760                                  %endmacro
  2761                                  ;=======================================================================================================================
  2762                                  ;
  2763                                  ;       Kernel Function Library
  2764                                  ;
  2765                                  ;=======================================================================================================================
  2766                                  ;=======================================================================================================================
  2767                                  ;
  2768                                  ;       String Helper Routines
  2769                                  ;
  2770                                  ;       CompareMemory
  2771                                  ;       UpperCaseString
  2772                                  ;
  2773                                  ;=======================================================================================================================
  2774                                  ;-----------------------------------------------------------------------------------------------------------------------
  2775                                  ;
  2776                                  ;       Routine:        CompareMemory
  2777                                  ;
  2778                                  ;       Description:    This routine compares two byte arrays.
  2779                                  ;
  2780                                  ;       In:             DS:EDX  first source address
  2781                                  ;                       DS:EBX  second source address
  2782                                  ;                       ECX     comparison length
  2783                                  ;
  2784                                  ;       Out:            EDX     first source address
  2785                                  ;                       EBX     second source address
  2786                                  ;                       ECX     0       array 1 = array 2
  2787                                  ;                               <0      array 1 < array 2
  2788                                  ;                               >0      array 1 > array 2
  2789                                  ;
  2790                                  ;-----------------------------------------------------------------------------------------------------------------------
  2791                                  CompareMemory           push    esi                                             ;save non-volatile regs
  2792                                                          push    edi                                             ;
  2793                                                          push    es                                              ;
  2794                                                          push    ds                                              ;copy DS
  2795                                                          pop     es                                              ;... to ES
  2796                                                          mov     esi,edx                                         ;first source address
  2797                                                          mov     edi,ebx                                         ;second source address
  2798                                                          cld                                                     ;forward strings
  2799                                                          rep     cmpsb                                           ;compare bytes
  2800                                                          mov     al,0                                            ;default result
  2801                                                          jz      .10                                             ;branch if arrays equal
  2802                                                          mov     al,1                                            ;positive result
  2803                                                          jnc     .10                                             ;branch if target > source
  2804                                                          mov     al,-1                                           ;negative result
  2805                                  .10                     movsx   ecx,al                                          ;extend sign
  2806                                                          pop     es                                              ;restore non-volatile regs
  2807                                                          pop     edi                                             ;
  2808                                                          pop     esi                                             ;
  2809                                                          ret                                                     ;return
  2810                                  ;-----------------------------------------------------------------------------------------------------------------------
  2811                                  ;
  2812                                  ;       Routine:        UpperCaseString
  2813                                  ;
  2814                                  ;       Description:    This routine places all characters in the given string to upper case.
  2815                                  ;
  2816                                  ;       In:             DS:EDX  string address
  2817                                  ;
  2818                                  ;       Out:            EDX     string address
  2819                                  ;
  2820                                  ;-----------------------------------------------------------------------------------------------------------------------
  2821                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  2822                                                          mov     esi,edx                                         ;string address
  2823                                                          cld                                                     ;forward strings
  2824                                  .10                     lodsb                                                   ;string character
  2825                                                          test    al,al                                           ;null?
  2826                                                          jz      .20                                             ;yes, skip ahead
  2827                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2828                                                          jb      .10                                             ;no, continue
  2829                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2830                                                          ja      .10                                             ;no, continue
  2831                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  2832                                                          mov     [esi-1],al                                      ;upper character
  2833                                                          jmp     .10                                             ;continue
  2834                                  .20                     pop     esi                                             ;restore non-volatile regs
  2835                                                          ret                                                     ;return
  2836                                  ;=======================================================================================================================
  2837                                  ;
  2838                                  ;       Console Helper Routines
  2839                                  ;
  2840                                  ;       FirstConsoleColumn
  2841                                  ;       GetConsoleChar
  2842                                  ;       GetConsoleString
  2843                                  ;       NextConsoleColumn
  2844                                  ;       NextConsoleRow
  2845                                  ;       PreviousConsoleColumn
  2846                                  ;       PutConsoleChar
  2847                                  ;       PutConsoleHexByte
  2848                                  ;       PutConsoleHexDword
  2849                                  ;       PutConsoleHexWord
  2850                                  ;       PutConsoleOIAChar
  2851                                  ;       PutConsoleOIAShift
  2852                                  ;       PutConsoleString
  2853                                  ;       Yield
  2854                                  ;
  2855                                  ;=======================================================================================================================
  2856                                  ;-----------------------------------------------------------------------------------------------------------------------
  2857                                  ;
  2858                                  ;       Routine:        FirstConsoleColumn
  2859                                  ;
  2860                                  ;       Description:    This routine resets the console column to start of the row.
  2861                                  ;
  2862                                  ;       In:             DS      OS data selector
  2863                                  ;
  2864                                  ;-----------------------------------------------------------------------------------------------------------------------
  2865                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2866                                                          mov     [wbConsoleColumn],al                            ;save column
  2867                                                          ret                                                     ;return
  2868                                  ;-----------------------------------------------------------------------------------------------------------------------
  2869                                  ;
  2870                                  ;       Routine:        GetConsoleChar
  2871                                  ;
  2872                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2873                                  ;
  2874                                  ;       Out:            AL      ASCII character code
  2875                                  ;                       AH      keyboard scan code
  2876                                  ;
  2877                                  ;-----------------------------------------------------------------------------------------------------------------------
  2878                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2879                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  2880                                                          or      eax,eax                                         ;do we have a message?
  2881                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  2882                                                          push    eax                                             ;save key codes
  2883                                                          and     eax,0FFFF0000h                                  ;mask for message type
  2884                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2885                                                          pop     eax                                             ;restore key codes
  2886                                                          jne     GetConsoleChar                                  ;no, try again
  2887                                                          and     eax,0000ffffh                                   ;mask for key codes
  2888                                                          ret                                                     ;return
  2889                                  ;-----------------------------------------------------------------------------------------------------------------------
  2890                                  ;
  2891                                  ;       Routine:        GetConsoleString
  2892                                  ;
  2893                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2894                                  ;
  2895                                  ;       In:             DS:EDX  target buffer address
  2896                                  ;                       ECX     maximum number of characters to accept
  2897                                  ;                       BH      echo to terminal
  2898                                  ;                       BL      terminating character
  2899                                  ;
  2900                                  ;-----------------------------------------------------------------------------------------------------------------------
  2901                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  2902                                                          push    esi                                             ;
  2903                                                          push    edi                                             ;
  2904                                                          push    es                                              ;
  2905                                                          push    ds                                              ;load data segment selector ...
  2906                                                          pop     es                                              ;... into extra segment register
  2907                                                          mov     edi,edx                                         ;edi = target buffer
  2908                                                          push    ecx                                             ;save maximum characters
  2909                                                          xor     al,al                                           ;zero register
  2910                                                          cld                                                     ;forward strings
  2911                                                          rep     stosb                                           ;zero fill buffer
  2912                                                          pop     ecx                                             ;maximum characters
  2913                                                          mov     edi,edx                                         ;edi = target buffer
  2914                                                          mov     esi,edx                                         ;esi = target buffer
  2915                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  2916                                  .20                     call    GetConsoleChar                                  ;al = next input char
  2917                                                          cmp     al,bl                                           ;is this the terminator?
  2918                                                          je      .50                                             ;yes, exit
  2919                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2920                                                          jne     .30                                             ;no, skip ahead
  2921                                                          cmp     esi,edi                                         ;at start of buffer?
  2922                                                          je      .20                                             ;yes, get next character
  2923                                                          dec     edi                                             ;backup target pointer
  2924                                                          mov     byte [edi],0                                    ;zero previous character
  2925                                                          inc     ecx                                             ;increment remaining chars
  2926                                                          test    bh,1                                            ;echo to console?
  2927                                                          jz      .20                                             ;no, get next character
  2928                                                          call    PreviousConsoleColumn                           ;backup console position
  2929                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2930                                                          call    PutConsoleChar                                  ;write space to console
  2931                                                          call    PlaceCursor                                     ;position the cursor
  2932                                                          jmp     .20                                             ;get next character
  2933                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2934                                                          jb      .20                                             ;no, get another character
  2935                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2936                                                          ja      .20                                             ;no, get another character
  2937                                                          stosb                                                   ;store character in buffer
  2938                                                          test    bh,1                                            ;echo to console?
  2939                                                          jz      .40                                             ;no, skip ahead
  2940                                                          call    PutConsoleChar                                  ;write character to console
  2941                                                          call    NextConsoleColumn                               ;advance console position
  2942                                                          call    PlaceCursor                                     ;position the cursor
  2943                                  .40                     dec     ecx                                             ;decrement remaining chars
  2944                                                          jmp     .10                                             ;next
  2945                                  .50                     xor     al,al                                           ;null
  2946                                                          stosb                                                   ;terminate buffer
  2947                                                          pop     es                                              ;restore non-volatile regs
  2948                                                          pop     edi                                             ;
  2949                                                          pop     esi                                             ;
  2950                                                          pop     ecx                                             ;
  2951                                                          ret                                                     ;return
  2952                                  ;-----------------------------------------------------------------------------------------------------------------------
  2953                                  ;
  2954                                  ;       Routine:        NextConsoleColumn
  2955                                  ;
  2956                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2957                                  ;                       incremented if the end of the current row is reached.
  2958                                  ;
  2959                                  ;       In:             DS      OS data selector
  2960                                  ;
  2961                                  ;-----------------------------------------------------------------------------------------------------------------------
  2962                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2963                                                          inc     al                                              ;increment column
  2964                                                          mov     [wbConsoleColumn],al                            ;save column
  2965                                                          cmp     al,ECONCOLS                                     ;end of row?
  2966                                                          jb      .10                                             ;no, skip ahead
  2967                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2968                                                          call    NextConsoleRow                                  ;line feed to next row
  2969                                  .10                     ret                                                     ;return
  2970                                  ;-----------------------------------------------------------------------------------------------------------------------
  2971                                  ;
  2972                                  ;       Routine:        NextConsoleRow
  2973                                  ;
  2974                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2975                                  ;
  2976                                  ;       In:             DS      OS data selector
  2977                                  ;
  2978                                  ;-----------------------------------------------------------------------------------------------------------------------
  2979                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2980                                                          inc     al                                              ;increment row
  2981                                                          mov     [wbConsoleRow],al                               ;save row
  2982                                                          cmp     al,ECONROWS                                     ;end of screen?
  2983                                                          jb      .10                                             ;no, skip ahead
  2984                                                          call    ScrollConsoleRow                                ;scroll up one row
  2985                                                          mov     al,[wbConsoleRow]                               ;row
  2986                                                          dec     al                                              ;decrement row
  2987                                                          mov     [wbConsoleRow],al                               ;save row
  2988                                  .10                     ret                                                     ;return
  2989                                  ;-----------------------------------------------------------------------------------------------------------------------
  2990                                  ;
  2991                                  ;       Routine:        PreviousConsoleColumn
  2992                                  ;
  2993                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2994                                  ;                       the column is set to the last position in the row and the row is decremented.
  2995                                  ;
  2996                                  ;       In:             DS      OS data selector
  2997                                  ;
  2998                                  ;-----------------------------------------------------------------------------------------------------------------------
  2999                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3000                                                          or      al,al                                           ;start of row?
  3001                                                          jnz     .10                                             ;no, skip ahead
  3002                                                          mov     ah,[wbConsoleRow]                               ;current row
  3003                                                          or      ah,ah                                           ;top of screen?
  3004                                                          jz      .20                                             ;yes, exit with no change
  3005                                                          dec     ah                                              ;decrement row
  3006                                                          mov     [wbConsoleRow],ah                               ;save row
  3007                                                          mov     al,ECONCOLS                                     ;set maximum column
  3008                                  .10                     dec     al                                              ;decrement column
  3009                                                          mov     [wbConsoleColumn],al                            ;save column
  3010                                  .20                     ret                                                     ;return
  3011                                  ;-----------------------------------------------------------------------------------------------------------------------
  3012                                  ;
  3013                                  ;       Routine:        PutConsoleChar
  3014                                  ;
  3015                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3016                                  ;
  3017                                  ;       In:             AL      ASCII character
  3018                                  ;                       DS      OS data selector
  3019                                  ;
  3020                                  ;-----------------------------------------------------------------------------------------------------------------------
  3021                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3022                                                          push    es                                              ;
  3023                                                          push    EGDTCGA                                         ;load CGA selector ...
  3024                                                          pop     es                                              ;... into extra segment reg
  3025                                                          mov     cl,[wbConsoleColumn]                            ;column
  3026                                                          mov     ch,[wbConsoleRow]                               ;row
  3027                                                          call    SetConsoleChar                                  ;put character at row, column
  3028                                                          pop     es                                              ;restore non-volatile regs
  3029                                                          pop     ecx                                             ;
  3030                                                          ret                                                     ;return
  3031                                  ;-----------------------------------------------------------------------------------------------------------------------
  3032                                  ;
  3033                                  ;       Routine:        PutConsoleHexByte
  3034                                  ;
  3035                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3036                                  ;
  3037                                  ;       In:             AL      byte value
  3038                                  ;                       CL      column
  3039                                  ;                       CH      row
  3040                                  ;                       DS      OS data selector
  3041                                  ;                       ES      CGA selector
  3042                                  ;
  3043                                  ;-----------------------------------------------------------------------------------------------------------------------
  3044                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  3045                                                          mov     bl,al                                           ;save byte value
  3046                                                          shr     al,4                                            ;hi-order nybble
  3047                                                          or      al,030h                                         ;apply ASCII zone
  3048                                                          cmp     al,03ah                                         ;numeric?
  3049                                                          jb      .10                                             ;yes, skip ahead
  3050                                                          add     al,7                                            ;add ASCII offset for alpha
  3051                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  3052                                                          mov     al,bl                                           ;byte value
  3053                                                          and     al,0fh                                          ;lo-order nybble
  3054                                                          or      al,30h                                          ;apply ASCII zone
  3055                                                          cmp     al,03ah                                         ;numeric?
  3056                                                          jb      .20                                             ;yes, skip ahead
  3057                                                          add     al,7                                            ;add ASCII offset for alpha
  3058                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  3059                                                          pop     ebx                                             ;restore non-volatile regs
  3060                                                          ret                                                     ;return
  3061                                  ;-----------------------------------------------------------------------------------------------------------------------
  3062                                  ;
  3063                                  ;       Routine:        PutConsoleHexDword
  3064                                  ;
  3065                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3066                                  ;
  3067                                  ;       In:             EAX     value
  3068                                  ;                       CL      column
  3069                                  ;                       CH      row
  3070                                  ;                       DS      OS data selector
  3071                                  ;                       ES      CGA selector
  3072                                  ;
  3073                                  ;-----------------------------------------------------------------------------------------------------------------------
  3074                                  PutConsoleHexDword      push    eax
  3075                                                          shr     eax,16
  3076                                                          call    PutConsoleHexWord
  3077                                                          pop     eax
  3078                                                          call    PutConsoleHexWord
  3079                                                          ret
  3080                                  ;-----------------------------------------------------------------------------------------------------------------------
  3081                                  ;
  3082                                  ;       Routine:        PutConsoleHexWord
  3083                                  ;
  3084                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3085                                  ;
  3086                                  ;       In:             EAX     value
  3087                                  ;                       CL      column
  3088                                  ;                       CH      row
  3089                                  ;                       DS      OS data selector
  3090                                  ;                       ES      CGA selector
  3091                                  ;
  3092                                  ;-----------------------------------------------------------------------------------------------------------------------
  3093                                  PutConsoleHexWord       push    eax
  3094                                                          shr     eax,8
  3095                                                          call    PutConsoleHexByte
  3096                                                          pop     eax
  3097                                                          call    PutConsoleHexByte
  3098                                                          ret
  3099                                  ;-----------------------------------------------------------------------------------------------------------------------
  3100                                  ;
  3101                                  ;       Routine:        PutConsoleOIAChar
  3102                                  ;
  3103                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3104                                  ;
  3105                                  ;       In:             DS      OS data selector
  3106                                  ;
  3107                                  ;-----------------------------------------------------------------------------------------------------------------------
  3108                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3109                                                          push    ecx                                             ;
  3110                                                          push    esi                                             ;
  3111                                                          push    ds                                              ;
  3112                                                          push    es                                              ;
  3113                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3114                                                          pop     ds                                              ;... into data segment register
  3115                                                          push    EGDTCGA                                         ;load CGA selector ...
  3116                                                          pop     es                                              ;... into extra segment register
  3117                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  3118                                                          mov     bh,ECONOIAROW                                   ;OIA row
  3119                                                          mov     bl,0                                            ;starting column
  3120                                                          mov     ecx,6                                           ;maximum scan codes
  3121                                  .10                     push    ecx                                             ;save remaining count
  3122                                                          mov     ecx,ebx                                         ;row, column
  3123                                                          lodsb                                                   ;read scan code
  3124                                                          or      al,al                                           ;scan code present?
  3125                                                          jz      .20                                             ;no, skip ahead
  3126                                                          call    PutConsoleHexByte                               ;display scan code
  3127                                                          jmp     .30                                             ;continue
  3128                                  .20                     mov     al,' '                                          ;ASCII space
  3129                                                          call    SetConsoleChar                                  ;display space
  3130                                                          mov     al,' '                                          ;ASCII space
  3131                                                          call    SetConsoleChar                                  ;display space
  3132                                  .30                     add     bl,2                                            ;next column (+2)
  3133                                                          pop     ecx                                             ;restore remaining
  3134                                                          loop    .10                                             ;next code
  3135                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  3136                                                          cmp     al,32                                           ;printable? (lower-bounds)
  3137                                                          jb      .40                                             ;no, skip ahead
  3138                                                          cmp     al,126                                          ;printable? (upper-bounds)
  3139                                                          ja      .40                                             ;no, skip ahead
  3140                                                          mov     ch,bh                                           ;OIA row
  3141                                                          mov     cl,40                                           ;character display column
  3142                                                          call    SetConsoleChar                                  ;display ASCII character
  3143                                  .40                     pop     es                                              ;restore non-volatile regs
  3144                                                          pop     ds                                              ;
  3145                                                          pop     esi                                             ;
  3146                                                          pop     ecx                                             ;
  3147                                                          pop     ebx                                             ;
  3148                                                          ret                                                     ;return
  3149                                  ;-----------------------------------------------------------------------------------------------------------------------
  3150                                  ;
  3151                                  ;       Routine:        PutConsoleOIAShift
  3152                                  ;
  3153                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3154                                  ;
  3155                                  ;       In:             BL      shift flags
  3156                                  ;                       BH      lock flags
  3157                                  ;                       DS      OS data selector
  3158                                  ;
  3159                                  ;-----------------------------------------------------------------------------------------------------------------------
  3160                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3161                                                          push    es                                              ;
  3162                                                          push    EGDTCGA                                         ;load CGA selector ...
  3163                                                          pop     es                                              ;... into ES register
  3164                                                          mov     ch,ECONOIAROW                                   ;OIA row
  3165                                                          mov     al,EASCIISPACE                                  ;space is default character
  3166                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3167                                                          jz      .10                                             ;no, skip ahead
  3168                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3169                                  .10                     mov     cl,14                                           ;indicator column
  3170                                                          call    SetConsoleChar                                  ;display ASCII character
  3171                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3172                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3173                                                          jz      .20                                             ;no, skip ahead
  3174                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3175                                  .20                     mov     cl,64                                           ;indicator column
  3176                                                          call    SetConsoleChar                                  ;display ASCII character
  3177                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3178                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3179                                                          jz      .30                                             ;no, skip ahead
  3180                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3181                                  .30                     mov     cl,15                                           ;indicator column
  3182                                                          call    SetConsoleChar                                  ;display ASCII character
  3183                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3184                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3185                                                          jz      .40                                             ;no, skip ahead
  3186                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3187                                  .40                     mov     cl,63                                           ;indicator column
  3188                                                          call    SetConsoleChar                                  ;display ASCII character
  3189                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3190                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3191                                                          jz      .50                                             ;no, skip ahead
  3192                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3193                                  .50                     mov     cl,16                                           ;indicator column
  3194                                                          call    SetConsoleChar                                  ;display ASCII character
  3195                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3196                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3197                                                          jz      .60                                             ;no, skip ahead
  3198                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3199                                  .60                     mov     cl,62                                           ;indicator column
  3200                                                          call    SetConsoleChar                                  ;display ASCII character
  3201                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3202                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3203                                                          jz      .70                                             ;no, skip ahead
  3204                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3205                                  .70                     mov     cl,78                                           ;indicator column
  3206                                                          call    SetConsoleChar                                  ;display ASCII character
  3207                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3208                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3209                                                          jz      .80                                             ;no, skip ahead
  3210                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  3211                                  .80                     mov     cl,77                                           ;indicator column
  3212                                                          call    SetConsoleChar                                  ;display ASCII character
  3213                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3214                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3215                                                          jz      .90                                             ;no, skip ahead
  3216                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3217                                  .90                     mov     cl,76                                           ;indicator column
  3218                                                          call    SetConsoleChar                                  ;display ASCII character
  3219                                                          pop     es                                              ;restore non-volatile regs
  3220                                                          pop     ecx                                             ;
  3221                                                          ret                                                     ;return
  3222                                  ;-----------------------------------------------------------------------------------------------------------------------
  3223                                  ;
  3224                                  ;       Routine:        PutConsoleString
  3225                                  ;
  3226                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3227                                  ;                       console position as needed.
  3228                                  ;
  3229                                  ;       In:             EDX     source address
  3230                                  ;                       DS      OS data selector
  3231                                  ;
  3232                                  ;-----------------------------------------------------------------------------------------------------------------------
  3233                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  3234                                                          mov     esi,edx                                         ;source address
  3235                                                          cld                                                     ;forward strings
  3236                                  .10                     lodsb                                                   ;ASCII character
  3237                                                          or      al,al                                           ;end of string?
  3238                                                          jz      .40                                             ;yes, skip ahead
  3239                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  3240                                                          jne     .20                                             ;no, skip ahead
  3241                                                          call    FirstConsoleColumn                              ;move to start of row
  3242                                                          jmp     .10                                             ;next character
  3243                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3244                                                          jne     .30                                             ;no, skip ahead
  3245                                                          call    NextConsoleRow                                  ;move to next row
  3246                                                          jmp     .10                                             ;next character
  3247                                  .30                     call    PutConsoleChar                                  ;output character to console
  3248                                                          call    NextConsoleColumn                               ;advance to next column
  3249                                                          jmp     .10                                             ;next character
  3250                                  .40                     pop     esi                                             ;restore non-volatile regs
  3251                                                          ret                                                     ;return
  3252                                  ;-----------------------------------------------------------------------------------------------------------------------
  3253                                  ;
  3254                                  ;       Routine:        Yield
  3255                                  ;
  3256                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3257                                  ;
  3258                                  ;-----------------------------------------------------------------------------------------------------------------------
  3259                                  Yield                   sti                                                     ;enable maskagle interrupts
  3260                                                          hlt                                                     ;halt until external interrupt
  3261                                                          ret                                                     ;return
  3262                                  ;=======================================================================================================================
  3263                                  ;
  3264                                  ;       Data-Type Conversion Helper Routines
  3265                                  ;
  3266                                  ;       HexadecimalToUnsigned
  3267                                  ;       UnsignedToHexadecimal
  3268                                  ;
  3269                                  ;=======================================================================================================================
  3270                                  ;-----------------------------------------------------------------------------------------------------------------------
  3271                                  ;
  3272                                  ;       Routine:        HexadecimalToUnsigned
  3273                                  ;
  3274                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3275                                  ;
  3276                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  3277                                  ;
  3278                                  ;       Output:         EAX     unsigned integer value
  3279                                  ;
  3280                                  ;-----------------------------------------------------------------------------------------------------------------------
  3281                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  3282                                                          mov     esi,edx                                         ;source address
  3283                                                          xor     edx,edx                                         ;zero register
  3284                                  .10                     lodsb                                                   ;source byte
  3285                                                          test    al,al                                           ;end of string?
  3286                                                          jz      .30                                             ;yes, branch
  3287                                                          cmp     al,'9'                                          ;hexadecimal?
  3288                                                          jna     .20                                             ;no, skip ahead
  3289                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  3290                                  .20                     and     eax,0fh                                         ;remove ascii zone
  3291                                                          shl     edx,4                                           ;previous total x 16
  3292                                                          add     edx,eax                                         ;add prior value x 16
  3293                                                          jmp     .10                                             ;next
  3294                                  .30                     mov     eax,edx                                         ;result
  3295                                                          pop     esi                                             ;restore non-volatile regs
  3296                                                          ret                                                     ;return
  3297                                  ;-----------------------------------------------------------------------------------------------------------------------
  3298                                  ;
  3299                                  ;       Routine:        UnsignedToHexadecimal
  3300                                  ;
  3301                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  3302                                  ;
  3303                                  ;       Input:          DS:EDX  output buffer address
  3304                                  ;                       ECX     32-bit binary
  3305                                  ;
  3306                                  ;-----------------------------------------------------------------------------------------------------------------------
  3307                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  3308                                                          mov     edi,edx                                         ;output buffer address
  3309                                                          mov     edx,ecx                                         ;32-bit unsigned
  3310                                                          xor     ecx,ecx                                         ;zero register
  3311                                                          mov     cl,8                                            ;nybble count
  3312                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  3313                                                          mov     al,dl                                           ;????bbbb
  3314                                                          and     al,0fh                                          ;mask out bits 4-7
  3315                                                          or      al,30h                                          ;mask in ascii zone
  3316                                                          cmp     al,3ah                                          ;A through F?
  3317                                                          jb      .20                                             ;no, skip ahead
  3318                                                          add     al,7                                            ;41h through 46h
  3319                                  .20                     stosb                                                   ;store hexnum
  3320                                                          loop    .10                                             ;next nybble
  3321                                                          xor     al,al                                           ;zero reg
  3322                                                          stosb                                                   ;null terminate
  3323                                                          pop     edi                                             ;restore non-volatile regs
  3324                                                          ret                                                     ;return
  3325                                  ;=======================================================================================================================
  3326                                  ;
  3327                                  ;       Message Queue Helper Routines
  3328                                  ;
  3329                                  ;       GetMessage
  3330                                  ;       PutMessage
  3331                                  ;
  3332                                  ;=======================================================================================================================
  3333                                  ;-----------------------------------------------------------------------------------------------------------------------
  3334                                  ;
  3335                                  ;       Routine:        GetMessage
  3336                                  ;
  3337                                  ;       Description:    This routine reads and removes a message from the message queue.
  3338                                  ;
  3339                                  ;       Out:            EAX     lo-order message data
  3340                                  ;                       EDX     hi-order message data
  3341                                  ;
  3342                                  ;                       CY      0 = message read
  3343                                  ;                               1 = no message to read
  3344                                  ;
  3345                                  ;-----------------------------------------------------------------------------------------------------------------------
  3346                                  GetMessage              push    ebx                                             ;save non-volatile regs
  3347                                                          push    ecx                                             ;
  3348                                                          push    ds                                              ;
  3349                                                          push    ELDTMQ                                          ;load message queue selector ...
  3350                                                          pop     ds                                              ;... into data segment register
  3351                                                          mov     ebx,[MQHead]                                    ;head ptr
  3352                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  3353                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3354                                                          or      eax,edx                                         ;is queue empty?
  3355                                                          stc                                                     ;assume queue is emtpy
  3356                                                          jz      .20                                             ;yes, skip ahead
  3357                                                          xor     ecx,ecx                                         ;store zero
  3358                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  3359                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3360                                                          add     ebx,8                                           ;next queue element
  3361                                                          and     ebx,03fch                                       ;at end of queue?
  3362                                                          jnz     .10                                             ;no, skip ahead
  3363                                                          mov     bl,8                                            ;reset to 1st entry
  3364                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3365                                                          clc                                                     ;indicate message read
  3366                                  .20                     pop     ds                                              ;restore non-volatile regs
  3367                                                          pop     ecx                                             ;
  3368                                                          pop     ebx                                             ;
  3369                                                          ret                                                     ;return
  3370                                  ;-----------------------------------------------------------------------------------------------------------------------
  3371                                  ;
  3372                                  ;       Routine:        PutMessage
  3373                                  ;
  3374                                  ;       Description:    This routine adda a message to the message queue.
  3375                                  ;
  3376                                  ;       In:             ECX     hi-order data word
  3377                                  ;                       EDX     lo-order data word
  3378                                  ;
  3379                                  ;       Out:            CY      0 = success
  3380                                  ;                               1 = fail: queue is full
  3381                                  ;
  3382                                  ;-----------------------------------------------------------------------------------------------------------------------
  3383                                  PutMessage              push    ds                                              ;save non-volatile regs
  3384                                                          push    ELDTMQ                                          ;load task message queue selector ...
  3385                                                          pop     ds                                              ;... into data segment register
  3386                                                          mov     eax,[MQTail]                                    ;tail ptr
  3387                                                          cmp     dword [eax],0                                   ;is queue full?
  3388                                                          stc                                                     ;assume failure
  3389                                                          jne     .20                                             ;yes, cannot store
  3390                                                          mov     [eax],edx                                       ;store lo-order data
  3391                                                          mov     [eax+4],ecx                                     ;store hi-order data
  3392                                                          add     eax,8                                           ;next queue element adr
  3393                                                          and     eax,03fch                                       ;at end of queue?
  3394                                                          jnz     .10                                             ;no, skip ahead
  3395                                                          mov     al,8                                            ;reset to top of queue
  3396                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3397                                                          clc                                                     ;indicate success
  3398                                  .20                     pop     ds                                              ;restore non-volatile regs
  3399                                                          ret                                                     ;return
  3400                                  ;=======================================================================================================================
  3401                                  ;
  3402                                  ;       Memory-Mapped Video Routines
  3403                                  ;
  3404                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  3405                                  ;
  3406                                  ;       ClearConsoleScreen
  3407                                  ;       ScrollConsoleRow
  3408                                  ;       SetConsoleChar
  3409                                  ;       SetConsoleString
  3410                                  ;
  3411                                  ;=======================================================================================================================
  3412                                  ;-----------------------------------------------------------------------------------------------------------------------
  3413                                  ;
  3414                                  ;       Routine:        ClearConsoleScreen
  3415                                  ;
  3416                                  ;       Description:    This routine clears the console (CGA) screen.
  3417                                  ;
  3418                                  ;-----------------------------------------------------------------------------------------------------------------------
  3419                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  3420                                                          push    edi                                             ;
  3421                                                          push    ds                                              ;
  3422                                                          push    es                                              ;
  3423                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  3424                                                          pop     ds                                              ;... into DS register
  3425                                                          push    EGDTCGA                                         ;load CGA selector ...
  3426                                                          pop     es                                              ;... into ES register
  3427                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  3428                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  3429                                                          xor     edi,edi                                         ;target offset
  3430                                                          cld                                                     ;forward strings
  3431                                                          rep     stosd                                           ;reset screen body
  3432                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  3433                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3434                                                          rep     stosd                                           ;reset OIA line
  3435                                                          xor     al,al                                           ;zero register
  3436                                                          mov     [wbConsoleRow],al                               ;reset console row
  3437                                                          mov     [wbConsoleColumn],al                            ;reset console column
  3438                                                          call    PlaceCursor                                     ;place cursor at current position
  3439                                                          pop     es                                              ;restore non-volatile regs
  3440                                                          pop     ds                                              ;
  3441                                                          pop     edi                                             ;
  3442                                                          pop     ecx                                             ;
  3443                                                          ret                                                     ;return
  3444                                  ;-----------------------------------------------------------------------------------------------------------------------
  3445                                  ;
  3446                                  ;       Routine:        ScrollConsoleRow
  3447                                  ;
  3448                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  3449                                  ;
  3450                                  ;-----------------------------------------------------------------------------------------------------------------------
  3451                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  3452                                                          push    esi                                             ;
  3453                                                          push    edi                                             ;
  3454                                                          push    ds                                              ;
  3455                                                          push    es                                              ;
  3456                                                          push    EGDTCGA                                         ;load CGA video selector ...
  3457                                                          pop     ds                                              ;... into DS
  3458                                                          push    EGDTCGA                                         ;load CGA video selector ...
  3459                                                          pop     es                                              ;... into ES
  3460                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  3461                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  3462                                                          xor     edi,edi                                         ;EDI = target (line 1)
  3463                                                          cld                                                     ;forward strings
  3464                                                          rep     movsd                                           ;move 24 lines up
  3465                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  3466                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3467                                                          rep     stosd                                           ;clear bottom row
  3468                                                          pop     es                                              ;restore non-volatile regs
  3469                                                          pop     ds                                              ;
  3470                                                          pop     edi                                             ;
  3471                                                          pop     esi                                             ;
  3472                                                          pop     ecx                                             ;
  3473                                                          ret                                                     ;return
  3474                                  ;-----------------------------------------------------------------------------------------------------------------------
  3475                                  ;
  3476                                  ;       Routine:        SetConsoleChar
  3477                                  ;
  3478                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3479                                  ;
  3480                                  ;       In:             AL      ASCII character
  3481                                  ;                       CL      column
  3482                                  ;                       CH      row
  3483                                  ;                       ES      CGA selector
  3484                                  ;
  3485                                  ;       Out:            EAX     last target address written (ES:)
  3486                                  ;                       CL      column + 1
  3487                                  ;
  3488                                  ;-----------------------------------------------------------------------------------------------------------------------
  3489                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  3490                                                          movzx   eax,ch                                          ;row
  3491                                                          mov     ah,ECONCOLS                                     ;cols/row
  3492                                                          mul     ah                                              ;row * cols/row
  3493                                                          add     al,cl                                           ;add column
  3494                                                          adc     ah,0                                            ;handle carry
  3495                                                          shl     eax,1                                           ;screen offset
  3496                                                          mov     [es:eax],dl                                     ;store character
  3497                                                          inc     cl                                              ;next column
  3498                                                          ret                                                     ;return
  3499                                  ;-----------------------------------------------------------------------------------------------------------------------
  3500                                  ;
  3501                                  ;       Routine:        SetConsoleString
  3502                                  ;
  3503                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  3504                                  ;
  3505                                  ;       In:             ESI     source offset (DS:)
  3506                                  ;                       CL      column
  3507                                  ;                       CH      row
  3508                                  ;                       ES      CGA selector
  3509                                  ;
  3510                                  ;-----------------------------------------------------------------------------------------------------------------------
  3511                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  3512                                                          cld                                                     ;forward strings
  3513                                  .10                     lodsb                                                   ;next ASCII character
  3514                                                          test    al,al                                           ;end of string?
  3515                                                          jz      .20                                             ;yes, branch
  3516                                                          call    SetConsoleChar                                  ;store character
  3517                                                          jmp     .10                                             ;continue
  3518                                  .20                     pop     esi                                             ;restore non-volatile regs
  3519                                                          ret                                                     ;return
  3520                                  ;=======================================================================================================================
  3521                                  ;
  3522                                  ;       Input/Output Routines
  3523                                  ;
  3524                                  ;       These routines read and/or write directly to ports.
  3525                                  ;
  3526                                  ;       PlaceCursor
  3527                                  ;       PutPrimaryEndOfInt
  3528                                  ;       PutSecondaryEndOfInt
  3529                                  ;       ResetSystem
  3530                                  ;       SetKeyboardLamps
  3531                                  ;       WaitForKeyInBuffer
  3532                                  ;       WaitForKeyOutBuffer
  3533                                  ;
  3534                                  ;=======================================================================================================================
  3535                                  ;-----------------------------------------------------------------------------------------------------------------------
  3536                                  ;
  3537                                  ;       Routine:        PlaceCursor
  3538                                  ;
  3539                                  ;       Description:    This routine positions the cursor on the console.
  3540                                  ;
  3541                                  ;       In:             DS      OS data selector
  3542                                  ;
  3543                                  ;-----------------------------------------------------------------------------------------------------------------------
  3544                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  3545                                                          mov     al,[wbConsoleRow]                               ;AL = row
  3546                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  3547                                                          mul     ah                                              ;row offset
  3548                                                          add     al,[wbConsoleColumn]                            ;add column
  3549                                                          adc     ah,0                                            ;add overflow
  3550                                                          mov     ecx,eax                                         ;screen offset
  3551                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3552                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3553                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3554                                                          out     dx,al                                           ;select register
  3555                                                          inc     edx                                             ;data port
  3556                                                          mov     al,ch                                           ;hi-order cursor loc
  3557                                                          out     dx,al                                           ;store hi-order loc
  3558                                                          dec     edx                                             ;register select port
  3559                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3560                                                          out     dx,al                                           ;select register
  3561                                                          inc     edx                                             ;data port
  3562                                                          mov     al,cl                                           ;lo-order cursor loc
  3563                                                          out     dx,al                                           ;store lo-order loc
  3564                                                          pop     ecx                                             ;restore non-volatile regs
  3565                                                          ret                                                     ;return
  3566                                  ;-----------------------------------------------------------------------------------------------------------------------
  3567                                  ;
  3568                                  ;       Routine:        PutPrimaryEndOfInt
  3569                                  ;
  3570                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3571                                  ;
  3572                                  ;-----------------------------------------------------------------------------------------------------------------------
  3573                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  3574                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3575                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3576                                                          ret                                                     ;return
  3577                                  ;-----------------------------------------------------------------------------------------------------------------------
  3578                                  ;
  3579                                  ;       Routine:        PutSecondaryEndOfInt
  3580                                  ;
  3581                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3582                                  ;
  3583                                  ;-----------------------------------------------------------------------------------------------------------------------
  3584                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3585                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3586                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3587                                                          ret                                                     ;return
  3588                                  ;-----------------------------------------------------------------------------------------------------------------------
  3589                                  ;
  3590                                  ;       Routine:        ResetSystem
  3591                                  ;
  3592                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3593                                  ;
  3594                                  ;       Out:            N/A     This routine does not return.
  3595                                  ;
  3596                                  ;-----------------------------------------------------------------------------------------------------------------------
  3597                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3598                                                          loop    $                                               ;clear interrupts
  3599                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3600                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3601                                  .10                     sti                                                     ;enable maskable interrupts
  3602                                                          hlt                                                     ;halt until interrupt
  3603                                                          jmp     .10                                             ;repeat until reset kicks in
  3604                                  ;-----------------------------------------------------------------------------------------------------------------------
  3605                                  ;
  3606                                  ;       Routine:        SetKeyboardLamps
  3607                                  ;
  3608                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3609                                  ;
  3610                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3611                                  ;
  3612                                  ;-----------------------------------------------------------------------------------------------------------------------
  3613                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3614                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3615                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  3616                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3617                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3618                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3619                                                          mov     al,bh                                           ;set/reset lamps value
  3620                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  3621                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3622                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3623                                                          ret                                                     ;return
  3624                                  ;-----------------------------------------------------------------------------------------------------------------------
  3625                                  ;
  3626                                  ;       Routine:        WaitForKeyInBuffer
  3627                                  ;
  3628                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3629                                  ;
  3630                                  ;       Out:            ZF      1 = Input buffer ready
  3631                                  ;                               0 = Input buffer not ready after timeout
  3632                                  ;
  3633                                  ;-----------------------------------------------------------------------------------------------------------------------
  3634                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3635                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3636                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3637                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  3638                                                          loopnz  .10                                             ;yes, repeat till timeout
  3639                                                          pop     ecx                                             ;restore non-volatile regs
  3640                                                          ret                                                     ;return
  3641                                  ;-----------------------------------------------------------------------------------------------------------------------
  3642                                  ;
  3643                                  ;       Routine:        WaitForKeyOutBuffer
  3644                                  ;
  3645                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3646                                  ;
  3647                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3648                                  ;                               0 = Output buffer empty after timeout
  3649                                  ;
  3650                                  ;-----------------------------------------------------------------------------------------------------------------------
  3651                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3652                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3653                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3654                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  3655                                                          loopz   .10                                             ;loop until output buffer bit
  3656                                                          pop     ecx                                             ;restore non-volatile regs
  3657                                                          ret                                                     ;return
  3658                                  ;-----------------------------------------------------------------------------------------------------------------------
  3659                                  ;
  3660                                  ;       End of the Kernel Function Library
  3661                                  ;
  3662                                  ;-----------------------------------------------------------------------------------------------------------------------
  3663                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  3664                                  ;=======================================================================================================================
  3665                                  ;
  3666                                  ;       Console Task
  3667                                  ;
  3668                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3669                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3670                                  ;       screen and responds to user commands.
  3671                                  ;
  3672                                  ;=======================================================================================================================
  3673                                  ;-----------------------------------------------------------------------------------------------------------------------
  3674                                  ;
  3675                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3676                                  ;
  3677                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3678                                  ;
  3679                                  ;-----------------------------------------------------------------------------------------------------------------------
  3680                                  section                 constack                                                ;console task stack
  3681                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  3682                                  ;-----------------------------------------------------------------------------------------------------------------------
  3683                                  ;
  3684                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3685                                  ;
  3686                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3687                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3688                                  ;       16 descriptors. Six are initially defined.
  3689                                  ;
  3690                                  ;-----------------------------------------------------------------------------------------------------------------------
  3691                                  section                 conldt                                                  ;console local descriptors
  3692                                                          dq      004093004780007Fh                               ;04 TSS alias
  3693                                                          dq      004093004700007Fh                               ;0c LDT alias
  3694                                                          dq      00409300400006FFh                               ;14 stack
  3695                                                          dq      00CF93000000FFFFh                               ;1c data
  3696                                                          dq      00409B0050000FFFh                               ;24 code
  3697                                                          dq      00409300480007FFh                               ;2c message queue
  3698                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3699                                  ;-----------------------------------------------------------------------------------------------------------------------
  3700                                  ;
  3701                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3702                                  ;
  3703                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3704                                  ;       segment. CS to console code.
  3705                                  ;
  3706                                  ;-----------------------------------------------------------------------------------------------------------------------
  3707                                  section                 contss                                                  ;console task state segment
  3708                                                          dd      0                                               ;00 back-link tss
  3709                                                          dd      0700h                                           ;04 esp ring 0
  3710                                                          dd      0014h                                           ;08 ss ring 0
  3711                                                          dd      0700h                                           ;0c esp ring 1
  3712                                                          dd      0014h                                           ;10 es ring 1
  3713                                                          dd      0700h                                           ;14 esp ring 2
  3714                                                          dd      0014h                                           ;18 ss ring 2
  3715                                                          dd      0                                               ;1c cr ring 3
  3716                                                          dd      0                                               ;20 eip
  3717                                                          dd      0200h                                           ;24 eflags
  3718                                                          dd      0                                               ;28 eax
  3719                                                          dd      0                                               ;2c ecx
  3720                                                          dd      0                                               ;30 edx
  3721                                                          dd      0                                               ;34 ebx
  3722                                                          dd      0700h                                           ;38 esp ring 3
  3723                                                          dd      0                                               ;3c ebp
  3724                                                          dd      0                                               ;40 esi
  3725                                                          dd      0                                               ;44 edi
  3726                                                          dd      001Ch                                           ;48 es
  3727                                                          dd      0024h                                           ;4c cs
  3728                                                          dd      0014h                                           ;50 ss ring 3
  3729                                                          dd      001Ch                                           ;54 ds
  3730                                                          dd      0                                               ;58 fs
  3731                                                          dd      0                                               ;5c gs
  3732                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3733                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3734                                  ;-----------------------------------------------------------------------------------------------------------------------
  3735                                  ;
  3736                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3737                                  ;
  3738                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3739                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3740                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3741                                  ;       event.
  3742                                  ;
  3743                                  ;-----------------------------------------------------------------------------------------------------------------------
  3744                                  section                 conmque                                                 ;console message queue
  3745                                                          dd      8                                               ;head pointer
  3746                                                          dd      8                                               ;tail pointer
  3747                                                          times   510 dd 0                                        ;queue elements
  3748                                  ;-----------------------------------------------------------------------------------------------------------------------
  3749                                  ;
  3750                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3751                                  ;
  3752                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3753                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3754                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3755                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3756                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3757                                  ;       board input, echoing to the console screen and responding to user commands.
  3758                                  ;
  3759                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3760                                  ;
  3761                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3762                                  ;                               |  Real Mode Interrupt Vectors                  |
  3763                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3764                                  ;                               |  Reserved BIOS Memory Area                    |
  3765                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3766                                  ;                               |  Shared Kernel Memory Area                    |
  3767                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3768                                  ;                               |  Global Descriptor Table (GDT)                |
  3769                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3770                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3771                                  ;                       002000  +-----------------------------------------------+
  3772                                  ;                               |  Interrupt Handlers                           |
  3773                                  ;                               |  Kernel Function Library                      |
  3774                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3775                                  ;                               |  Console Task Stack Area                      |
  3776                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3777                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3778                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3779                                  ;                               |  Console Task Task State Segment (TSS)        |
  3780                                  ;                       004800  +-----------------------------------------------+
  3781                                  ;                               |  Console Task Message Queue                   |
  3782                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3783                                  ;                               |  Console Task Code                            |
  3784                                  ;                               |  Console Task Constants                       |
  3785                                  ;                       006000  +===============================================+
  3786                                  ;
  3787                                  ;-----------------------------------------------------------------------------------------------------------------------
  3788                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3789                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  3790                                  
  3791                                                          clearConsoleScreen                                      ;clear the console screen
  3792                                                          putConsoleString czTitle                                ;display startup message
  3793                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3794                                                          placeCursor                                             ;set CRT cursor location
  3795                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3796                                                          putConsoleString czNewLine                              ;newline
  3797                                  
  3798                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  3799                                                          mov     ebx,wzConsoleToken                              ;token buffer
  3800                                                          call    ConTakeToken                                    ;handle console input
  3801                                                          mov     edx,wzConsoleToken                              ;token buffer
  3802                                                          call    ConDetermineCommand                             ;determine command number
  3803                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  3804                                                          jb      .20                                             ;yes, branch
  3805                                  
  3806                                                          putConsoleString czUnknownCommand                       ;display error message
  3807                                  
  3808                                                          jmp     .10                                             ;next command
  3809                                  .20                     shl     eax,2                                           ;index into jump table
  3810                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  3811                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  3812                                                          call    eax                                             ;call command handler
  3813                                                          jmp     .10                                             ;next command
  3814                                  ;-----------------------------------------------------------------------------------------------------------------------
  3815                                  ;
  3816                                  ;       Routine:        ConInitializeData
  3817                                  ;
  3818                                  ;       Description:    This routine initializes console task variables.
  3819                                  ;
  3820                                  ;-----------------------------------------------------------------------------------------------------------------------
  3821                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  3822                                                          push    edi                                             ;
  3823                                                          push    es                                              ;
  3824                                  ;
  3825                                  ;       Initialize console work areas.
  3826                                  ;
  3827                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3828                                                          pop     es                                              ;... into extra segment register
  3829                                                          mov     edi,ECONDATA                                    ;OS console data address
  3830                                                          xor     al,al                                           ;initialization value
  3831                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  3832                                                          cld                                                     ;forward strings
  3833                                                          rep     stosb                                           ;initialize data
  3834                                  ;
  3835                                  ;       Restore and return.
  3836                                  ;
  3837                                                          pop     es                                              ;restore non-volatile regs
  3838                                                          pop     edi                                             ;
  3839                                                          pop     ecx                                             ;
  3840                                                          ret                                                     ;return
  3841                                  ;-----------------------------------------------------------------------------------------------------------------------
  3842                                  ;
  3843                                  ;       Routine:        ConTakeToken
  3844                                  ;
  3845                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3846                                  ;
  3847                                  ;       In:             DS:EDX  source buffer address
  3848                                  ;                       DS:EBX  target buffer address
  3849                                  ;
  3850                                  ;       Out:            DS:EDX  source buffer address
  3851                                  ;                       DS:EBX  target buffer address
  3852                                  ;
  3853                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3854                                  ;
  3855                                  ;-----------------------------------------------------------------------------------------------------------------------
  3856                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  3857                                                          push    edi                                             ;
  3858                                                          push    es                                              ;
  3859                                                          push    ds                                              ;load data segment selector ...
  3860                                                          pop     es                                              ;... into extra segment reg
  3861                                                          mov     esi,edx                                         ;source buffer address
  3862                                                          mov     edi,ebx                                         ;target buffer address
  3863                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3864                                                          cld                                                     ;forward strings
  3865                                  .10                     lodsb                                                   ;load byte
  3866                                                          cmp     al,EASCIISPACE                                  ;space?
  3867                                                          je      .10                                             ;yes, continue
  3868                                                          test    al,al                                           ;end of line?
  3869                                                          jz      .40                                             ;yes, branch
  3870                                  .20                     stosb                                                   ;store byte
  3871                                                          lodsb                                                   ;load byte
  3872                                                          test    al,al                                           ;end of line?
  3873                                                          jz      .40                                             ;no, continue
  3874                                                          cmp     al,EASCIISPACE                                  ;space?
  3875                                                          jne     .20                                             ;no, continue
  3876                                  .30                     lodsb                                                   ;load byte
  3877                                                          cmp     al,EASCIISPACE                                  ;space?
  3878                                                          je      .30                                             ;yes, continue
  3879                                                          dec     esi                                             ;pre-position
  3880                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3881                                                          mov     edi,edx                                         ;source buffer address
  3882                                  .50                     lodsb                                                   ;remaining byte
  3883                                                          stosb                                                   ;move to front of buffer
  3884                                                          test    al,al                                           ;end of line?
  3885                                                          jnz     .50                                             ;no, continue
  3886                                                          pop     es                                              ;restore non-volatile regs
  3887                                                          pop     edi                                             ;
  3888                                                          pop     esi                                             ;
  3889                                                          ret                                                     ;return
  3890                                  ;-----------------------------------------------------------------------------------------------------------------------
  3891                                  ;
  3892                                  ;       Routine:        ConDetermineCommand
  3893                                  ;
  3894                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3895                                  ;
  3896                                  ;       input:          DS:EDX  command address
  3897                                  ;
  3898                                  ;       output:         EAX     >=0     = command nbr
  3899                                  ;                               0       = unknown command
  3900                                  ;
  3901                                  ;-----------------------------------------------------------------------------------------------------------------------
  3902                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3903                                                          push    ecx                                             ;
  3904                                                          push    esi                                             ;
  3905                                                          push    edi                                             ;
  3906                                  
  3907                                                          upperCaseString                                         ;upper-case string at EDX
  3908                                  
  3909                                                          mov     esi,tConCmdTbl                                  ;commands table
  3910                                                          xor     edi,edi                                         ;intialize command number
  3911                                                          cld                                                     ;forward strings
  3912                                  .10                     lodsb                                                   ;command length
  3913                                                          movzx   ecx,al                                          ;command length
  3914                                                          jecxz   .20                                             ;branch if end of table
  3915                                                          mov     ebx,esi                                         ;table entry address
  3916                                                          add     esi,ecx                                         ;next table entry address
  3917                                  
  3918                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3919                                  
  3920                                                          jecxz   .20                                             ;branch if equal
  3921                                                          inc     edi                                             ;increment command nbr
  3922                                                          jmp     .10                                             ;repeat
  3923                                  .20                     mov     eax,edi                                         ;command number
  3924                                                          pop     edi                                             ;restore non-volatile regs
  3925                                                          pop     esi                                             ;
  3926                                                          pop     ecx                                             ;
  3927                                                          pop     ebx                                             ;
  3928                                                          ret                                                     ;return
  3929                                  ;-----------------------------------------------------------------------------------------------------------------------
  3930                                  ;
  3931                                  ;       Routine:        ConClear
  3932                                  ;
  3933                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  3934                                  ;
  3935                                  ;-----------------------------------------------------------------------------------------------------------------------
  3936                                  ConClear                clearConsoleScreen                                      ;clear console screen
  3937                                                          ret                                                     ;return
  3938                                  ;-----------------------------------------------------------------------------------------------------------------------
  3939                                  ;
  3940                                  ;       Routine:        ConExit
  3941                                  ;
  3942                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3943                                  ;
  3944                                  ;-----------------------------------------------------------------------------------------------------------------------
  3945                                  ConExit                 resetSystem                                             ;issue system reset
  3946                                                          ret                                                     ;return
  3947                                  ;-----------------------------------------------------------------------------------------------------------------------
  3948                                  ;
  3949                                  ;       Routine:        ConInt6
  3950                                  ;
  3951                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  3952                                  ;
  3953                                  ;-----------------------------------------------------------------------------------------------------------------------
  3954                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  3955                                                          ret                                                     ;return (not executed)
  3956                                  ;-----------------------------------------------------------------------------------------------------------------------
  3957                                  ;
  3958                                  ;       Routine:        ConMem
  3959                                  ;
  3960                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  3961                                  ;
  3962                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  3963                                  ;
  3964                                  ;-----------------------------------------------------------------------------------------------------------------------
  3965                                  ConMem                  push    ebx                                             ;save non-volatile regs
  3966                                                          push    esi                                             ;
  3967                                                          push    edi                                             ;
  3968                                  ;
  3969                                  ;                       update the source address if a parameter is given
  3970                                  ;
  3971                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  3972                                                          mov     ebx,wzConsoleToken                              ;console command token address
  3973                                                          call    ConTakeToken                                    ;take first param as token
  3974                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  3975                                                          je      .10                                             ;no, branch
  3976                                                          mov     edx,wzConsoleToken                              ;first param as token address
  3977                                  
  3978                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  3979                                  
  3980                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  3981                                  ;
  3982                                  ;                       setup source address and row count
  3983                                  ;
  3984                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  3985                                                          xor     ecx,ecx                                         ;zero register
  3986                                                          mov     cl,16                                           ;row count
  3987                                  ;
  3988                                  ;                       start the row with the source address in hexadecimal
  3989                                  ;
  3990                                  .20                     push    ecx                                             ;save remaining rows
  3991                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  3992                                                          mov     edx,edi                                         ;output buffer address
  3993                                                          mov     ecx,esi                                         ;console memory address
  3994                                  
  3995                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  3996                                  
  3997                                                          add     edi,8                                           ;end of memory addr hexnum
  3998                                                          mov     al,' '                                          ;ascii space
  3999                                                          stosb                                                   ;store delimiter
  4000                                  ;
  4001                                  ;                       output 16 ASCII hexadecimal byte values for the row
  4002                                  ;
  4003                                                          xor     ecx,ecx                                         ;zero register
  4004                                                          mov     cl,16                                           ;loop count
  4005                                  .30                     push    ecx                                             ;save loop count
  4006                                                          lodsb                                                   ;memory byte
  4007                                                          mov     ah,al                                           ;memory byte
  4008                                                          shr     al,4                                            ;high-order in bits 3-0
  4009                                                          or      al,30h                                          ;apply ascii numeric zone
  4010                                                          cmp     al,3ah                                          ;numeric range?
  4011                                                          jb      .40                                             ;yes, skip ahead
  4012                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4013                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  4014                                                          mov     al,ah                                           ;low-order in bits 3-0
  4015                                                          and     al,0fh                                          ;mask out high-order bits
  4016                                                          or      al,30h                                          ;apply ascii numeric zone
  4017                                                          cmp     al,3ah                                          ;numeric range?
  4018                                                          jb      .50                                             ;yes, skip ahead
  4019                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4020                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  4021                                                          mov     al,' '                                          ;ascii space
  4022                                                          stosb                                                   ;store ascii space delimiter
  4023                                                          pop     ecx                                             ;loop count
  4024                                                          loop    .30                                             ;next
  4025                                  ;
  4026                                  ;                       output printable ASCII character section for the row
  4027                                  ;
  4028                                                          sub     esi,16                                          ;reset source pointer
  4029                                                          mov     cl,16                                           ;loop count
  4030                                  .60                     lodsb                                                   ;source byte
  4031                                                          cmp     al,32                                           ;printable? (low-range test)
  4032                                                          jb      .70                                             ;no, skip ahead
  4033                                                          cmp     al,128                                          ;printable? (high-range test)
  4034                                                          jb      .80                                             ;yes, skip ahead
  4035                                  .70                     mov     al,' '                                          ;display space instead of printable
  4036                                  .80                     stosb                                                   ;store printable ascii byte
  4037                                                          loop    .60                                             ;next source byte
  4038                                                          xor     al,al                                           ;nul-terminator
  4039                                                          stosb                                                   ;terminate output line
  4040                                  ;
  4041                                  ;                       display constructed output buffer and newline
  4042                                  ;
  4043                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  4044                                                          putConsoleString czNewLine                              ;display new line
  4045                                  ;
  4046                                  ;                       repeat until all lines displayed and preserve source address
  4047                                  ;
  4048                                                          pop     ecx                                             ;remaining rows
  4049                                                          loop    .20                                             ;next row
  4050                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  4051                                                          pop     edi                                             ;restore regs
  4052                                                          pop     esi                                             ;
  4053                                                          pop     ebx                                             ;
  4054                                                          ret                                                     ;return
  4055                                  ;-----------------------------------------------------------------------------------------------------------------------
  4056                                  ;
  4057                                  ;       Routine:        ConVersion
  4058                                  ;
  4059                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  4060                                  ;
  4061                                  ;-----------------------------------------------------------------------------------------------------------------------
  4062                                  ConVersion              putConsoleString czTitle                                ;display version message
  4063                                                          ret                                                     ;return
  4064                                  ;-----------------------------------------------------------------------------------------------------------------------
  4065                                  ;
  4066                                  ;       Tables
  4067                                  ;
  4068                                  ;-----------------------------------------------------------------------------------------------------------------------
  4069                                                                                                                  ;---------------------------------------
  4070                                                                                                                  ;  Command Jump Table
  4071                                                                                                                  ;---------------------------------------
  4072                                  tConJmpTbl              equ     $                                               ;command jump table
  4073                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  4074                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  4075                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  4076                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  4077                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  4078                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  4079                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  4080                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  4081                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  4082                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  4083                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4084                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4085                                                                                                                  ;---------------------------------------
  4086                                                                                                                  ;  Command Name Table
  4087                                                                                                                  ;---------------------------------------
  4088                                  tConCmdTbl              equ     $                                               ;command name table
  4089                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  4090                                                          db      8,"VERSION",0                                   ;version command
  4091                                                          db      7,"MEMORY",0                                    ;memory command
  4092                                                          db      6,"CLEAR",0                                     ;clear command
  4093                                                          db      5,"EXIT",0                                      ;exit command
  4094                                                          db      5,"INT6",0                                      ;int6 command
  4095                                                          db      5,"QUIT",0                                      ;quit command
  4096                                                          db      4,"CLS",0                                       ;cls command
  4097                                                          db      4,"MEM",0                                       ;mem command
  4098                                                          db      4,"VER",0                                       ;ver command
  4099                                                          db      0                                               ;end of table
  4100                                  ;-----------------------------------------------------------------------------------------------------------------------
  4101                                  ;
  4102                                  ;       Constants
  4103                                  ;
  4104                                  ;-----------------------------------------------------------------------------------------------------------------------
  4105                                  czNewLine               db      13,10,0                                         ;new line string
  4106                                  czPrompt                db      ":",0                                           ;prompt string
  4107                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  4108                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  4109                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  4110                                  %endif
  4111                                  %ifdef BUILDDISK
  4112                                  ;-----------------------------------------------------------------------------------------------------------------------
  4113                                  ;
  4114                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  4115                                  ;
  4116                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4117                                  ;
  4118                                  ;-----------------------------------------------------------------------------------------------------------------------
  4119                                  section                 unused                                                  ;unused disk space
  4120                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  4121                                  %endif
  4122                                  ;=======================================================================================================================
  4123                                  ;
  4124                                  ;       End of Program Code
  4125                                  ;
  4126                                  ;=======================================================================================================================
