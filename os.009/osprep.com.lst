     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.009
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support the "mem" and "memory" commands.
     8                                  ;
     9                                  ;       Revised:        January 1, 2019
    10                                  ;
    11                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    17                                  ;
    18                                  ;       Notice:         Copyright (C) 2010-2019 David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;       Assembly Directives
    24                                  ;
    25                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    34                                  %define BUILDBOOT                                                               ;... build the boot sector
    35                                  %define BUILDCOM                                                                ;... and the OS kernel
    36                                  %endif
    37                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    38                                  %define BUILDBOOT                                                               ;... also build the boot sector
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;       Conventions
    43                                  ;
    44                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    45                                  ;                       Logical tabs are set after every eight columns.
    46                                  ;                       Tabs are simulated using SPACE characters.
    47                                  ;                       For comments that span an entire line, comment text begins in column 9.
    48                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    49                                  ;                       Assembly operands begin in column 33.
    50                                  ;                       Inline comments begin in column 81.
    51                                  ;                       Lines should not extend beyond column 120.
    52                                  ;
    53                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    54                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    55                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    56                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    57                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    58                                  ;                       ouput buffers, respectively.
    59                                  ;
    60                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    61                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    62                                  ;
    63                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    64                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    65                                  ;                       Register names in comments are in upper case (EAX, EDI).
    66                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    67                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    68                                  ;                       register contents on entry and exit.
    69                                  ;
    70                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    71                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    72                                  ;                       The 2nd letter of the constant label indicates the storage type.
    73                                  ;
    74                                  ;                       cq......        constant quad-word (dq)
    75                                  ;                       cd......        constant double-word (dd)
    76                                  ;                       cw......        constant word (dw)
    77                                  ;                       cb......        constant byte (db)
    78                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    79                                  ;
    80                                  ;       Instructions:   32-bit instructions are generally favored.
    81                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    82                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    83                                  ;
    84                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    85                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    86                                  ;
    87                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    88                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    89                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    90                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    91                                  ;                       Octal literal values are avoided.
    92                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    93                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    94                                  ;
    95                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    96                                  ;                       Macro names describe an action and so DO begin with a verb.
    97                                  ;
    98                                  ;       Memory Use:     Operating system memory allocation is minimized.
    99                                  ;                       Buffers are kept to as small a size as practicable.
   100                                  ;                       Data and code intermingling is avoided wherever possible.
   101                                  ;
   102                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   103                                  ;                       Register names in source code are in lower case (eax, edx).
   104                                  ;
   105                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   106                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   107                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   108                                  ;
   109                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   110                                  ;                       Routine names begin with a verb (Get, Read, Load).
   111                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   112                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   113                                  ;                       function but begin with a leading underscore (_) character.
   114                                  ;
   115                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   116                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   117                                  ;
   118                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   119                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   120                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   121                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   122                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   123                                  ;
   124                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   125                                  ;                       The 2nd letter of the variable label indicates the storage type.
   126                                  ;
   127                                  ;                       wq......        variable quad-word (resq)
   128                                  ;                       wd......        variable double-word (resd)
   129                                  ;                       ww......        variable word (resw)
   130                                  ;                       wb......        variable byte (resb)
   131                                  ;                       ws......        writable structure
   132                                  ;
   133                                  ;-----------------------------------------------------------------------------------------------------------------------
   134                                  ;=======================================================================================================================
   135                                  ;
   136                                  ;       Equates
   137                                  ;
   138                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   139                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   140                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   141                                  ;       sets. Equates here are defined in the following groupings:
   142                                  ;
   143                                  ;       Hardware-Defined Values
   144                                  ;
   145                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   146                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   147                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   148                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   149                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   150                                  ;       EX86...         Intel x86 CPU architecture values
   151                                  ;
   152                                  ;       Firmware-Defined Values
   153                                  ;
   154                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   155                                  ;
   156                                  ;       Standards-Based Values
   157                                  ;
   158                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   159                                  ;
   160                                  ;       Operating System Values
   161                                  ;
   162                                  ;       EBOOT...        Boot sector and loader values
   163                                  ;       ECON...         Console values (dimensions and attributes)
   164                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   165                                  ;       EKEYF...        Keyboard status flags
   166                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   167                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   168                                  ;       EMSG...         Message identifers
   169                                  ;
   170                                  ;=======================================================================================================================
   171                                  ;-----------------------------------------------------------------------------------------------------------------------
   172                                  ;
   173                                  ;       Hardware-Defined Values
   174                                  ;
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;
   178                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   179                                  ;
   180                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   181                                  ;       for CGA, EGA, VGA and compatible video modes.
   182                                  ;
   183                                  ;-----------------------------------------------------------------------------------------------------------------------
   184                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   185                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   186                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   187                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   188                                  ;-----------------------------------------------------------------------------------------------------------------------
   189                                  ;
   190                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   191                                  ;
   192                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   193                                  ;
   194                                  ;-----------------------------------------------------------------------------------------------------------------------
   195                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   196                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   197                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   198                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   199                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   200                                  ;-----------------------------------------------------------------------------------------------------------------------
   201                                  ;
   202                                  ;       8042 Keyboard Controller                                                EKEYB...
   203                                  ;
   204                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   205                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   206                                  ;
   207                                  ;-----------------------------------------------------------------------------------------------------------------------
   208                                  EKEYBPORTDATA           equ     060h                                            ;data port
   209                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   210                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   211                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   212                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   213                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   214                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   215                                                                                                                  ;---------------------------------------
   216                                                                                                                  ;       Keyboard Scan Codes
   217                                                                                                                  ;---------------------------------------
   218                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   219                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   220                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   221                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   222                                  EKEYBSLASH              equ     035h                                            ;slash
   223                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   224                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   225                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   226                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   227                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   228                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   229                                  EKEYBUP                 equ     080h                                            ;up
   230                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   231                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   232                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   233                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   234                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   235                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   236                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   237                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   238                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   239                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   240                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   241                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   242                                  ;-----------------------------------------------------------------------------------------------------------------------
   243                                  ;
   244                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   245                                  ;
   246                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   247                                  ;       external devices and signals a hardware interrupt to the CPU.
   248                                  ;
   249                                  ;-----------------------------------------------------------------------------------------------------------------------
   250                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   251                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   252                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   253                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   254                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   255                                  ;-----------------------------------------------------------------------------------------------------------------------
   256                                  ;
   257                                  ;       8253 Programmable Interval Timer                                        EPIT...
   258                                  ;
   259                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   260                                  ;       approximately 18.2 times per second.
   261                                  ;
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  ;
   266                                  ;       x86 CPU Architecture                                                    ;EX86...
   267                                  ;
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   270                                  ;-----------------------------------------------------------------------------------------------------------------------
   271                                  ;
   272                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   273                                  ;
   274                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   275                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   276                                  ;
   277                                  ;       0.......        Segment is not present in memory (triggers int 11)
   278                                  ;       1.......        Segment is present in memory
   279                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   280                                  ;       ...0....        Segment is a system segment
   281                                  ;       ...00010                Local Descriptor Table
   282                                  ;       ...00101                Task Gate
   283                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   284                                  ;       ...01100                Call Gate (386)
   285                                  ;       ...01110                Interrupt Gate (386)
   286                                  ;       ...01111                Trap Gate (386)
   287                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   288                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   289                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   290                                  ;
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   293                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   294                                  ;-----------------------------------------------------------------------------------------------------------------------
   295                                  ;
   296                                  ;       Firmware-Defined Values
   297                                  ;
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  ;
   301                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   302                                  ;
   303                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   304                                  ;       BIOS interrupt supports several functions. The function code is typically passed in the AH register.
   305                                  ;
   306                                  ;-----------------------------------------------------------------------------------------------------------------------
   307                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   308                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   309                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   310                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   311                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   312                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   313                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   314                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   315                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   316                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   317                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   318                                  ;-----------------------------------------------------------------------------------------------------------------------
   319                                  ;
   320                                  ;       Standards-Based Values
   321                                  ;
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;-----------------------------------------------------------------------------------------------------------------------
   324                                  ;
   325                                  ;       ASCII                                                                   EASCII...
   326                                  ;
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   329                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   330                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   331                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   332                                  EASCIISPACE             equ     020h                                            ;space
   333                                  EASCIIUPPERA            equ     041h                                            ;'A'
   334                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   335                                  EASCIILOWERA            equ     061h                                            ;'a'
   336                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   337                                  EASCIITILDE             equ     07Eh                                            ;'~'
   338                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   339                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   340                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   341                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   342                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   343                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   344                                  EASCIICASE              equ     00100000b                                       ;case bit
   345                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  ;
   348                                  ;       Operating System Values
   349                                  ;
   350                                  ;-----------------------------------------------------------------------------------------------------------------------
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;
   353                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   354                                  ;
   355                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   356                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   357                                  ;
   358                                  ;-----------------------------------------------------------------------------------------------------------------------
   359                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   360                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   361                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   362                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   363                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   364                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   365                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   366                                  ;-----------------------------------------------------------------------------------------------------------------------
   367                                  ;       Console Constants                                                       ECON...
   368                                  ;-----------------------------------------------------------------------------------------------------------------------
   369                                  ECONCOLS                equ     80                                              ;columns per row
   370                                  ECONROWS                equ     24                                              ;console rows
   371                                  ECONOIAROW              equ     24                                              ;operator information area row
   372                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   373                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   374                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   375                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   376                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   377                                  ;-----------------------------------------------------------------------------------------------------------------------
   378                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   381                                  EGDTCGA                 equ     020h                                            ;cga video selector
   382                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   383                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   384                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   385                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   386                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   387                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   388                                  ;-----------------------------------------------------------------------------------------------------------------------
   389                                  ;       Keyboard Flags                                                          EKEYF...
   390                                  ;-----------------------------------------------------------------------------------------------------------------------
   391                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   392                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   393                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   394                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   395                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   396                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   397                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   398                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   399                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   400                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   401                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   402                                  ;-----------------------------------------------------------------------------------------------------------------------
   403                                  ;       Kernel Constants                                                        EKRN...
   404                                  ;-----------------------------------------------------------------------------------------------------------------------
   405                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   406                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   407                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   408                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   409                                  ;-----------------------------------------------------------------------------------------------------------------------
   410                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   411                                  ;-----------------------------------------------------------------------------------------------------------------------
   412                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   413                                  ;-----------------------------------------------------------------------------------------------------------------------
   414                                  ;       Message Identifiers                                                     EMSG...
   415                                  ;-----------------------------------------------------------------------------------------------------------------------
   416                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   417                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   418                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   419                                  ;=======================================================================================================================
   420                                  ;
   421                                  ;       Structures
   422                                  ;
   423                                  ;=======================================================================================================================
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  ;
   426                                  ;       MQUEUE
   427                                  ;
   428                                  ;       The MQUEUE structure maps memory used for a message queue.
   429                                  ;
   430                                  ;-----------------------------------------------------------------------------------------------------------------------
   431                                  struc                   MQUEUE
   432 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   433 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   434 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   435                                  endstruc
   436                                  ;-----------------------------------------------------------------------------------------------------------------------
   437                                  ;
   438                                  ;       OSDATA
   439                                  ;
   440                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   441                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   442                                  ;
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  struc                   OSDATA
   445 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   446 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   447 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   448 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   449 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   450 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   451 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   452 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   453 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   454 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   455 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   456 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   457 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   458 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   459 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   460 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   461 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   462 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   463 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   464 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   465 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   466 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   467 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   468 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   469 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   470 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   471 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   472 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   473 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   474 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   475 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   476 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   477 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   478 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   479 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   480 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   481 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   482 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   483 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   484 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   485 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   486 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   487 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   488 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   489 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   490 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   491 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   492 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   493 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   494 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   495 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   496 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   497 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   498 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   499 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   500 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   501 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   502 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   503 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   504 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   505 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   506 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   507 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   508 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   509 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   510 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   511 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   512 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   513 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   514 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   515 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   516 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   517 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   518 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   519 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   520 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   521 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   522 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   523 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   524 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   525 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   526 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   527 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   528 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   529 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   530 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   531 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   532 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   533 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   534 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   535 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   536 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   537 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   538 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   539 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   540 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   541 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   542 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   543 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   544 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   545 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   546                                  ;-----------------------------------------------------------------------------------------------------------------------
   547                                  ;
   548                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   549                                  ;
   550                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   551                                  ;
   552                                  ;-----------------------------------------------------------------------------------------------------------------------
   553                                  ECONDATA                equ     ($)
   554 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   555 00000804 <res 00000004>          wdConsolePanel          resd    1                                               ;console panel definition address
   556 00000808 <res 00000004>          wdConsoleField          resd    1                                               ;console field definition address
   557 0000080C <res 00000004>          wdConsoleInput          resd    1                                               ;console field input address
   558 00000810 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   559 00000860 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   560 000008B0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   561 00000900 <res 00000050>          wzConsoleMemBuf0        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx  ........
   562 00000950 <res 00000050>          wzConsoleMemBuf1        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   563 000009A0 <res 00000050>          wzConsoleMemBuf2        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   564 000009F0 <res 00000050>          wzConsoleMemBuf3        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   565 00000A40 <res 00000050>          wzConsoleMemBuf4        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx  ........
   566 00000A90 <res 00000050>          wzConsoleMemBuf5        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   567 00000AE0 <res 00000050>          wzConsoleMemBuf6        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   568 00000B30 <res 00000050>          wzConsoleMemBuf7        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   569 00000B80 <res 00000050>          wzConsoleMemBuf8        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx  ........
   570 00000BD0 <res 00000050>          wzConsoleMemBuf9        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   571 00000C20 <res 00000050>          wzConsoleMemBufA        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   572 00000C70 <res 00000050>          wzConsoleMemBufB        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   573 00000CC0 <res 00000050>          wzConsoleMemBufC        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx  ........
   574 00000D10 <res 00000050>          wzConsoleMemBufD        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   575 00000D60 <res 00000050>          wzConsoleMemBufE        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   576 00000DB0 <res 00000050>          wzConsoleMemBufF        resb    80                                              ;aaaaaaaa xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx
   577 00000E00 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   578 00000E01 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   579 00000E02 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   580 00000E03 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   581 00000E04 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   582 00000E05 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   583 00000E06 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   584 00000E07 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   585 00000E08 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   586 00000E09 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   587 00000E0A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   588 00000E0B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   589                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   590                                  ;-----------------------------------------------------------------------------------------------------------------------
   591                                  ;
   592                                  ;       End of OS Variables
   593                                  ;
   594                                  ;-----------------------------------------------------------------------------------------------------------------------
   595                                  endstruc
   596                                  ;-----------------------------------------------------------------------------------------------------------------------
   597                                  ;
   598                                  ;       Macros
   599                                  ;
   600                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   601                                  ;
   602                                  ;-----------------------------------------------------------------------------------------------------------------------
   603                                  %macro                  mint    1
   604                                  _%1                     equ     ($-$$) / EX86DESCLEN
   605                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   606                                  %endmacro
   607                                  %macro                  mtrap   1
   608                                  _%1                     equ     ($-$$) / EX86DESCLEN
   609                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   610                                  %endmacro
   611                                  %macro                  menter  1
   612                                  ?%1                     equ     ($-$$)
   613                                  %endmacro
   614                                  %macro                  tsvce   1
   615                                  e%1                     equ     ($-tsvc)/4
   616                                                          dd      %1
   617                                  %endmacro
   618                                  %ifdef BUILDBOOT
   619                                  ;=======================================================================================================================
   620                                  ;
   621                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   622                                  ;
   623                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   624                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   625                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   626                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   627                                  ;
   628                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   629                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   630                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   631                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   632                                  ;       immediately followed by a disk parameter table.
   633                                  ;
   634                                  ;=======================================================================================================================
   635                                                          cpu     8086                                            ;assume minimal CPU
   636                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   637                                                          bits    16                                              ;16-bit code at power-up
   638                                  %ifdef BUILDPREP
   639 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   640                                  %else
   641                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   642                                  %endif
   643                                  ;-----------------------------------------------------------------------------------------------------------------------
   644                                  ;
   645                                  ;       Disk Parameter Table
   646                                  ;
   647                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   648                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   649                                  ;
   650                                  ;-----------------------------------------------------------------------------------------------------------------------
   651 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   652 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   653 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   654 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   655 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   656 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   657 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   658 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   659 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   660                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   661 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   662 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   663 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   664                                  ;
   665                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   666                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   667                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   668                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   669                                  ;       given several possible starting values for CS:IP.
   670                                  ;
   671                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   672 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   673                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   674 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   675 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   676 00000025 B104                                            mov     cl,4                                            ;shift count
   677 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   678 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   679 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   680                                  ;
   681                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   682                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   683                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   684                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   685                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   686                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   687                                  ;
   688 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   689 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   690 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   691 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   692 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   693                                  ;
   694                                  ;       Our boot addressability is now set up according to the following diagram.
   695                                  ;
   696                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   697                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   698                                  ;                               |  256 = 100h bytes                             |
   699                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   700                                  ;                               |  Boot Sector (vstart=0100h)                   |
   701                                  ;                               |  1 sector = 512 = 200h bytes                  |
   702                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   703                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   704                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   705                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   706                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   707                                  ;                               |  2 sectors = 1024 = 400h bytes
   708                                  ;                       009400  +-----------------------------------------------+ DS:1900
   709                                  ;
   710                                  ;       On entry, DL indicates the drive being booted from.
   711                                  ;
   712 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   713                                  ;
   714                                  ;       Compute directory i/o buffer address.
   715                                  ;
   716 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   717 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   718 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   719 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   720                                  ;
   721                                  ;       Compute segment where os.com will be loaded.
   722                                  ;
   723 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   724 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   725 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   726 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   727                                  ;
   728                                  ;       Set the video mode to 80 column, 25 row, text.
   729                                  ;
   730 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   731 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   732                                  ;
   733                                  ;       Write a message to the console so we know we have our addressability established.
   734                                  ;
   735 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   736 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   737                                  ;
   738                                  ;       Initialize the number of directory sectors to search.
   739                                  ;
   740 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   741 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   742                                  ;
   743                                  ;       Compute number of directory sectors and initialize overhead count.
   744                                  ;
   745 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   746 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   747 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   748 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   749                                  ;
   750                                  ;       Compute directory entries per sector.
   751                                  ;
   752 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   753 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   754 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   755                                  ;
   756                                  ;       Compute first logical directory sector and update overhead count.
   757                                  ;
   758 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   759 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   760 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   761 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   762 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   763 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   764                                  ;
   765                                  ;       Read directory sector.
   766                                  ;
   767 0000008E B001                    .30                     mov     al,1                                            ;sector count
   768 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   769 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   770 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   771                                  ;
   772                                  ;       Setup variables to search this directory sector.
   773                                  ;
   774 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   775 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   776 000000A1 7603                                            jna     .40                                             ;no, continue
   777 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   778 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   779 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   780 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   781                                  ;
   782                                  ;       Loop through directory sectors searching for kernel program.
   783                                  ;
   784 000000B1 56                      .50                     push    si                                              ;save kernel name address
   785 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   786 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   787 000000B6 FC                                              cld                                                     ;forward strings
   788 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   789 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   790 000000BA 5E                                              pop     si                                              ;restore kernel name address
   791 000000BB 7418                                            je      .60                                             ;exit loop if found
   792 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   793 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   794 000000C2 75ED                                            jnz     .50                                             ;next entry
   795                                  ;
   796                                  ;       Repeat search if we are not at the end of the directory.
   797                                  ;
   798 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   799 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   800 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   801 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   802 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   803                                  ;
   804                                  ;       If we find the kernel program in the directory, read the FAT.
   805                                  ;
   806 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   807 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   808 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   809 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   810 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   811 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   812                                  ;
   813                                  ;       Get the starting cluster of the kernel program and target address.
   814                                  ;
   815 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   816 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   817                                  ;
   818                                  ;       Read each program cluster into RAM.
   819                                  ;
   820 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   821 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   822 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   823 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   824 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   825 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   826 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   827 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   828 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   829                                  ;
   830                                  ;       Update buffer pointer for next cluster.
   831                                  ;
   832 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   833 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   834 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   835 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   836 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   837                                  ;
   838                                  ;       Compute next cluster number.
   839                                  ;
   840 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   841 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   842 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   843 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   844 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   845 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   846 00000120 83E701                                          and     di,1                                            ;get low bit
   847 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   848 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   849 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   850                                  ;
   851                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   852                                  ;
   853 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   854 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   855 00000130 B104                                            mov     cl,4                                            ;shift count
   856 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   857 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   858 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   859 0000013A 75B2                                            jne     .70                                             ;no, continue
   860                                  ;
   861                                  ;       Transfer control to the operating system program.
   862                                  ;
   863 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   864 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   865 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   866                                  ;
   867                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   868                                  ;
   869 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   870 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   871 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   872 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   873 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   874 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   875 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   876 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   877 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   878 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   879                                  ;
   880                                  ;       Try maxtries times to read sector.
   881                                  ;
   882 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   883 00000160 53                      .10                     push    bx                                              ;save buffer address
   884 00000161 51                                              push    cx                                              ;save retry count
   885 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   886 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   887 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   888 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   889 0000016F 59                                              pop     cx                                              ;restore retry count
   890 00000170 5B                                              pop     bx                                              ;restore buffer address
   891 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   892 00000173 E2EB                                            loop    .10                                             ;retry
   893                                  ;
   894                                  ;       Handle disk error: convert to ASCII and store in error string.
   895                                  ;
   896 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   897 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   898 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   899 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   900 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   901 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   902 00000183 7203                                            jb      .20                                             ;continue if numeral
   903 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   904 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   905 0000018A 7203                                            jb      .30                                             ;continue if numeral
   906 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   907 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   908 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   909 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   910                                  ;
   911                                  ;       Wait for a key press.
   912                                  ;
   913 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   914 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   915 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   916 0000019E FB                                              sti                                                     ;enable maskable interrupts
   917 0000019F F4                                              hlt                                                     ;wait for interrupt
   918 000001A0 EBF6                                            jmp     .10                                             ;repeat
   919                                  ;
   920                                  ;       Reset the system.
   921                                  ;
   922 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   923 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   924 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   925 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   926 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   927                                  ;
   928                                  ;       Display text message.
   929                                  ;
   930 000001AA FC                      BootPrint               cld                                                     ;forward strings
   931 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   932 000001AC 84C0                                            test    al,al                                           ;end of string?
   933 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   934 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   935 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   936 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   937 000001B6 C3                      BootReturn              ret                                                     ;return
   938                                  ;-----------------------------------------------------------------------------------------------------------------------
   939                                  ;
   940                                  ;       Constants
   941                                  ;
   942                                  ;-----------------------------------------------------------------------------------------------------------------------
   943 000001B7 90                                              align   2
   944 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   945 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   945 000001C3 4F4D               
   946 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   946 000001CE 530D0A00           
   947 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   947 000001DB 7220               
   948 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   949 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   949 000001E9 6700               
   950                                  ;-----------------------------------------------------------------------------------------------------------------------
   951                                  ;
   952                                  ;       Work Areas
   953                                  ;
   954                                  ;-----------------------------------------------------------------------------------------------------------------------
   955 000001EB 90                                              align   2
   956 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   957 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   958 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   959 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   960 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   961                                  wwReadCountCommand      equ     $                                               ;read count and command
   962 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   963 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   964                                  wwDriveHead             equ     $                                               ;drive, head (word)
   965 000001F8 00                      wbDrive                 db      0                                               ;drive
   966 000001F9 00                      wbHead                  db      0                                               ;head
   967                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   968 000001FA 00                                              db      0                                               ;sector
   969 000001FB 00                      wbTrack                 db      0                                               ;track
   970 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   971 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   972                                  %endif
   973                                  %ifdef BUILDPREP
   974                                  ;=======================================================================================================================
   975                                  ;
   976                                  ;       Diskette Preparation Code
   977                                  ;
   978                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   979                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   980                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   981                                  ;
   982                                  ;=======================================================================================================================
   983                                  ;
   984                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   985                                  ;
   986 00000200 BE[CC02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
   987 00000203 E8A4FF                                          call    BootPrint                                       ;display message
   988                                  ;
   989                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   990                                  ;
   991 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   992 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   993 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
   994 0000020C FB                                              sti                                                     ;enable interrupts
   995 0000020D F4                                              hlt                                                     ;wait for interrupt
   996 0000020E EBF6                                            jmp     .10                                             ;repeat
   997 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   998 00000212 7407                                            je      .30                                             ;yes, branch
   999 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1000 00000216 75EE                                            jne     .10                                             ;no, repeat
  1001 00000218 E9AB00                                          jmp     .120                                            ;yes, exit program
  1002                                  ;
  1003                                  ;       Display writing-sector message and patch the JMP instruction.
  1004                                  ;
  1005 0000021B BE[7004]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1006 0000021E E889FF                                          call    BootPrint                                       ;display message
  1007 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
  1008 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
  1009 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
  1010                                  ;
  1011                                  ;       Try to read the boot sector.
  1012                                  ;
  1013 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1014 0000022C 51                      .40                     push    cx                                              ;save remaining tries
  1015 0000022D BB[780A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
  1016 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1017 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
  1018 00000236 B001                                            mov     al,1                                            ;one sector
  1019 00000238 B402                                            mov     ah,EBIOSFNREADSECTOR                            ;read function
  1020 0000023A CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
  1021 0000023C 59                                              pop     cx                                              ;restore remaining retries
  1022 0000023D 7307                                            jnc     .50                                             ;skip ahead if successful
  1023 0000023F E2EB                                            loop    .40                                             ;try again
  1024 00000241 BE[A004]                                        mov     si,czPrepMsg20                                  ;read-error message address
  1025 00000244 EB2D                                            jmp     .70                                             ;branch to error routine
  1026                                  ;
  1027                                  ;       Copy diskette parms from input buffer to output buffer.
  1028                                  ;
  1029 00000246 BE[780A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1030 00000249 83C60B                                          add     si,11                                           ;skip over JMP and system ID
  1031 0000024C BF[0000]                                        mov     di,Boot                                         ;output buffer address
  1032 0000024F 83C70B                                          add     di,11                                           ;skip over JMP and system ID
  1033 00000252 B91300                                          mov     cx,19                                           ;length of diskette parameters
  1034 00000255 FC                                              cld                                                     ;forward string copies
  1035 00000256 F3A4                                            rep     movsb                                           ;copy diskette parameters
  1036                                  ;
  1037                                  ;       Try to write boot sector to diskette.
  1038                                  ;
  1039 00000258 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1040 0000025B 51                      .60                     push    cx                                              ;save remaining tries
  1041 0000025C BB[0000]                                        mov     bx,Boot                                         ;output buffer address
  1042 0000025F BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1043 00000262 B90100                                          mov     cx,1                                            ;track zero, sector one
  1044 00000265 B001                                            mov     al,1                                            ;one sector
  1045 00000267 B403                                            mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1046 00000269 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
  1047 0000026B 59                                              pop     cx                                              ;restore remaining retries
  1048 0000026C 7326                                            jnc     .100                                            ;skip ahead if successful
  1049 0000026E E2EB                                            loop    .60                                             ;try again
  1050 00000270 BE[EE04]                                        mov     si,czPrepMsg30                                  ;write-error message address
  1051                                  ;
  1052                                  ;       Convert the error code to ASCII and display the error message.
  1053                                  ;
  1054 00000273 50                      .70                     push    ax                                              ;save error code
  1055 00000274 88E0                                            mov     al,ah                                           ;copy error code
  1056 00000276 B400                                            mov     ah,0                                            ;AX = error code
  1057 00000278 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1058 0000027A F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1059 0000027C 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1060 0000027F 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1061 00000282 7203                                            jb      .80                                             ;yes, continue
  1062 00000284 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1063 00000287 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1064 00000289 7202                                            jb      .90                                             ;yes, continue
  1065 0000028B 0407                                            add     al,7                                            ;no, make ASCII
  1066 0000028D 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1067 00000290 E817FF                                          call    BootPrint                                       ;write error message
  1068 00000293 58                                              pop     ax                                              ;restore error code
  1069                                  ;
  1070                                  ;       Display the completion message.
  1071                                  ;
  1072 00000294 BE[3A05]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1073 00000297 88E0                                            mov     al,ah                                           ;BIOS return code
  1074 00000299 3C00                                            cmp     al,0                                            ;success?
  1075 0000029B 7426                                            je      .110                                            ;yes, continue
  1076 0000029D BE[D905]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1077 000002A0 3C01                                            cmp     al,1                                            ;disk parameter error?
  1078 000002A2 741F                                            je      .110                                            ;yes, continue
  1079 000002A4 BE[A306]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1080 000002A7 3C02                                            cmp     al,2                                            ;address mark not found?
  1081 000002A9 7418                                            je      .110                                            ;yes, continue
  1082 000002AB BE[2C07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1083 000002AE 3C03                                            cmp     al,3                                            ;protected disk?
  1084 000002B0 7411                                            je      .110                                            ;yes, continue
  1085 000002B2 BE[E607]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1086 000002B5 3C06                                            cmp     al,6                                            ;diskette removed?
  1087 000002B7 740A                                            je      .110                                            ;yes, continue
  1088 000002B9 BE[1609]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1089 000002BC 3C80                                            cmp     al,80H                                          ;drive timed out?
  1090 000002BE 7403                                            je      .110                                            ;yes, continue
  1091 000002C0 BE[C709]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1092 000002C3 E8E4FE                  .110                    call    BootPrint                                       ;display result message
  1093 000002C6 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1094 000002C9 CD21                                            int     021h                                            ;terminate DOS program
  1095 000002CB C3                                              ret                                                     ;return (should not execute)
  1096                                  ;-----------------------------------------------------------------------------------------------------------------------
  1097                                  ;
  1098                                  ;       Diskette Preparation Messages
  1099                                  ;
  1100                                  ;-----------------------------------------------------------------------------------------------------------------------
  1101 000002CC 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1101 000002D5 5320426F6F742D4469-
  1101 000002DE 736B65747465205072-
  1101 000002E7 657061726174696F6E-
  1101 000002F0 2050726F6772616D   
  1102 000002F8 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2019 David J. Walling. All rights reserved."
  1102 00000301 687420284329203230-
  1102 0000030A 31302D323031392044-
  1102 00000313 61766964204A2E2057-
  1102 0000031C 616C6C696E672E2041-
  1102 00000325 6C6C20726967687473-
  1102 0000032E 207265736572766564-
  1102 00000337 2E                 
  1103 00000338 0D0A                                            db      13,10
  1104 0000033A 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1104 00000343 6F6772616D206F7665-
  1104 0000034C 727772697465732074-
  1104 00000355 686520626F6F742073-
  1104 0000035E 6563746F72206F6620-
  1104 00000367 61206469736B657474-
  1104 00000370 652077697468207374-
  1104 00000379 617274757020636F64-
  1104 00000382 652074686174       
  1105 00000388 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1105 00000391 616420746865206F70-
  1105 0000039A 65726174696E672073-
  1105 000003A3 797374656D20696E74-
  1105 000003AC 6F206D656D6F727920-
  1105 000003B5 7768656E2074686520-
  1105 000003BE 636F6D707574657220-
  1105 000003C7 697320726573746172-
  1105 000003D0 7465642E           
  1106 000003D4 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1106 000003DD 6565642C20706C6163-
  1106 000003E6 65206120666F726D61-
  1106 000003EF 74746564206469736B-
  1106 000003F8 6574746520696E746F-
  1106 00000401 20647269766520413A-
  1106 0000040A 20616E642070726573-
  1106 00000413 732074686520456E74-
  1106 0000041C 6572206B65792E     
  1107 00000423 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1107 0000042C 20746869732070726F-
  1107 00000435 6772616D2077697468-
  1107 0000043E 6F7574207072657061-
  1107 00000447 72696E672061206469-
  1107 00000450 736B657474652C2070-
  1107 00000459 726573732074686520-
  1107 00000462 457363617065206B65-
  1107 0000046B 792E               
  1108 0000046D 0D0A00                                          db      13,10,0
  1109 00000470 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1109 00000479 2074686520626F6F74-
  1109 00000482 20736563746F722074-
  1109 0000048B 6F2074686520646973-
  1109 00000494 6B65747465202E2E2E 
  1110 0000049D 0D0A00                                          db      13,10,0
  1111 000004A0 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1111 000004A9 6F722D636F6465202E-
  1111 000004B2 2E2077617320726574-
  1111 000004BB 75726E65642066726F-
  1111 000004C4 6D207468652042494F-
  1111 000004CD 53207768696C652072-
  1111 000004D6 656164696E67206672-
  1111 000004DF 6F6D20746865206469-
  1111 000004E8 736B2E             
  1112 000004EB 0D0A00                                          db      13,10,0
  1113 000004EE 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1113 000004F7 6F722D636F6465202E-
  1113 00000500 2E2077617320726574-
  1113 00000509 75726E65642066726F-
  1113 00000512 6D207468652042494F-
  1113 0000051B 53207768696C652077-
  1113 00000524 726974696E6720746F-
  1113 0000052D 20746865206469736B-
  1113 00000536 2E                 
  1114 00000537 0D0A00                                          db      13,10,0
  1115 0000053A 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1115 00000543 742D736563746F7220-
  1115 0000054C 776173207772697474-
  1115 00000555 656E20746F20746865-
  1115 0000055E 206469736B65747465-
  1115 00000567 2E204265666F726520-
  1115 00000570 626F6F74696E672079-
  1115 00000579 6F757220636F6D7075-
  1115 00000582 7465722077697468   
  1116 0000058A 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1116 00000593 736B657474652C206D-
  1116 0000059C 616B65207375726520-
  1116 000005A5 746861742074686520-
  1116 000005AE 66696C65204F532E43-
  1116 000005B7 4F4D20697320636F70-
  1116 000005C0 696564206F6E746F20-
  1116 000005C9 746865206469736B65-
  1116 000005D2 7474652E           
  1117 000005D6 0D0A00                                          db      13,10,0
  1118 000005D9 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1118 000005E2 76616C696420446973-
  1118 000005EB 6B20506172616D6574-
  1118 000005F4 6572               
  1119 000005F6 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1119 000005FF 20616E20696E746572-
  1119 00000608 6E616C206572726F72-
  1119 00000611 206361757365642062-
  1119 0000061A 7920616E20696E7661-
  1119 00000623 6C69642076616C7565-
  1119 0000062C 206265696E67207061-
  1119 00000635 7373656420746F2061-
  1119 0000063E 2073797374656D     
  1120 00000645 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1120 0000064E 6E2E20546865204F53-
  1120 00000657 424F4F542E434F4D20-
  1120 00000660 66696C65206D617920-
  1120 00000669 626520636F72727570-
  1120 00000672 742E20436F7079206F-
  1120 0000067B 7220646F776E6C6F61-
  1120 00000684 64207468652066696C-
  1120 0000068D 6520616761696E     
  1121 00000694 0D0A616E6420726574-                             db      13,10,"and retry."
  1121 0000069D 72792E             
  1122 000006A0 0D0A00                                          db      13,10,0
  1123 000006A3 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1123 000006AC 6472657373204D6172-
  1123 000006B5 6B204E6F7420466F75-
  1123 000006BE 6E64               
  1124 000006C0 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1124 000006C9 726F7220696E646963-
  1124 000006D2 617465732061207068-
  1124 000006DB 79736963616C207072-
  1124 000006E4 6F626C656D20776974-
  1124 000006ED 682074686520666C6F-
  1124 000006F6 707079206469736B65-
  1124 000006FF 7474652E20506C6561-
  1124 00000708 7365207265747279   
  1125 00000710 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1125 00000719 6E6F74686572206469-
  1125 00000722 736B657474652E     
  1126 00000729 0D0A00                                          db      13,10,0
  1127 0000072C 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1127 00000735 6F7465637465642044-
  1127 0000073E 69736B             
  1128 00000741 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1128 0000074A 726F72206973207573-
  1128 00000753 75616C6C7920636175-
  1128 0000075C 736564206279206174-
  1128 00000765 74656D7074696E6720-
  1128 0000076E 746F20777269746520-
  1128 00000777 746F20612077726974-
  1128 00000780 652D70726F74656374-
  1128 00000789 6564206469736B2E   
  1129 00000791 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1129 0000079A 686520277772697465-
  1129 000007A3 2D70726F7465637427-
  1129 000007AC 2073657474696E6720-
  1129 000007B5 6F6E20746865206469-
  1129 000007BE 736B206F7220726574-
  1129 000007C7 7279207573696E6720-
  1129 000007D0 7573696E6720616E6F-
  1129 000007D9 74686572206469736B-
  1129 000007E2 2E                 
  1130 000007E3 0D0A00                                          db      13,10,0
  1131 000007E6 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1131 000007EF 736B65747465205265-
  1131 000007F8 6D6F766564         
  1132 000007FD 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1132 00000806 726F72206D61792069-
  1132 0000080F 6E6469636174652074-
  1132 00000818 686174207468652066-
  1132 00000821 6C6F70707920646973-
  1132 0000082A 6B6574746520686173-
  1132 00000833 206265656E2072656D-
  1132 0000083C 6F7665642066726F6D-
  1132 00000845 20746865           
  1133 00000849 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1133 00000852 652064726976652E20-
  1133 0000085B 4F6E20736F6D652073-
  1133 00000864 797374656D732C2074-
  1133 0000086D 68697320636F646520-
  1133 00000876 6D617920616C736F20-
  1133 0000087F 6F6363757220696620-
  1133 00000888 746865206469736B65-
  1133 00000891 747465206973       
  1134 00000897 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1134 000008A0 70726F746563746564-
  1134 000008A9 2E2720506C65617365-
  1134 000008B2 207665726966792074-
  1134 000008BB 686174207468652064-
  1134 000008C4 69736B657474652069-
  1134 000008CD 73206E6F7420777269-
  1134 000008D6 74652D70726F746563-
  1134 000008DF 74656420616E64     
  1135 000008E6 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1135 000008EF 65726C7920696E7365-
  1135 000008F8 7274656420696E2074-
  1135 00000901 6865206469736B6574-
  1135 0000090A 74652064726976652E 
  1136 00000913 0D0A00                                          db      13,10,0
  1137 00000916 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1137 0000091F 6976652054696D6564-
  1137 00000928 204F7574           
  1138 0000092C 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1138 00000935 726F7220757375616C-
  1138 0000093E 6C7920696E64696361-
  1138 00000947 746573207468617420-
  1138 00000950 6E6F206469736B6574-
  1138 00000959 746520697320696E20-
  1138 00000962 746865206469736B65-
  1138 0000096B 747465206472697665-
  1138 00000974 2E20506C65617365   
  1139 0000097C 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1139 00000985 726520746861742074-
  1139 0000098E 6865206469736B6574-
  1139 00000997 74652069732070726F-
  1139 000009A0 7065726C7920736561-
  1139 000009A9 74656420696E207468-
  1139 000009B2 652064726976652061-
  1139 000009BB 6E642072657472792E 
  1140 000009C4 0D0A00                                          db      13,10,0
  1141 000009C7 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1141 000009D0 6B6E6F776E20457272-
  1141 000009D9 6F72               
  1142 000009DB 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1142 000009E4 6F722D636F64652072-
  1142 000009ED 657475726E65642062-
  1142 000009F6 79207468652042494F-
  1142 000009FF 53206973206E6F7420-
  1142 00000A08 61207265636F676E69-
  1142 00000A11 7A6564206572726F72-
  1142 00000A1A 2E20506C6561736520-
  1142 00000A23 636F6E73756C74     
  1143 00000A2A 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1143 00000A33 6D7075746572277320-
  1143 00000A3C 746563686E6963616C-
  1143 00000A45 207265666572656E63-
  1143 00000A4E 6520666F7220612064-
  1143 00000A57 65736372697074696F-
  1143 00000A60 6E206F662074686973-
  1143 00000A69 206572726F7220636F-
  1143 00000A72 64652E             
  1144 00000A75 0D0A00                                          db      13,10,0
  1145                                  wcPrepInBuf             equ     $
  1146                                  %endif
  1147                                  %ifdef BUILDDISK
  1148                                  ;=======================================================================================================================
  1149                                  ;
  1150                                  ;       File Allocation Tables
  1151                                  ;
  1152                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1153                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1154                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1155                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1156                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1157                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1158                                  ;       the last cluster in the chain.
  1159                                  ;
  1160                                  ;       Every three bytes encode two FAT entries as follows:
  1161                                  ;
  1162                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1163                                  ;
  1164                                  ;=======================================================================================================================
  1165                                  ;-----------------------------------------------------------------------------------------------------------------------
  1166                                  ;
  1167                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1168                                  ;
  1169                                  ;-----------------------------------------------------------------------------------------------------------------------
  1170                                  section                 fat1                                                    ;first copy of FAT
  1171                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1172                                                          db      005h,060h,000h, 007h,080h,000h
  1173                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1174                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1175                                                          db      011h,020h,001h, 013h,040h,001h
  1176                                                          db      015h,060h,001h, 017h,080h,001h
  1177                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1178                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1179                                                          db      021h,020h,002h, 023h,040h,002h
  1180                                                          db      025h,060h,002h, 027h,080h,002h
  1181                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1182                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1183                                  ;-----------------------------------------------------------------------------------------------------------------------
  1184                                  ;
  1185                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1186                                  ;
  1187                                  ;-----------------------------------------------------------------------------------------------------------------------
  1188                                  section                 fat2                                                    ;second copy of FAT
  1189                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1190                                                          db      005h,060h,000h, 007h,080h,000h
  1191                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1192                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1193                                                          db      011h,020h,001h, 013h,040h,001h
  1194                                                          db      015h,060h,001h, 017h,080h,001h
  1195                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1196                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1197                                                          db      021h,020h,002h, 023h,040h,002h
  1198                                                          db      025h,060h,002h, 027h,080h,002h
  1199                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1200                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1201                                  ;-----------------------------------------------------------------------------------------------------------------------
  1202                                  ;
  1203                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1204                                  ;
  1205                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1206                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1207                                  ;       copy.
  1208                                  ;
  1209                                  ;-----------------------------------------------------------------------------------------------------------------------
  1210                                  section                 dir                                                     ;diskette directory
  1211                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1212                                                          db      020h                                            ;attribute (archive bit set)
  1213                                                          times   10 db 0                                         ;unused
  1214                                                          dw      0h                                              ;time
  1215                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1216                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1217                                                          dw      2                                               ;first cluster
  1218                                                          dd      05400h                                          ;file size
  1219                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1220                                  %endif
  1221                                  %ifdef BUILDCOM
  1222                                  ;=======================================================================================================================
  1223                                  ;
  1224                                  ;       OS.COM
  1225                                  ;
  1226                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1227                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1228                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1229                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1230                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1231                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1232                                  ;
  1233                                  ;       Our loader addressability is set up according to the following diagram.
  1234                                  ;
  1235                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1236                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1237                                  ;                               |  256 = 100h bytes                             |
  1238                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1239                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1240                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1241                                  ;                       007e00  +-----------------------------------------------+
  1242                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1243                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1244                                  ;                               |                                               |
  1245                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1246                                  ;                               |                                               |
  1247                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1248                                  ;                               |  Loader Code                                  |
  1249                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1250                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1251                                  ;
  1252                                  ;=======================================================================================================================
  1253                                  ;-----------------------------------------------------------------------------------------------------------------------
  1254                                  ;
  1255                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1256                                  ;
  1257                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1258                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1259                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1260                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1261                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1262                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1263                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1264                                  ;       registers.
  1265                                  ;
  1266                                  ;-----------------------------------------------------------------------------------------------------------------------
  1267                                                          cpu     8086                                            ;assume minimal CPU
  1268                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1269                                                          bits    16                                              ;this is 16-bit code
  1270                                  Loader                  push    cs                                              ;use the code segment
  1271                                                          pop     ds                                              ;...as our data segment
  1272                                                          push    cs                                              ;use the code segment
  1273                                                          pop     es                                              ;...as our extra segment
  1274                                  ;
  1275                                  ;       Write a message to the console so we know we have our addressability established.
  1276                                  ;
  1277                                                          mov     si,czStartingMsg                                ;starting message
  1278                                                          call    PutTTYString                                    ;display loader message
  1279                                  ;
  1280                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1281                                  ;
  1282                                                          call    GetCPUType                                      ;AL = cpu type
  1283                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1284                                                          cmp     al,3                                            ;80386+?
  1285                                                          jb      LoaderExit                                      ;no, exit with error message
  1286                                                          cpu     386                                             ;allow 80386 instructions
  1287                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1288                                                          call    PutTTYString                                    ;display message
  1289                                  ;
  1290                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1291                                  ;
  1292                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1293                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1294                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1295                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1296                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1297                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1298                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1299                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1300                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1301                                                          call    PutTTYString                                    ;display message
  1302                                  ;
  1303                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1304                                  ;
  1305                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1306                                                          pop     es                                              ;... as target segment
  1307                                                          xor     di,di                                           ;ES:DI = target address
  1308                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1309                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1310                                                          cld                                                     ;forward strings
  1311                                                          rep     movsb                                           ;copy kernel image
  1312                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1313                                                          call    PutTTYString                                    ;display message
  1314                                  ;
  1315                                  ;       Switch to protected mode.
  1316                                  ;
  1317                                                          xor     si,si                                           ;ES:SI = gdt addr
  1318                                                          mov     ss,si                                           ;protected mode ss
  1319                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1320                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1321                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1322                                                          mov     dx,001Fh                                        ;outer delay loop count
  1323                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1324                                                          loop    $                                               ;wait out pending interrupts
  1325                                                          dec     dx                                              ;restore outer loop count
  1326                                                          jnz     .10                                             ;continue outer loop
  1327                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1328                                  ;
  1329                                  ;       Enable hardware and maskable interrupts.
  1330                                  ;
  1331                                                          xor     al,al                                           ;enable all registers code
  1332                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1333                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1334                                                          sti                                                     ;enable maskable interrupts
  1335                                  ;
  1336                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1337                                  ;
  1338                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1339                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1340                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1341                                  ;-----------------------------------------------------------------------------------------------------------------------
  1342                                  ;
  1343                                  ;       Routine:        LoaderExit
  1344                                  ;
  1345                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1346                                  ;
  1347                                  ;       In:             DS:SI   string address
  1348                                  ;
  1349                                  ;-----------------------------------------------------------------------------------------------------------------------
  1350                                  LoaderExit              call    PutTTYString                                    ;display error message
  1351                                  ;
  1352                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1353                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1354                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1355                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1356                                  ;       The STI instruction enables maskable interrupts, including the keyboard. The CPU assures that the
  1357                                  ;       instruction immediately following STI will be executed before any interrupt is serviced.
  1358                                  ;
  1359                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1360                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1361                                                          jnz     .40                                             ;exit if key pressed
  1362                                                          sti                                                     ;enable maskable interrupts
  1363                                                          hlt                                                     ;wait for interrupt
  1364                                                          jmp     .30                                             ;repeat until keypress
  1365                                  ;
  1366                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1367                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1368                                  ;       HLT until the system resets.
  1369                                  ;
  1370                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1371                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1372                                  .50                     sti                                                     ;enable maskable interrupts
  1373                                                          hlt                                                     ;stop until reset, int, nmi
  1374                                                          jmp     .50                                             ;loop until restart kicks in
  1375                                  ;-----------------------------------------------------------------------------------------------------------------------
  1376                                  ;
  1377                                  ;       Routine:        GetCPUType
  1378                                  ;
  1379                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1380                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1381                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1382                                  ;
  1383                                  ;       Out:            AX      0 = 808x, v20, etc.
  1384                                  ;                               1 = 80186
  1385                                  ;                               2 = 80286
  1386                                  ;                               3 = 80386
  1387                                  ;
  1388                                  ;-----------------------------------------------------------------------------------------------------------------------
  1389                                  GetCPUType              mov     al,1                                            ;AL = 1
  1390                                                          mov     cl,32                                           ;shift count
  1391                                                          shr     al,cl                                           ;try a 32-bit shift
  1392                                                          or      al,al                                           ;did the shift happen?
  1393                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1394                                                          cpu     186
  1395                                                          push    sp                                              ;save stack pointer
  1396                                                          pop     cx                                              ;...into cx
  1397                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1398                                                          jne     .10                                             ;yes, cpu is 80186
  1399                                                          cpu     286
  1400                                                          inc     ax                                              ;AX = 2
  1401                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1402                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1403                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1404                                                          jz      .10                                             ;yes, cpu is 80286
  1405                                                          inc     ax                                              ;AX = 3
  1406                                  .10                     ret                                                     ;return
  1407                                  ;-----------------------------------------------------------------------------------------------------------------------
  1408                                  ;
  1409                                  ;       Routine:        PutTTYString
  1410                                  ;
  1411                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1412                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1413                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1414                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1415                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1416                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1417                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1418                                  ;                       to LODSB is not needed.
  1419                                  ;
  1420                                  ;       In:             DS:SI   address of string
  1421                                  ;
  1422                                  ;       Out:            DF      0
  1423                                  ;                       ZF      1
  1424                                  ;                       AL      0
  1425                                  ;
  1426                                  ;-----------------------------------------------------------------------------------------------------------------------
  1427                                  PutTTYString            cld                                                     ;forward strings
  1428                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1429                                                          test    al,al                                           ;end of string?
  1430                                                          jz      .20                                             ;... yes, exit our loop
  1431                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1432                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1433                                                          jmp     .10                                             ;repeat until done
  1434                                  .20                     ret                                                     ;return
  1435                                  ;-----------------------------------------------------------------------------------------------------------------------
  1436                                  ;
  1437                                  ;       Loader Data
  1438                                  ;
  1439                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1440                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1441                                  ;
  1442                                  ;-----------------------------------------------------------------------------------------------------------------------
  1443                                                          align   2
  1444                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1445                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1446                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1447                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1448                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1449                                                          db      "Please press any key to restart the computer.",13,10,0
  1450                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1451                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1452                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1453                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1454                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1455                                  ;=======================================================================================================================
  1456                                  ;
  1457                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1458                                  ;
  1459                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1460                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1461                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1462                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1463                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1464                                  ;
  1465                                  ;=======================================================================================================================
  1466                                  ;=======================================================================================================================
  1467                                  ;
  1468                                  ;       Kernel Tables
  1469                                  ;
  1470                                  ;=======================================================================================================================
  1471                                  ;-----------------------------------------------------------------------------------------------------------------------
  1472                                  ;
  1473                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1474                                  ;
  1475                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1476                                  ;       first descriptor must be all nulls.
  1477                                  ;
  1478                                  ;       6   5         4         3         2         1         0
  1479                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1480                                  ;       ----------------------------------------------------------------
  1481                                  ;       h......hffffmmmma......ab......................bn..............n
  1482                                  ;
  1483                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1484                                  ;               ffff                                                            flags
  1485                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1486                                  ;                       a......a                                                access
  1487                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1488                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1489                                  ;
  1490                                  ;       00000000                                                                all areas have base addresses below 2^24
  1491                                  ;               0...                                                            single-byte size granularity
  1492                                  ;               1...                                                            4-kilobyte size granularity
  1493                                  ;               .0..                                                            16-bit default for code segments
  1494                                  ;               .1..                                                            32-bit default for code segments
  1495                                  ;               ..0.                                                            intel-reserved; should be zero
  1496                                  ;               ...0                                                            available for operating system use
  1497                                  ;                   0000                                                        segment is less than 2^16 in size
  1498                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1499                                  ;                       1.......                                                segment is present in memory
  1500                                  ;                       .00.....                                                segment is of privilege level 0
  1501                                  ;                       ...0....                                                segment is of system or gate type
  1502                                  ;                       ...00010                                                local decriptor table (LDT)
  1503                                  ;                       ...01001                                                task state segment (TSS) available
  1504                                  ;                       ...01011                                                task state segment (TSS) busy
  1505                                  ;                       ...10...                                                data segment
  1506                                  ;                       ...10011                                                writable data (accessed)
  1507                                  ;                       ...11...                                                code segment
  1508                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1509                                  ;
  1510                                  ;-----------------------------------------------------------------------------------------------------------------------
  1511                                  section                 gdt                                                     ;global descriptor table
  1512                                                          dq      0000000000000000h                               ;00 required null selector
  1513                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1514                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1515                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1516                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1517                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1518                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1519                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1520                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1521                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1522                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1523                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1524                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1525                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1526                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1527                                  ;-----------------------------------------------------------------------------------------------------------------------
  1528                                  ;
  1529                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1530                                  ;
  1531                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1532                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1533                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1534                                  ;
  1535                                  ;       6   5         4         3         2         1         0
  1536                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1537                                  ;       ----------------------------------------------------------------
  1538                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1539                                  ;
  1540                                  ;       h...h   high-order offset (bits 16-31)
  1541                                  ;       P       present (0=unused interrupt)
  1542                                  ;       zz      descriptor privilege level
  1543                                  ;       S       storage segment (must be zero for IDT)
  1544                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1545                                  ;       S...S   handling code selector in GDT
  1546                                  ;       l...l   lo-order offset (bits 0-15)
  1547                                  ;
  1548                                  ;-----------------------------------------------------------------------------------------------------------------------
  1549                                  section                 idt                                                     ;interrupt descriptor table
  1550                                                          mtrap   dividebyzero                                    ;00 divide by zero
  1551                                                          mtrap   singlestep                                      ;01 single step
  1552                                                          mtrap   nmi                                             ;02 non-maskable
  1553                                                          mtrap   break                                           ;03 break
  1554                                                          mtrap   into                                            ;04 into
  1555                                                          mtrap   bounds                                          ;05 bounds
  1556                                                          mtrap   badopcode                                       ;06 bad op code
  1557                                                          mtrap   nocoproc                                        ;07 no coprocessor
  1558                                                          mtrap   doublefault                                     ;08 double-fault
  1559                                                          mtrap   operand                                         ;09 operand
  1560                                                          mtrap   badtss                                          ;0a bad TSS
  1561                                                          mtrap   notpresent                                      ;0b not-present
  1562                                                          mtrap   stacklimit                                      ;0c stack limit
  1563                                                          mtrap   protection                                      ;0d general protection fault
  1564                                                          mtrap   int14                                           ;0e (reserved)
  1565                                                          mtrap   int15                                           ;0f (reserved)
  1566                                                          mtrap   coproccalc                                      ;10 (reserved)
  1567                                                          mtrap   int17                                           ;11 (reserved)
  1568                                                          mtrap   int18                                           ;12 (reserved)
  1569                                                          mtrap   int19                                           ;13 (reserved)
  1570                                                          mtrap   int20                                           ;14 (reserved)
  1571                                                          mtrap   int21                                           ;15 (reserved)
  1572                                                          mtrap   int22                                           ;16 (reserved)
  1573                                                          mtrap   int23                                           ;17 (reserved)
  1574                                                          mtrap   int24                                           ;18 (reserved)
  1575                                                          mtrap   int25                                           ;19 (reserved)
  1576                                                          mtrap   int26                                           ;1a (reserved)
  1577                                                          mtrap   int27                                           ;1b (reserved)
  1578                                                          mtrap   int28                                           ;1c (reserved)
  1579                                                          mtrap   int29                                           ;1d (reserved)
  1580                                                          mtrap   int30                                           ;1e (reserved)
  1581                                                          mtrap   int31                                           ;1f (reserved)
  1582                                                          mint    clocktick                                       ;20 IRQ0 clock tick
  1583                                                          mint    keyboard                                        ;21 IRQ1 keyboard
  1584                                                          mint    iochannel                                       ;22 IRQ2 second 8259A cascade
  1585                                                          mint    com2                                            ;23 IRQ3 com2
  1586                                                          mint    com1                                            ;24 IRQ4 com1
  1587                                                          mint    lpt2                                            ;25 IRQ5 lpt2
  1588                                                          mint    diskette                                        ;26 IRQ6 diskette
  1589                                                          mint    lpt1                                            ;27 IRQ7 lpt1
  1590                                                          mint    rtclock                                         ;28 IRQ8 real-time clock
  1591                                                          mint    retrace                                         ;29 IRQ9 CGA vertical retrace
  1592                                                          mint    irq10                                           ;2a IRQA (reserved)
  1593                                                          mint    irq11                                           ;2b IRQB (reserved)
  1594                                                          mint    ps2mouse                                        ;2c IRQC ps/2 mouse
  1595                                                          mint    coprocessor                                     ;2d IRQD coprocessor
  1596                                                          mint    fixeddisk                                       ;2e IRQE fixed disk
  1597                                                          mint    irq15                                           ;2f IRQF (reserved)
  1598                                                          mtrap   svc                                             ;30 OS services
  1599                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1600                                  ;=======================================================================================================================
  1601                                  ;
  1602                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1603                                  ;
  1604                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1605                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1606                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1607                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1608                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1609                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1610                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1611                                  ;
  1612                                  ;=======================================================================================================================
  1613                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1614                                                          cpu     386                                             ;allow 80386 instructions
  1615                                                          bits    32                                              ;this is 32-bit code
  1616                                  ;=======================================================================================================================
  1617                                  ;
  1618                                  ;       CPU Interrupt Handlers
  1619                                  ;
  1620                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1621                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1622                                  ;
  1623                                  ;=======================================================================================================================
  1624                                  ;-----------------------------------------------------------------------------------------------------------------------
  1625                                  ;
  1626                                  ;       INT0    Divide By Zero
  1627                                  ;
  1628                                  ;-----------------------------------------------------------------------------------------------------------------------
  1629                                                          menter  dividebyzero                                    ;divide by zero
  1630                                                          push    0                                               ;store interrupt nbr
  1631                                                          push    czIntDivideByZero                               ;store message offset
  1632                                                          jmp     ReportInterrupt                                 ;report interrupt
  1633                                  ;-----------------------------------------------------------------------------------------------------------------------
  1634                                  ;
  1635                                  ;       INT1    Single Step
  1636                                  ;
  1637                                  ;-----------------------------------------------------------------------------------------------------------------------
  1638                                                          menter  singlestep                                      ;single step
  1639                                                          push    1                                               ;store interrupt nbr
  1640                                                          push    czIntSingleStep                                 ;store message offset
  1641                                                          jmp     ReportInterrupt                                 ;report interrupt
  1642                                  ;-----------------------------------------------------------------------------------------------------------------------
  1643                                  ;
  1644                                  ;       INT2    Non-Maskable Interrupt
  1645                                  ;
  1646                                  ;-----------------------------------------------------------------------------------------------------------------------
  1647                                                          menter  nmi                                             ;non-maskable
  1648                                                          push    2                                               ;store interrupt nbr
  1649                                                          push    czIntNonMaskable                                ;store message offset
  1650                                                          jmp     ReportInterrupt                                 ;report interrupt
  1651                                  ;-----------------------------------------------------------------------------------------------------------------------
  1652                                  ;
  1653                                  ;       INT3    Break
  1654                                  ;
  1655                                  ;-----------------------------------------------------------------------------------------------------------------------
  1656                                                          menter  break                                           ;break
  1657                                                          push    3                                               ;store interrupt nbr
  1658                                                          push    czIntBreak                                      ;store message offset
  1659                                                          jmp     ReportInterrupt                                 ;report interrupt
  1660                                  ;-----------------------------------------------------------------------------------------------------------------------
  1661                                  ;
  1662                                  ;       INT4    Into
  1663                                  ;
  1664                                  ;-----------------------------------------------------------------------------------------------------------------------
  1665                                                          menter  into                                            ;into
  1666                                                          push    4                                               ;store interrupt nbr
  1667                                                          push    czIntInto                                       ;store message offset
  1668                                                          jmp     ReportInterrupt                                 ;report interrupt
  1669                                  ;-----------------------------------------------------------------------------------------------------------------------
  1670                                  ;
  1671                                  ;       INT5    Bounds
  1672                                  ;
  1673                                  ;-----------------------------------------------------------------------------------------------------------------------
  1674                                                          menter  bounds                                          ;bounds
  1675                                                          push    5                                               ;store interrupt nbr
  1676                                                          push    czIntBounds                                     ;store message offset
  1677                                                          jmp     ReportInterrupt                                 ;report interrupt
  1678                                  ;-----------------------------------------------------------------------------------------------------------------------
  1679                                  ;
  1680                                  ;       INT6    Bad Operation Code
  1681                                  ;
  1682                                  ;-----------------------------------------------------------------------------------------------------------------------
  1683                                                          menter  badopcode                                       ;bad opcode interrupt
  1684                                                          push    6                                               ;store interrupt nbr
  1685                                                          push    czIntBadOpCode                                  ;store message offset
  1686                                                          jmp     ReportInterrupt                                 ;report interrupt
  1687                                  ;-----------------------------------------------------------------------------------------------------------------------
  1688                                  ;
  1689                                  ;       INT7    No Coprocessor
  1690                                  ;
  1691                                  ;-----------------------------------------------------------------------------------------------------------------------
  1692                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1693                                                          push    7                                               ;store interrupt nbr
  1694                                                          push    czIntNoCoprocessor                              ;store message offset
  1695                                                          jmp     ReportInterrupt                                 ;report interrupt
  1696                                  ;-----------------------------------------------------------------------------------------------------------------------
  1697                                  ;
  1698                                  ;       INT8    Double Fault
  1699                                  ;
  1700                                  ;-----------------------------------------------------------------------------------------------------------------------
  1701                                                          menter  doublefault                                     ;doublefault interrupt
  1702                                                          push    8                                               ;store interrupt nbr
  1703                                                          push    czIntDoubleFault                                ;store message offset
  1704                                                          jmp     ReportInterrupt                                 ;report interrupt
  1705                                  ;-----------------------------------------------------------------------------------------------------------------------
  1706                                  ;
  1707                                  ;       INT9    Operand
  1708                                  ;
  1709                                  ;-----------------------------------------------------------------------------------------------------------------------
  1710                                                          menter  operand                                         ;operand interrupt
  1711                                                          push    9                                               ;store interrupt nbr
  1712                                                          push    czIntOperand                                    ;store message offset
  1713                                                          jmp     ReportInterrupt                                 ;report interrupt
  1714                                  ;-----------------------------------------------------------------------------------------------------------------------
  1715                                  ;
  1716                                  ;       INT10   Bad Task State Segment
  1717                                  ;
  1718                                  ;-----------------------------------------------------------------------------------------------------------------------
  1719                                                          menter  badtss                                          ;bad TSS interrupt
  1720                                                          push    10                                              ;store interrupt nbr
  1721                                                          push    czIntBadTSS                                     ;store message offset
  1722                                                          jmp     ReportInterrupt                                 ;report interrupt
  1723                                  ;-----------------------------------------------------------------------------------------------------------------------
  1724                                  ;
  1725                                  ;       INT11   Not Present
  1726                                  ;
  1727                                  ;-----------------------------------------------------------------------------------------------------------------------
  1728                                                          menter  notpresent                                      ;not present interrupt
  1729                                                          push    11                                              ;store interrupt nbr
  1730                                                          push    czIntNotPresent                                 ;store message offset
  1731                                                          jmp     ReportInterrupt                                 ;report interrupt
  1732                                  ;-----------------------------------------------------------------------------------------------------------------------
  1733                                  ;
  1734                                  ;       INT12   Stack Limit
  1735                                  ;
  1736                                  ;-----------------------------------------------------------------------------------------------------------------------
  1737                                                          menter  stacklimit                                      ;stack limit interrupt
  1738                                                          push    12                                              ;store interrupt nbr
  1739                                                          push    czIntStackLimit                                 ;store message offset
  1740                                                          jmp     ReportInterrupt                                 ;report interrupt
  1741                                  ;-----------------------------------------------------------------------------------------------------------------------
  1742                                  ;
  1743                                  ;       INT13   General Protection Fault
  1744                                  ;
  1745                                  ;-----------------------------------------------------------------------------------------------------------------------
  1746                                                          menter  protection                                      ;protection fault interrupt
  1747                                                          push    13                                              ;store interrupt nbr
  1748                                                          push    czIntProtection                                 ;store message offset
  1749                                                          jmp     ReportInterrupt                                 ;report interrupt
  1750                                  ;-----------------------------------------------------------------------------------------------------------------------
  1751                                  ;
  1752                                  ;       INT14   Reserved
  1753                                  ;
  1754                                  ;-----------------------------------------------------------------------------------------------------------------------
  1755                                                          menter  int14                                           ;(reserved)
  1756                                                          push    14                                              ;store interrupt nbr
  1757                                                          push    czIntReserved                                   ;store message offset
  1758                                                          jmp     ReportInterrupt                                 ;report interrupt
  1759                                  ;-----------------------------------------------------------------------------------------------------------------------
  1760                                  ;
  1761                                  ;       INT15   Reserved
  1762                                  ;
  1763                                  ;-----------------------------------------------------------------------------------------------------------------------
  1764                                                          menter  int15                                           ;(reserved)
  1765                                                          push    15                                              ;store interrupt nbr
  1766                                                          push    czIntReserved                                   ;store message offset
  1767                                                          jmp     ReportInterrupt                                 ;report interrupt
  1768                                  ;-----------------------------------------------------------------------------------------------------------------------
  1769                                  ;
  1770                                  ;       INT16   Coprocessor Calculation
  1771                                  ;
  1772                                  ;-----------------------------------------------------------------------------------------------------------------------
  1773                                                          menter  coproccalc                                      ;coprocessor calculation
  1774                                                          push    16                                              ;store interrupt nbr
  1775                                                          push    czIntCoprocessorCalc                            ;store message offset
  1776                                                          jmp     ReportInterrupt                                 ;report interrupt
  1777                                  ;-----------------------------------------------------------------------------------------------------------------------
  1778                                  ;
  1779                                  ;       INT17   Reserved
  1780                                  ;
  1781                                  ;-----------------------------------------------------------------------------------------------------------------------
  1782                                                          menter  int17                                           ;(reserved)
  1783                                                          push    17                                              ;store interrupt nbr
  1784                                                          push    czIntReserved                                   ;store message offset
  1785                                                          jmp     ReportInterrupt                                 ;report interrupt
  1786                                  ;-----------------------------------------------------------------------------------------------------------------------
  1787                                  ;
  1788                                  ;       INT18   Reserved
  1789                                  ;
  1790                                  ;-----------------------------------------------------------------------------------------------------------------------
  1791                                                          menter  int18                                           ;(reserved)
  1792                                                          push    18                                              ;store interrupt nbr
  1793                                                          push    czIntReserved                                   ;store message offset
  1794                                                          jmp     ReportInterrupt                                 ;report interrupt
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                  ;
  1797                                  ;       INT19   Reserved
  1798                                  ;
  1799                                  ;-----------------------------------------------------------------------------------------------------------------------
  1800                                                          menter  int19                                           ;(reserved)
  1801                                                          push    19                                              ;store interrupt nbr
  1802                                                          push    czIntReserved                                   ;store message offset
  1803                                                          jmp     ReportInterrupt                                 ;report interrupt
  1804                                  ;-----------------------------------------------------------------------------------------------------------------------
  1805                                  ;
  1806                                  ;       INT20   Reserved
  1807                                  ;
  1808                                  ;-----------------------------------------------------------------------------------------------------------------------
  1809                                                          menter  int20                                           ;(reserved)
  1810                                                          push    20                                              ;store interrupt nbr
  1811                                                          push    czIntReserved                                   ;store message offset
  1812                                                          jmp     ReportInterrupt                                 ;report interrupt
  1813                                  ;-----------------------------------------------------------------------------------------------------------------------
  1814                                  ;
  1815                                  ;       INT21   Reserved
  1816                                  ;
  1817                                  ;-----------------------------------------------------------------------------------------------------------------------
  1818                                                          menter  int21                                           ;(reserved)
  1819                                                          push    21                                              ;store interrupt nbr
  1820                                                          push    czIntReserved                                   ;store message offset
  1821                                                          jmp     ReportInterrupt                                 ;report interrupt
  1822                                  ;-----------------------------------------------------------------------------------------------------------------------
  1823                                  ;
  1824                                  ;       INT22   Reserved
  1825                                  ;
  1826                                  ;-----------------------------------------------------------------------------------------------------------------------
  1827                                                          menter  int22                                           ;(reserved)
  1828                                                          push    22                                              ;store interrupt nbr
  1829                                                          push    czIntReserved                                   ;store message offset
  1830                                                          jmp     ReportInterrupt                                 ;report interrupt
  1831                                  ;-----------------------------------------------------------------------------------------------------------------------
  1832                                  ;
  1833                                  ;       INT23   Reserved
  1834                                  ;
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                                          menter  int23                                           ;(reserved)
  1837                                                          push    23                                              ;store interrupt nbr
  1838                                                          push    czIntReserved                                   ;store message offset
  1839                                                          jmp     ReportInterrupt                                 ;report interrupt
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                  ;
  1842                                  ;       INT24   Reserved
  1843                                  ;
  1844                                  ;-----------------------------------------------------------------------------------------------------------------------
  1845                                                          menter  int24                                           ;(reserved)
  1846                                                          push    24                                              ;store interrupt nbr
  1847                                                          push    czIntReserved                                   ;store message offset
  1848                                                          jmp     ReportInterrupt                                 ;report interrupt
  1849                                  ;-----------------------------------------------------------------------------------------------------------------------
  1850                                  ;
  1851                                  ;       INT25   Reserved
  1852                                  ;
  1853                                  ;-----------------------------------------------------------------------------------------------------------------------
  1854                                                          menter  int25                                           ;(reserved)
  1855                                                          push    25                                              ;store interrupt nbr
  1856                                                          push    czIntReserved                                   ;store message offset
  1857                                                          jmp     ReportInterrupt                                 ;report interrupt
  1858                                  ;-----------------------------------------------------------------------------------------------------------------------
  1859                                  ;
  1860                                  ;       INT26   Reserved
  1861                                  ;
  1862                                  ;-----------------------------------------------------------------------------------------------------------------------
  1863                                                          menter  int26                                           ;(reserved)
  1864                                                          push    26                                              ;store interrupt nbr
  1865                                                          push    czIntReserved                                   ;store message offset
  1866                                                          jmp     ReportInterrupt                                 ;report interrupt
  1867                                  ;-----------------------------------------------------------------------------------------------------------------------
  1868                                  ;
  1869                                  ;       INT27   Reserved
  1870                                  ;
  1871                                  ;-----------------------------------------------------------------------------------------------------------------------
  1872                                                          menter  int27                                           ;(reserved)
  1873                                                          push    27                                              ;store interrupt nbr
  1874                                                          push    czIntReserved                                   ;store message offset
  1875                                                          jmp     ReportInterrupt                                 ;report interrupt
  1876                                  ;-----------------------------------------------------------------------------------------------------------------------
  1877                                  ;
  1878                                  ;       INT28   Reserved
  1879                                  ;
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                                          menter  int28                                           ;(reserved)
  1882                                                          push    28                                              ;store interrupt nbr
  1883                                                          push    czIntReserved                                   ;store message offset
  1884                                                          jmp     ReportInterrupt                                 ;report interrupt
  1885                                  ;-----------------------------------------------------------------------------------------------------------------------
  1886                                  ;
  1887                                  ;       INT29   Reserved
  1888                                  ;
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                                          menter  int29                                           ;(reserved)
  1891                                                          push    29                                              ;store interrupt nbr
  1892                                                          push    czIntReserved                                   ;store message offset
  1893                                                          jmp     ReportInterrupt                                 ;report interrupt
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                  ;
  1896                                  ;       INT30   Reserved
  1897                                  ;
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                                          menter  int30                                           ;(reserved)
  1900                                                          push    30                                              ;store interrupt nbr
  1901                                                          push    czIntReserved                                   ;store message offset
  1902                                                          jmp     ReportInterrupt                                 ;report interrupt
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                  ;
  1905                                  ;       INT31   Reserved
  1906                                  ;
  1907                                  ;-----------------------------------------------------------------------------------------------------------------------
  1908                                                          menter  int31                                           ;(reserved)
  1909                                                          push    31                                              ;store interrupt nbr
  1910                                                          push    czIntReserved                                   ;store message offset
  1911                                                          jmp     ReportInterrupt                                 ;report interrupt
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                  ;
  1914                                  ;       Routine:        ReportInterrupt
  1915                                  ;
  1916                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1917                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1918                                  ;
  1919                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  1920                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  1921                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  1922                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1923                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1924                                  ;
  1925                                  ;       Out:            N/A             This routine does not exit.
  1926                                  ;
  1927                                  ;-----------------------------------------------------------------------------------------------------------------------
  1928                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1929                                                          push    es                                              ;save ES at time of interrupt
  1930                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1931                                                          mov     ebp,esp                                         ;EBP --> [EDI]
  1932                                  ;
  1933                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1934                                  ;
  1935                                  ;                       [EBP+56]        EFLAGS
  1936                                  ;                       [EBP+52]        CS
  1937                                  ;                       [EBP+48]        EIP
  1938                                  ;                       [EBP+44]        interrupt number (0-31)
  1939                                  ;                       [EBP+40]        error message address
  1940                                  ;                       [EBP+36]        DS
  1941                                  ;                       [EBP+32]        ES
  1942                                  ;                       [EBP+28]        EAX
  1943                                  ;                       [EBP+24]        ECX
  1944                                  ;                       [EBP+20]        EDX
  1945                                  ;                       [EBP+16]        EBX
  1946                                  ;                       [EBP+12]        ESP
  1947                                  ;                       [EBP+8]         EBP
  1948                                  ;                       [EBP+4]         ESI
  1949                                  ;                       [EBP+0]         EDI
  1950                                  ;
  1951                                                          push    cs                                              ;load code selector ...
  1952                                                          pop     ds                                              ;... into DS
  1953                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  1954                                                          pop     es                                              ;... into ES
  1955                                  ;
  1956                                  ;       Display the interrupt report boundary box
  1957                                  ;
  1958                                                          mov     cl,13                                           ;column
  1959                                                          mov     ch,6                                            ;row
  1960                                                          mov     dl,50                                           ;width
  1961                                                          mov     dh,8                                            ;height
  1962                                                          mov     bh,07h                                          ;attribute
  1963                                                          call    DrawTextDialogBox                               ;draw text dialog box
  1964                                  ;
  1965                                  ;       Display the report header
  1966                                  ;
  1967                                                          mov     cl,15                                           ;column
  1968                                                          mov     ch,7                                            ;row
  1969                                                          mov     esi,czIntHeader                                 ;interrupt message header
  1970                                                          call    SetConsoleString                                ;draw text string
  1971                                  ;
  1972                                  ;       Display the interrupt description label
  1973                                  ;
  1974                                                          mov     cl,15                                           ;column
  1975                                                          mov     ch,8                                            ;row
  1976                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  1977                                                          call    SetConsoleString                                ;draw text string
  1978                                  ;
  1979                                  ;       Display the interrupt number
  1980                                  ;
  1981                                                          mov     eax,[ebp+44]                                    ;interrupt number
  1982                                                          mov     cl,26                                           ;column
  1983                                                          mov     ch,8                                            ;row
  1984                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  1985                                  ;
  1986                                  ;       Display the interrupt name
  1987                                  ;
  1988                                                          mov     cl,29                                           ;column
  1989                                                          mov     ch,8                                            ;row
  1990                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  1991                                                          call    SetConsoleString                                ;display interrupt description
  1992                                  ;
  1993                                  ;       Display the register values header
  1994                                  ;
  1995                                                          mov     cl,15                                           ;column
  1996                                                          mov     ch,10                                           ;row
  1997                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  1998                                                          call    SetConsoleString                                ;draw text string
  1999                                  ;
  2000                                  ;       Display the EAX register label and value
  2001                                  ;
  2002                                                          mov     cl,15                                           ;column
  2003                                                          mov     ch,11                                           ;row
  2004                                                          mov     esi,czIntEAX                                    ;register EAX label
  2005                                                          call    SetConsoleString                                ;draw label
  2006                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2007                                                          mov     cl,19                                           ;column
  2008                                                          mov     ch,11                                           ;row
  2009                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2010                                  ;
  2011                                  ;       Display the ECX register label and value
  2012                                  ;
  2013                                                          mov     cl,15                                           ;column
  2014                                                          mov     ch,12                                           ;row
  2015                                                          mov     esi,czIntECX                                    ;label
  2016                                                          call    SetConsoleString                                ;draw label
  2017                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2018                                                          mov     cl,19                                           ;column
  2019                                                          mov     ch,12                                           ;row
  2020                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2021                                  ;
  2022                                  ;       Display the EDX register label and value
  2023                                  ;
  2024                                                          mov     cl,15                                           ;column
  2025                                                          mov     ch,13                                           ;row
  2026                                                          mov     esi,czIntEDX                                    ;label
  2027                                                          call    SetConsoleString                                ;draw label
  2028                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2029                                                          mov     cl,19                                           ;column
  2030                                                          mov     ch,13                                           ;row
  2031                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2032                                  ;
  2033                                  ;       Display the EBX register label and value
  2034                                  ;
  2035                                                          mov     cl,15                                           ;column
  2036                                                          mov     ch,14                                           ;row
  2037                                                          mov     esi,czIntEBX                                    ;label
  2038                                                          call    SetConsoleString                                ;draw label
  2039                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2040                                                          mov     cl,19                                           ;column
  2041                                                          mov     ch,14                                           ;row
  2042                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2043                                  ;
  2044                                  ;       Display the ESI register label and value
  2045                                  ;
  2046                                                          mov     cl,29                                           ;column
  2047                                                          mov     ch,11                                           ;row
  2048                                                          mov     esi,czIntESI                                    ;label
  2049                                                          call    SetConsoleString                                ;draw label
  2050                                                          mov     eax,[ebp+4]                                     ;ESI
  2051                                                          mov     cl,33                                           ;column
  2052                                                          mov     ch,11                                           ;row
  2053                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2054                                  ;
  2055                                  ;       Display the EDI register label and value
  2056                                  ;
  2057                                                          mov     cl,29                                           ;column
  2058                                                          mov     ch,12                                           ;row
  2059                                                          mov     esi,czIntEDI                                    ;label
  2060                                                          call    SetConsoleString                                ;draw label
  2061                                                          mov     eax,[ebp+0]                                     ;EDI
  2062                                                          mov     cl,33                                           ;column
  2063                                                          mov     ch,12                                           ;row
  2064                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2065                                  ;
  2066                                  ;       Display the EBP register label and value
  2067                                  ;
  2068                                                          mov     cl,29                                           ;column
  2069                                                          mov     ch,13                                           ;row
  2070                                                          mov     esi,czIntEBP                                    ;label
  2071                                                          call    SetConsoleString                                ;draw label
  2072                                                          mov     eax,[ebp+8]                                     ;EBP
  2073                                                          mov     cl,33                                           ;column
  2074                                                          mov     ch,13                                           ;row
  2075                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2076                                  ;
  2077                                  ;       Display the DS register label and value
  2078                                  ;
  2079                                                          mov     cl,42                                           ;column
  2080                                                          mov     ch,11                                           ;row
  2081                                                          mov     esi,czIntDS                                     ;label
  2082                                                          call    SetConsoleString                                ;draw label
  2083                                                          xor     eax,eax                                         ;zero register
  2084                                                          mov     ax,[ebp+36]                                     ;DS
  2085                                                          mov     cl,46                                           ;column
  2086                                                          mov     ch,11                                           ;row
  2087                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2088                                  ;
  2089                                  ;       Display the ES register label and value
  2090                                  ;
  2091                                                          mov     cl,42                                           ;column
  2092                                                          mov     ch,12                                           ;row
  2093                                                          mov     esi,czIntES                                     ;label
  2094                                                          call    SetConsoleString                                ;draw label
  2095                                                          xor     eax,eax                                         ;zero register
  2096                                                          mov     ax,[ebp+32]                                     ;ES
  2097                                                          mov     cl,46                                           ;column
  2098                                                          mov     ch,12                                           ;row
  2099                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2100                                  ;
  2101                                  ;       Display the SS register label and value
  2102                                  ;
  2103                                                          mov     cl,42                                           ;column
  2104                                                          mov     ch,13                                           ;row
  2105                                                          mov     esi,czIntSS                                     ;label
  2106                                                          call    SetConsoleString                                ;draw label
  2107                                                          xor     eax,eax                                         ;zero register
  2108                                                          mov     ax,ss                                           ;SS
  2109                                                          mov     cl,46                                           ;column
  2110                                                          mov     ch,13                                           ;row
  2111                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2112                                  ;
  2113                                  ;       Display the CS register lable and value
  2114                                  ;
  2115                                                          mov     cl,42                                           ;column
  2116                                                          mov     ch,14                                           ;row
  2117                                                          mov     esi,czIntCS                                     ;label
  2118                                                          call    SetConsoleString                                ;draw label
  2119                                                          xor     eax,eax                                         ;zero register
  2120                                                          mov     ax,[ebp+52]                                     ;CS
  2121                                                          mov     cl,46                                           ;column
  2122                                                          mov     ch,14                                           ;row
  2123                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2124                                  ;
  2125                                  ;       Display the EFLAGS register label and value
  2126                                  ;
  2127                                                          mov     cl,51                                           ;column
  2128                                                          mov     ch,11                                           ;row
  2129                                                          mov     esi,czIntEFLAGS                                 ;label
  2130                                                          call    SetConsoleString                                ;draw label
  2131                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2132                                                          mov     cl,55                                           ;column
  2133                                                          mov     ch,11                                           ;row
  2134                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2135                                  ;
  2136                                  ;       Display the ESP register label and value
  2137                                  ;
  2138                                                          mov     cl,51                                           ;column
  2139                                                          mov     ch,13                                           ;row
  2140                                                          mov     esi,czIntESP                                    ;label
  2141                                                          call    SetConsoleString                                ;draw label
  2142                                                          mov     eax,[ebp+12]                                    ;ESP
  2143                                                          mov     cl,55                                           ;column
  2144                                                          mov     ch,13                                           ;row
  2145                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2146                                  ;
  2147                                  ;       Display the EIP register label and value
  2148                                  ;
  2149                                                          mov     cl,51                                           ;column
  2150                                                          mov     ch,14                                           ;row
  2151                                                          mov     esi,czIntEIP                                    ;label
  2152                                                          call    SetConsoleString                                ;draw label
  2153                                                          mov     eax,[ebp+48]                                    ;EIP lo-order 32-bits
  2154                                                          mov     cl,55                                           ;column
  2155                                                          mov     ch,14                                           ;row
  2156                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2157                                  ;
  2158                                  ;       Halt and loop until reset
  2159                                  ;
  2160                                  .10                     sti                                                     ;enable maskable interrupts
  2161                                                          hlt                                                     ;halt processor
  2162                                                          jmp     .10                                             ;resume on interrupt
  2163                                  ;-----------------------------------------------------------------------------------------------------------------------
  2164                                  ;
  2165                                  ;       Processor Interrupt Name Strings
  2166                                  ;
  2167                                  ;-----------------------------------------------------------------------------------------------------------------------
  2168                                  czIntDivideByZero       db      "Division by zero",0
  2169                                  czIntSingleStep         db      "Single step",0
  2170                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2171                                  czIntBreak              db      "Break",0
  2172                                  czIntInto               db      "Into",0
  2173                                  czIntBounds             db      "Bounds",0
  2174                                  czIntBadOpCode          db      "Bad Operation Code",0
  2175                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2176                                  czIntDoubleFault        db      "Double Fault",0
  2177                                  czIntOperand            db      "Operand",0
  2178                                  czIntBadTSS             db      "Bad Task State Segment",0
  2179                                  czIntNotPresent         db      "Not Present",0
  2180                                  czIntStackLimit         db      "Stack Limit",0
  2181                                  czIntProtection         db      "General Protection Fault",0
  2182                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2183                                  czIntReserved           db      "Reserved",0
  2184                                  ;-----------------------------------------------------------------------------------------------------------------------
  2185                                  ;
  2186                                  ;       Processor Interrupt Handling Strings
  2187                                  ;
  2188                                  ;-----------------------------------------------------------------------------------------------------------------------
  2189                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2190                                  czIntLabel              db      "Interrupt #",0
  2191                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2192                                  czIntEAX                db      "EAX:",0
  2193                                  czIntECX                db      "ECX:",0
  2194                                  czIntEDX                db      "EDX:",0
  2195                                  czIntEBX                db      "EBX:",0
  2196                                  czIntESI                db      "ESI:",0
  2197                                  czIntEDI                db      "EDI:",0
  2198                                  czIntEBP                db      "EBP:",0
  2199                                  czIntESP                db      "ESP:",0
  2200                                  czIntDS                 db      " DS:",0
  2201                                  czIntES                 db      " ES:",0
  2202                                  czIntSS                 db      " SS:",0
  2203                                  czIntCS                 db      " CS:",0
  2204                                  czIntEFLAGS             db      "FLG:",0
  2205                                  czIntEIP                db      "EIP:",0
  2206                                  ;-----------------------------------------------------------------------------------------------------------------------
  2207                                  ;
  2208                                  ;       Routine:        DrawTextDialogBox
  2209                                  ;
  2210                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2211                                  ;
  2212                                  ;       In:             CL      upper left column (0-79)
  2213                                  ;                       CH      upper left row (0-24)
  2214                                  ;                       DL      column width, excluding border
  2215                                  ;                       DH      row height, excluding border
  2216                                  ;                       BH      color attribute
  2217                                  ;
  2218                                  ;-----------------------------------------------------------------------------------------------------------------------
  2219                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2220                                                          push    esi                                             ;
  2221                                                          push    edi                                             ;
  2222                                                          push    es                                              ;
  2223                                                          push    EGDTCGA                                         ;load CGA selector ...
  2224                                                          pop     es                                              ;... into ES
  2225                                  ;
  2226                                  ;       Compute target display offset
  2227                                  ;
  2228                                                          xor     eax,eax                                         ;zero register
  2229                                                          mov     al,ch                                           ;row
  2230                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2231                                                          mul     ah                                              ;row offset
  2232                                                          add     al,cl                                           ;add column
  2233                                                          adc     ah,0                                            ;add overflow
  2234                                                          add     al,cl                                           ;add column
  2235                                                          adc     ah,0                                            ;add overflow
  2236                                                          mov     edi,eax                                         ;target row offset
  2237                                  ;
  2238                                  ;       Display top border row
  2239                                  ;
  2240                                                          push    edi                                             ;save target row offset
  2241                                                          mov     ah,bh                                           ;attribute
  2242                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2243                                                          stosw                                                   ;display character and attribute
  2244                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2245                                                          xor     ecx,ecx                                         ;zero register
  2246                                                          mov     cl,dl                                           ;width, excluding border
  2247                                                          rep     stosw                                           ;display horizontal border
  2248                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2249                                                          stosw                                                   ;display character and attribute
  2250                                                          pop     edi                                             ;restore target row offset
  2251                                                          add     edi,ECONROWBYTES                                ;next row
  2252                                  ;
  2253                                  ;       Display dialog box body rows
  2254                                  ;
  2255                                                          xor     ecx,ecx                                         ;zero register
  2256                                                          mov     cl,dh                                           ;height, excluding border
  2257                                  .10                     push    ecx                                             ;save remaining rows
  2258                                                          push    edi                                             ;save target row offset
  2259                                                          mov     ah,bh                                           ;attribute
  2260                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2261                                                          stosw                                                   ;display character and attribute
  2262                                                          mov     al,EASCIISPACE                                  ;space
  2263                                                          xor     ecx,ecx                                         ;zero register
  2264                                                          mov     cl,dl                                           ;width, excluding border
  2265                                                          rep     stosw                                           ;display row
  2266                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2267                                                          stosw                                                   ;display character and attribute
  2268                                                          pop     edi                                             ;restore target row offset
  2269                                                          add     edi,ECONROWBYTES                                ;next row
  2270                                                          pop     ecx                                             ;remaining rows
  2271                                                          loop    .10                                             ;next row
  2272                                  ;
  2273                                  ;       Display bottom border row
  2274                                  ;
  2275                                                          push    edi                                             ;save target row offset
  2276                                                          mov     ah,bh                                           ;attribute
  2277                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2278                                                          stosw                                                   ;display character and attribute
  2279                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2280                                                          xor     ecx,ecx                                         ;zero register
  2281                                                          mov     cl,dl                                           ;width, excluding border
  2282                                                          rep     stosw                                           ;display horizontal border
  2283                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2284                                                          stosw                                                   ;display character and attribute
  2285                                                          pop     edi                                             ;restore target row offset
  2286                                                          add     edi,ECONROWBYTES                                ;next row
  2287                                  ;
  2288                                  ;       Restore and return
  2289                                  ;
  2290                                                          pop     es                                              ;restore non-volatile regs
  2291                                                          pop     edi                                             ;
  2292                                                          pop     esi                                             ;
  2293                                                          pop     ecx                                             ;
  2294                                                          ret                                                     ;return
  2295                                  ;=======================================================================================================================
  2296                                  ;
  2297                                  ;       Hardware Device Interupts
  2298                                  ;
  2299                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2300                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2301                                  ;       (BX=2028h).
  2302                                  ;
  2303                                  ;=======================================================================================================================
  2304                                  ;-----------------------------------------------------------------------------------------------------------------------
  2305                                  ;
  2306                                  ;       IRQ0    Clock Tick Interrupt
  2307                                  ;
  2308                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2309                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2310                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2311                                  ;
  2312                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2313                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2314                                  ;
  2315                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2316                                  ;       zero, the floppy disk motors are turned off.
  2317                                  ;
  2318                                  ;-----------------------------------------------------------------------------------------------------------------------
  2319                                                          menter  clocktick                                       ;clock tick interrupt
  2320                                                          push    eax                                             ;save non-volatile regs
  2321                                                          push    edx                                             ;
  2322                                                          push    ds                                              ;
  2323                                  ;
  2324                                  ;       End the interrupt.
  2325                                  ;
  2326                                                          call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2327                                  ;
  2328                                  ;       Update the clock tick count and the elapsed days as needed.
  2329                                  ;
  2330                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2331                                                          pop     ds                                              ;... into data segment register
  2332                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2333                                                          inc     eax                                             ;increment clock ticks
  2334                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2335                                                          jb      irq0.10                                         ;no, skip ahead
  2336                                                          inc     byte [wbClockDays]                              ;increment clock days
  2337                                                          xor     eax,eax                                         ;reset clock ticks
  2338                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2339                                  ;
  2340                                  ;       Decrement floppy disk motor timeout.
  2341                                  ;
  2342                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2343                                                          je      irq0.20                                         ;yes, skip ahead
  2344                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2345                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2346                                  ;
  2347                                  ;       Turn off the floppy disk motor if appropriate.
  2348                                  ;
  2349                                                          sti                                                     ;enable maskable interrupts
  2350                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2351                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2352                                                          in      al,dx                                           ;FDC main status byte
  2353                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2354                                                          jnz     irq0.15                                         ;wait while busy
  2355                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2356                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2357                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2358                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2359                                                          out     dx,al                                           ;turn motor off
  2360                                  ;
  2361                                  ;       Enable maskable interrupts.
  2362                                  ;
  2363                                  irq0.20                 sti                                                     ;enable maskable interrupts
  2364                                  ;
  2365                                  ;       Restore and return.
  2366                                  ;
  2367                                                          pop     ds                                              ;restore modified regs
  2368                                                          pop     edx                                             ;
  2369                                                          pop     eax                                             ;
  2370                                                          iretd                                                   ;return
  2371                                  ;-----------------------------------------------------------------------------------------------------------------------
  2372                                  ;
  2373                                  ;       IRQ1    Keyboard Interrupt
  2374                                  ;
  2375                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2376                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2377                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2378                                  ;       ALL modified registers upon return.
  2379                                  ;
  2380                                  ;-----------------------------------------------------------------------------------------------------------------------
  2381                                                          menter  keyboard                                        ;keyboard interrrupt
  2382                                                          push    eax                                             ;save non-volatile regs
  2383                                                          push    ebx                                             ;
  2384                                                          push    ecx                                             ;
  2385                                                          push    esi                                             ;
  2386                                                          push    ds                                              ;
  2387                                  ;
  2388                                  ;       End the interrupt.
  2389                                  ;
  2390                                                          call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2391                                  ;
  2392                                  ;       Handle keyboard scan-codes.
  2393                                  ;
  2394                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2395                                                          pop     ds                                              ;... into data segment register
  2396                                                          xor     al,al                                           ;zero
  2397                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2398                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2399                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2400                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2401                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2402                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2403                                                          mov     al,' '                                          ;space
  2404                                                          mov     [wbConsoleChar],al                              ;set character to space
  2405                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2406                                                          not     al                                              ;controller timeout mask
  2407                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2408                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2409                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2410                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2411                                                          jz      irq1.140                                        ;yes, skip ahead
  2412                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2413                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2414                                                          mov     ah,al                                           ;copy scan code 0
  2415                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2416                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2417                                                          je      irq1.30                                         ;yes, set flag
  2418                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2419                                                          je      irq1.40                                         ;yes, reset flag
  2420                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2421                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2422                                                          je      irq1.30                                         ;yes, set flag
  2423                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2424                                                          je      irq1.40                                         ;yes, reset flag
  2425                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2426                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2427                                                          je      irq1.30                                         ;yes, set flag
  2428                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2429                                                          je      irq1.40                                         ;yes, reset flag
  2430                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2431                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2432                                                          je      irq1.30                                         ;yes, set flag
  2433                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2434                                                          je      irq1.40                                         ;yes, reset flag
  2435                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2436                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2437                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2438                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2439                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2440                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2441                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2442                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2443                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2444                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2445                                                          jne     irq1.70                                         ;no, skip ahead
  2446                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2447                                                          jz      irq1.140                                        ;yes, skip ahead
  2448                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2449                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2450                                                          mov     ah,al                                           ;copy scan code 1
  2451                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2452                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2453                                                          je      irq1.30                                         ;yes, set flag
  2454                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2455                                                          je      irq1.40                                         ;yes, reset flag
  2456                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2457                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2458                                                          je      irq1.30                                         ;yes, set flag
  2459                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2460                                                          je      irq1.40                                         ;yes, reset flag
  2461                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2462                                                          je      irq1.80                                         ;yes, skip ahead
  2463                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2464                                                          je      irq1.80                                         ;yes, skip ahead
  2465                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2466                                                          je      irq1.10                                         ;yes, continue
  2467                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2468                                                          jne     irq1.20                                         ;no, skip ahead
  2469                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2470                                                          jz      irq1.140                                        ;yes, skip ahead
  2471                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2472                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2473                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2474                                                          jz      irq1.140                                        ;yes, skip ahead
  2475                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2476                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2477                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2478                                  irq1.30                 or      bl,al                                           ;set shift flag
  2479                                                          jmp     irq1.60                                         ;skip ahead
  2480                                  irq1.40                 not     al                                              ;convert flag to mask
  2481                                                          and     bl,al                                           ;reset shift flag
  2482                                                          jmp     irq1.60                                         ;skip ahead
  2483                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2484                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2485                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2486                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2487                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2488                                                          jmp     irq1.150                                        ;finish keyboard handling
  2489                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2490                                                          jne     irq1.80                                         ;no continue
  2491                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2492                                                          jz      irq1.140                                        ;yes, skip ahead
  2493                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2494                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2495                                                          mov     ah,al                                           ;copy scan code 1
  2496                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2497                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2498                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2499                                                          jz      irq1.140                                        ;yes, skip ahead
  2500                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2501                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2502                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2503                                                          jz      irq1.140                                        ;yes, skip ahead
  2504                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2505                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2506                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2507                                                          jz      irq1.140                                        ;yes, skip ahead
  2508                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2509                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2510                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2511                                                          jz      irq1.140                                        ;yes, skip ahead
  2512                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2513                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2514                                                          jmp     irq1.150                                        ;continue
  2515                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2516                                                          test    ah,EKEYBUP                                      ;release code?
  2517                                                          jnz     irq1.130                                        ;yes, skip ahead
  2518                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2519                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2520                                                          jz      irq1.90                                         ;no, skip ahead
  2521                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2522                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2523                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2524                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2525                                                          jz      irq1.100                                        ;no skip ahead
  2526                                                          mov     cl,al                                           ;copy ASCII code
  2527                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2528                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2529                                                          jb      irq1.100                                        ;yes, skip ahead
  2530                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2531                                                          ja      irq1.100                                        ;yes, skip ahead
  2532                                                          xor     al,EASCIICASE                                   ;switch case
  2533                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2534                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2535                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2536                                                          jz      irq1.120                                        ;no, skip ahead
  2537                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2538                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2539                                                          or      edx,eax                                         ;msg id and codes
  2540                                                          xor     ecx,ecx                                         ;null param
  2541                                                          push    eax                                             ;save codes
  2542                                                          call    PutMessage                                      ;put message to console
  2543                                                          pop     eax                                             ;restore codes
  2544                                                          test    al,al                                           ;ASCII translation?
  2545                                                          jz      irq1.130                                        ;no, skip ahead
  2546                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2547                                                          and     eax,0FFFFh                                      ;clear high-order word
  2548                                                          or      edx,eax                                         ;msg id and codes
  2549                                                          xor     ecx,ecx                                         ;null param
  2550                                                          call    PutMessage                                      ;put message to console
  2551                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2552                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2553                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2554                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2555                                  ;
  2556                                  ;       Enable maskable interrupts.
  2557                                  ;
  2558                                                          sti                                                     ;enable maskable interrupts
  2559                                  ;
  2560                                  ;       Restore and return.
  2561                                  ;
  2562                                                          pop     ds                                              ;restore non-volatile regs
  2563                                                          pop     esi                                             ;
  2564                                                          pop     ecx                                             ;
  2565                                                          pop     ebx                                             ;
  2566                                                          pop     eax                                             ;
  2567                                                          iretd                                                   ;return
  2568                                  ;-----------------------------------------------------------------------------------------------------------------------
  2569                                  ;       Scan-Code to ASCII Translation Tables
  2570                                  ;-----------------------------------------------------------------------------------------------------------------------
  2571                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2572                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2573                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2574                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2575                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2576                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2577                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2578                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2579                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2580                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2581                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2582                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2583                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2584                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2585                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2586                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2587                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2588                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2589                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2590                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2591                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2592                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2593                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2594                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2595                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2596                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2597                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2598                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2599                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2600                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2601                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2602                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2603                                  ;-----------------------------------------------------------------------------------------------------------------------
  2604                                  ;
  2605                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2606                                  ;
  2607                                  ;-----------------------------------------------------------------------------------------------------------------------
  2608                                                          menter  iochannel                                       ;secondary 8259A cascade
  2609                                                          push    eax                                             ;save modified regs
  2610                                                          jmp     hwint                                           ;end interrupt and return
  2611                                  ;-----------------------------------------------------------------------------------------------------------------------
  2612                                  ;
  2613                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2614                                  ;
  2615                                  ;-----------------------------------------------------------------------------------------------------------------------
  2616                                                          menter  com2                                            ;serial port 2 interrupt
  2617                                                          push    eax                                             ;save modified regs
  2618                                                          jmp     hwint                                           ;end interrupt and return
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  ;
  2621                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2622                                  ;
  2623                                  ;-----------------------------------------------------------------------------------------------------------------------
  2624                                                          menter  com1                                            ;serial port 1 interrupt
  2625                                                          push    eax                                             ;save modified regs
  2626                                                          jmp     hwint                                           ;end interrupt and return
  2627                                  ;-----------------------------------------------------------------------------------------------------------------------
  2628                                  ;
  2629                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2630                                  ;
  2631                                  ;-----------------------------------------------------------------------------------------------------------------------
  2632                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2633                                                          push    eax                                             ;save modified regs
  2634                                                          jmp     hwint                                           ;end interrupt and return
  2635                                  ;-----------------------------------------------------------------------------------------------------------------------
  2636                                  ;
  2637                                  ;       IRQ6    Diskette Hardware Interrupt
  2638                                  ;
  2639                                  ;-----------------------------------------------------------------------------------------------------------------------
  2640                                                          menter  diskette                                        ;floppy disk interrupt
  2641                                                          push    eax                                             ;save non-volatile regs
  2642                                                          push    ds                                              ;
  2643                                                          call    PutPrimaryEndOfInt                              ;end the interrupt
  2644                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2645                                                          pop     ds                                              ;... into DS register
  2646                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2647                                                          or      al,10000000b                                    ;set IRQ flag
  2648                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2649                                                          sti                                                     ;enable maskable interrupts
  2650                                                          pop     ds                                              ;restore non-volatile regs
  2651                                                          pop     eax                                             ;
  2652                                                          iretd                                                   ;return from interrupt
  2653                                  ;-----------------------------------------------------------------------------------------------------------------------
  2654                                  ;
  2655                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2656                                  ;
  2657                                  ;-----------------------------------------------------------------------------------------------------------------------
  2658                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2659                                                          push    eax                                             ;save modified regs
  2660                                                          jmp     hwint                                           ;end interrupt and return
  2661                                  ;-----------------------------------------------------------------------------------------------------------------------
  2662                                  ;
  2663                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2664                                  ;
  2665                                  ;-----------------------------------------------------------------------------------------------------------------------
  2666                                                          menter  rtclock                                         ;real-time clock interrupt
  2667                                                          push    eax                                             ;save modified regs
  2668                                                          jmp     hwwint                                          ;end interrupt and return
  2669                                  ;-----------------------------------------------------------------------------------------------------------------------
  2670                                  ;
  2671                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2672                                  ;
  2673                                  ;-----------------------------------------------------------------------------------------------------------------------
  2674                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2675                                                          push    eax                                             ;save modified regs
  2676                                                          jmp     hwwint                                          ;end interrupt and return
  2677                                  ;-----------------------------------------------------------------------------------------------------------------------
  2678                                  ;
  2679                                  ;       IRQ10   Reserved Hardware Interrupt
  2680                                  ;
  2681                                  ;-----------------------------------------------------------------------------------------------------------------------
  2682                                                          menter  irq10                                           ;reserved
  2683                                                          push    eax                                             ;save modified regs
  2684                                                          jmp     hwwint                                          ;end interrupt and return
  2685                                  ;-----------------------------------------------------------------------------------------------------------------------
  2686                                  ;
  2687                                  ;       IRQ11   Reserved Hardware Interrupt
  2688                                  ;
  2689                                  ;-----------------------------------------------------------------------------------------------------------------------
  2690                                                          menter  irq11                                           ;reserved
  2691                                                          push    eax                                             ;save modified regs
  2692                                                          jmp     hwwint                                          ;end interrupt and return
  2693                                  ;-----------------------------------------------------------------------------------------------------------------------
  2694                                  ;
  2695                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2696                                  ;
  2697                                  ;-----------------------------------------------------------------------------------------------------------------------
  2698                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2699                                                          push    eax                                             ;save modified regs
  2700                                                          jmp     hwwint                                          ;end interrupt and return
  2701                                  ;-----------------------------------------------------------------------------------------------------------------------
  2702                                  ;
  2703                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2704                                  ;
  2705                                  ;-----------------------------------------------------------------------------------------------------------------------
  2706                                                          menter  coprocessor                                     ;coprocessor interrupt
  2707                                                          push    eax                                             ;save modified regs
  2708                                                          jmp     hwwint                                          ;end interrupt and return
  2709                                  ;-----------------------------------------------------------------------------------------------------------------------
  2710                                  ;
  2711                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2712                                  ;
  2713                                  ;-----------------------------------------------------------------------------------------------------------------------
  2714                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2715                                                          push    eax                                             ;save modified regs
  2716                                                          jmp     hwwint                                          ;end interrupt and return
  2717                                  ;-----------------------------------------------------------------------------------------------------------------------
  2718                                  ;
  2719                                  ;       IRQ15   Reserved Hardware Interrupt
  2720                                  ;
  2721                                  ;-----------------------------------------------------------------------------------------------------------------------
  2722                                                          menter  irq15                                           ;reserved
  2723                                                          push    eax                                             ;save modified regs
  2724                                                          jmp     hwwint                                          ;end interrupt and return
  2725                                  ;-----------------------------------------------------------------------------------------------------------------------
  2726                                  ;
  2727                                  ;       Exit from hardware interrupt
  2728                                  ;
  2729                                  ;-----------------------------------------------------------------------------------------------------------------------
  2730                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2731                                                          jmp     hwint90                                         ;skip ahead
  2732                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2733                                  hwint90                 sti                                                     ;enable maskable interrupts
  2734                                                          pop     eax                                             ;restore modified regs
  2735                                                          iretd                                                   ;return from interrupt
  2736                                  ;-----------------------------------------------------------------------------------------------------------------------
  2737                                  ;
  2738                                  ;       INT 30h Operating System Software Service Interrupt
  2739                                  ;
  2740                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2741                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2742                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2743                                  ;       the entry address of the specific function from a table.
  2744                                  ;
  2745                                  ;-----------------------------------------------------------------------------------------------------------------------
  2746                                                          menter  svc
  2747                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2748                                                          jae     svc90                                           ;yes, skip ahead
  2749                                                          movzx   eax,al                                          ;function
  2750                                                          shl     eax,2                                           ;offset into table
  2751                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2752                                  svc90                   iretd                                                   ;return from interrupt
  2753                                  ;-----------------------------------------------------------------------------------------------------------------------
  2754                                  ;
  2755                                  ;       Service Request Table
  2756                                  ;
  2757                                  ;
  2758                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2759                                  ;
  2760                                  ;-----------------------------------------------------------------------------------------------------------------------
  2761                                  tsvc                    tsvce   CompareMemory                                   ;compare memory
  2762                                                          tsvce   GetConsoleString                                ;get string input
  2763                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2764                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2765                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2766                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2767                                                          tsvce   UpperCaseString                                 ;upper-case string
  2768                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2769                                  ;-----------------------------------------------------------------------------------------------------------------------
  2770                                  ;
  2771                                  ;       Service Request Macros
  2772                                  ;
  2773                                  ;       These macros provide positional parameterization of service request calls.
  2774                                  ;
  2775                                  ;-----------------------------------------------------------------------------------------------------------------------
  2776                                  %macro                  compareMemory 0
  2777                                                          mov     al,eCompareMemory                               ;function code
  2778                                                          int     _svc                                            ;invoke OS service
  2779                                  %endmacro
  2780                                  %macro                  getConsoleString 0
  2781                                                          mov     al,eGetConsoleString                            ;function code
  2782                                                          int     _svc                                            ;invoke OS service
  2783                                  %endmacro
  2784                                  %macro                  hexadecimalToUnsigned 0
  2785                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2786                                                          int     _svc                                            ;invoke OS service
  2787                                  %endmacro
  2788                                  %macro                  placeCursor 0
  2789                                                          mov     al,ePlaceCursor                                 ;function code
  2790                                                          int     _svc                                            ;invoke OS service
  2791                                  %endmacro
  2792                                  %macro                  resetSystem 0
  2793                                                          mov     al,eResetSystem                                 ;function code
  2794                                                          int     _svc                                            ;invoke OS service
  2795                                  %endmacro
  2796                                  %macro                  unsignedToHexadecimal 0
  2797                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2798                                                          int     _svc                                            ;invoke OS service
  2799                                  %endmacro
  2800                                  %macro                  upperCaseString 0
  2801                                                          mov     al,eUpperCaseString                             ;function code
  2802                                                          int     _svc                                            ;invoke OS service
  2803                                  %endmacro
  2804                                  ;=======================================================================================================================
  2805                                  ;
  2806                                  ;       Kernel Function Library
  2807                                  ;
  2808                                  ;=======================================================================================================================
  2809                                  ;=======================================================================================================================
  2810                                  ;
  2811                                  ;       String Helper Routines
  2812                                  ;
  2813                                  ;       CompareMemory
  2814                                  ;       UpperCaseString
  2815                                  ;
  2816                                  ;=======================================================================================================================
  2817                                  ;-----------------------------------------------------------------------------------------------------------------------
  2818                                  ;
  2819                                  ;       Routine:        CompareMemory
  2820                                  ;
  2821                                  ;       Description:    This routine compares two byte arrays.
  2822                                  ;
  2823                                  ;       In:             DS:EDX  first source address
  2824                                  ;                       DS:EBX  second source address
  2825                                  ;                       ECX     comparison length
  2826                                  ;
  2827                                  ;       Out:            EDX     first source address
  2828                                  ;                       EBX     second source address
  2829                                  ;                       ECX     0       array 1 = array 2
  2830                                  ;                               <0      array 1 < array 2
  2831                                  ;                               >0      array 1 > array 2
  2832                                  ;
  2833                                  ;-----------------------------------------------------------------------------------------------------------------------
  2834                                  CompareMemory           push    esi                                             ;save non-volatile regs
  2835                                                          push    edi                                             ;
  2836                                                          push    es                                              ;
  2837                                                          push    ds                                              ;copy DS
  2838                                                          pop     es                                              ;... to ES
  2839                                                          mov     esi,edx                                         ;first source address
  2840                                                          mov     edi,ebx                                         ;second source address
  2841                                                          cld                                                     ;forward strings
  2842                                                          rep     cmpsb                                           ;compare bytes
  2843                                                          mov     al,0                                            ;default result
  2844                                                          jz      .10                                             ;branch if arrays equal
  2845                                                          mov     al,1                                            ;positive result
  2846                                                          jnc     .10                                             ;branch if target > source
  2847                                                          mov     al,-1                                           ;negative result
  2848                                  .10                     movsx   ecx,al                                          ;extend sign
  2849                                                          pop     es                                              ;restore non-volatile regs
  2850                                                          pop     edi                                             ;
  2851                                                          pop     esi                                             ;
  2852                                                          ret                                                     ;return
  2853                                  ;-----------------------------------------------------------------------------------------------------------------------
  2854                                  ;
  2855                                  ;       Routine:        UpperCaseString
  2856                                  ;
  2857                                  ;       Description:    This routine places all characters in the given string to upper case.
  2858                                  ;
  2859                                  ;       In:             DS:EDX  string address
  2860                                  ;
  2861                                  ;       Out:            EDX     string address
  2862                                  ;
  2863                                  ;-----------------------------------------------------------------------------------------------------------------------
  2864                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  2865                                                          mov     esi,edx                                         ;string address
  2866                                                          cld                                                     ;forward strings
  2867                                  .10                     lodsb                                                   ;string character
  2868                                                          test    al,al                                           ;null?
  2869                                                          jz      .20                                             ;yes, skip ahead
  2870                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2871                                                          jb      .10                                             ;no, continue
  2872                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2873                                                          ja      .10                                             ;no, continue
  2874                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  2875                                                          mov     [esi-1],al                                      ;upper character
  2876                                                          jmp     .10                                             ;continue
  2877                                  .20                     pop     esi                                             ;restore non-volatile regs
  2878                                                          ret                                                     ;return
  2879                                  ;=======================================================================================================================
  2880                                  ;
  2881                                  ;       Console Helper Routines
  2882                                  ;
  2883                                  ;       GetConsoleChar
  2884                                  ;       GetConsoleString
  2885                                  ;       NextConsoleColumn
  2886                                  ;       PreviousConsoleColumn
  2887                                  ;       PutConsoleChar
  2888                                  ;       PutConsoleHexByte
  2889                                  ;       PutConsoleHexDword
  2890                                  ;       PutConsoleHexWord
  2891                                  ;       PutConsoleOIAChar
  2892                                  ;       PutConsoleOIAShift
  2893                                  ;       Yield
  2894                                  ;
  2895                                  ;=======================================================================================================================
  2896                                  ;-----------------------------------------------------------------------------------------------------------------------
  2897                                  ;
  2898                                  ;       Routine:        GetConsoleChar
  2899                                  ;
  2900                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2901                                  ;
  2902                                  ;       Out:            AL      ASCII character code
  2903                                  ;                       AH      keyboard scan code
  2904                                  ;
  2905                                  ;-----------------------------------------------------------------------------------------------------------------------
  2906                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2907                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  2908                                                          or      eax,eax                                         ;do we have a message?
  2909                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  2910                                                          push    eax                                             ;save key codes
  2911                                                          and     eax,0FFFF0000h                                  ;mask for message type
  2912                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2913                                                          pop     eax                                             ;restore key codes
  2914                                                          jne     GetConsoleChar                                  ;no, try again
  2915                                                          and     eax,0000ffffh                                   ;mask for key codes
  2916                                                          ret                                                     ;return
  2917                                  ;-----------------------------------------------------------------------------------------------------------------------
  2918                                  ;
  2919                                  ;       Routine:        GetConsoleString
  2920                                  ;
  2921                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2922                                  ;
  2923                                  ;       In:             DS:EDX  target buffer address
  2924                                  ;                       ECX     maximum number of characters to accept
  2925                                  ;                       BH      echo to terminal
  2926                                  ;                       BL      terminating character
  2927                                  ;
  2928                                  ;-----------------------------------------------------------------------------------------------------------------------
  2929                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  2930                                                          push    esi                                             ;
  2931                                                          push    edi                                             ;
  2932                                                          push    es                                              ;
  2933                                                          push    ds                                              ;load data segment selector ...
  2934                                                          pop     es                                              ;... into extra segment register
  2935                                                          mov     edi,edx                                         ;edi = target buffer
  2936                                                          push    ecx                                             ;save maximum characters
  2937                                                          xor     al,al                                           ;zero register
  2938                                                          cld                                                     ;forward strings
  2939                                                          rep     stosb                                           ;zero fill buffer
  2940                                                          pop     ecx                                             ;maximum characters
  2941                                                          mov     edi,edx                                         ;edi = target buffer
  2942                                                          mov     esi,edx                                         ;esi = target buffer
  2943                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  2944                                  .20                     call    GetConsoleChar                                  ;al = next input char
  2945                                                          cmp     al,bl                                           ;is this the terminator?
  2946                                                          je      .50                                             ;yes, exit
  2947                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2948                                                          jne     .30                                             ;no, skip ahead
  2949                                                          cmp     esi,edi                                         ;at start of buffer?
  2950                                                          je      .20                                             ;yes, get next character
  2951                                                          dec     edi                                             ;backup target pointer
  2952                                                          mov     byte [edi],0                                    ;zero previous character
  2953                                                          inc     ecx                                             ;increment remaining chars
  2954                                                          test    bh,1                                            ;echo to console?
  2955                                                          jz      .20                                             ;no, get next character
  2956                                                          call    PreviousConsoleColumn                           ;backup console position
  2957                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2958                                                          call    PutConsoleChar                                  ;write space to console
  2959                                                          call    PlaceCursor                                     ;position the cursor
  2960                                                          jmp     .20                                             ;get next character
  2961                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2962                                                          jb      .20                                             ;no, get another character
  2963                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2964                                                          ja      .20                                             ;no, get another character
  2965                                                          stosb                                                   ;store character in buffer
  2966                                                          test    bh,1                                            ;echo to console?
  2967                                                          jz      .40                                             ;no, skip ahead
  2968                                                          call    PutConsoleChar                                  ;write character to console
  2969                                                          call    NextConsoleColumn                               ;advance console position
  2970                                                          call    PlaceCursor                                     ;position the cursor
  2971                                  .40                     dec     ecx                                             ;decrement remaining chars
  2972                                                          jmp     .10                                             ;next
  2973                                  .50                     xor     al,al                                           ;null
  2974                                                          stosb                                                   ;terminate buffer
  2975                                                          pop     es                                              ;restore non-volatile regs
  2976                                                          pop     edi                                             ;
  2977                                                          pop     esi                                             ;
  2978                                                          pop     ecx                                             ;
  2979                                                          ret                                                     ;return
  2980                                  ;-----------------------------------------------------------------------------------------------------------------------
  2981                                  ;
  2982                                  ;       Routine:        NextConsoleColumn
  2983                                  ;
  2984                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2985                                  ;                       incremented if the end of the current row is reached.
  2986                                  ;
  2987                                  ;       In:             DS      OS data selector
  2988                                  ;
  2989                                  ;-----------------------------------------------------------------------------------------------------------------------
  2990                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2991                                                          cmp     al,ECONCOLS-1                                   ;end of row?
  2992                                                          jnb     .10
  2993                                                          inc     al
  2994                                                          mov     [wbConsoleColumn],al
  2995                                  .10                     ret                                                     ;return
  2996                                  ;-----------------------------------------------------------------------------------------------------------------------
  2997                                  ;
  2998                                  ;       Routine:        PreviousConsoleColumn
  2999                                  ;
  3000                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3001                                  ;                       the column is set to the last position in the row and the row is decremented.
  3002                                  ;
  3003                                  ;       In:             DS      OS data selector
  3004                                  ;
  3005                                  ;-----------------------------------------------------------------------------------------------------------------------
  3006                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3007                                                          or      al,al                                           ;start of row?
  3008                                                          jz      .10
  3009                                                          dec     al
  3010                                                          mov     [wbConsoleColumn],al
  3011                                  .10                     ret                                                     ;return
  3012                                  ;-----------------------------------------------------------------------------------------------------------------------
  3013                                  ;
  3014                                  ;       Routine:        PutConsoleChar
  3015                                  ;
  3016                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3017                                  ;
  3018                                  ;       In:             AL      ASCII character
  3019                                  ;                       DS      OS data selector
  3020                                  ;
  3021                                  ;-----------------------------------------------------------------------------------------------------------------------
  3022                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3023                                                          push    es                                              ;
  3024                                                          push    EGDTCGA                                         ;load CGA selector ...
  3025                                                          pop     es                                              ;... into extra segment reg
  3026                                                          mov     cl,[wbConsoleColumn]                            ;column
  3027                                                          mov     ch,[wbConsoleRow]                               ;row
  3028                                                          call    SetConsoleChar                                  ;put character at row, column
  3029                                                          pop     es                                              ;restore non-volatile regs
  3030                                                          pop     ecx                                             ;
  3031                                                          ret                                                     ;return
  3032                                  ;-----------------------------------------------------------------------------------------------------------------------
  3033                                  ;
  3034                                  ;       Routine:        PutConsoleHexByte
  3035                                  ;
  3036                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3037                                  ;
  3038                                  ;       In:             AL      byte value
  3039                                  ;                       CL      column
  3040                                  ;                       CH      row
  3041                                  ;                       DS      OS data selector
  3042                                  ;                       ES      CGA selector
  3043                                  ;
  3044                                  ;-----------------------------------------------------------------------------------------------------------------------
  3045                                  PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  3046                                                          shr     al,4                                            ;hi-order nybble
  3047                                                          call    .10                                             ;make ASCII and store
  3048                                                          pop     eax                                             ;byte value
  3049                                                          and     al,0Fh                                          ;lo-order nybble
  3050                                  .10                     or      al,030h                                         ;apply ASCII zone
  3051                                                          cmp     al,03Ah                                         ;numeric?
  3052                                                          jb      .20                                             ;yes, skip ahead
  3053                                                          add     al,7                                            ;add ASCII offset for alpha
  3054                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  3055                                                          ret                                                     ;return
  3056                                  ;-----------------------------------------------------------------------------------------------------------------------
  3057                                  ;
  3058                                  ;       Routine:        PutConsoleHexDword
  3059                                  ;
  3060                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3061                                  ;
  3062                                  ;       In:             EAX     value
  3063                                  ;                       CL      column
  3064                                  ;                       CH      row
  3065                                  ;                       DS      OS data selector
  3066                                  ;                       ES      CGA selector
  3067                                  ;
  3068                                  ;-----------------------------------------------------------------------------------------------------------------------
  3069                                  PutConsoleHexDword      push    eax
  3070                                                          shr     eax,16
  3071                                                          call    PutConsoleHexWord
  3072                                                          pop     eax
  3073                                                          call    PutConsoleHexWord
  3074                                                          ret
  3075                                  ;-----------------------------------------------------------------------------------------------------------------------
  3076                                  ;
  3077                                  ;       Routine:        PutConsoleHexWord
  3078                                  ;
  3079                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3080                                  ;
  3081                                  ;       In:             EAX     value
  3082                                  ;                       CL      column
  3083                                  ;                       CH      row
  3084                                  ;                       DS      OS data selector
  3085                                  ;                       ES      CGA selector
  3086                                  ;
  3087                                  ;-----------------------------------------------------------------------------------------------------------------------
  3088                                  PutConsoleHexWord       push    eax
  3089                                                          shr     eax,8
  3090                                                          call    PutConsoleHexByte
  3091                                                          pop     eax
  3092                                                          call    PutConsoleHexByte
  3093                                                          ret
  3094                                  ;-----------------------------------------------------------------------------------------------------------------------
  3095                                  ;
  3096                                  ;       Routine:        PutConsoleOIAChar
  3097                                  ;
  3098                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3099                                  ;
  3100                                  ;       In:             DS      OS data selector
  3101                                  ;
  3102                                  ;-----------------------------------------------------------------------------------------------------------------------
  3103                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3104                                                          push    ecx                                             ;
  3105                                                          push    esi                                             ;
  3106                                                          push    ds                                              ;
  3107                                                          push    es                                              ;
  3108                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3109                                                          pop     ds                                              ;... into data segment register
  3110                                                          push    EGDTCGA                                         ;load CGA selector ...
  3111                                                          pop     es                                              ;... into extra segment register
  3112                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  3113                                                          mov     bh,ECONOIAROW                                   ;OIA row
  3114                                                          mov     bl,0                                            ;starting column
  3115                                                          mov     ecx,6                                           ;maximum scan codes
  3116                                  .10                     push    ecx                                             ;save remaining count
  3117                                                          mov     ecx,ebx                                         ;row, column
  3118                                                          lodsb                                                   ;read scan code
  3119                                                          or      al,al                                           ;scan code present?
  3120                                                          jz      .20                                             ;no, skip ahead
  3121                                                          call    PutConsoleHexByte                               ;display scan code
  3122                                                          jmp     .30                                             ;continue
  3123                                  .20                     mov     al,' '                                          ;ASCII space
  3124                                                          call    SetConsoleChar                                  ;display space
  3125                                                          mov     al,' '                                          ;ASCII space
  3126                                                          call    SetConsoleChar                                  ;display space
  3127                                  .30                     add     bl,2                                            ;next column (+2)
  3128                                                          pop     ecx                                             ;restore remaining
  3129                                                          loop    .10                                             ;next code
  3130                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  3131                                                          cmp     al,32                                           ;printable? (lower-bounds)
  3132                                                          jb      .40                                             ;no, skip ahead
  3133                                                          cmp     al,126                                          ;printable? (upper-bounds)
  3134                                                          ja      .40                                             ;no, skip ahead
  3135                                                          mov     ch,bh                                           ;OIA row
  3136                                                          mov     cl,40                                           ;character display column
  3137                                                          call    SetConsoleChar                                  ;display ASCII character
  3138                                  .40                     pop     es                                              ;restore non-volatile regs
  3139                                                          pop     ds                                              ;
  3140                                                          pop     esi                                             ;
  3141                                                          pop     ecx                                             ;
  3142                                                          pop     ebx                                             ;
  3143                                                          ret                                                     ;return
  3144                                  ;-----------------------------------------------------------------------------------------------------------------------
  3145                                  ;
  3146                                  ;       Routine:        PutConsoleOIAShift
  3147                                  ;
  3148                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3149                                  ;
  3150                                  ;       In:             BL      shift flags
  3151                                  ;                       BH      lock flags
  3152                                  ;                       DS      OS data selector
  3153                                  ;
  3154                                  ;-----------------------------------------------------------------------------------------------------------------------
  3155                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3156                                                          push    es                                              ;
  3157                                                          push    EGDTCGA                                         ;load CGA selector ...
  3158                                                          pop     es                                              ;... into ES register
  3159                                                          mov     ch,ECONOIAROW                                   ;OIA row
  3160                                                          mov     al,EASCIISPACE                                  ;space is default character
  3161                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3162                                                          jz      .10                                             ;no, skip ahead
  3163                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3164                                  .10                     mov     cl,14                                           ;indicator column
  3165                                                          call    SetConsoleChar                                  ;display ASCII character
  3166                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3167                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3168                                                          jz      .20                                             ;no, skip ahead
  3169                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3170                                  .20                     mov     cl,64                                           ;indicator column
  3171                                                          call    SetConsoleChar                                  ;display ASCII character
  3172                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3173                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3174                                                          jz      .30                                             ;no, skip ahead
  3175                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3176                                  .30                     mov     cl,15                                           ;indicator column
  3177                                                          call    SetConsoleChar                                  ;display ASCII character
  3178                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3179                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3180                                                          jz      .40                                             ;no, skip ahead
  3181                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3182                                  .40                     mov     cl,63                                           ;indicator column
  3183                                                          call    SetConsoleChar                                  ;display ASCII character
  3184                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3185                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3186                                                          jz      .50                                             ;no, skip ahead
  3187                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3188                                  .50                     mov     cl,16                                           ;indicator column
  3189                                                          call    SetConsoleChar                                  ;display ASCII character
  3190                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3191                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3192                                                          jz      .60                                             ;no, skip ahead
  3193                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3194                                  .60                     mov     cl,62                                           ;indicator column
  3195                                                          call    SetConsoleChar                                  ;display ASCII character
  3196                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3197                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3198                                                          jz      .70                                             ;no, skip ahead
  3199                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3200                                  .70                     mov     cl,78                                           ;indicator column
  3201                                                          call    SetConsoleChar                                  ;display ASCII character
  3202                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3203                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3204                                                          jz      .80                                             ;no, skip ahead
  3205                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  3206                                  .80                     mov     cl,77                                           ;indicator column
  3207                                                          call    SetConsoleChar                                  ;display ASCII character
  3208                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3209                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3210                                                          jz      .90                                             ;no, skip ahead
  3211                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3212                                  .90                     mov     cl,76                                           ;indicator column
  3213                                                          call    SetConsoleChar                                  ;display ASCII character
  3214                                                          pop     es                                              ;restore non-volatile regs
  3215                                                          pop     ecx                                             ;
  3216                                                          ret                                                     ;return
  3217                                  ;-----------------------------------------------------------------------------------------------------------------------
  3218                                  ;
  3219                                  ;       Routine:        Yield
  3220                                  ;
  3221                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3222                                  ;
  3223                                  ;-----------------------------------------------------------------------------------------------------------------------
  3224                                  Yield                   sti                                                     ;enable maskagle interrupts
  3225                                                          hlt                                                     ;halt until external interrupt
  3226                                                          ret                                                     ;return
  3227                                  ;=======================================================================================================================
  3228                                  ;
  3229                                  ;       Data-Type Conversion Helper Routines
  3230                                  ;
  3231                                  ;       HexadecimalToUnsigned
  3232                                  ;       UnsignedToHexadecimal
  3233                                  ;
  3234                                  ;=======================================================================================================================
  3235                                  ;-----------------------------------------------------------------------------------------------------------------------
  3236                                  ;
  3237                                  ;       Routine:        HexadecimalToUnsigned
  3238                                  ;
  3239                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3240                                  ;
  3241                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  3242                                  ;
  3243                                  ;       Output:         EAX     unsigned integer value
  3244                                  ;
  3245                                  ;-----------------------------------------------------------------------------------------------------------------------
  3246                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  3247                                                          mov     esi,edx                                         ;source address
  3248                                                          xor     edx,edx                                         ;zero register
  3249                                  .10                     lodsb                                                   ;source byte
  3250                                                          test    al,al                                           ;end of string?
  3251                                                          jz      .30                                             ;yes, branch
  3252                                                          cmp     al,'9'                                          ;hexadecimal?
  3253                                                          jna     .20                                             ;no, skip ahead
  3254                                                          sub     al,037h                                         ;'A' = 41h, less 37h = 0Ah
  3255                                  .20                     and     eax,00Fh                                        ;remove ascii zone
  3256                                                          shl     edx,4                                           ;previous total x 16
  3257                                                          add     edx,eax                                         ;add prior value x 16
  3258                                                          jmp     .10                                             ;next
  3259                                  .30                     mov     eax,edx                                         ;result
  3260                                                          pop     esi                                             ;restore non-volatile regs
  3261                                                          ret                                                     ;return
  3262                                  ;-----------------------------------------------------------------------------------------------------------------------
  3263                                  ;
  3264                                  ;       Routine:        UnsignedToHexadecimal
  3265                                  ;
  3266                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  3267                                  ;
  3268                                  ;       Input:          DS:EDX  output buffer address
  3269                                  ;                       ECX     32-bit binary
  3270                                  ;
  3271                                  ;-----------------------------------------------------------------------------------------------------------------------
  3272                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  3273                                                          mov     edi,edx                                         ;output buffer address
  3274                                                          mov     edx,ecx                                         ;32-bit unsigned
  3275                                                          xor     ecx,ecx                                         ;zero register
  3276                                                          mov     cl,8                                            ;nybble count
  3277                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  3278                                                          mov     al,dl                                           ;????bbbb
  3279                                                          and     al,00Fh                                         ;mask out bits 4-7
  3280                                                          or      al,030h                                         ;mask in ascii zone
  3281                                                          cmp     al,03Ah                                         ;A through F?
  3282                                                          jb      .20                                             ;no, skip ahead
  3283                                                          add     al,7                                            ;41h through 46h
  3284                                  .20                     stosb                                                   ;store hexnum
  3285                                                          loop    .10                                             ;next nybble
  3286                                                          xor     al,al                                           ;zero reg
  3287                                                          stosb                                                   ;null terminate
  3288                                                          pop     edi                                             ;restore non-volatile regs
  3289                                                          ret                                                     ;return
  3290                                  ;=======================================================================================================================
  3291                                  ;
  3292                                  ;       Message Queue Helper Routines
  3293                                  ;
  3294                                  ;       GetMessage
  3295                                  ;       PutMessage
  3296                                  ;
  3297                                  ;=======================================================================================================================
  3298                                  ;-----------------------------------------------------------------------------------------------------------------------
  3299                                  ;
  3300                                  ;       Routine:        GetMessage
  3301                                  ;
  3302                                  ;       Description:    This routine reads and removes a message from the message queue.
  3303                                  ;
  3304                                  ;       Out:            EAX     lo-order message data
  3305                                  ;                       EDX     hi-order message data
  3306                                  ;
  3307                                  ;                       CY      0 = message read
  3308                                  ;                               1 = no message to read
  3309                                  ;
  3310                                  ;-----------------------------------------------------------------------------------------------------------------------
  3311                                  GetMessage              push    ebx                                             ;save non-volatile regs
  3312                                                          push    ecx                                             ;
  3313                                                          push    ds                                              ;
  3314                                                          push    ELDTMQ                                          ;load message queue selector ...
  3315                                                          pop     ds                                              ;... into data segment register
  3316                                                          mov     ebx,[MQHead]                                    ;head ptr
  3317                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  3318                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3319                                                          or      eax,edx                                         ;is queue empty?
  3320                                                          stc                                                     ;assume queue is emtpy
  3321                                                          jz      .20                                             ;yes, skip ahead
  3322                                                          xor     ecx,ecx                                         ;store zero
  3323                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  3324                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3325                                                          add     ebx,8                                           ;next queue element
  3326                                                          and     ebx,03FCh                                       ;at end of queue?
  3327                                                          jnz     .10                                             ;no, skip ahead
  3328                                                          mov     bl,8                                            ;reset to 1st entry
  3329                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3330                                                          clc                                                     ;indicate message read
  3331                                  .20                     pop     ds                                              ;restore non-volatile regs
  3332                                                          pop     ecx                                             ;
  3333                                                          pop     ebx                                             ;
  3334                                                          ret                                                     ;return
  3335                                  ;-----------------------------------------------------------------------------------------------------------------------
  3336                                  ;
  3337                                  ;       Routine:        PutMessage
  3338                                  ;
  3339                                  ;       Description:    This routine adda a message to the message queue.
  3340                                  ;
  3341                                  ;       In:             ECX     hi-order data word
  3342                                  ;                       EDX     lo-order data word
  3343                                  ;
  3344                                  ;       Out:            CY      0 = success
  3345                                  ;                               1 = fail: queue is full
  3346                                  ;
  3347                                  ;-----------------------------------------------------------------------------------------------------------------------
  3348                                  PutMessage              push    ds                                              ;save non-volatile regs
  3349                                                          push    ELDTMQ                                          ;load task message queue selector ...
  3350                                                          pop     ds                                              ;... into data segment register
  3351                                                          mov     eax,[MQTail]                                    ;tail ptr
  3352                                                          cmp     dword [eax],0                                   ;is queue full?
  3353                                                          stc                                                     ;assume failure
  3354                                                          jne     .20                                             ;yes, cannot store
  3355                                                          mov     [eax],edx                                       ;store lo-order data
  3356                                                          mov     [eax+4],ecx                                     ;store hi-order data
  3357                                                          add     eax,8                                           ;next queue element adr
  3358                                                          and     eax,03FCh                                       ;at end of queue?
  3359                                                          jnz     .10                                             ;no, skip ahead
  3360                                                          mov     al,8                                            ;reset to top of queue
  3361                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3362                                                          clc                                                     ;indicate success
  3363                                  .20                     pop     ds                                              ;restore non-volatile regs
  3364                                                          ret                                                     ;return
  3365                                  ;=======================================================================================================================
  3366                                  ;
  3367                                  ;       Memory-Mapped Video Routines
  3368                                  ;
  3369                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  3370                                  ;
  3371                                  ;       SetConsoleChar
  3372                                  ;       SetConsoleString
  3373                                  ;
  3374                                  ;=======================================================================================================================
  3375                                  ;-----------------------------------------------------------------------------------------------------------------------
  3376                                  ;
  3377                                  ;       Routine:        SetConsoleChar
  3378                                  ;
  3379                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3380                                  ;
  3381                                  ;       In:             AL      ASCII character
  3382                                  ;                       CL      column
  3383                                  ;                       CH      row
  3384                                  ;                       ES      CGA selector
  3385                                  ;
  3386                                  ;       Out:            EAX     last target address written (ES:)
  3387                                  ;                       CL      column + 1
  3388                                  ;
  3389                                  ;-----------------------------------------------------------------------------------------------------------------------
  3390                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  3391                                                          movzx   eax,ch                                          ;row
  3392                                                          mov     ah,ECONCOLS                                     ;cols/row
  3393                                                          mul     ah                                              ;row * cols/row
  3394                                                          add     al,cl                                           ;add column
  3395                                                          adc     ah,0                                            ;handle carry
  3396                                                          shl     eax,1                                           ;screen offset
  3397                                                          mov     [es:eax],dl                                     ;store character
  3398                                                          inc     cl                                              ;next column
  3399                                                          ret                                                     ;return
  3400                                  ;-----------------------------------------------------------------------------------------------------------------------
  3401                                  ;
  3402                                  ;       Routine:        SetConsoleString
  3403                                  ;
  3404                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  3405                                  ;
  3406                                  ;       In:             ESI     source offset (DS:)
  3407                                  ;                       CL      column
  3408                                  ;                       CH      row
  3409                                  ;                       ES      CGA selector
  3410                                  ;
  3411                                  ;-----------------------------------------------------------------------------------------------------------------------
  3412                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  3413                                                          cld                                                     ;forward strings
  3414                                  .10                     lodsb                                                   ;next ASCII character
  3415                                                          test    al,al                                           ;end of string?
  3416                                                          jz      .20                                             ;yes, branch
  3417                                                          call    SetConsoleChar                                  ;store character
  3418                                                          jmp     .10                                             ;continue
  3419                                  .20                     pop     esi                                             ;restore non-volatile regs
  3420                                                          ret                                                     ;return
  3421                                  ;=======================================================================================================================
  3422                                  ;
  3423                                  ;       Input/Output Routines
  3424                                  ;
  3425                                  ;       These routines read and/or write directly to ports.
  3426                                  ;
  3427                                  ;       PlaceCursor
  3428                                  ;       PutPrimaryEndOfInt
  3429                                  ;       PutSecondaryEndOfInt
  3430                                  ;       ResetSystem
  3431                                  ;       SetKeyboardLamps
  3432                                  ;       WaitForKeyInBuffer
  3433                                  ;       WaitForKeyOutBuffer
  3434                                  ;
  3435                                  ;=======================================================================================================================
  3436                                  ;-----------------------------------------------------------------------------------------------------------------------
  3437                                  ;
  3438                                  ;       Routine:        PlaceCursor
  3439                                  ;
  3440                                  ;       Description:    This routine positions the cursor on the console.
  3441                                  ;
  3442                                  ;       In:             DS      OS data selector
  3443                                  ;
  3444                                  ;-----------------------------------------------------------------------------------------------------------------------
  3445                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  3446                                                          mov     al,[wbConsoleRow]                               ;AL = row
  3447                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  3448                                                          mul     ah                                              ;row offset
  3449                                                          add     al,[wbConsoleColumn]                            ;add column
  3450                                                          adc     ah,0                                            ;add overflow
  3451                                                          mov     ecx,eax                                         ;screen offset
  3452                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3453                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3454                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3455                                                          out     dx,al                                           ;select register
  3456                                                          inc     edx                                             ;data port
  3457                                                          mov     al,ch                                           ;hi-order cursor loc
  3458                                                          out     dx,al                                           ;store hi-order loc
  3459                                                          dec     edx                                             ;register select port
  3460                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3461                                                          out     dx,al                                           ;select register
  3462                                                          inc     edx                                             ;data port
  3463                                                          mov     al,cl                                           ;lo-order cursor loc
  3464                                                          out     dx,al                                           ;store lo-order loc
  3465                                                          pop     ecx                                             ;restore non-volatile regs
  3466                                                          ret                                                     ;return
  3467                                  ;-----------------------------------------------------------------------------------------------------------------------
  3468                                  ;
  3469                                  ;       Routine:        PutPrimaryEndOfInt
  3470                                  ;
  3471                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3472                                  ;
  3473                                  ;-----------------------------------------------------------------------------------------------------------------------
  3474                                  PutPrimaryEndOfInt      mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3475                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3476                                                          ret                                                     ;return
  3477                                  ;-----------------------------------------------------------------------------------------------------------------------
  3478                                  ;
  3479                                  ;       Routine:        PutSecondaryEndOfInt
  3480                                  ;
  3481                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3482                                  ;
  3483                                  ;-----------------------------------------------------------------------------------------------------------------------
  3484                                  PutSecondaryEndOfInt    mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3485                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3486                                                          ret                                                     ;return
  3487                                  ;-----------------------------------------------------------------------------------------------------------------------
  3488                                  ;
  3489                                  ;       Routine:        ResetSystem
  3490                                  ;
  3491                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3492                                  ;
  3493                                  ;       Out:            N/A     This routine does not return.
  3494                                  ;
  3495                                  ;-----------------------------------------------------------------------------------------------------------------------
  3496                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3497                                                          loop    $                                               ;clear interrupts
  3498                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3499                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3500                                  .10                     sti                                                     ;enable maskable interrupts
  3501                                                          hlt                                                     ;halt until interrupt
  3502                                                          jmp     .10                                             ;repeat until reset kicks in
  3503                                  ;-----------------------------------------------------------------------------------------------------------------------
  3504                                  ;
  3505                                  ;       Routine:        SetKeyboardLamps
  3506                                  ;
  3507                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3508                                  ;
  3509                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3510                                  ;
  3511                                  ;-----------------------------------------------------------------------------------------------------------------------
  3512                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3513                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3514                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  3515                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3516                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3517                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3518                                                          mov     al,bh                                           ;set/reset lamps value
  3519                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  3520                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3521                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3522                                                          ret                                                     ;return
  3523                                  ;-----------------------------------------------------------------------------------------------------------------------
  3524                                  ;
  3525                                  ;       Routine:        WaitForKeyInBuffer
  3526                                  ;
  3527                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3528                                  ;
  3529                                  ;       Out:            ZF      1 = Input buffer ready
  3530                                  ;                               0 = Input buffer not ready after timeout
  3531                                  ;
  3532                                  ;-----------------------------------------------------------------------------------------------------------------------
  3533                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3534                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3535                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3536                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  3537                                                          loopnz  .10                                             ;yes, repeat till timeout
  3538                                                          pop     ecx                                             ;restore non-volatile regs
  3539                                                          ret                                                     ;return
  3540                                  ;-----------------------------------------------------------------------------------------------------------------------
  3541                                  ;
  3542                                  ;       Routine:        WaitForKeyOutBuffer
  3543                                  ;
  3544                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3545                                  ;
  3546                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3547                                  ;                               0 = Output buffer empty after timeout
  3548                                  ;
  3549                                  ;-----------------------------------------------------------------------------------------------------------------------
  3550                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3551                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3552                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3553                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  3554                                                          loopz   .10                                             ;loop until output buffer bit
  3555                                                          pop     ecx                                             ;restore non-volatile regs
  3556                                                          ret                                                     ;return
  3557                                  ;-----------------------------------------------------------------------------------------------------------------------
  3558                                  ;
  3559                                  ;       End of the Kernel Function Library
  3560                                  ;
  3561                                  ;-----------------------------------------------------------------------------------------------------------------------
  3562                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  3563                                  ;=======================================================================================================================
  3564                                  ;
  3565                                  ;       Console Task
  3566                                  ;
  3567                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3568                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3569                                  ;       screen and responds to user commands.
  3570                                  ;
  3571                                  ;=======================================================================================================================
  3572                                  ;-----------------------------------------------------------------------------------------------------------------------
  3573                                  ;
  3574                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3575                                  ;
  3576                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3577                                  ;
  3578                                  ;-----------------------------------------------------------------------------------------------------------------------
  3579                                  section                 constack                                                ;console task stack
  3580                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  3581                                  ;-----------------------------------------------------------------------------------------------------------------------
  3582                                  ;
  3583                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3584                                  ;
  3585                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3586                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3587                                  ;       16 descriptors. Six are initially defined.
  3588                                  ;
  3589                                  ;-----------------------------------------------------------------------------------------------------------------------
  3590                                  section                 conldt                                                  ;console local descriptors
  3591                                                          dq      004093004780007Fh                               ;04 TSS alias
  3592                                                          dq      004093004700007Fh                               ;0c LDT alias
  3593                                                          dq      00409300400006FFh                               ;14 stack
  3594                                                          dq      00CF93000000FFFFh                               ;1c data
  3595                                                          dq      00409B0050000FFFh                               ;24 code
  3596                                                          dq      00409300480007FFh                               ;2c message queue
  3597                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3598                                  ;-----------------------------------------------------------------------------------------------------------------------
  3599                                  ;
  3600                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3601                                  ;
  3602                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3603                                  ;       segment. CS to console code.
  3604                                  ;
  3605                                  ;-----------------------------------------------------------------------------------------------------------------------
  3606                                  section                 contss                                                  ;console task state segment
  3607                                                          dd      0                                               ;00 back-link tss
  3608                                                          dd      0700h                                           ;04 esp ring 0
  3609                                                          dd      0014h                                           ;08 ss ring 0
  3610                                                          dd      0700h                                           ;0c esp ring 1
  3611                                                          dd      0014h                                           ;10 es ring 1
  3612                                                          dd      0700h                                           ;14 esp ring 2
  3613                                                          dd      0014h                                           ;18 ss ring 2
  3614                                                          dd      0                                               ;1c cr ring 3
  3615                                                          dd      0                                               ;20 eip
  3616                                                          dd      0200h                                           ;24 eflags
  3617                                                          dd      0                                               ;28 eax
  3618                                                          dd      0                                               ;2c ecx
  3619                                                          dd      0                                               ;30 edx
  3620                                                          dd      0                                               ;34 ebx
  3621                                                          dd      0700h                                           ;38 esp ring 3
  3622                                                          dd      0                                               ;3c ebp
  3623                                                          dd      0                                               ;40 esi
  3624                                                          dd      0                                               ;44 edi
  3625                                                          dd      001Ch                                           ;48 es
  3626                                                          dd      0024h                                           ;4c cs
  3627                                                          dd      0014h                                           ;50 ss ring 3
  3628                                                          dd      001Ch                                           ;54 ds
  3629                                                          dd      0                                               ;58 fs
  3630                                                          dd      0                                               ;5c gs
  3631                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3632                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3633                                  ;-----------------------------------------------------------------------------------------------------------------------
  3634                                  ;
  3635                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3636                                  ;
  3637                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3638                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3639                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3640                                  ;       event.
  3641                                  ;
  3642                                  ;-----------------------------------------------------------------------------------------------------------------------
  3643                                  section                 conmque                                                 ;console message queue
  3644                                                          dd      8                                               ;head pointer
  3645                                                          dd      8                                               ;tail pointer
  3646                                                          times   510 dd 0                                        ;queue elements
  3647                                  ;-----------------------------------------------------------------------------------------------------------------------
  3648                                  ;
  3649                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3650                                  ;
  3651                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3652                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3653                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3654                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3655                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3656                                  ;       board input, echoing to the console screen and responding to user commands.
  3657                                  ;
  3658                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3659                                  ;
  3660                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3661                                  ;                               |  Real Mode Interrupt Vectors                  |
  3662                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3663                                  ;                               |  Reserved BIOS Memory Area                    |
  3664                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3665                                  ;                               |  Shared Kernel Memory Area                    |
  3666                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3667                                  ;                               |  Global Descriptor Table (GDT)                |
  3668                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3669                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3670                                  ;                       002000  +-----------------------------------------------+
  3671                                  ;                               |  Interrupt Handlers                           |
  3672                                  ;                               |  Kernel Function Library                      |
  3673                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3674                                  ;                               |  Console Task Stack Area                      |
  3675                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3676                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3677                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3678                                  ;                               |  Console Task Task State Segment (TSS)        |
  3679                                  ;                       004800  +-----------------------------------------------+
  3680                                  ;                               |  Console Task Message Queue                   |
  3681                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3682                                  ;                               |  Console Task Code                            |
  3683                                  ;                               |  Console Task Constants                       |
  3684                                  ;                       006000  +===============================================+
  3685                                  ;
  3686                                  ;-----------------------------------------------------------------------------------------------------------------------
  3687                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3688                                  ;
  3689                                  ;       Initialize console work areas to low values.
  3690                                  ;
  3691                                  ConCode                 mov     edi,ECONDATA                                    ;OS console data address
  3692                                                          xor     al,al                                           ;initialization value
  3693                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  3694                                                          cld                                                     ;forward strings
  3695                                                          rep     stosb                                           ;initialize data
  3696                                  ;
  3697                                  ;       Initialize the active panel variables.
  3698                                  ;
  3699                                                          mov     eax,czPnlCon001                                 ;initial console panel
  3700                                                          mov     [wdConsolePanel],eax                            ;save panel template address
  3701                                  ;
  3702                                  ;       Initialize the Operator Information Area (OIA) (This is done once).
  3703                                  ;
  3704                                                          push    es                                              ;save non-volatile regs
  3705                                                          push    EGDTCGA                                         ;load CGA video selector...
  3706                                                          pop     es                                              ;...into extra segment reg
  3707                                                          mov     edi,ECONROWS*ECONROWBYTES                       ;target offset
  3708                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3709                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  3710                                                          rep     stosd                                           ;reset OIA
  3711                                                          pop     es                                              ;restore non-volatile regs
  3712                                  ;
  3713                                  ;       Clear the console rows. (This is done after every attention key).
  3714                                  ;
  3715                                  .20                     push    es                                              ;save non-volatile regs
  3716                                                          push    EGDTCGA                                         ;load CGA video selector...
  3717                                                          pop     es                                              ;...into extra segment reg
  3718                                                          xor     edi,edi                                         ;target offset
  3719                                                          mov     ecx,ECONROWS*ECONROWDWORDS                      ;double-words to clear
  3720                                                          mov     eax,ECONCLEARDWORD                              ;initialization value
  3721                                                          rep     stosd                                           ;reset screen body
  3722                                                          pop     es                                              ;restore non-volatile regs
  3723                                  ;
  3724                                  ;       Reset the input field input address, row and column.
  3725                                  ;
  3726                                                          xor     eax,eax                                         ;zero register
  3727                                                          mov     [wdConsoleField],eax                            ;zero field addr
  3728                                                          mov     [wdConsoleInput],eax                            ;zero input addr
  3729                                                          mov     [wbConsoleRow],al                               ;zero console row
  3730                                                          mov     [wbConsoleColumn],al                            ;zero console column
  3731                                  ;
  3732                                  ;       Load the field address from the panel. Exit loop if address is null.
  3733                                  ;
  3734                                                          mov     ebx,[wdConsolePanel]                            ;first field template addr
  3735                                  .30                     mov     esi,[ebx]                                       ;field value addr
  3736                                                          test    esi,esi                                         ;end of panel?
  3737                                                          jz      .70                                             ;yes, exit loop
  3738                                  ;
  3739                                  ;       Load the field row, column, color and length.
  3740                                  ;
  3741                                                          mov     ch,[ebx+4]                                      ;row
  3742                                                          mov     cl,[ebx+5]                                      ;column
  3743                                                          mov     dh,[ebx+6]                                      ;color
  3744                                                          mov     dl,[ebx+7]                                      ;length
  3745                                  ;
  3746                                  ;       Test the row high-bit for input field indication.
  3747                                  ;
  3748                                                          test    ch,080h                                         ;input field?
  3749                                                          jz      .40                                             ;no, branch
  3750                                                          and     ch,07Fh                                         ;clear input field indicator
  3751                                  ;
  3752                                  ;       Save the row and column if this is the first input field.
  3753                                  ;
  3754                                                          mov     al,[wbConsoleRow]                               ;console row
  3755                                                          or      al,[wbConsoleColumn]                            ;already have an input field?
  3756                                                          jnz     .40                                             ;yes, branch
  3757                                                          mov     [wdConsoleField],ebx                            ;save field template addr
  3758                                                          mov     [wdConsoleInput],esi                            ;update console input buffer
  3759                                                          mov     [wbConsoleRow],ch                               ;update console row
  3760                                                          mov     [wbConsoleColumn],cl                            ;update console column
  3761                                  ;
  3762                                  ;       Clear input field contents.
  3763                                  ;
  3764                                                          push    ecx                                             ;save row, col
  3765                                                          mov     edi,esi                                         ;target is field data addr
  3766                                                          xor     al,al                                           ;fill byte is NUL
  3767                                                          movzx   ecx,dl                                          ;field length
  3768                                                          rep     stosb                                           ;fill field with fill byte
  3769                                                          pop     ecx                                             ;restore row, col
  3770                                  ;
  3771                                  ;       Compute the target offset.
  3772                                  ;
  3773                                  .40                     movzx   eax,ch                                          ;row
  3774                                                          mov     ah,ECONCOLS                                     ;columns per row
  3775                                                          mul     ah                                              ;row offset
  3776                                                          add     al,cl                                           ;add column
  3777                                                          adc     ah,0                                            ;handle overflow
  3778                                                          shl     eax,1                                           ;two-bytes per column
  3779                                  ;
  3780                                  ;       Display the field contents. EAX = screen target offset, DL = length, DL = attributes
  3781                                  ;
  3782                                                          push    es                                              ;save non-volatile regs
  3783                                                          push    EGDTCGA                                         ;load CGA video selector...
  3784                                                          pop     es                                              ;...into extra segment reg
  3785                                                          mov     edi,eax                                         ;target offset
  3786                                                          movzx   ecx,dl                                          ;length
  3787                                                          mov     ah,dh                                           ;color
  3788                                  .50                     lodsb                                                   ;field character
  3789                                                          test    al,al                                           ;end of value?
  3790                                                          jz      .60                                             ;yes, branch
  3791                                                          stosw                                                   ;store character and color
  3792                                                          loop    .50                                             ;next character
  3793                                  .60                     pop     es                                              ;restore non-volatile regs
  3794                                  ;
  3795                                  ;       Next Field.
  3796                                  ;
  3797                                                          add     ebx,8                                           ;next field addr
  3798                                                          jmp     short .30                                       ;next field
  3799                                  ;
  3800                                  ;       Place the cursor at the input field.
  3801                                  ;
  3802                                  .70                     mov     ah,[wbConsoleRow]                               ;field row
  3803                                                          mov     al,[wbConsoleColumn]                            ;field column
  3804                                                          placeCursor                                             ;position the cursor
  3805                                  ;
  3806                                  ;       Get command.
  3807                                  ;
  3808                                                          mov     esi,[wdConsoleField]                            ;input field template addr
  3809                                                          mov     edx,[wdConsoleInput]                            ;target buffer addr
  3810                                                          xor     ecx,ecx                                         ;zero register
  3811                                                          mov     cl,[esi+7]                                      ;maximum chars to accept
  3812                                                          mov     bh,1                                            ;echo to terminal
  3813                                                          mov     bl,13                                           ;terminating character
  3814                                                          getConsoleString                                        ;accept keyboard input
  3815                                  ;
  3816                                  ;       Take the first token entered.
  3817                                  ;
  3818                                                          mov     edx,[wdConsoleInput]                            ;console input buffer addr
  3819                                                          mov     ebx,wzConsoleToken                              ;token buffer
  3820                                                          call    ConTakeToken                                    ;take first command token
  3821                                  ;
  3822                                  ;       Evaluate token.
  3823                                  ;
  3824                                                          mov     edx,wzConsoleToken                              ;token buffer
  3825                                                          call    ConDetermineCommand                             ;determine if this is a command
  3826                                                          cmp     eax,ECONJMPTBLCNT                               ;command number in range?
  3827                                                          jnb     .80                                             ;no, branch
  3828                                                          shl     eax,2                                           ;convert number to array offset
  3829                                                          mov     edx,tConJmpTbl                                  ;command handler address table base
  3830                                                          mov     eax,[edx+eax]                                   ;command handler address
  3831                                                          call    eax                                             ;handler command
  3832                                  ;
  3833                                  ;       Refresh Panel.
  3834                                  ;
  3835                                  .80                      jmp     .20                                            ;refresh panel
  3836                                  ;-----------------------------------------------------------------------------------------------------------------------
  3837                                  ;
  3838                                  ;       Routine:        ConTakeToken
  3839                                  ;
  3840                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3841                                  ;
  3842                                  ;       In:             DS:EDX  source buffer address
  3843                                  ;                       DS:EBX  target buffer address
  3844                                  ;
  3845                                  ;       Out:            DS:EDX  source buffer address
  3846                                  ;                       DS:EBX  target buffer address
  3847                                  ;
  3848                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3849                                  ;
  3850                                  ;-----------------------------------------------------------------------------------------------------------------------
  3851                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  3852                                                          push    edi                                             ;
  3853                                                          push    es                                              ;
  3854                                                          push    ds                                              ;load data segment selector ...
  3855                                                          pop     es                                              ;... into extra segment reg
  3856                                                          mov     esi,edx                                         ;source buffer address
  3857                                                          mov     edi,ebx                                         ;target buffer address
  3858                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3859                                                          cld                                                     ;forward strings
  3860                                  .10                     lodsb                                                   ;load byte
  3861                                                          cmp     al,EASCIISPACE                                  ;space?
  3862                                                          je      .10                                             ;yes, continue
  3863                                                          test    al,al                                           ;end of line?
  3864                                                          jz      .40                                             ;yes, branch
  3865                                  .20                     stosb                                                   ;store byte
  3866                                                          lodsb                                                   ;load byte
  3867                                                          test    al,al                                           ;end of line?
  3868                                                          jz      .40                                             ;no, continue
  3869                                                          cmp     al,EASCIISPACE                                  ;space?
  3870                                                          jne     .20                                             ;no, continue
  3871                                  .30                     lodsb                                                   ;load byte
  3872                                                          cmp     al,EASCIISPACE                                  ;space?
  3873                                                          je      .30                                             ;yes, continue
  3874                                                          dec     esi                                             ;pre-position
  3875                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3876                                                          mov     edi,edx                                         ;source buffer address
  3877                                  .50                     lodsb                                                   ;remaining byte
  3878                                                          stosb                                                   ;move to front of buffer
  3879                                                          test    al,al                                           ;end of line?
  3880                                                          jnz     .50                                             ;no, continue
  3881                                                          pop     es                                              ;restore non-volatile regs
  3882                                                          pop     edi                                             ;
  3883                                                          pop     esi                                             ;
  3884                                                          ret                                                     ;return
  3885                                  ;-----------------------------------------------------------------------------------------------------------------------
  3886                                  ;
  3887                                  ;       Routine:        ConDetermineCommand
  3888                                  ;
  3889                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3890                                  ;
  3891                                  ;       input:          DS:EDX  command address
  3892                                  ;
  3893                                  ;       output:         EAX     >=0     = command nbr
  3894                                  ;                               0       = unknown command
  3895                                  ;
  3896                                  ;-----------------------------------------------------------------------------------------------------------------------
  3897                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3898                                                          push    ecx                                             ;
  3899                                                          push    esi                                             ;
  3900                                                          push    edi                                             ;
  3901                                                          upperCaseString                                         ;upper-case string at EDX
  3902                                                          mov     esi,tConCmdTbl                                  ;commands table
  3903                                                          xor     edi,edi                                         ;intialize command number
  3904                                                          cld                                                     ;forward strings
  3905                                  .10                     lodsb                                                   ;command length
  3906                                                          movzx   ecx,al                                          ;command length
  3907                                                          jecxz   .20                                             ;branch if end of table
  3908                                                          mov     ebx,esi                                         ;table entry address
  3909                                                          add     esi,ecx                                         ;next table entry address
  3910                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3911                                                          jecxz   .20                                             ;branch if equal
  3912                                                          inc     edi                                             ;increment command nbr
  3913                                                          jmp     .10                                             ;repeat
  3914                                  .20                     mov     eax,edi                                         ;command number
  3915                                                          pop     edi                                             ;restore non-volatile regs
  3916                                                          pop     esi                                             ;
  3917                                                          pop     ecx                                             ;
  3918                                                          pop     ebx                                             ;
  3919                                                          ret                                                     ;return
  3920                                  ;-----------------------------------------------------------------------------------------------------------------------
  3921                                  ;
  3922                                  ;       Routine:        ConExit
  3923                                  ;
  3924                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3925                                  ;
  3926                                  ;-----------------------------------------------------------------------------------------------------------------------
  3927                                  ConExit                 resetSystem                                             ;issue system reset
  3928                                                          ret                                                     ;return
  3929                                  ;-----------------------------------------------------------------------------------------------------------------------
  3930                                  ;
  3931                                  ;       Routine:        ConInt6
  3932                                  ;
  3933                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  3934                                  ;
  3935                                  ;-----------------------------------------------------------------------------------------------------------------------
  3936                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  3937                                                          ret                                                     ;return (not executed)
  3938                                  
  3939                                  ConMain                 mov     eax,czPnlCon001                                 ;initial console panel
  3940                                                          mov     [wdConsolePanel],eax                            ;save panel template address
  3941                                                          ret
  3942                                  ;-----------------------------------------------------------------------------------------------------------------------
  3943                                  ;
  3944                                  ;       Routine:        ConMem
  3945                                  ;
  3946                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  3947                                  ;
  3948                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  3949                                  ;
  3950                                  ;-----------------------------------------------------------------------------------------------------------------------
  3951                                  ConMem                  push    ebx                                             ;save non-volatile regs
  3952                                                          push    esi                                             ;
  3953                                                          push    edi                                             ;
  3954                                  ;
  3955                                  ;       Update the source address if a parameter is given.
  3956                                  ;
  3957                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  3958                                                          mov     ebx,wzConsoleToken                              ;console command token address
  3959                                                          call    ConTakeToken                                    ;take first param as token
  3960                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  3961                                                          je      .10                                             ;no, branch
  3962                                                          mov     edx,wzConsoleToken                              ;first param as token address
  3963                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  3964                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  3965                                  ;
  3966                                  ;       Setup source address and row count.
  3967                                  ;
  3968                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  3969                                                          xor     ecx,ecx                                         ;zero register
  3970                                                          mov     cl,16                                           ;row count
  3971                                                          mov     ebx,wzConsoleMemBuf0                            ;output buffer address
  3972                                  ;
  3973                                  ;       Start the row with the source address in hexadecimal.
  3974                                  ;
  3975                                  .20                     push    ecx                                             ;save remaining rows
  3976                                                          mov     edi,ebx                                         ;output buffer address
  3977                                                          mov     edx,edi                                         ;output buffer address
  3978                                                          mov     ecx,esi                                         ;console memory address
  3979                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  3980                                                          add     edi,8                                           ;end of memory addr hexnum
  3981                                  ;
  3982                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  3983                                  ;
  3984                                                          xor     ecx,ecx                                         ;zero register
  3985                                                          mov     cl,16                                           ;loop count
  3986                                  .30                     push    ecx                                             ;save loop count
  3987                                                          mov     al,' '                                          ;ascii space
  3988                                                          stosb                                                   ;store delimiter
  3989                                                          lodsb                                                   ;memory byte
  3990                                                          mov     ah,al                                           ;memory byte
  3991                                                          shr     al,4                                            ;high-order in bits 3-0
  3992                                                          or      al,30h                                          ;apply ascii numeric zone
  3993                                                          cmp     al,3ah                                          ;numeric range?
  3994                                                          jb      .40                                             ;yes, skip ahead
  3995                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  3996                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  3997                                                          mov     al,ah                                           ;low-order in bits 3-0
  3998                                                          and     al,0fh                                          ;mask out high-order bits
  3999                                                          or      al,30h                                          ;apply ascii numeric zone
  4000                                                          cmp     al,3ah                                          ;numeric range?
  4001                                                          jb      .50                                             ;yes, skip ahead
  4002                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4003                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  4004                                                          pop     ecx                                             ;loop count
  4005                                                          loop    .30                                             ;next
  4006                                  ;
  4007                                  ;       Output printable ASCII character section for the row.
  4008                                  ;
  4009                                                          mov     al,' '                                          ;ascii space
  4010                                                          stosb                                                   ;store delimiter
  4011                                                          mov     al,' '                                          ;ascii space
  4012                                                          stosb                                                   ;store delimiter
  4013                                                          sub     esi,16                                          ;reset source pointer
  4014                                                          mov     cl,16                                           ;loop count
  4015                                  .60                     lodsb                                                   ;source byte
  4016                                                          cmp     al,32                                           ;printable? (low-range test)
  4017                                                          jb      .70                                             ;no, skip ahead
  4018                                                          cmp     al,128                                          ;printable? (high-range test)
  4019                                                          jb      .80                                             ;yes, skip ahead
  4020                                  .70                     mov     al,' '                                          ;display space instead of printable
  4021                                  .80                     stosb                                                   ;store printable ascii byte
  4022                                                          loop    .60                                             ;next source byte
  4023                                  ;
  4024                                  ;       Display constructed output buffer and newline.
  4025                                  ;
  4026                                                          add     ebx,80                                          ;next contiguous output buffer addr
  4027                                  ;
  4028                                  ;       Repeat until all lines displayed and preserve source address.
  4029                                  ;
  4030                                                          pop     ecx                                             ;remaining rows
  4031                                                          loop    .20                                             ;next row
  4032                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  4033                                  ;
  4034                                  ;       Update the current panel identifier.
  4035                                  ;
  4036                                                          mov     eax,czPnlMem001                                 ;initial console panel
  4037                                                          mov     [wdConsolePanel],eax                            ;save panel template address
  4038                                  ;
  4039                                  ;       Restore and return.
  4040                                  ;
  4041                                                          pop     edi                                             ;restore regs
  4042                                                          pop     esi                                             ;
  4043                                                          pop     ebx                                             ;
  4044                                                          ret                                                     ;return
  4045                                  ;-----------------------------------------------------------------------------------------------------------------------
  4046                                  ;
  4047                                  ;       Constants
  4048                                  ;
  4049                                  ;-----------------------------------------------------------------------------------------------------------------------
  4050                                  ;-----------------------------------------------------------------------------------------------------------------------
  4051                                  ;
  4052                                  ;       Panels
  4053                                  ;
  4054                                  ;       Notes:          1.      Each field MUST have an address of a constant or an input field.
  4055                                  ;                       2.      The constant text or input field MUST be at least the length of the field.
  4056                                  ;                       3.      Field constant text or field values MUST be comprised of printable characters.
  4057                                  ;
  4058                                  ;-----------------------------------------------------------------------------------------------------------------------
  4059                                  czPnlCon001             dd      czFldPnlIdCon001                                ;field text
  4060                                                          db      00,00,02h,06                                    ;flags+row, col, attr, length
  4061                                                          dd      czFldTitleCon001
  4062                                                          db      00,30,07h,20
  4063                                                          dd      czFldDatTmCon001
  4064                                                          db      00,63,02h,17
  4065                                                          dd      czFldPrmptCon001
  4066                                                          db      23,00,07h,01
  4067                                                          dd      wzConsoleInBuffer
  4068                                                          db      128+23,01,07h,79
  4069                                                          dd      0                                               ;end of panel
  4070                                  czPnlMem001             dd      czFldPnlIdMem001                                ;field text
  4071                                                          db      00,00,02h,06                                    ;flags+row, col, attr, length
  4072                                                          dd      czFldTitleMem001
  4073                                                          db      00,33,07h,14
  4074                                                          dd      wzConsoleMemBuf0
  4075                                                          db      03,00,07h,80
  4076                                                          dd      wzConsoleMemBuf1
  4077                                                          db      04,00,07h,80
  4078                                                          dd      wzConsoleMemBuf2
  4079                                                          db      05,00,07h,80
  4080                                                          dd      wzConsoleMemBuf3
  4081                                                          db      06,00,07h,80
  4082                                                          dd      wzConsoleMemBuf4
  4083                                                          db      07,00,07h,80
  4084                                                          dd      wzConsoleMemBuf5
  4085                                                          db      08,00,07h,80
  4086                                                          dd      wzConsoleMemBuf6
  4087                                                          db      09,00,07h,80
  4088                                                          dd      wzConsoleMemBuf7
  4089                                                          db      10,00,07h,80
  4090                                                          dd      wzConsoleMemBuf8
  4091                                                          db      11,00,07h,80
  4092                                                          dd      wzConsoleMemBuf9
  4093                                                          db      12,00,07h,80
  4094                                                          dd      wzConsoleMemBufA
  4095                                                          db      13,00,07h,80
  4096                                                          dd      wzConsoleMemBufB
  4097                                                          db      14,00,07h,80
  4098                                                          dd      wzConsoleMemBufC
  4099                                                          db      15,00,07h,80
  4100                                                          dd      wzConsoleMemBufD
  4101                                                          db      16,00,07h,80
  4102                                                          dd      wzConsoleMemBufE
  4103                                                          db      17,00,07h,80
  4104                                                          dd      wzConsoleMemBufF
  4105                                                          db      18,00,07h,80
  4106                                                          dd      czFldPrmptCon001
  4107                                                          db      23,00,07h,01
  4108                                                          dd      wzConsoleInBuffer
  4109                                                          db      128+23,01,07h,79
  4110                                                          dd      0                                               ;end of panel
  4111                                  ;-----------------------------------------------------------------------------------------------------------------------
  4112                                  ;
  4113                                  ;       Tables
  4114                                  ;
  4115                                  ;-----------------------------------------------------------------------------------------------------------------------
  4116                                                                                                                  ;---------------------------------------
  4117                                                                                                                  ;  Command Jump Table
  4118                                                                                                                  ;---------------------------------------
  4119                                  tConJmpTbl              equ     $                                               ;command jump table
  4120                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  4121                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  4122                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  4123                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  4124                                                          dd      ConMain         - ConCode                       ;main command routine offset
  4125                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  4126                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  4127                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4128                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4129                                                                                                                  ;---------------------------------------
  4130                                                                                                                  ;  Command Name Table
  4131                                                                                                                  ;---------------------------------------
  4132                                  tConCmdTbl              equ     $                                               ;command name table
  4133                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  4134                                                          db      7,"MEMORY",0                                    ;memory command
  4135                                                          db      5,"EXIT",0                                      ;exit command
  4136                                                          db      5,"INT6",0                                      ;int6 command
  4137                                                          db      5,"MAIN",0                                      ;main command
  4138                                                          db      5,"QUIT",0                                      ;quit command
  4139                                                          db      4,"MEM",0                                       ;mem command
  4140                                                          db      0                                               ;end of table
  4141                                  ;-----------------------------------------------------------------------------------------------------------------------
  4142                                  ;
  4143                                  ;       Strings
  4144                                  ;
  4145                                  ;-----------------------------------------------------------------------------------------------------------------------
  4146                                  czFldPnlIdCon001        db      "MAIN01"                                        ;main console panel id
  4147                                  czFldPnlIdMem001        db      "MEM001"                                        ;memory panel id
  4148                                  czFldTitleCon001        db      "CustomOS Version 1.0"                          ;main console panel title
  4149                                  czFldTitleMem001        db      "Memory Display"                                ;memory panel title
  4150                                  czFldDatTmCon001        db      "DD-MMM-YYYY HH:MM"                             ;panel date and time template
  4151                                  czFldPrmptCon001        db      ":"                                             ;command prompt
  4152                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  4153                                  %endif
  4154                                  %ifdef BUILDDISK
  4155                                  ;-----------------------------------------------------------------------------------------------------------------------
  4156                                  ;
  4157                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  4158                                  ;
  4159                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4160                                  ;
  4161                                  ;-----------------------------------------------------------------------------------------------------------------------
  4162                                  section                 unused                                                  ;unused disk space
  4163                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  4164                                  %endif
  4165                                  ;=======================================================================================================================
  4166                                  ;
  4167                                  ;       End of Program Code
  4168                                  ;
  4169                                  ;=======================================================================================================================
