     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.009
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support the "mem" and "memory" commands.
     8                                  ;
     9                                  ;       Revised:        July 4, 2018
    10                                  ;
    11                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    17                                  ;
    18                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;       Assembly Directives
    24                                  ;
    25                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    34                                  %define BUILDBOOT                                                               ;... build the boot sector
    35                                  %define BUILDCOM                                                                ;... and the OS kernel
    36                                  %endif
    37                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    38                                  %define BUILDBOOT                                                               ;... also build the boot sector
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;       Conventions
    43                                  ;
    44                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    45                                  ;                       Logical tabs are set after each eight columns.
    46                                  ;                       Tabs are simulated using SPACE characters.
    47                                  ;                       For comments that span an entire line, comment text begins in column 9.
    48                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    49                                  ;                       Assembly operands begin in column 33.
    50                                  ;                       Inline comments begin in column 81.
    51                                  ;                       Lines should not extend beyond column 120.
    52                                  ;
    53                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    54                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    55                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    56                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    57                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    58                                  ;                       ouput buffers, respectively.
    59                                  ;
    60                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    61                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    62                                  ;
    63                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    64                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    65                                  ;                       Register names in comments are in upper case (EAX, EDI).
    66                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    67                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    68                                  ;                       register contents on entry and exit.
    69                                  ;
    70                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    71                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    72                                  ;                       The 2nd letter of the constant label indicates the storage type.
    73                                  ;
    74                                  ;                       cq......        constant quad-word (dq)
    75                                  ;                       cd......        constant double-word (dd)
    76                                  ;                       cw......        constant word (dw)
    77                                  ;                       cb......        constant byte (db)
    78                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    79                                  ;
    80                                  ;       Instructions:   32-bit instructions are generally favored.
    81                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    82                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    83                                  ;
    84                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    85                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    86                                  ;
    87                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    88                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    89                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    90                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    91                                  ;                       Octal literal values are avoided.
    92                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    93                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    94                                  ;
    95                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    96                                  ;                       Macro names describe an action and so DO begin with a verb.
    97                                  ;
    98                                  ;       Memory Use:     Operating system memory allocation is minimized.
    99                                  ;                       Buffers are kept to as small a size as practicable.
   100                                  ;                       Data and code intermingling is avoided wherever possible.
   101                                  ;
   102                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   103                                  ;                       Register names in source code are in lower case (eax, edx).
   104                                  ;
   105                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   106                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   107                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   108                                  ;
   109                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   110                                  ;                       Routine names begin with a verb (Get, Read, Load).
   111                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   112                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   113                                  ;                       function but begin with a leading underscore (_) character.
   114                                  ;
   115                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   116                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   117                                  ;
   118                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   119                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   120                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   121                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   122                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   123                                  ;
   124                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   125                                  ;                       The 2nd letter of the variable label indicates the storage type.
   126                                  ;
   127                                  ;                       wq......        variable quad-word (resq)
   128                                  ;                       wd......        variable double-word (resd)
   129                                  ;                       ww......        variable word (resw)
   130                                  ;                       wb......        variable byte (resb)
   131                                  ;                       ws......        writable structure
   132                                  ;
   133                                  ;-----------------------------------------------------------------------------------------------------------------------
   134                                  ;=======================================================================================================================
   135                                  ;
   136                                  ;       Equates
   137                                  ;
   138                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   139                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   140                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   141                                  ;       sets. Equates here are defined in the following groupings:
   142                                  ;
   143                                  ;       Hardware-Defined Values
   144                                  ;
   145                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   146                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   147                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   148                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   149                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   150                                  ;       EX86...         Intel x86 CPU architecture values
   151                                  ;
   152                                  ;       Firmware-Defined Values
   153                                  ;
   154                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   155                                  ;
   156                                  ;       Standards-Based Values
   157                                  ;
   158                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   159                                  ;
   160                                  ;       Operating System Values
   161                                  ;
   162                                  ;       EBOOT...        Boot sector and loader values
   163                                  ;       ECON...         Console values (dimensions and attributes)
   164                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   165                                  ;       EKEYF...        Keyboard status flags
   166                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   167                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   168                                  ;       EMSG...         Message identifers
   169                                  ;
   170                                  ;=======================================================================================================================
   171                                  ;-----------------------------------------------------------------------------------------------------------------------
   172                                  ;
   173                                  ;       Hardware-Defined Values
   174                                  ;
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;
   178                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   179                                  ;
   180                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   181                                  ;       for CGA, EGA, VGA and compatible video modes.
   182                                  ;
   183                                  ;-----------------------------------------------------------------------------------------------------------------------
   184                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   185                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   186                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   187                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   188                                  ;-----------------------------------------------------------------------------------------------------------------------
   189                                  ;
   190                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   191                                  ;
   192                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   193                                  ;
   194                                  ;-----------------------------------------------------------------------------------------------------------------------
   195                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   196                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   197                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   198                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   199                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   200                                  ;-----------------------------------------------------------------------------------------------------------------------
   201                                  ;
   202                                  ;       8042 Keyboard Controller                                                EKEYB...
   203                                  ;
   204                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   205                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   206                                  ;
   207                                  ;-----------------------------------------------------------------------------------------------------------------------
   208                                  EKEYBPORTDATA           equ     060h                                            ;data port
   209                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   210                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   211                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   212                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   213                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   214                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   215                                                                                                                  ;---------------------------------------
   216                                                                                                                  ;       Keyboard Scan Codes
   217                                                                                                                  ;---------------------------------------
   218                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   219                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   220                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   221                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   222                                  EKEYBSLASH              equ     035h                                            ;slash
   223                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   224                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   225                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   226                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   227                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   228                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   229                                  EKEYBUP                 equ     080h                                            ;up
   230                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   231                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   232                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   233                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   234                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   235                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   236                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   237                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   238                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   239                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   240                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   241                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   242                                  ;-----------------------------------------------------------------------------------------------------------------------
   243                                  ;
   244                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   245                                  ;
   246                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   247                                  ;       external devices and signals a hardware interrupt to the CPU.
   248                                  ;
   249                                  ;-----------------------------------------------------------------------------------------------------------------------
   250                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   251                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   252                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   253                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   254                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   255                                  ;-----------------------------------------------------------------------------------------------------------------------
   256                                  ;
   257                                  ;       8253 Programmable Interval Timer                                        EPIT...
   258                                  ;
   259                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   260                                  ;       approximately 18.2 times per second.
   261                                  ;
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  ;
   266                                  ;       x86 CPU Architecture                                                    ;EX86...
   267                                  ;
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   270                                  ;-----------------------------------------------------------------------------------------------------------------------
   271                                  ;
   272                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   273                                  ;
   274                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   275                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   276                                  ;
   277                                  ;       0.......        Segment is not present in memory (triggers int 11)
   278                                  ;       1.......        Segment is present in memory
   279                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   280                                  ;       ...0....        Segment is a system segment
   281                                  ;       ...00010                Local Descriptor Table
   282                                  ;       ...00101                Task Gate
   283                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   284                                  ;       ...01100                Call Gate (386)
   285                                  ;       ...01110                Interrupt Gate (386)
   286                                  ;       ...01111                Trap Gate (386)
   287                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   288                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   289                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   290                                  ;
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   293                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   294                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   295                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   296                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   297                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   298                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   299                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;
   302                                  ;       Firmware-Defined Values
   303                                  ;
   304                                  ;-----------------------------------------------------------------------------------------------------------------------
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  ;
   307                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   308                                  ;
   309                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   310                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   311                                  ;
   312                                  ;-----------------------------------------------------------------------------------------------------------------------
   313                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   314                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   315                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   316                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   317                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   318                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   319                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   320                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   321                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   322                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   323                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;
   326                                  ;       Standards-Based Values
   327                                  ;
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  ;
   331                                  ;       ASCII                                                                   EASCII...
   332                                  ;
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   335                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   336                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   337                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   338                                  EASCIISPACE             equ     020h                                            ;space
   339                                  EASCIIUPPERA            equ     041h                                            ;'A'
   340                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   341                                  EASCIILOWERA            equ     061h                                            ;'a'
   342                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   343                                  EASCIITILDE             equ     07Eh                                            ;'~'
   344                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   345                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   346                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   347                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   348                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   349                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   350                                  EASCIICASE              equ     00100000b                                       ;case bit
   351                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;
   354                                  ;       Operating System Values
   355                                  ;
   356                                  ;-----------------------------------------------------------------------------------------------------------------------
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  ;
   359                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   360                                  ;
   361                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   362                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   363                                  ;
   364                                  ;-----------------------------------------------------------------------------------------------------------------------
   365                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   366                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   367                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   368                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   369                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   370                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   371                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   372                                  ;-----------------------------------------------------------------------------------------------------------------------
   373                                  ;       Console Constants                                                       ECON...
   374                                  ;-----------------------------------------------------------------------------------------------------------------------
   375                                  ECONCOLS                equ     80                                              ;columns per row
   376                                  ECONROWS                equ     24                                              ;console rows
   377                                  ECONOIAROW              equ     24                                              ;operator information area row
   378                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   379                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   380                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   381                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   382                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   383                                  ;-----------------------------------------------------------------------------------------------------------------------
   384                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   385                                  ;-----------------------------------------------------------------------------------------------------------------------
   386                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   387                                  EGDTCGA                 equ     020h                                            ;cga video selector
   388                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   389                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   390                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   391                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   392                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   393                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   394                                  ;-----------------------------------------------------------------------------------------------------------------------
   395                                  ;       Keyboard Flags                                                          EKEYF...
   396                                  ;-----------------------------------------------------------------------------------------------------------------------
   397                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   398                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   399                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   400                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   401                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   402                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   403                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   404                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   405                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   406                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   407                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   408                                  ;-----------------------------------------------------------------------------------------------------------------------
   409                                  ;       Kernel Constants                                                        EKRN...
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   412                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   413                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   414                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   415                                  ;-----------------------------------------------------------------------------------------------------------------------
   416                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   417                                  ;-----------------------------------------------------------------------------------------------------------------------
   418                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   419                                  ;-----------------------------------------------------------------------------------------------------------------------
   420                                  ;       Message Identifiers                                                     EMSG...
   421                                  ;-----------------------------------------------------------------------------------------------------------------------
   422                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   423                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   424                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   425                                  ;=======================================================================================================================
   426                                  ;
   427                                  ;       Structures
   428                                  ;
   429                                  ;=======================================================================================================================
   430                                  ;-----------------------------------------------------------------------------------------------------------------------
   431                                  ;
   432                                  ;       MQUEUE
   433                                  ;
   434                                  ;       The MQUEUE structure maps memory used for a message queue.
   435                                  ;
   436                                  ;-----------------------------------------------------------------------------------------------------------------------
   437                                  struc                   MQUEUE
   438 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   439 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   440 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   441                                  endstruc
   442                                  ;-----------------------------------------------------------------------------------------------------------------------
   443                                  ;
   444                                  ;       OSDATA
   445                                  ;
   446                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   447                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   448                                  ;
   449                                  ;-----------------------------------------------------------------------------------------------------------------------
   450                                  struc                   OSDATA
   451 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   452 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   453 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   454 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   455 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   456 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   457 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   458 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   459 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   460 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   461 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   462 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   463 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   464 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   465 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   466 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   467 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   468 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   469 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   470 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   471 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   472 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   473 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   474 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   475 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   476 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   477 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   478 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   479 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   480 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   481 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   482 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   483 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   484 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   485 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   486 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   487 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   488 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   489 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   490 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   491 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   492 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   493 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   494 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   495 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   496 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   497 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   498 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   499 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   500 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   501 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   502 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   503 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   504 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   505 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   506 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   507 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   508 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   509 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   510 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   511 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   512 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   513 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   514 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   515 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   516 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   517 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   518 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   519 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   520 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   521 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   522 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   523 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   524 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   525 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   526 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   527 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   528 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   529 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   530 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   531 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   532 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   533 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   534 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   535 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   536 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   537 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   538 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   539 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   540 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   541 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   542 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   543 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   544 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   545 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   546 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   547 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   548 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   549 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   550 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   551 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   552                                  ;-----------------------------------------------------------------------------------------------------------------------
   553                                  ;
   554                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   555                                  ;
   556                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   557                                  ;
   558                                  ;-----------------------------------------------------------------------------------------------------------------------
   559                                  ECONDATA                equ     ($)
   560 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   561 00000804 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   562 00000805 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   563 00000806 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   564 00000807 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   565 00000808 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   566 00000809 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   567 0000080A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   568 0000080B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   569 0000080C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   570 0000080D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   571 0000080E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   572 0000080F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   573 00000810 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   574 00000860 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   575 000008B0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   576                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   577                                  ;-----------------------------------------------------------------------------------------------------------------------
   578                                  ;
   579                                  ;       End of OS Variables
   580                                  ;
   581                                  ;-----------------------------------------------------------------------------------------------------------------------
   582                                  endstruc
   583                                  ;-----------------------------------------------------------------------------------------------------------------------
   584                                  ;
   585                                  ;       Macros
   586                                  ;
   587                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   588                                  ;
   589                                  ;-----------------------------------------------------------------------------------------------------------------------
   590                                  %macro                  mint    1
   591                                  _%1                     equ     ($-$$) / EX86DESCLEN
   592                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   593                                  %endmacro
   594                                  %macro                  mtrap   1
   595                                  _%1                     equ     ($-$$) / EX86DESCLEN
   596                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   597                                  %endmacro
   598                                  %macro                  menter  1
   599                                  ?%1                     equ     ($-$$)
   600                                  %endmacro
   601                                  %macro                  tsvce   1
   602                                  e%1                     equ     ($-tsvc)/4
   603                                                          dd      %1
   604                                  %endmacro
   605                                  %ifdef BUILDBOOT
   606                                  ;=======================================================================================================================
   607                                  ;
   608                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   609                                  ;
   610                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   611                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   612                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   613                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   614                                  ;
   615                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   616                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   617                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   618                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   619                                  ;       immediately followed by a disk parameter table.
   620                                  ;
   621                                  ;=======================================================================================================================
   622                                                          cpu     8086                                            ;assume minimal CPU
   623                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   624                                                          bits    16                                              ;16-bit code at power-up
   625                                  %ifdef BUILDPREP
   626 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   627                                  %else
   628                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   629                                  %endif
   630                                  ;-----------------------------------------------------------------------------------------------------------------------
   631                                  ;
   632                                  ;       Disk Parameter Table
   633                                  ;
   634                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   635                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   636                                  ;
   637                                  ;-----------------------------------------------------------------------------------------------------------------------
   638 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   639 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   640 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   641 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   642 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   643 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   644 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   645 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   646 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   647                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   648 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   649 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   650 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   651                                  ;
   652                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   653                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   654                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   655                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   656                                  ;       given several possible starting values for CS:IP.
   657                                  ;
   658                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   659 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   660                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   661 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   662 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   663 00000025 B104                                            mov     cl,4                                            ;shift count
   664 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   665 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   666 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   667                                  ;
   668                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   669                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   670                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   671                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   672                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   673                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   674                                  ;
   675 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   676 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   677 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   678 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   679 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   680                                  ;
   681                                  ;       Our boot addressability is now set up according to the following diagram.
   682                                  ;
   683                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   684                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   685                                  ;                               |  256 = 100h bytes                             |
   686                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   687                                  ;                               |  Boot Sector (vstart=0100h)                   |
   688                                  ;                               |  1 sector = 512 = 200h bytes                  |
   689                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   690                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   691                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   692                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   693                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   694                                  ;                               |  2 sectors = 1024 = 400h bytes
   695                                  ;                       009400  +-----------------------------------------------+ DS:1900
   696                                  ;
   697                                  ;       On entry, DL indicates the drive being booted from.
   698                                  ;
   699 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   700                                  ;
   701                                  ;       Compute directory i/o buffer address.
   702                                  ;
   703 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   704 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   705 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   706 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   707                                  ;
   708                                  ;       Compute segment where os.com will be loaded.
   709                                  ;
   710 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   711 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   712 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   713 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   714                                  ;
   715                                  ;       Set the video mode to 80 column, 25 row, text.
   716                                  ;
   717 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   718 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   719                                  ;
   720                                  ;       Write a message to the console so we know we have our addressability established.
   721                                  ;
   722 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   723 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   724                                  ;
   725                                  ;       Initialize the number of directory sectors to search.
   726                                  ;
   727 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   728 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   729                                  ;
   730                                  ;       Compute number of directory sectors and initialize overhead count.
   731                                  ;
   732 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   733 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   734 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   735 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   736                                  ;
   737                                  ;       Compute directory entries per sector.
   738                                  ;
   739 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   740 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   741 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   742                                  ;
   743                                  ;       Compute first logical directory sector and update overhead count.
   744                                  ;
   745 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   746 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   747 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   748 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   749 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   750 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   751                                  ;
   752                                  ;       Read directory sector.
   753                                  ;
   754 0000008E B001                    .30                     mov     al,1                                            ;sector count
   755 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   756 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   757 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   758                                  ;
   759                                  ;       Setup variables to search this directory sector.
   760                                  ;
   761 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   762 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   763 000000A1 7603                                            jna     .40                                             ;no, continue
   764 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   765 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   766 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   767 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   768                                  ;
   769                                  ;       Loop through directory sectors searching for kernel program.
   770                                  ;
   771 000000B1 56                      .50                     push    si                                              ;save kernel name address
   772 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   773 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   774 000000B6 FC                                              cld                                                     ;forward strings
   775 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   776 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   777 000000BA 5E                                              pop     si                                              ;restore kernel name address
   778 000000BB 7418                                            je      .60                                             ;exit loop if found
   779 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   780 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   781 000000C2 75ED                                            jnz     .50                                             ;next entry
   782                                  ;
   783                                  ;       Repeat search if we are not at the end of the directory.
   784                                  ;
   785 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   786 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   787 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   788 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   789 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   790                                  ;
   791                                  ;       If we find the kernel program in the directory, read the FAT.
   792                                  ;
   793 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   794 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   795 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   796 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   797 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   798 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   799                                  ;
   800                                  ;       Get the starting cluster of the kernel program and target address.
   801                                  ;
   802 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   803 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   804                                  ;
   805                                  ;       Read each program cluster into RAM.
   806                                  ;
   807 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   808 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   809 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   810 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   811 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   812 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   813 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   814 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   815 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   816                                  ;
   817                                  ;       Update buffer pointer for next cluster.
   818                                  ;
   819 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   820 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   821 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   822 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   823 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   824                                  ;
   825                                  ;       Compute next cluster number.
   826                                  ;
   827 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   828 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   829 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   830 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   831 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   832 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   833 00000120 83E701                                          and     di,1                                            ;get low bit
   834 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   835 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   836 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   837                                  ;
   838                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   839                                  ;
   840 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   841 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   842 00000130 B104                                            mov     cl,4                                            ;shift count
   843 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   844 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   845 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   846 0000013A 75B2                                            jne     .70                                             ;no, continue
   847                                  ;
   848                                  ;       Transfer control to the operating system program.
   849                                  ;
   850 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   851 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   852 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   853                                  ;
   854                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   855                                  ;
   856 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   857 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   858 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   859 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   860 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   861 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   862 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   863 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   864 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   865 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   866                                  ;
   867                                  ;       Try maxtries times to read sector.
   868                                  ;
   869 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   870 00000160 53                      .10                     push    bx                                              ;save buffer address
   871 00000161 51                                              push    cx                                              ;save retry count
   872 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   873 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   874 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   875 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   876 0000016F 59                                              pop     cx                                              ;restore retry count
   877 00000170 5B                                              pop     bx                                              ;restore buffer address
   878 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   879 00000173 E2EB                                            loop    .10                                             ;retry
   880                                  ;
   881                                  ;       Handle disk error: convert to ASCII and store in error string.
   882                                  ;
   883 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   884 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   885 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   886 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   887 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   888 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   889 00000183 7203                                            jb      .20                                             ;continue if numeral
   890 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   891 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   892 0000018A 7203                                            jb      .30                                             ;continue if numeral
   893 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   894 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   895 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   896 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   897                                  ;
   898                                  ;       Wait for a key press.
   899                                  ;
   900 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   901 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   902 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   903 0000019E FB                                              sti                                                     ;enable maskable interrupts
   904 0000019F F4                                              hlt                                                     ;wait for interrupt
   905 000001A0 EBF6                                            jmp     .10                                             ;repeat
   906                                  ;
   907                                  ;       Reset the system.
   908                                  ;
   909 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   910 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   911 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   912 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   913 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   914                                  ;
   915                                  ;       Display text message.
   916                                  ;
   917 000001AA FC                      BootPrint               cld                                                     ;forward strings
   918 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   919 000001AC 84C0                                            test    al,al                                           ;end of string?
   920 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   921 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   922 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   923 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   924 000001B6 C3                      BootReturn              ret                                                     ;return
   925                                  ;-----------------------------------------------------------------------------------------------------------------------
   926                                  ;
   927                                  ;       Constants
   928                                  ;
   929                                  ;-----------------------------------------------------------------------------------------------------------------------
   930 000001B7 90                                              align   2
   931 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   932 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   932 000001C3 4F4D               
   933 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   933 000001CE 530D0A00           
   934 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   934 000001DB 7220               
   935 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   936 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   936 000001E9 6700               
   937                                  ;-----------------------------------------------------------------------------------------------------------------------
   938                                  ;
   939                                  ;       Work Areas
   940                                  ;
   941                                  ;-----------------------------------------------------------------------------------------------------------------------
   942 000001EB 90                                              align   2
   943 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   944 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   945 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   946 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   947 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   948                                  wwReadCountCommand      equ     $                                               ;read count and command
   949 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   950 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   951                                  wwDriveHead             equ     $                                               ;drive, head (word)
   952 000001F8 00                      wbDrive                 db      0                                               ;drive
   953 000001F9 00                      wbHead                  db      0                                               ;head
   954                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   955 000001FA 00                                              db      0                                               ;sector
   956 000001FB 00                      wbTrack                 db      0                                               ;track
   957 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   958 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   959                                  %endif
   960                                  %ifdef BUILDPREP
   961                                  ;=======================================================================================================================
   962                                  ;
   963                                  ;       Diskette Preparation Code
   964                                  ;
   965                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   966                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   967                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   968                                  ;
   969                                  ;=======================================================================================================================
   970                                  ;
   971                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   972                                  ;
   973 00000200 BE[CC02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
   974 00000203 E8A4FF                                          call    BootPrint                                       ;display message
   975                                  ;
   976                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   977                                  ;
   978 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   979 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   980 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
   981 0000020C FB                                              sti                                                     ;enable interrupts
   982 0000020D F4                                              hlt                                                     ;wait for interrupt
   983 0000020E EBF6                                            jmp     .10                                             ;repeat
   984 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   985 00000212 7407                                            je      .30                                             ;yes, branch
   986 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   987 00000216 75EE                                            jne     .10                                             ;no, repeat
   988 00000218 E9AB00                                          jmp     .120                                            ;yes, exit program
   989                                  ;
   990                                  ;       Display writing-sector message and patch the JMP instruction.
   991                                  ;
   992 0000021B BE[7004]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   993 0000021E E889FF                                          call    BootPrint                                       ;display message
   994 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
   995 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
   996 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
   997                                  ;
   998                                  ;       Try to read the boot sector.
   999                                  ;
  1000 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1001 0000022C 51                      .40                     push    cx                                              ;save remaining tries
  1002 0000022D BB[780A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
  1003 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1004 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
  1005 00000236 B001                                            mov     al,1                                            ;one sector
  1006 00000238 B402                                            mov     ah,EBIOSFNREADSECTOR                            ;read function
  1007 0000023A CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
  1008 0000023C 59                                              pop     cx                                              ;restore remaining retries
  1009 0000023D 7307                                            jnc     .50                                             ;skip ahead if successful
  1010 0000023F E2EB                                            loop    .40                                             ;try again
  1011 00000241 BE[A004]                                        mov     si,czPrepMsg20                                  ;read-error message address
  1012 00000244 EB2D                                            jmp     .70                                             ;branch to error routine
  1013                                  ;
  1014                                  ;       Copy diskette parms from input buffer to output buffer.
  1015                                  ;
  1016 00000246 BE[780A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1017 00000249 83C60B                                          add     si,11                                           ;skip over JMP and system ID
  1018 0000024C BF[0000]                                        mov     di,Boot                                         ;output buffer address
  1019 0000024F 83C70B                                          add     di,11                                           ;skip over JMP and system ID
  1020 00000252 B91300                                          mov     cx,19                                           ;length of diskette parameters
  1021 00000255 FC                                              cld                                                     ;forward string copies
  1022 00000256 F3A4                                            rep     movsb                                           ;copy diskette parameters
  1023                                  ;
  1024                                  ;       Try to write boot sector to diskette.
  1025                                  ;
  1026 00000258 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1027 0000025B 51                      .60                     push    cx                                              ;save remaining tries
  1028 0000025C BB[0000]                                        mov     bx,Boot                                         ;output buffer address
  1029 0000025F BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1030 00000262 B90100                                          mov     cx,1                                            ;track zero, sector one
  1031 00000265 B001                                            mov     al,1                                            ;one sector
  1032 00000267 B403                                            mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1033 00000269 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
  1034 0000026B 59                                              pop     cx                                              ;restore remaining retries
  1035 0000026C 7326                                            jnc     .100                                            ;skip ahead if successful
  1036 0000026E E2EB                                            loop    .60                                             ;try again
  1037 00000270 BE[EE04]                                        mov     si,czPrepMsg30                                  ;write-error message address
  1038                                  ;
  1039                                  ;       Convert the error code to ASCII and display the error message.
  1040                                  ;
  1041 00000273 50                      .70                     push    ax                                              ;save error code
  1042 00000274 88E0                                            mov     al,ah                                           ;copy error code
  1043 00000276 B400                                            mov     ah,0                                            ;AX = error code
  1044 00000278 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1045 0000027A F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1046 0000027C 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1047 0000027F 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1048 00000282 7203                                            jb      .80                                             ;yes, continue
  1049 00000284 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1050 00000287 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1051 00000289 7202                                            jb      .90                                             ;yes, continue
  1052 0000028B 0407                                            add     al,7                                            ;no, make ASCII
  1053 0000028D 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1054 00000290 E817FF                                          call    BootPrint                                       ;write error message
  1055 00000293 58                                              pop     ax                                              ;restore error code
  1056                                  ;
  1057                                  ;       Display the completion message.
  1058                                  ;
  1059 00000294 BE[3A05]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1060 00000297 88E0                                            mov     al,ah                                           ;BIOS return code
  1061 00000299 3C00                                            cmp     al,0                                            ;success?
  1062 0000029B 7426                                            je      .110                                            ;yes, continue
  1063 0000029D BE[D905]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1064 000002A0 3C01                                            cmp     al,1                                            ;disk parameter error?
  1065 000002A2 741F                                            je      .110                                            ;yes, continue
  1066 000002A4 BE[A306]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1067 000002A7 3C02                                            cmp     al,2                                            ;address mark not found?
  1068 000002A9 7418                                            je      .110                                            ;yes, continue
  1069 000002AB BE[2C07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1070 000002AE 3C03                                            cmp     al,3                                            ;protected disk?
  1071 000002B0 7411                                            je      .110                                            ;yes, continue
  1072 000002B2 BE[E607]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1073 000002B5 3C06                                            cmp     al,6                                            ;diskette removed?
  1074 000002B7 740A                                            je      .110                                            ;yes, continue
  1075 000002B9 BE[1609]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1076 000002BC 3C80                                            cmp     al,80H                                          ;drive timed out?
  1077 000002BE 7403                                            je      .110                                            ;yes, continue
  1078 000002C0 BE[C709]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1079 000002C3 E8E4FE                  .110                    call    BootPrint                                       ;display result message
  1080 000002C6 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1081 000002C9 CD21                                            int     021h                                            ;terminate DOS program
  1082 000002CB C3                                              ret                                                     ;return (should not execute)
  1083                                  ;-----------------------------------------------------------------------------------------------------------------------
  1084                                  ;
  1085                                  ;       Diskette Preparation Messages
  1086                                  ;
  1087                                  ;-----------------------------------------------------------------------------------------------------------------------
  1088 000002CC 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1088 000002D5 5320426F6F742D4469-
  1088 000002DE 736B65747465205072-
  1088 000002E7 657061726174696F6E-
  1088 000002F0 2050726F6772616D   
  1089 000002F8 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1089 00000301 687420284329203230-
  1089 0000030A 31302D323031382044-
  1089 00000313 61766964204A2E2057-
  1089 0000031C 616C6C696E672E2041-
  1089 00000325 6C6C20726967687473-
  1089 0000032E 207265736572766564-
  1089 00000337 2E                 
  1090 00000338 0D0A                                            db      13,10
  1091 0000033A 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1091 00000343 6F6772616D206F7665-
  1091 0000034C 727772697465732074-
  1091 00000355 686520626F6F742073-
  1091 0000035E 6563746F72206F6620-
  1091 00000367 61206469736B657474-
  1091 00000370 652077697468207374-
  1091 00000379 617274757020636F64-
  1091 00000382 652074686174       
  1092 00000388 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1092 00000391 616420746865206F70-
  1092 0000039A 65726174696E672073-
  1092 000003A3 797374656D20696E74-
  1092 000003AC 6F206D656D6F727920-
  1092 000003B5 7768656E2074686520-
  1092 000003BE 636F6D707574657220-
  1092 000003C7 697320726573746172-
  1092 000003D0 7465642E           
  1093 000003D4 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1093 000003DD 6565642C20706C6163-
  1093 000003E6 65206120666F726D61-
  1093 000003EF 74746564206469736B-
  1093 000003F8 6574746520696E746F-
  1093 00000401 20647269766520413A-
  1093 0000040A 20616E642070726573-
  1093 00000413 732074686520456E74-
  1093 0000041C 6572206B65792E     
  1094 00000423 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1094 0000042C 20746869732070726F-
  1094 00000435 6772616D2077697468-
  1094 0000043E 6F7574207072657061-
  1094 00000447 72696E672061206469-
  1094 00000450 736B657474652C2070-
  1094 00000459 726573732074686520-
  1094 00000462 457363617065206B65-
  1094 0000046B 792E               
  1095 0000046D 0D0A00                                          db      13,10,0
  1096 00000470 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1096 00000479 2074686520626F6F74-
  1096 00000482 20736563746F722074-
  1096 0000048B 6F2074686520646973-
  1096 00000494 6B65747465202E2E2E 
  1097 0000049D 0D0A00                                          db      13,10,0
  1098 000004A0 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1098 000004A9 6F722D636F6465202E-
  1098 000004B2 2E2077617320726574-
  1098 000004BB 75726E65642066726F-
  1098 000004C4 6D207468652042494F-
  1098 000004CD 53207768696C652072-
  1098 000004D6 656164696E67206672-
  1098 000004DF 6F6D20746865206469-
  1098 000004E8 736B2E             
  1099 000004EB 0D0A00                                          db      13,10,0
  1100 000004EE 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1100 000004F7 6F722D636F6465202E-
  1100 00000500 2E2077617320726574-
  1100 00000509 75726E65642066726F-
  1100 00000512 6D207468652042494F-
  1100 0000051B 53207768696C652077-
  1100 00000524 726974696E6720746F-
  1100 0000052D 20746865206469736B-
  1100 00000536 2E                 
  1101 00000537 0D0A00                                          db      13,10,0
  1102 0000053A 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1102 00000543 742D736563746F7220-
  1102 0000054C 776173207772697474-
  1102 00000555 656E20746F20746865-
  1102 0000055E 206469736B65747465-
  1102 00000567 2E204265666F726520-
  1102 00000570 626F6F74696E672079-
  1102 00000579 6F757220636F6D7075-
  1102 00000582 7465722077697468   
  1103 0000058A 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1103 00000593 736B657474652C206D-
  1103 0000059C 616B65207375726520-
  1103 000005A5 746861742074686520-
  1103 000005AE 66696C65204F532E43-
  1103 000005B7 4F4D20697320636F70-
  1103 000005C0 696564206F6E746F20-
  1103 000005C9 746865206469736B65-
  1103 000005D2 7474652E           
  1104 000005D6 0D0A00                                          db      13,10,0
  1105 000005D9 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1105 000005E2 76616C696420446973-
  1105 000005EB 6B20506172616D6574-
  1105 000005F4 6572               
  1106 000005F6 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1106 000005FF 20616E20696E746572-
  1106 00000608 6E616C206572726F72-
  1106 00000611 206361757365642062-
  1106 0000061A 7920616E20696E7661-
  1106 00000623 6C69642076616C7565-
  1106 0000062C 206265696E67207061-
  1106 00000635 7373656420746F2061-
  1106 0000063E 2073797374656D     
  1107 00000645 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1107 0000064E 6E2E20546865204F53-
  1107 00000657 424F4F542E434F4D20-
  1107 00000660 66696C65206D617920-
  1107 00000669 626520636F72727570-
  1107 00000672 742E20436F7079206F-
  1107 0000067B 7220646F776E6C6F61-
  1107 00000684 64207468652066696C-
  1107 0000068D 6520616761696E     
  1108 00000694 0D0A616E6420726574-                             db      13,10,"and retry."
  1108 0000069D 72792E             
  1109 000006A0 0D0A00                                          db      13,10,0
  1110 000006A3 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1110 000006AC 6472657373204D6172-
  1110 000006B5 6B204E6F7420466F75-
  1110 000006BE 6E64               
  1111 000006C0 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1111 000006C9 726F7220696E646963-
  1111 000006D2 617465732061207068-
  1111 000006DB 79736963616C207072-
  1111 000006E4 6F626C656D20776974-
  1111 000006ED 682074686520666C6F-
  1111 000006F6 707079206469736B65-
  1111 000006FF 7474652E20506C6561-
  1111 00000708 7365207265747279   
  1112 00000710 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1112 00000719 6E6F74686572206469-
  1112 00000722 736B657474652E     
  1113 00000729 0D0A00                                          db      13,10,0
  1114 0000072C 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1114 00000735 6F7465637465642044-
  1114 0000073E 69736B             
  1115 00000741 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1115 0000074A 726F72206973207573-
  1115 00000753 75616C6C7920636175-
  1115 0000075C 736564206279206174-
  1115 00000765 74656D7074696E6720-
  1115 0000076E 746F20777269746520-
  1115 00000777 746F20612077726974-
  1115 00000780 652D70726F74656374-
  1115 00000789 6564206469736B2E   
  1116 00000791 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1116 0000079A 686520277772697465-
  1116 000007A3 2D70726F7465637427-
  1116 000007AC 2073657474696E6720-
  1116 000007B5 6F6E20746865206469-
  1116 000007BE 736B206F7220726574-
  1116 000007C7 7279207573696E6720-
  1116 000007D0 7573696E6720616E6F-
  1116 000007D9 74686572206469736B-
  1116 000007E2 2E                 
  1117 000007E3 0D0A00                                          db      13,10,0
  1118 000007E6 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1118 000007EF 736B65747465205265-
  1118 000007F8 6D6F766564         
  1119 000007FD 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1119 00000806 726F72206D61792069-
  1119 0000080F 6E6469636174652074-
  1119 00000818 686174207468652066-
  1119 00000821 6C6F70707920646973-
  1119 0000082A 6B6574746520686173-
  1119 00000833 206265656E2072656D-
  1119 0000083C 6F7665642066726F6D-
  1119 00000845 20746865           
  1120 00000849 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1120 00000852 652064726976652E20-
  1120 0000085B 4F6E20736F6D652073-
  1120 00000864 797374656D732C2074-
  1120 0000086D 68697320636F646520-
  1120 00000876 6D617920616C736F20-
  1120 0000087F 6F6363757220696620-
  1120 00000888 746865206469736B65-
  1120 00000891 747465206973       
  1121 00000897 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1121 000008A0 70726F746563746564-
  1121 000008A9 2E2720506C65617365-
  1121 000008B2 207665726966792074-
  1121 000008BB 686174207468652064-
  1121 000008C4 69736B657474652069-
  1121 000008CD 73206E6F7420777269-
  1121 000008D6 74652D70726F746563-
  1121 000008DF 74656420616E64     
  1122 000008E6 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1122 000008EF 65726C7920696E7365-
  1122 000008F8 7274656420696E2074-
  1122 00000901 6865206469736B6574-
  1122 0000090A 74652064726976652E 
  1123 00000913 0D0A00                                          db      13,10,0
  1124 00000916 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1124 0000091F 6976652054696D6564-
  1124 00000928 204F7574           
  1125 0000092C 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1125 00000935 726F7220757375616C-
  1125 0000093E 6C7920696E64696361-
  1125 00000947 746573207468617420-
  1125 00000950 6E6F206469736B6574-
  1125 00000959 746520697320696E20-
  1125 00000962 746865206469736B65-
  1125 0000096B 747465206472697665-
  1125 00000974 2E20506C65617365   
  1126 0000097C 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1126 00000985 726520746861742074-
  1126 0000098E 6865206469736B6574-
  1126 00000997 74652069732070726F-
  1126 000009A0 7065726C7920736561-
  1126 000009A9 74656420696E207468-
  1126 000009B2 652064726976652061-
  1126 000009BB 6E642072657472792E 
  1127 000009C4 0D0A00                                          db      13,10,0
  1128 000009C7 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1128 000009D0 6B6E6F776E20457272-
  1128 000009D9 6F72               
  1129 000009DB 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1129 000009E4 6F722D636F64652072-
  1129 000009ED 657475726E65642062-
  1129 000009F6 79207468652042494F-
  1129 000009FF 53206973206E6F7420-
  1129 00000A08 61207265636F676E69-
  1129 00000A11 7A6564206572726F72-
  1129 00000A1A 2E20506C6561736520-
  1129 00000A23 636F6E73756C74     
  1130 00000A2A 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1130 00000A33 6D7075746572277320-
  1130 00000A3C 746563686E6963616C-
  1130 00000A45 207265666572656E63-
  1130 00000A4E 6520666F7220612064-
  1130 00000A57 65736372697074696F-
  1130 00000A60 6E206F662074686973-
  1130 00000A69 206572726F7220636F-
  1130 00000A72 64652E             
  1131 00000A75 0D0A00                                          db      13,10,0
  1132                                  wcPrepInBuf             equ     $
  1133                                  %endif
  1134                                  %ifdef BUILDDISK
  1135                                  ;=======================================================================================================================
  1136                                  ;
  1137                                  ;       File Allocation Tables
  1138                                  ;
  1139                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1140                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1141                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1142                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1143                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1144                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1145                                  ;       the last cluster in the chain.
  1146                                  ;
  1147                                  ;       Every three bytes encode two FAT entries as follows:
  1148                                  ;
  1149                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1150                                  ;
  1151                                  ;=======================================================================================================================
  1152                                  ;-----------------------------------------------------------------------------------------------------------------------
  1153                                  ;
  1154                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1155                                  ;
  1156                                  ;-----------------------------------------------------------------------------------------------------------------------
  1157                                  section                 fat1                                                    ;first copy of FAT
  1158                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1159                                                          db      005h,060h,000h, 007h,080h,000h
  1160                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1161                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1162                                                          db      011h,020h,001h, 013h,040h,001h
  1163                                                          db      015h,060h,001h, 017h,080h,001h
  1164                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1165                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1166                                                          db      021h,020h,002h, 023h,040h,002h
  1167                                                          db      025h,060h,002h, 027h,080h,002h
  1168                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1169                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1170                                  ;-----------------------------------------------------------------------------------------------------------------------
  1171                                  ;
  1172                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1173                                  ;
  1174                                  ;-----------------------------------------------------------------------------------------------------------------------
  1175                                  section                 fat2                                                    ;second copy of FAT
  1176                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1177                                                          db      005h,060h,000h, 007h,080h,000h
  1178                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1179                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1180                                                          db      011h,020h,001h, 013h,040h,001h
  1181                                                          db      015h,060h,001h, 017h,080h,001h
  1182                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1183                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1184                                                          db      021h,020h,002h, 023h,040h,002h
  1185                                                          db      025h,060h,002h, 027h,080h,002h
  1186                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1187                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1188                                  ;-----------------------------------------------------------------------------------------------------------------------
  1189                                  ;
  1190                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1191                                  ;
  1192                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1193                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1194                                  ;       copy.
  1195                                  ;
  1196                                  ;-----------------------------------------------------------------------------------------------------------------------
  1197                                  section                 dir                                                     ;diskette directory
  1198                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1199                                                          db      020h                                            ;attribute (archive bit set)
  1200                                                          times   10 db 0                                         ;unused
  1201                                                          dw      0h                                              ;time
  1202                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1203                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1204                                                          dw      2                                               ;first cluster
  1205                                                          dd      05400h                                          ;file size
  1206                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1207                                  %endif
  1208                                  %ifdef BUILDCOM
  1209                                  ;=======================================================================================================================
  1210                                  ;
  1211                                  ;       OS.COM
  1212                                  ;
  1213                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1214                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1215                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1216                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1217                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1218                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1219                                  ;
  1220                                  ;       Our loader addressability is set up according to the following diagram.
  1221                                  ;
  1222                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1223                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1224                                  ;                               |  256 = 100h bytes                             |
  1225                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1226                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1227                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1228                                  ;                       007e00  +-----------------------------------------------+
  1229                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1230                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1231                                  ;                               |                                               |
  1232                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1233                                  ;                               |                                               |
  1234                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1235                                  ;                               |  Loader Code                                  |
  1236                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1237                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1238                                  ;
  1239                                  ;=======================================================================================================================
  1240                                  ;-----------------------------------------------------------------------------------------------------------------------
  1241                                  ;
  1242                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1243                                  ;
  1244                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1245                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1246                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1247                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1248                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1249                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1250                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1251                                  ;       registers.
  1252                                  ;
  1253                                  ;-----------------------------------------------------------------------------------------------------------------------
  1254                                                          cpu     8086                                            ;assume minimal CPU
  1255                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1256                                                          bits    16                                              ;this is 16-bit code
  1257                                  Loader                  push    cs                                              ;use the code segment
  1258                                                          pop     ds                                              ;...as our data segment
  1259                                                          push    cs                                              ;use the code segment
  1260                                                          pop     es                                              ;...as our extra segment
  1261                                  ;
  1262                                  ;       Write a message to the console so we know we have our addressability established.
  1263                                  ;
  1264                                                          mov     si,czStartingMsg                                ;starting message
  1265                                                          call    PutTTYString                                    ;display loader message
  1266                                  ;
  1267                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1268                                  ;
  1269                                                          call    GetCPUType                                      ;AL = cpu type
  1270                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1271                                                          cmp     al,3                                            ;80386+?
  1272                                                          jb      LoaderExit                                      ;no, exit with error message
  1273                                                          cpu     386                                             ;allow 80386 instructions
  1274                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1275                                                          call    PutTTYString                                    ;display message
  1276                                  ;
  1277                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1278                                  ;
  1279                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1280                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1281                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1282                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1283                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1284                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1285                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1286                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1287                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1288                                                          call    PutTTYString                                    ;display message
  1289                                  ;
  1290                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1291                                  ;
  1292                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1293                                                          pop     es                                              ;... as target segment
  1294                                                          xor     di,di                                           ;ES:DI = target address
  1295                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1296                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1297                                                          cld                                                     ;forward strings
  1298                                                          rep     movsb                                           ;copy kernel image
  1299                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1300                                                          call    PutTTYString                                    ;display message
  1301                                  ;
  1302                                  ;       Switch to protected mode.
  1303                                  ;
  1304                                                          xor     si,si                                           ;ES:SI = gdt addr
  1305                                                          mov     ss,si                                           ;protected mode ss
  1306                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1307                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1308                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1309                                                          mov     dx,001Fh                                        ;outer delay loop count
  1310                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1311                                                          loop    $                                               ;wait out pending interrupts
  1312                                                          dec     dx                                              ;restore outer loop count
  1313                                                          jnz     .10                                             ;continue outer loop
  1314                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1315                                  ;
  1316                                  ;       Enable hardware and maskable interrupts.
  1317                                  ;
  1318                                                          xor     al,al                                           ;enable all registers code
  1319                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1320                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1321                                                          sti                                                     ;enable maskable interrupts
  1322                                  ;
  1323                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1324                                  ;
  1325                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1326                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1327                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1328                                  ;-----------------------------------------------------------------------------------------------------------------------
  1329                                  ;
  1330                                  ;       Routine:        LoaderExit
  1331                                  ;
  1332                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1333                                  ;
  1334                                  ;       In:             DS:SI   string address
  1335                                  ;
  1336                                  ;-----------------------------------------------------------------------------------------------------------------------
  1337                                  LoaderExit              call    PutTTYString                                    ;display error message
  1338                                  ;
  1339                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1340                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1341                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1342                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1343                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1344                                  ;
  1345                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1346                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1347                                                          jnz     .40                                             ;exit if key pressed
  1348                                                          sti                                                     ;enable maskable interrupts
  1349                                                          hlt                                                     ;wait for interrupt
  1350                                                          jmp     .30                                             ;repeat until keypress
  1351                                  ;
  1352                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1353                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1354                                  ;       HLT until the system resets.
  1355                                  ;
  1356                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1357                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1358                                  .50                     sti                                                     ;enable maskable interrupts
  1359                                                          hlt                                                     ;stop until reset, int, nmi
  1360                                                          jmp     .50                                             ;loop until restart kicks in
  1361                                  ;-----------------------------------------------------------------------------------------------------------------------
  1362                                  ;
  1363                                  ;       Routine:        GetCPUType
  1364                                  ;
  1365                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1366                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1367                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1368                                  ;
  1369                                  ;       Out:            AX      0 = 808x, v20, etc.
  1370                                  ;                               1 = 80186
  1371                                  ;                               2 = 80286
  1372                                  ;                               3 = 80386
  1373                                  ;
  1374                                  ;-----------------------------------------------------------------------------------------------------------------------
  1375                                  GetCPUType              mov     al,1                                            ;AL = 1
  1376                                                          mov     cl,32                                           ;shift count
  1377                                                          shr     al,cl                                           ;try a 32-bit shift
  1378                                                          or      al,al                                           ;did the shift happen?
  1379                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1380                                                          cpu     186
  1381                                                          push    sp                                              ;save stack pointer
  1382                                                          pop     cx                                              ;...into cx
  1383                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1384                                                          jne     .10                                             ;yes, cpu is 80186
  1385                                                          cpu     286
  1386                                                          inc     ax                                              ;AX = 2
  1387                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1388                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1389                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1390                                                          jz      .10                                             ;yes, cpu is 80286
  1391                                                          inc     ax                                              ;AX = 3
  1392                                  .10                     ret                                                     ;return
  1393                                  ;-----------------------------------------------------------------------------------------------------------------------
  1394                                  ;
  1395                                  ;       Routine:        PutTTYString
  1396                                  ;
  1397                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1398                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1399                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1400                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1401                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1402                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1403                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1404                                  ;                       to LODSB is not needed.
  1405                                  ;
  1406                                  ;       In:             DS:SI   address of string
  1407                                  ;
  1408                                  ;       Out:            DF      0
  1409                                  ;                       ZF      1
  1410                                  ;                       AL      0
  1411                                  ;
  1412                                  ;-----------------------------------------------------------------------------------------------------------------------
  1413                                  PutTTYString            cld                                                     ;forward strings
  1414                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1415                                                          test    al,al                                           ;end of string?
  1416                                                          jz      .20                                             ;... yes, exit our loop
  1417                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1418                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1419                                                          jmp     .10                                             ;repeat until done
  1420                                  .20                     ret                                                     ;return
  1421                                  ;-----------------------------------------------------------------------------------------------------------------------
  1422                                  ;
  1423                                  ;       Loader Data
  1424                                  ;
  1425                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1426                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1427                                  ;
  1428                                  ;-----------------------------------------------------------------------------------------------------------------------
  1429                                                          align   2
  1430                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1431                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1432                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1433                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1434                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1435                                                          db      "Please press any key to restart the computer.",13,10,0
  1436                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1437                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1438                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1439                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1440                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1441                                  ;=======================================================================================================================
  1442                                  ;
  1443                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1444                                  ;
  1445                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1446                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1447                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1448                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1449                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1450                                  ;
  1451                                  ;=======================================================================================================================
  1452                                  ;=======================================================================================================================
  1453                                  ;
  1454                                  ;       Kernel Tables
  1455                                  ;
  1456                                  ;=======================================================================================================================
  1457                                  ;-----------------------------------------------------------------------------------------------------------------------
  1458                                  ;
  1459                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1460                                  ;
  1461                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1462                                  ;       first descriptor must be all nulls.
  1463                                  ;
  1464                                  ;       6   5         4         3         2         1         0
  1465                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1466                                  ;       ----------------------------------------------------------------
  1467                                  ;       h......hffffmmmma......ab......................bn..............n
  1468                                  ;
  1469                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1470                                  ;               ffff                                                            flags
  1471                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1472                                  ;                       a......a                                                access
  1473                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1474                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1475                                  ;
  1476                                  ;       00000000                                                                all areas have base addresses below 2^24
  1477                                  ;               0...                                                            single-byte size granularity
  1478                                  ;               1...                                                            4-kilobyte size granularity
  1479                                  ;               .0..                                                            16-bit default for code segments
  1480                                  ;               .1..                                                            32-bit default for code segments
  1481                                  ;               ..0.                                                            intel-reserved; should be zero
  1482                                  ;               ...0                                                            available for operating system use
  1483                                  ;                   0000                                                        segment is less than 2^16 in size
  1484                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1485                                  ;                       1.......                                                segment is present in memory
  1486                                  ;                       .00.....                                                segment is of privilege level 0
  1487                                  ;                       ...0....                                                segment is of system or gate type
  1488                                  ;                       ...00010                                                local decriptor table (LDT)
  1489                                  ;                       ...01001                                                task state segment (TSS) available
  1490                                  ;                       ...01011                                                task state segment (TSS) busy
  1491                                  ;                       ...10...                                                data segment
  1492                                  ;                       ...10011                                                writable data (accessed)
  1493                                  ;                       ...11...                                                code segment
  1494                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1495                                  ;
  1496                                  ;-----------------------------------------------------------------------------------------------------------------------
  1497                                  section                 gdt                                                     ;global descriptor table
  1498                                                          dq      0000000000000000h                               ;00 required null selector
  1499                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1500                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1501                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1502                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1503                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1504                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1505                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1506                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1507                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1508                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1509                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1510                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1511                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1512                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1513                                  ;-----------------------------------------------------------------------------------------------------------------------
  1514                                  ;
  1515                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1516                                  ;
  1517                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1518                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1519                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1520                                  ;
  1521                                  ;       6   5         4         3         2         1         0
  1522                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1523                                  ;       ----------------------------------------------------------------
  1524                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1525                                  ;
  1526                                  ;       h...h   high-order offset (bits 16-31)
  1527                                  ;       P       present (0=unused interrupt)
  1528                                  ;       zz      descriptor privilege level
  1529                                  ;       S       storage segment (must be zero for IDT)
  1530                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1531                                  ;       S...S   handling code selector in GDT
  1532                                  ;       l...l   lo-order offset (bits 0-15)
  1533                                  ;
  1534                                  ;-----------------------------------------------------------------------------------------------------------------------
  1535                                  section                 idt                                                     ;interrupt descriptor table
  1536                                                          mint    dividebyzero                                    ;00 divide by zero
  1537                                                          mint    singlestep                                      ;01 single step
  1538                                                          mint    nmi                                             ;02 non-maskable
  1539                                                          mint    break                                           ;03 break
  1540                                                          mint    into                                            ;04 into
  1541                                                          mint    bounds                                          ;05 bounds
  1542                                                          mint    badopcode                                       ;06 bad op code
  1543                                                          mint    nocoproc                                        ;07 no coprocessor
  1544                                                          mint    doublefault                                     ;08 double-fault
  1545                                                          mint    operand                                         ;09 operand
  1546                                                          mint    badtss                                          ;0a bad TSS
  1547                                                          mint    notpresent                                      ;0b not-present
  1548                                                          mint    stacklimit                                      ;0c stack limit
  1549                                                          mint    protection                                      ;0d general protection fault
  1550                                                          mint    int14                                           ;0e (reserved)
  1551                                                          mint    int15                                           ;0f (reserved)
  1552                                                          mint    coproccalc                                      ;10 (reserved)
  1553                                                          mint    int17                                           ;11 (reserved)
  1554                                                          mint    int18                                           ;12 (reserved)
  1555                                                          mint    int19                                           ;13 (reserved)
  1556                                                          mint    int20                                           ;14 (reserved)
  1557                                                          mint    int21                                           ;15 (reserved)
  1558                                                          mint    int22                                           ;16 (reserved)
  1559                                                          mint    int23                                           ;17 (reserved)
  1560                                                          mint    int24                                           ;18 (reserved)
  1561                                                          mint    int25                                           ;19 (reserved)
  1562                                                          mint    int26                                           ;1a (reserved)
  1563                                                          mint    int27                                           ;1b (reserved)
  1564                                                          mint    int28                                           ;1c (reserved)
  1565                                                          mint    int29                                           ;1d (reserved)
  1566                                                          mint    int30                                           ;1e (reserved)
  1567                                                          mint    int31                                           ;1f (reserved)
  1568                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1569                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1570                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1571                                                          mtrap   com2                                            ;23 IRQ3 com2
  1572                                                          mtrap   com1                                            ;24 IRQ4 com1
  1573                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1574                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1575                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1576                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1577                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1578                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1579                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1580                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1581                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1582                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1583                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1584                                                          mtrap   svc                                             ;30 OS services
  1585                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1586                                  ;=======================================================================================================================
  1587                                  ;
  1588                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1589                                  ;
  1590                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1591                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1592                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1593                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1594                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1595                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1596                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1597                                  ;
  1598                                  ;=======================================================================================================================
  1599                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1600                                                          cpu     386                                             ;allow 80386 instructions
  1601                                                          bits    32                                              ;this is 32-bit code
  1602                                  ;=======================================================================================================================
  1603                                  ;
  1604                                  ;       CPU Interrupt Handlers
  1605                                  ;
  1606                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1607                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1608                                  ;
  1609                                  ;=======================================================================================================================
  1610                                  ;-----------------------------------------------------------------------------------------------------------------------
  1611                                  ;
  1612                                  ;       INT0    Divide By Zero
  1613                                  ;
  1614                                  ;-----------------------------------------------------------------------------------------------------------------------
  1615                                                          menter  dividebyzero                                    ;divide by zero
  1616                                                          push    0                                               ;store interrupt nbr
  1617                                                          push    czIntDivideByZero                               ;store message offset
  1618                                                          jmp     ReportInterrupt                                 ;report interrupt
  1619                                  ;-----------------------------------------------------------------------------------------------------------------------
  1620                                  ;
  1621                                  ;       INT1    Single Step
  1622                                  ;
  1623                                  ;-----------------------------------------------------------------------------------------------------------------------
  1624                                                          menter  singlestep                                      ;single step
  1625                                                          push    1                                               ;store interrupt nbr
  1626                                                          push    czIntSingleStep                                 ;store message offset
  1627                                                          jmp     ReportInterrupt                                 ;report interrupt
  1628                                  ;-----------------------------------------------------------------------------------------------------------------------
  1629                                  ;
  1630                                  ;       INT2    Non-Maskable Interrupt
  1631                                  ;
  1632                                  ;-----------------------------------------------------------------------------------------------------------------------
  1633                                                          menter  nmi                                             ;non-maskable
  1634                                                          push    2                                               ;store interrupt nbr
  1635                                                          push    czIntNonMaskable                                ;store message offset
  1636                                                          jmp     ReportInterrupt                                 ;report interrupt
  1637                                  ;-----------------------------------------------------------------------------------------------------------------------
  1638                                  ;
  1639                                  ;       INT3    Break
  1640                                  ;
  1641                                  ;-----------------------------------------------------------------------------------------------------------------------
  1642                                                          menter  break                                           ;break
  1643                                                          push    3                                               ;store interrupt nbr
  1644                                                          push    czIntBreak                                      ;store message offset
  1645                                                          jmp     ReportInterrupt                                 ;report interrupt
  1646                                  ;-----------------------------------------------------------------------------------------------------------------------
  1647                                  ;
  1648                                  ;       INT4    Into
  1649                                  ;
  1650                                  ;-----------------------------------------------------------------------------------------------------------------------
  1651                                                          menter  into                                            ;into
  1652                                                          push    4                                               ;store interrupt nbr
  1653                                                          push    czIntInto                                       ;store message offset
  1654                                                          jmp     ReportInterrupt                                 ;report interrupt
  1655                                  ;-----------------------------------------------------------------------------------------------------------------------
  1656                                  ;
  1657                                  ;       INT5    Bounds
  1658                                  ;
  1659                                  ;-----------------------------------------------------------------------------------------------------------------------
  1660                                                          menter  bounds                                          ;bounds
  1661                                                          push    5                                               ;store interrupt nbr
  1662                                                          push    czIntBounds                                     ;store message offset
  1663                                                          jmp     ReportInterrupt                                 ;report interrupt
  1664                                  ;-----------------------------------------------------------------------------------------------------------------------
  1665                                  ;
  1666                                  ;       INT6    Bad Operation Code
  1667                                  ;
  1668                                  ;-----------------------------------------------------------------------------------------------------------------------
  1669                                                          menter  badopcode                                       ;bad opcode interrupt
  1670                                                          push    6                                               ;store interrupt nbr
  1671                                                          push    czIntBadOpCode                                  ;store message offset
  1672                                                          jmp     ReportInterrupt                                 ;report interrupt
  1673                                  ;-----------------------------------------------------------------------------------------------------------------------
  1674                                  ;
  1675                                  ;       INT7    No Coprocessor
  1676                                  ;
  1677                                  ;-----------------------------------------------------------------------------------------------------------------------
  1678                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1679                                                          push    7                                               ;store interrupt nbr
  1680                                                          push    czIntNoCoprocessor                              ;store message offset
  1681                                                          jmp     ReportInterrupt                                 ;report interrupt
  1682                                  ;-----------------------------------------------------------------------------------------------------------------------
  1683                                  ;
  1684                                  ;       INT8    Double Fault
  1685                                  ;
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                                          menter  doublefault                                     ;doublefault interrupt
  1688                                                          push    8                                               ;store interrupt nbr
  1689                                                          push    czIntDoubleFault                                ;store message offset
  1690                                                          jmp     ReportInterrupt                                 ;report interrupt
  1691                                  ;-----------------------------------------------------------------------------------------------------------------------
  1692                                  ;
  1693                                  ;       INT9    Operand
  1694                                  ;
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                                          menter  operand                                         ;operand interrupt
  1697                                                          push    9                                               ;store interrupt nbr
  1698                                                          push    czIntOperand                                    ;store message offset
  1699                                                          jmp     ReportInterrupt                                 ;report interrupt
  1700                                  ;-----------------------------------------------------------------------------------------------------------------------
  1701                                  ;
  1702                                  ;       INT10   Bad Task State Segment
  1703                                  ;
  1704                                  ;-----------------------------------------------------------------------------------------------------------------------
  1705                                                          menter  badtss                                          ;bad TSS interrupt
  1706                                                          push    10                                              ;store interrupt nbr
  1707                                                          push    czIntBadTSS                                     ;store message offset
  1708                                                          jmp     ReportInterrupt                                 ;report interrupt
  1709                                  ;-----------------------------------------------------------------------------------------------------------------------
  1710                                  ;
  1711                                  ;       INT11   Not Present
  1712                                  ;
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                                          menter  notpresent                                      ;not present interrupt
  1715                                                          push    11                                              ;store interrupt nbr
  1716                                                          push    czIntNotPresent                                 ;store message offset
  1717                                                          jmp     ReportInterrupt                                 ;report interrupt
  1718                                  ;-----------------------------------------------------------------------------------------------------------------------
  1719                                  ;
  1720                                  ;       INT12   Stack Limit
  1721                                  ;
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                                          menter  stacklimit                                      ;stack limit interrupt
  1724                                                          push    12                                              ;store interrupt nbr
  1725                                                          push    czIntStackLimit                                 ;store message offset
  1726                                                          jmp     ReportInterrupt                                 ;report interrupt
  1727                                  ;-----------------------------------------------------------------------------------------------------------------------
  1728                                  ;
  1729                                  ;       INT13   General Protection Fault
  1730                                  ;
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                                          menter  protection                                      ;protection fault interrupt
  1733                                                          push    13                                              ;store interrupt nbr
  1734                                                          push    czIntProtection                                 ;store message offset
  1735                                                          jmp     ReportInterrupt                                 ;report interrupt
  1736                                  ;-----------------------------------------------------------------------------------------------------------------------
  1737                                  ;
  1738                                  ;       INT14   Reserved
  1739                                  ;
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                                          menter  int14                                           ;(reserved)
  1742                                                          push    14                                              ;store interrupt nbr
  1743                                                          push    czIntReserved                                   ;store message offset
  1744                                                          jmp     ReportInterrupt                                 ;report interrupt
  1745                                  ;-----------------------------------------------------------------------------------------------------------------------
  1746                                  ;
  1747                                  ;       INT15   Reserved
  1748                                  ;
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                                          menter  int15                                           ;(reserved)
  1751                                                          push    15                                              ;store interrupt nbr
  1752                                                          push    czIntReserved                                   ;store message offset
  1753                                                          jmp     ReportInterrupt                                 ;report interrupt
  1754                                  ;-----------------------------------------------------------------------------------------------------------------------
  1755                                  ;
  1756                                  ;       INT16   Coprocessor Calculation
  1757                                  ;
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                                          menter  coproccalc                                      ;coprocessor calculation
  1760                                                          push    16                                              ;store interrupt nbr
  1761                                                          push    czIntCoprocessorCalc                            ;store message offset
  1762                                                          jmp     ReportInterrupt                                 ;report interrupt
  1763                                  ;-----------------------------------------------------------------------------------------------------------------------
  1764                                  ;
  1765                                  ;       INT17   Reserved
  1766                                  ;
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                                          menter  int17                                           ;(reserved)
  1769                                                          push    17                                              ;store interrupt nbr
  1770                                                          push    czIntReserved                                   ;store message offset
  1771                                                          jmp     ReportInterrupt                                 ;report interrupt
  1772                                  ;-----------------------------------------------------------------------------------------------------------------------
  1773                                  ;
  1774                                  ;       INT18   Reserved
  1775                                  ;
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                                          menter  int18                                           ;(reserved)
  1778                                                          push    18                                              ;store interrupt nbr
  1779                                                          push    czIntReserved                                   ;store message offset
  1780                                                          jmp     ReportInterrupt                                 ;report interrupt
  1781                                  ;-----------------------------------------------------------------------------------------------------------------------
  1782                                  ;
  1783                                  ;       INT19   Reserved
  1784                                  ;
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                                          menter  int19                                           ;(reserved)
  1787                                                          push    19                                              ;store interrupt nbr
  1788                                                          push    czIntReserved                                   ;store message offset
  1789                                                          jmp     ReportInterrupt                                 ;report interrupt
  1790                                  ;-----------------------------------------------------------------------------------------------------------------------
  1791                                  ;
  1792                                  ;       INT20   Reserved
  1793                                  ;
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                                          menter  int20                                           ;(reserved)
  1796                                                          push    20                                              ;store interrupt nbr
  1797                                                          push    czIntReserved                                   ;store message offset
  1798                                                          jmp     ReportInterrupt                                 ;report interrupt
  1799                                  ;-----------------------------------------------------------------------------------------------------------------------
  1800                                  ;
  1801                                  ;       INT21   Reserved
  1802                                  ;
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                                          menter  int21                                           ;(reserved)
  1805                                                          push    21                                              ;store interrupt nbr
  1806                                                          push    czIntReserved                                   ;store message offset
  1807                                                          jmp     ReportInterrupt                                 ;report interrupt
  1808                                  ;-----------------------------------------------------------------------------------------------------------------------
  1809                                  ;
  1810                                  ;       INT22   Reserved
  1811                                  ;
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                                          menter  int22                                           ;(reserved)
  1814                                                          push    22                                              ;store interrupt nbr
  1815                                                          push    czIntReserved                                   ;store message offset
  1816                                                          jmp     ReportInterrupt                                 ;report interrupt
  1817                                  ;-----------------------------------------------------------------------------------------------------------------------
  1818                                  ;
  1819                                  ;       INT23   Reserved
  1820                                  ;
  1821                                  ;-----------------------------------------------------------------------------------------------------------------------
  1822                                                          menter  int23                                           ;(reserved)
  1823                                                          push    23                                              ;store interrupt nbr
  1824                                                          push    czIntReserved                                   ;store message offset
  1825                                                          jmp     ReportInterrupt                                 ;report interrupt
  1826                                  ;-----------------------------------------------------------------------------------------------------------------------
  1827                                  ;
  1828                                  ;       INT24   Reserved
  1829                                  ;
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                                          menter  int24                                           ;(reserved)
  1832                                                          push    24                                              ;store interrupt nbr
  1833                                                          push    czIntReserved                                   ;store message offset
  1834                                                          jmp     ReportInterrupt                                 ;report interrupt
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                  ;
  1837                                  ;       INT25   Reserved
  1838                                  ;
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                                          menter  int25                                           ;(reserved)
  1841                                                          push    25                                              ;store interrupt nbr
  1842                                                          push    czIntReserved                                   ;store message offset
  1843                                                          jmp     ReportInterrupt                                 ;report interrupt
  1844                                  ;-----------------------------------------------------------------------------------------------------------------------
  1845                                  ;
  1846                                  ;       INT26   Reserved
  1847                                  ;
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                                          menter  int26                                           ;(reserved)
  1850                                                          push    26                                              ;store interrupt nbr
  1851                                                          push    czIntReserved                                   ;store message offset
  1852                                                          jmp     ReportInterrupt                                 ;report interrupt
  1853                                  ;-----------------------------------------------------------------------------------------------------------------------
  1854                                  ;
  1855                                  ;       INT27   Reserved
  1856                                  ;
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                                          menter  int27                                           ;(reserved)
  1859                                                          push    27                                              ;store interrupt nbr
  1860                                                          push    czIntReserved                                   ;store message offset
  1861                                                          jmp     ReportInterrupt                                 ;report interrupt
  1862                                  ;-----------------------------------------------------------------------------------------------------------------------
  1863                                  ;
  1864                                  ;       INT28   Reserved
  1865                                  ;
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                                          menter  int28                                           ;(reserved)
  1868                                                          push    28                                              ;store interrupt nbr
  1869                                                          push    czIntReserved                                   ;store message offset
  1870                                                          jmp     ReportInterrupt                                 ;report interrupt
  1871                                  ;-----------------------------------------------------------------------------------------------------------------------
  1872                                  ;
  1873                                  ;       INT29   Reserved
  1874                                  ;
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                                          menter  int29                                           ;(reserved)
  1877                                                          push    29                                              ;store interrupt nbr
  1878                                                          push    czIntReserved                                   ;store message offset
  1879                                                          jmp     ReportInterrupt                                 ;report interrupt
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                  ;
  1882                                  ;       INT30   Reserved
  1883                                  ;
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                                          menter  int30                                           ;(reserved)
  1886                                                          push    30                                              ;store interrupt nbr
  1887                                                          push    czIntReserved                                   ;store message offset
  1888                                                          jmp     ReportInterrupt                                 ;report interrupt
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                  ;
  1891                                  ;       INT31   Reserved
  1892                                  ;
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                                          menter  int31                                           ;(reserved)
  1895                                                          push    31                                              ;store interrupt nbr
  1896                                                          push    czIntReserved                                   ;store message offset
  1897                                                          jmp     ReportInterrupt                                 ;report interrupt
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                  ;
  1900                                  ;       Routine:        ReportInterrupt
  1901                                  ;
  1902                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1903                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1904                                  ;
  1905                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  1906                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  1907                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  1908                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1909                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1910                                  ;
  1911                                  ;       Out:            N/A             This routine does not exit.
  1912                                  ;
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1915                                                          push    es                                              ;save ES at time of interrupt
  1916                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1917                                                          mov     ebp,esp                                         ;EBP --> [EDI]
  1918                                  ;
  1919                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1920                                  ;
  1921                                  ;                       [EBP+60]        EFLAGS
  1922                                  ;                       [EBP+56]        CS
  1923                                  ;                       [EBP+52]        EIP
  1924                                  ;                       [EBP+48]        EIP hi-order
  1925                                  ;                       [EBP+44]        interrupt number (0-31)
  1926                                  ;                       [EBP+40]        error message address
  1927                                  ;                       [EBP+36]        DS
  1928                                  ;                       [EBP+32]        ES
  1929                                  ;                       [EBP+28]        EAX
  1930                                  ;                       [EBP+24]        ECX
  1931                                  ;                       [EBP+20]        EDX
  1932                                  ;                       [EBP+16]        EBX
  1933                                  ;                       [EBP+12]        ESP
  1934                                  ;                       [EBP+8]         EBP
  1935                                  ;                       [EBP+4]         ESI
  1936                                  ;                       [EBP+0]         EDI
  1937                                  ;
  1938                                                          push    cs                                              ;load code selector ...
  1939                                                          pop     ds                                              ;... into DS
  1940                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  1941                                                          pop     es                                              ;... into ES
  1942                                  ;
  1943                                  ;       Display the interrupt report boundary box
  1944                                  ;
  1945                                                          mov     cl,13                                           ;column
  1946                                                          mov     ch,6                                            ;row
  1947                                                          mov     dl,50                                           ;width
  1948                                                          mov     dh,8                                            ;height
  1949                                                          mov     bh,07h                                          ;attribute
  1950                                                          call    DrawTextDialogBox                               ;draw text dialog box
  1951                                  ;
  1952                                  ;       Display the report header
  1953                                  ;
  1954                                                          mov     cl,15                                           ;column
  1955                                                          mov     ch,7                                            ;row
  1956                                                          mov     esi,czIntHeader                                 ;interrupt message header
  1957                                                          call    SetConsoleString                                ;draw text string
  1958                                  ;
  1959                                  ;       Display the interrupt description label
  1960                                  ;
  1961                                                          mov     cl,15                                           ;column
  1962                                                          mov     ch,8                                            ;row
  1963                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  1964                                                          call    SetConsoleString                                ;draw text string
  1965                                  ;
  1966                                  ;       Display the interrupt number
  1967                                  ;
  1968                                                          mov     eax,[ebp+44]                                    ;interrupt number
  1969                                                          mov     cl,26                                           ;column
  1970                                                          mov     ch,8                                            ;row
  1971                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  1972                                  ;
  1973                                  ;       Display the interrupt name
  1974                                  ;
  1975                                                          mov     cl,29                                           ;column
  1976                                                          mov     ch,8                                            ;row
  1977                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  1978                                                          call    SetConsoleString                                ;display interrupt description
  1979                                  ;
  1980                                  ;       Display the register values header
  1981                                  ;
  1982                                                          mov     cl,15                                           ;column
  1983                                                          mov     ch,10                                           ;row
  1984                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  1985                                                          call    SetConsoleString                                ;draw text string
  1986                                  ;
  1987                                  ;       Display the EAX register label and value
  1988                                  ;
  1989                                                          mov     cl,15                                           ;column
  1990                                                          mov     ch,11                                           ;row
  1991                                                          mov     esi,czIntEAX                                    ;register EAX label
  1992                                                          call    SetConsoleString                                ;draw label
  1993                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  1994                                                          mov     cl,19                                           ;column
  1995                                                          mov     ch,11                                           ;row
  1996                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1997                                  ;
  1998                                  ;       Display the ECX register label and value
  1999                                  ;
  2000                                                          mov     cl,15                                           ;column
  2001                                                          mov     ch,12                                           ;row
  2002                                                          mov     esi,czIntECX                                    ;label
  2003                                                          call    SetConsoleString                                ;draw label
  2004                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2005                                                          mov     cl,19                                           ;column
  2006                                                          mov     ch,12                                           ;row
  2007                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2008                                  ;
  2009                                  ;       Display the EDX register label and value
  2010                                  ;
  2011                                                          mov     cl,15                                           ;column
  2012                                                          mov     ch,13                                           ;row
  2013                                                          mov     esi,czIntEDX                                    ;label
  2014                                                          call    SetConsoleString                                ;draw label
  2015                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2016                                                          mov     cl,19                                           ;column
  2017                                                          mov     ch,13                                           ;row
  2018                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2019                                  ;
  2020                                  ;       Display the EBX register label and value
  2021                                  ;
  2022                                                          mov     cl,15                                           ;column
  2023                                                          mov     ch,14                                           ;row
  2024                                                          mov     esi,czIntEBX                                    ;label
  2025                                                          call    SetConsoleString                                ;draw label
  2026                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2027                                                          mov     cl,19                                           ;column
  2028                                                          mov     ch,14                                           ;row
  2029                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2030                                  ;
  2031                                  ;       Display the ESI register label and value
  2032                                  ;
  2033                                                          mov     cl,29                                           ;column
  2034                                                          mov     ch,11                                           ;row
  2035                                                          mov     esi,czIntESI                                    ;label
  2036                                                          call    SetConsoleString                                ;draw label
  2037                                                          mov     eax,[ebp+4]                                     ;ESI
  2038                                                          mov     cl,33                                           ;column
  2039                                                          mov     ch,11                                           ;row
  2040                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2041                                  ;
  2042                                  ;       Display the EDI register label and value
  2043                                  ;
  2044                                                          mov     cl,29                                           ;column
  2045                                                          mov     ch,12                                           ;row
  2046                                                          mov     esi,czIntEDI                                    ;label
  2047                                                          call    SetConsoleString                                ;draw label
  2048                                                          mov     eax,[ebp+0]                                     ;EDI
  2049                                                          mov     cl,33                                           ;column
  2050                                                          mov     ch,12                                           ;row
  2051                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2052                                  ;
  2053                                  ;       Display the EBP register label and value
  2054                                  ;
  2055                                                          mov     cl,29                                           ;column
  2056                                                          mov     ch,13                                           ;row
  2057                                                          mov     esi,czIntEBP                                    ;label
  2058                                                          call    SetConsoleString                                ;draw label
  2059                                                          mov     eax,[ebp+8]                                     ;EBP
  2060                                                          mov     cl,33                                           ;column
  2061                                                          mov     ch,13                                           ;row
  2062                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2063                                  ;
  2064                                  ;       Display the DS register label and value
  2065                                  ;
  2066                                                          mov     cl,42                                           ;column
  2067                                                          mov     ch,11                                           ;row
  2068                                                          mov     esi,czIntDS                                     ;label
  2069                                                          call    SetConsoleString                                ;draw label
  2070                                                          xor     eax,eax                                         ;zero register
  2071                                                          mov     ax,[ebp+36]                                     ;DS
  2072                                                          mov     cl,46                                           ;column
  2073                                                          mov     ch,11                                           ;row
  2074                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2075                                  ;
  2076                                  ;       Display the ES register label and value
  2077                                  ;
  2078                                                          mov     cl,42                                           ;column
  2079                                                          mov     ch,12                                           ;row
  2080                                                          mov     esi,czIntES                                     ;label
  2081                                                          call    SetConsoleString                                ;draw label
  2082                                                          xor     eax,eax                                         ;zero register
  2083                                                          mov     ax,[ebp+32]                                     ;ES
  2084                                                          mov     cl,46                                           ;column
  2085                                                          mov     ch,12                                           ;row
  2086                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2087                                  ;
  2088                                  ;       Display the SS register label and value
  2089                                  ;
  2090                                                          mov     cl,42                                           ;column
  2091                                                          mov     ch,13                                           ;row
  2092                                                          mov     esi,czIntSS                                     ;label
  2093                                                          call    SetConsoleString                                ;draw label
  2094                                                          xor     eax,eax                                         ;zero register
  2095                                                          mov     ax,ss                                           ;SS
  2096                                                          mov     cl,46                                           ;column
  2097                                                          mov     ch,13                                           ;row
  2098                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2099                                  ;
  2100                                  ;       Display the CS register lable and value
  2101                                  ;
  2102                                                          mov     cl,42                                           ;column
  2103                                                          mov     ch,14                                           ;row
  2104                                                          mov     esi,czIntCS                                     ;label
  2105                                                          call    SetConsoleString                                ;draw label
  2106                                                          xor     eax,eax                                         ;zero register
  2107                                                          mov     ax,[ebp+56]                                     ;CS
  2108                                                          mov     cl,46                                           ;column
  2109                                                          mov     ch,14                                           ;row
  2110                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2111                                  ;
  2112                                  ;       Display the EFLAGS register label and value
  2113                                  ;
  2114                                                          mov     cl,51                                           ;column
  2115                                                          mov     ch,11                                           ;row
  2116                                                          mov     esi,czIntEFLAGS                                 ;label
  2117                                                          call    SetConsoleString                                ;draw label
  2118                                                          mov     eax,[ebp+60]                                    ;EFLAGS
  2119                                                          mov     cl,55                                           ;column
  2120                                                          mov     ch,11                                           ;row
  2121                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2122                                  ;
  2123                                  ;       Display the ESP register label and value
  2124                                  ;
  2125                                                          mov     cl,51                                           ;column
  2126                                                          mov     ch,13                                           ;row
  2127                                                          mov     esi,czIntESP                                    ;label
  2128                                                          call    SetConsoleString                                ;draw label
  2129                                                          mov     eax,[ebp+12]                                    ;ESP
  2130                                                          mov     cl,55                                           ;column
  2131                                                          mov     ch,13                                           ;row
  2132                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2133                                  ;
  2134                                  ;       Display the EIP register label and value
  2135                                  ;
  2136                                                          mov     cl,51                                           ;column
  2137                                                          mov     ch,14                                           ;row
  2138                                                          mov     esi,czIntEIP                                    ;label
  2139                                                          call    SetConsoleString                                ;draw label
  2140                                                          mov     eax,[ebp+52]                                    ;EIP lo-order 32-bits
  2141                                                          mov     cl,55                                           ;column
  2142                                                          mov     ch,14                                           ;row
  2143                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2144                                  ;
  2145                                  ;       Halt and loop until reset
  2146                                  ;
  2147                                  .10                     sti                                                     ;enable maskable interrupts
  2148                                                          hlt                                                     ;halt processor
  2149                                                          jmp     .10                                             ;resume on interrupt
  2150                                  ;-----------------------------------------------------------------------------------------------------------------------
  2151                                  ;
  2152                                  ;       Processor Interrupt Name Strings
  2153                                  ;
  2154                                  ;-----------------------------------------------------------------------------------------------------------------------
  2155                                  czIntDivideByZero       db      "Division by zero",0
  2156                                  czIntSingleStep         db      "Single step",0
  2157                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2158                                  czIntBreak              db      "Break",0
  2159                                  czIntInto               db      "Into",0
  2160                                  czIntBounds             db      "Bounds",0
  2161                                  czIntBadOpCode          db      "Bad Operation Code",0
  2162                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2163                                  czIntDoubleFault        db      "Double Fault",0
  2164                                  czIntOperand            db      "Operand",0
  2165                                  czIntBadTSS             db      "Bad Task State Segment",0
  2166                                  czIntNotPresent         db      "Not Present",0
  2167                                  czIntStackLimit         db      "Stack Limit",0
  2168                                  czIntProtection         db      "General Protection Fault",0
  2169                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2170                                  czIntReserved           db      "Reserved",0
  2171                                  ;-----------------------------------------------------------------------------------------------------------------------
  2172                                  ;
  2173                                  ;       Processor Interrupt Handling Strings
  2174                                  ;
  2175                                  ;-----------------------------------------------------------------------------------------------------------------------
  2176                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2177                                  czIntLabel              db      "Interrupt #",0
  2178                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2179                                  czIntEAX                db      "EAX:",0
  2180                                  czIntECX                db      "ECX:",0
  2181                                  czIntEDX                db      "EDX:",0
  2182                                  czIntEBX                db      "EBX:",0
  2183                                  czIntESI                db      "ESI:",0
  2184                                  czIntEDI                db      "EDI:",0
  2185                                  czIntEBP                db      "EBP:",0
  2186                                  czIntESP                db      "ESP:",0
  2187                                  czIntDS                 db      " DS:",0
  2188                                  czIntES                 db      " ES:",0
  2189                                  czIntSS                 db      " SS:",0
  2190                                  czIntCS                 db      " CS:",0
  2191                                  czIntEFLAGS             db      "FLG:",0
  2192                                  czIntEIP                db      "EIP:",0
  2193                                  ;-----------------------------------------------------------------------------------------------------------------------
  2194                                  ;
  2195                                  ;       Routine:        DrawTextDialogBox
  2196                                  ;
  2197                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2198                                  ;
  2199                                  ;       In:             CL      upper left column (0-79)
  2200                                  ;                       CH      upper left row (0-24)
  2201                                  ;                       DL      column width, excluding border
  2202                                  ;                       DH      row height, excluding border
  2203                                  ;                       BH      color attribute
  2204                                  ;
  2205                                  ;-----------------------------------------------------------------------------------------------------------------------
  2206                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2207                                                          push    esi                                             ;
  2208                                                          push    edi                                             ;
  2209                                                          push    es                                              ;
  2210                                                          push    EGDTCGA                                         ;load CGA selector ...
  2211                                                          pop     es                                              ;... into ES
  2212                                  ;
  2213                                  ;       Compute target display offset
  2214                                  ;
  2215                                                          xor     eax,eax                                         ;zero register
  2216                                                          mov     al,ch                                           ;row
  2217                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2218                                                          mul     ah                                              ;row offset
  2219                                                          add     al,cl                                           ;add column
  2220                                                          adc     ah,0                                            ;add overflow
  2221                                                          add     al,cl                                           ;add column
  2222                                                          adc     ah,0                                            ;add overflow
  2223                                                          mov     edi,eax                                         ;target row offset
  2224                                  ;
  2225                                  ;       Display top border row
  2226                                  ;
  2227                                                          push    edi                                             ;save target row offset
  2228                                                          mov     ah,bh                                           ;attribute
  2229                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2230                                                          stosw                                                   ;display character and attribute
  2231                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2232                                                          xor     ecx,ecx                                         ;zero register
  2233                                                          mov     cl,dl                                           ;width, excluding border
  2234                                                          rep     stosw                                           ;display horizontal border
  2235                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2236                                                          stosw                                                   ;display character and attribute
  2237                                                          pop     edi                                             ;restore target row offset
  2238                                                          add     edi,ECONROWBYTES                                ;next row
  2239                                  ;
  2240                                  ;       Display dialog box body rows
  2241                                  ;
  2242                                                          xor     ecx,ecx                                         ;zero register
  2243                                                          mov     cl,dh                                           ;height, excluding border
  2244                                  .10                     push    ecx                                             ;save remaining rows
  2245                                                          push    edi                                             ;save target row offset
  2246                                                          mov     ah,bh                                           ;attribute
  2247                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2248                                                          stosw                                                   ;display character and attribute
  2249                                                          mov     al,EASCIISPACE                                  ;space
  2250                                                          xor     ecx,ecx                                         ;zero register
  2251                                                          mov     cl,dl                                           ;width, excluding border
  2252                                                          rep     stosw                                           ;display row
  2253                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2254                                                          stosw                                                   ;display character and attribute
  2255                                                          pop     edi                                             ;restore target row offset
  2256                                                          add     edi,ECONROWBYTES                                ;next row
  2257                                                          pop     ecx                                             ;remaining rows
  2258                                                          loop    .10                                             ;next row
  2259                                  ;
  2260                                  ;       Display bottom border row
  2261                                  ;
  2262                                                          push    edi                                             ;save target row offset
  2263                                                          mov     ah,bh                                           ;attribute
  2264                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2265                                                          stosw                                                   ;display character and attribute
  2266                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2267                                                          xor     ecx,ecx                                         ;zero register
  2268                                                          mov     cl,dl                                           ;width, excluding border
  2269                                                          rep     stosw                                           ;display horizontal border
  2270                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2271                                                          stosw                                                   ;display character and attribute
  2272                                                          pop     edi                                             ;restore target row offset
  2273                                                          add     edi,ECONROWBYTES                                ;next row
  2274                                  ;
  2275                                  ;       Restore and return
  2276                                  ;
  2277                                                          pop     es                                              ;restore non-volatile regs
  2278                                                          pop     edi                                             ;
  2279                                                          pop     esi                                             ;
  2280                                                          pop     ecx                                             ;
  2281                                                          ret                                                     ;return
  2282                                  ;=======================================================================================================================
  2283                                  ;
  2284                                  ;       Hardware Device Interupts
  2285                                  ;
  2286                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2287                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2288                                  ;       (BX=2028h).
  2289                                  ;
  2290                                  ;=======================================================================================================================
  2291                                  ;-----------------------------------------------------------------------------------------------------------------------
  2292                                  ;
  2293                                  ;       IRQ0    Clock Tick Interrupt
  2294                                  ;
  2295                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2296                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2297                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2298                                  ;
  2299                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2300                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2301                                  ;
  2302                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2303                                  ;       zero, the floppy disk motors are turned off.
  2304                                  ;
  2305                                  ;-----------------------------------------------------------------------------------------------------------------------
  2306                                                          menter  clocktick                                       ;clock tick interrupt
  2307                                                          push    eax                                             ;save non-volatile regs
  2308                                                          push    edx                                             ;
  2309                                                          push    ds                                              ;
  2310                                  ;
  2311                                  ;       Update the clock tick count and the elapsed days as needed.
  2312                                  ;
  2313                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2314                                                          pop     ds                                              ;... into data segment register
  2315                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2316                                                          inc     eax                                             ;increment clock ticks
  2317                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2318                                                          jb      irq0.10                                         ;no, skip ahead
  2319                                                          inc     byte [wbClockDays]                              ;increment clock days
  2320                                                          xor     eax,eax                                         ;reset clock ticks
  2321                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2322                                  ;
  2323                                  ;       Decrement floppy disk motor timeout.
  2324                                  ;
  2325                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2326                                                          je      irq0.20                                         ;yes, skip ahead
  2327                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2328                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2329                                  ;
  2330                                  ;       Turn off the floppy disk motor if appropriate.
  2331                                  ;
  2332                                                          sti                                                     ;enable maskable interrupts
  2333                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2334                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2335                                                          in      al,dx                                           ;FDC main status byte
  2336                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2337                                                          jnz     irq0.15                                         ;wait while busy
  2338                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2339                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2340                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2341                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2342                                                          out     dx,al                                           ;turn motor off
  2343                                  ;
  2344                                  ;       Signal the end of the hardware interrupt.
  2345                                  ;
  2346                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2347                                  ;
  2348                                  ;       Restore and return.
  2349                                  ;
  2350                                                          pop     ds                                              ;restore modified regs
  2351                                                          pop     edx                                             ;
  2352                                                          pop     eax                                             ;
  2353                                                          iretd                                                   ;return
  2354                                  ;-----------------------------------------------------------------------------------------------------------------------
  2355                                  ;
  2356                                  ;       IRQ1    Keyboard Interrupt
  2357                                  ;
  2358                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2359                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2360                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2361                                  ;       ALL modified registers upon return.
  2362                                  ;
  2363                                  ;-----------------------------------------------------------------------------------------------------------------------
  2364                                                          menter  keyboard                                        ;keyboard interrrupt
  2365                                                          push    eax                                             ;save non-volatile regs
  2366                                                          push    ebx                                             ;
  2367                                                          push    ecx                                             ;
  2368                                                          push    esi                                             ;
  2369                                                          push    ds                                              ;
  2370                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2371                                                          pop     ds                                              ;... into data segment register
  2372                                                          xor     al,al                                           ;zero
  2373                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2374                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2375                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2376                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2377                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2378                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2379                                                          mov     al,' '                                          ;space
  2380                                                          mov     [wbConsoleChar],al                              ;set character to space
  2381                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2382                                                          not     al                                              ;controller timeout mask
  2383                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2384                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2385                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2386                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2387                                                          jz      irq1.140                                        ;yes, skip ahead
  2388                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2389                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2390                                                          mov     ah,al                                           ;copy scan code 0
  2391                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2392                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2393                                                          je      irq1.30                                         ;yes, set flag
  2394                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2395                                                          je      irq1.40                                         ;yes, reset flag
  2396                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2397                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2398                                                          je      irq1.30                                         ;yes, set flag
  2399                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2400                                                          je      irq1.40                                         ;yes, reset flag
  2401                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2402                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2403                                                          je      irq1.30                                         ;yes, set flag
  2404                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2405                                                          je      irq1.40                                         ;yes, reset flag
  2406                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2407                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2408                                                          je      irq1.30                                         ;yes, set flag
  2409                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2410                                                          je      irq1.40                                         ;yes, reset flag
  2411                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2412                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2413                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2414                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2415                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2416                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2417                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2418                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2419                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2420                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2421                                                          jne     irq1.70                                         ;no, skip ahead
  2422                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2423                                                          jz      irq1.140                                        ;yes, skip ahead
  2424                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2425                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2426                                                          mov     ah,al                                           ;copy scan code 1
  2427                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2428                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2429                                                          je      irq1.30                                         ;yes, set flag
  2430                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2431                                                          je      irq1.40                                         ;yes, reset flag
  2432                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2433                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2434                                                          je      irq1.30                                         ;yes, set flag
  2435                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2436                                                          je      irq1.40                                         ;yes, reset flag
  2437                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2438                                                          je      irq1.80                                         ;yes, skip ahead
  2439                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2440                                                          je      irq1.80                                         ;yes, skip ahead
  2441                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2442                                                          je      irq1.10                                         ;yes, continue
  2443                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2444                                                          jne     irq1.20                                         ;no, skip ahead
  2445                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2446                                                          jz      irq1.140                                        ;yes, skip ahead
  2447                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2448                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2449                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2450                                                          jz      irq1.140                                        ;yes, skip ahead
  2451                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2452                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2453                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2454                                  irq1.30                 or      bl,al                                           ;set shift flag
  2455                                                          jmp     irq1.60                                         ;skip ahead
  2456                                  irq1.40                 not     al                                              ;convert flag to mask
  2457                                                          and     bl,al                                           ;reset shift flag
  2458                                                          jmp     irq1.60                                         ;skip ahead
  2459                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2460                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2461                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2462                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2463                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2464                                                          jmp     irq1.150                                        ;finish keyboard handling
  2465                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2466                                                          jne     irq1.80                                         ;no continue
  2467                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2468                                                          jz      irq1.140                                        ;yes, skip ahead
  2469                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2470                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2471                                                          mov     ah,al                                           ;copy scan code 1
  2472                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2473                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2474                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2475                                                          jz      irq1.140                                        ;yes, skip ahead
  2476                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2477                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2478                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2479                                                          jz      irq1.140                                        ;yes, skip ahead
  2480                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2481                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2482                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2483                                                          jz      irq1.140                                        ;yes, skip ahead
  2484                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2485                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2486                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2487                                                          jz      irq1.140                                        ;yes, skip ahead
  2488                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2489                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2490                                                          jmp     irq1.150                                        ;continue
  2491                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2492                                                          test    ah,EKEYBUP                                      ;release code?
  2493                                                          jnz     irq1.130                                        ;yes, skip ahead
  2494                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2495                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2496                                                          jz      irq1.90                                         ;no, skip ahead
  2497                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2498                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2499                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2500                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2501                                                          jz      irq1.100                                        ;no skip ahead
  2502                                                          mov     cl,al                                           ;copy ASCII code
  2503                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2504                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2505                                                          jb      irq1.100                                        ;yes, skip ahead
  2506                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2507                                                          ja      irq1.100                                        ;yes, skip ahead
  2508                                                          xor     al,EASCIICASE                                   ;switch case
  2509                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2510                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2511                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2512                                                          jz      irq1.120                                        ;no, skip ahead
  2513                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2514                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2515                                                          or      edx,eax                                         ;msg id and codes
  2516                                                          xor     ecx,ecx                                         ;null param
  2517                                                          push    eax                                             ;save codes
  2518                                                          call    PutMessage                                      ;put message to console
  2519                                                          pop     eax                                             ;restore codes
  2520                                                          test    al,al                                           ;ASCII translation?
  2521                                                          jz      irq1.130                                        ;no, skip ahead
  2522                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2523                                                          and     eax,0FFFFh                                      ;clear high-order word
  2524                                                          or      edx,eax                                         ;msg id and codes
  2525                                                          xor     ecx,ecx                                         ;null param
  2526                                                          call    PutMessage                                      ;put message to console
  2527                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2528                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2529                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2530                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2531                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2532                                                          pop     ds                                              ;restore non-volatile regs
  2533                                                          pop     esi                                             ;
  2534                                                          pop     ecx                                             ;
  2535                                                          pop     ebx                                             ;
  2536                                                          pop     eax                                             ;
  2537                                                          iretd                                                   ;return
  2538                                  ;-----------------------------------------------------------------------------------------------------------------------
  2539                                  ;       Scan-Code to ASCII Translation Tables
  2540                                  ;-----------------------------------------------------------------------------------------------------------------------
  2541                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2542                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2543                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2544                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2545                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2546                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2547                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2548                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2549                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2550                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2551                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2552                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2553                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2554                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2555                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2556                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2557                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2558                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2559                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2560                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2561                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2562                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2563                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2564                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2565                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2566                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2567                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2568                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2569                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2570                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2571                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2572                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2573                                  ;-----------------------------------------------------------------------------------------------------------------------
  2574                                  ;
  2575                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2576                                  ;
  2577                                  ;-----------------------------------------------------------------------------------------------------------------------
  2578                                                          menter  iochannel                                       ;secondary 8259A cascade
  2579                                                          push    eax                                             ;save modified regs
  2580                                                          jmp     hwint                                           ;end interrupt and return
  2581                                  ;-----------------------------------------------------------------------------------------------------------------------
  2582                                  ;
  2583                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2584                                  ;
  2585                                  ;-----------------------------------------------------------------------------------------------------------------------
  2586                                                          menter  com2                                            ;serial port 2 interrupt
  2587                                                          push    eax                                             ;save modified regs
  2588                                                          jmp     hwint                                           ;end interrupt and return
  2589                                  ;-----------------------------------------------------------------------------------------------------------------------
  2590                                  ;
  2591                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2592                                  ;
  2593                                  ;-----------------------------------------------------------------------------------------------------------------------
  2594                                                          menter  com1                                            ;serial port 1 interrupt
  2595                                                          push    eax                                             ;save modified regs
  2596                                                          jmp     hwint                                           ;end interrupt and return
  2597                                  ;-----------------------------------------------------------------------------------------------------------------------
  2598                                  ;
  2599                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2600                                  ;
  2601                                  ;-----------------------------------------------------------------------------------------------------------------------
  2602                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2603                                                          push    eax                                             ;save modified regs
  2604                                                          jmp     hwint                                           ;end interrupt and return
  2605                                  ;-----------------------------------------------------------------------------------------------------------------------
  2606                                  ;
  2607                                  ;       IRQ6    Diskette Hardware Interrupt
  2608                                  ;
  2609                                  ;-----------------------------------------------------------------------------------------------------------------------
  2610                                                          menter  diskette                                        ;floppy disk interrupt
  2611                                                          push    eax                                             ;save non-volatile regs
  2612                                                          push    ds                                              ;
  2613                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2614                                                          pop     ds                                              ;... into DS register
  2615                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2616                                                          or      al,10000000b                                    ;set IRQ flag
  2617                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2618                                                          pop     ds                                              ;restore non-volatile regs
  2619                                                          jmp     hwint                                           ;end primary PIC interrupt
  2620                                  ;-----------------------------------------------------------------------------------------------------------------------
  2621                                  ;
  2622                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2623                                  ;
  2624                                  ;-----------------------------------------------------------------------------------------------------------------------
  2625                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2626                                                          push    eax                                             ;save modified regs
  2627                                                          jmp     hwint                                           ;end interrupt and return
  2628                                  ;-----------------------------------------------------------------------------------------------------------------------
  2629                                  ;
  2630                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2631                                  ;
  2632                                  ;-----------------------------------------------------------------------------------------------------------------------
  2633                                                          menter  rtclock                                         ;real-time clock interrupt
  2634                                                          push    eax                                             ;save modified regs
  2635                                                          jmp     hwwint                                          ;end interrupt and return
  2636                                  ;-----------------------------------------------------------------------------------------------------------------------
  2637                                  ;
  2638                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2639                                  ;
  2640                                  ;-----------------------------------------------------------------------------------------------------------------------
  2641                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2642                                                          push    eax                                             ;save modified regs
  2643                                                          jmp     hwwint                                          ;end interrupt and return
  2644                                  ;-----------------------------------------------------------------------------------------------------------------------
  2645                                  ;
  2646                                  ;       IRQ10   Reserved Hardware Interrupt
  2647                                  ;
  2648                                  ;-----------------------------------------------------------------------------------------------------------------------
  2649                                                          menter  irq10                                           ;reserved
  2650                                                          push    eax                                             ;save modified regs
  2651                                                          jmp     hwwint                                          ;end interrupt and return
  2652                                  ;-----------------------------------------------------------------------------------------------------------------------
  2653                                  ;
  2654                                  ;       IRQ11   Reserved Hardware Interrupt
  2655                                  ;
  2656                                  ;-----------------------------------------------------------------------------------------------------------------------
  2657                                                          menter  irq11                                           ;reserved
  2658                                                          push    eax                                             ;save modified regs
  2659                                                          jmp     hwwint                                          ;end interrupt and return
  2660                                  ;-----------------------------------------------------------------------------------------------------------------------
  2661                                  ;
  2662                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2663                                  ;
  2664                                  ;-----------------------------------------------------------------------------------------------------------------------
  2665                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2666                                                          push    eax                                             ;save modified regs
  2667                                                          jmp     hwwint                                          ;end interrupt and return
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669                                  ;
  2670                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2671                                  ;
  2672                                  ;-----------------------------------------------------------------------------------------------------------------------
  2673                                                          menter  coprocessor                                     ;coprocessor interrupt
  2674                                                          push    eax                                             ;save modified regs
  2675                                                          jmp     hwwint                                          ;end interrupt and return
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677                                  ;
  2678                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2679                                  ;
  2680                                  ;-----------------------------------------------------------------------------------------------------------------------
  2681                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2682                                                          push    eax                                             ;save modified regs
  2683                                                          jmp     hwwint                                          ;end interrupt and return
  2684                                  ;-----------------------------------------------------------------------------------------------------------------------
  2685                                  ;
  2686                                  ;       IRQ15   Reserved Hardware Interrupt
  2687                                  ;
  2688                                  ;-----------------------------------------------------------------------------------------------------------------------
  2689                                                          menter  irq15                                           ;reserved
  2690                                                          push    eax                                             ;save modified regs
  2691                                                          jmp     hwwint                                          ;end interrupt and return
  2692                                  ;-----------------------------------------------------------------------------------------------------------------------
  2693                                  ;
  2694                                  ;       Exit from hardware interrupt
  2695                                  ;
  2696                                  ;-----------------------------------------------------------------------------------------------------------------------
  2697                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2698                                                          jmp     hwint90                                         ;skip ahead
  2699                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2700                                  hwint90                 pop     eax                                             ;restore modified regs
  2701                                                          iretd                                                   ;return from interrupt
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703                                  ;
  2704                                  ;       INT 30h Operating System Software Service Interrupt
  2705                                  ;
  2706                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2707                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2708                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2709                                  ;       the entry address of the specific function from a table.
  2710                                  ;
  2711                                  ;-----------------------------------------------------------------------------------------------------------------------
  2712                                                          menter  svc
  2713                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2714                                                          jae     svc90                                           ;yes, skip ahead
  2715                                                          movzx   eax,al                                          ;function
  2716                                                          shl     eax,2                                           ;offset into table
  2717                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2718                                  svc90                   iretd                                                   ;return from interrupt
  2719                                  ;-----------------------------------------------------------------------------------------------------------------------
  2720                                  ;
  2721                                  ;       Service Request Table
  2722                                  ;
  2723                                  ;
  2724                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2725                                  ;
  2726                                  ;-----------------------------------------------------------------------------------------------------------------------
  2727                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2728                                                          tsvce   CompareMemory                                   ;compare memory
  2729                                                          tsvce   GetConsoleString                                ;get string input
  2730                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2731                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2732                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2733                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2734                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2735                                                          tsvce   UpperCaseString                                 ;upper-case string
  2736                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2737                                  ;-----------------------------------------------------------------------------------------------------------------------
  2738                                  ;
  2739                                  ;       Service Request Macros
  2740                                  ;
  2741                                  ;       These macros provide positional parameterization of service request calls.
  2742                                  ;
  2743                                  ;-----------------------------------------------------------------------------------------------------------------------
  2744                                  %macro                  clearConsoleScreen 0
  2745                                                          mov     al,eClearConsoleScreen                          ;function code
  2746                                                          int     _svc                                            ;invoke OS service
  2747                                  %endmacro
  2748                                  %macro                  compareMemory 0
  2749                                                          mov     al,eCompareMemory                               ;function code
  2750                                                          int     _svc                                            ;invoke OS service
  2751                                  %endmacro
  2752                                  %macro                  getConsoleString 4
  2753                                                          mov     edx,%1                                          ;buffer address
  2754                                                          mov     ecx,%2                                          ;max characters
  2755                                                          mov     bh,%3                                           ;echo indicator
  2756                                                          mov     bl,%4                                           ;terminator
  2757                                                          mov     al,eGetConsoleString                            ;function code
  2758                                                          int     _svc                                            ;invoke OS service
  2759                                  %endmacro
  2760                                  %macro                  hexadecimalToUnsigned 0
  2761                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2762                                                          int     _svc                                            ;invoke OS service
  2763                                  %endmacro
  2764                                  %macro                  placeCursor 0
  2765                                                          mov     al,ePlaceCursor                                 ;function code
  2766                                                          int     _svc                                            ;invoke OS service
  2767                                  %endmacro
  2768                                  %macro                  putConsoleString 1
  2769                                                          mov     edx,%1                                          ;string address
  2770                                                          mov     al,ePutConsoleString                            ;function code
  2771                                                          int     _svc                                            ;invoke OS service
  2772                                  %endmacro
  2773                                  %macro                  resetSystem 0
  2774                                                          mov     al,eResetSystem                                 ;function code
  2775                                                          int     _svc                                            ;invoke OS service
  2776                                  %endmacro
  2777                                  %macro                  unsignedToHexadecimal 0
  2778                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2779                                                          int     _svc                                            ;invoke OS service
  2780                                  %endmacro
  2781                                  %macro                  upperCaseString 0
  2782                                                          mov     al,eUpperCaseString                             ;function code
  2783                                                          int     _svc                                            ;invoke OS service
  2784                                  %endmacro
  2785                                  ;=======================================================================================================================
  2786                                  ;
  2787                                  ;       Kernel Function Library
  2788                                  ;
  2789                                  ;=======================================================================================================================
  2790                                  ;=======================================================================================================================
  2791                                  ;
  2792                                  ;       String Helper Routines
  2793                                  ;
  2794                                  ;       CompareMemory
  2795                                  ;       UpperCaseString
  2796                                  ;
  2797                                  ;=======================================================================================================================
  2798                                  ;-----------------------------------------------------------------------------------------------------------------------
  2799                                  ;
  2800                                  ;       Routine:        CompareMemory
  2801                                  ;
  2802                                  ;       Description:    This routine compares two byte arrays.
  2803                                  ;
  2804                                  ;       In:             DS:EDX  first source address
  2805                                  ;                       DS:EBX  second source address
  2806                                  ;                       ECX     comparison length
  2807                                  ;
  2808                                  ;       Out:            EDX     first source address
  2809                                  ;                       EBX     second source address
  2810                                  ;                       ECX     0       array 1 = array 2
  2811                                  ;                               <0      array 1 < array 2
  2812                                  ;                               >0      array 1 > array 2
  2813                                  ;
  2814                                  ;-----------------------------------------------------------------------------------------------------------------------
  2815                                  CompareMemory           push    esi                                             ;save non-volatile regs
  2816                                                          push    edi                                             ;
  2817                                                          push    es                                              ;
  2818                                                          push    ds                                              ;copy DS
  2819                                                          pop     es                                              ;... to ES
  2820                                                          mov     esi,edx                                         ;first source address
  2821                                                          mov     edi,ebx                                         ;second source address
  2822                                                          cld                                                     ;forward strings
  2823                                                          rep     cmpsb                                           ;compare bytes
  2824                                                          mov     al,0                                            ;default result
  2825                                                          jz      .10                                             ;branch if arrays equal
  2826                                                          mov     al,1                                            ;positive result
  2827                                                          jnc     .10                                             ;branch if target > source
  2828                                                          mov     al,-1                                           ;negative result
  2829                                  .10                     movsx   ecx,al                                          ;extend sign
  2830                                                          pop     es                                              ;restore non-volatile regs
  2831                                                          pop     edi                                             ;
  2832                                                          pop     esi                                             ;
  2833                                                          ret                                                     ;return
  2834                                  ;-----------------------------------------------------------------------------------------------------------------------
  2835                                  ;
  2836                                  ;       Routine:        UpperCaseString
  2837                                  ;
  2838                                  ;       Description:    This routine places all characters in the given string to upper case.
  2839                                  ;
  2840                                  ;       In:             DS:EDX  string address
  2841                                  ;
  2842                                  ;       Out:            EDX     string address
  2843                                  ;
  2844                                  ;-----------------------------------------------------------------------------------------------------------------------
  2845                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  2846                                                          mov     esi,edx                                         ;string address
  2847                                                          cld                                                     ;forward strings
  2848                                  .10                     lodsb                                                   ;string character
  2849                                                          test    al,al                                           ;null?
  2850                                                          jz      .20                                             ;yes, skip ahead
  2851                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2852                                                          jb      .10                                             ;no, continue
  2853                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2854                                                          ja      .10                                             ;no, continue
  2855                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  2856                                                          mov     [esi-1],al                                      ;upper character
  2857                                                          jmp     .10                                             ;continue
  2858                                  .20                     pop     esi                                             ;restore non-volatile regs
  2859                                                          ret                                                     ;return
  2860                                  ;=======================================================================================================================
  2861                                  ;
  2862                                  ;       Console Helper Routines
  2863                                  ;
  2864                                  ;       FirstConsoleColumn
  2865                                  ;       GetConsoleChar
  2866                                  ;       GetConsoleString
  2867                                  ;       NextConsoleColumn
  2868                                  ;       NextConsoleRow
  2869                                  ;       PreviousConsoleColumn
  2870                                  ;       PutConsoleChar
  2871                                  ;       PutConsoleHexByte
  2872                                  ;       PutConsoleHexDword
  2873                                  ;       PutConsoleHexWord
  2874                                  ;       PutConsoleOIAChar
  2875                                  ;       PutConsoleOIAShift
  2876                                  ;       PutConsoleString
  2877                                  ;       Yield
  2878                                  ;
  2879                                  ;=======================================================================================================================
  2880                                  ;-----------------------------------------------------------------------------------------------------------------------
  2881                                  ;
  2882                                  ;       Routine:        FirstConsoleColumn
  2883                                  ;
  2884                                  ;       Description:    This routine resets the console column to start of the row.
  2885                                  ;
  2886                                  ;       In:             DS      OS data selector
  2887                                  ;
  2888                                  ;-----------------------------------------------------------------------------------------------------------------------
  2889                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2890                                                          mov     [wbConsoleColumn],al                            ;save column
  2891                                                          ret                                                     ;return
  2892                                  ;-----------------------------------------------------------------------------------------------------------------------
  2893                                  ;
  2894                                  ;       Routine:        GetConsoleChar
  2895                                  ;
  2896                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2897                                  ;
  2898                                  ;       Out:            AL      ASCII character code
  2899                                  ;                       AH      keyboard scan code
  2900                                  ;
  2901                                  ;-----------------------------------------------------------------------------------------------------------------------
  2902                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2903                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  2904                                                          or      eax,eax                                         ;do we have a message?
  2905                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  2906                                                          push    eax                                             ;save key codes
  2907                                                          and     eax,0FFFF0000h                                  ;mask for message type
  2908                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2909                                                          pop     eax                                             ;restore key codes
  2910                                                          jne     GetConsoleChar                                  ;no, try again
  2911                                                          and     eax,0000ffffh                                   ;mask for key codes
  2912                                                          ret                                                     ;return
  2913                                  ;-----------------------------------------------------------------------------------------------------------------------
  2914                                  ;
  2915                                  ;       Routine:        GetConsoleString
  2916                                  ;
  2917                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2918                                  ;
  2919                                  ;       In:             DS:EDX  target buffer address
  2920                                  ;                       ECX     maximum number of characters to accept
  2921                                  ;                       BH      echo to terminal
  2922                                  ;                       BL      terminating character
  2923                                  ;
  2924                                  ;-----------------------------------------------------------------------------------------------------------------------
  2925                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  2926                                                          push    esi                                             ;
  2927                                                          push    edi                                             ;
  2928                                                          push    es                                              ;
  2929                                                          push    ds                                              ;load data segment selector ...
  2930                                                          pop     es                                              ;... into extra segment register
  2931                                                          mov     edi,edx                                         ;edi = target buffer
  2932                                                          push    ecx                                             ;save maximum characters
  2933                                                          xor     al,al                                           ;zero register
  2934                                                          cld                                                     ;forward strings
  2935                                                          rep     stosb                                           ;zero fill buffer
  2936                                                          pop     ecx                                             ;maximum characters
  2937                                                          mov     edi,edx                                         ;edi = target buffer
  2938                                                          mov     esi,edx                                         ;esi = target buffer
  2939                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  2940                                  .20                     call    GetConsoleChar                                  ;al = next input char
  2941                                                          cmp     al,bl                                           ;is this the terminator?
  2942                                                          je      .50                                             ;yes, exit
  2943                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2944                                                          jne     .30                                             ;no, skip ahead
  2945                                                          cmp     esi,edi                                         ;at start of buffer?
  2946                                                          je      .20                                             ;yes, get next character
  2947                                                          dec     edi                                             ;backup target pointer
  2948                                                          mov     byte [edi],0                                    ;zero previous character
  2949                                                          inc     ecx                                             ;increment remaining chars
  2950                                                          test    bh,1                                            ;echo to console?
  2951                                                          jz      .20                                             ;no, get next character
  2952                                                          call    PreviousConsoleColumn                           ;backup console position
  2953                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2954                                                          call    PutConsoleChar                                  ;write space to console
  2955                                                          call    PlaceCursor                                     ;position the cursor
  2956                                                          jmp     .20                                             ;get next character
  2957                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2958                                                          jb      .20                                             ;no, get another character
  2959                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2960                                                          ja      .20                                             ;no, get another character
  2961                                                          stosb                                                   ;store character in buffer
  2962                                                          test    bh,1                                            ;echo to console?
  2963                                                          jz      .40                                             ;no, skip ahead
  2964                                                          call    PutConsoleChar                                  ;write character to console
  2965                                                          call    NextConsoleColumn                               ;advance console position
  2966                                                          call    PlaceCursor                                     ;position the cursor
  2967                                  .40                     dec     ecx                                             ;decrement remaining chars
  2968                                                          jmp     .10                                             ;next
  2969                                  .50                     xor     al,al                                           ;null
  2970                                                          stosb                                                   ;terminate buffer
  2971                                                          pop     es                                              ;restore non-volatile regs
  2972                                                          pop     edi                                             ;
  2973                                                          pop     esi                                             ;
  2974                                                          pop     ecx                                             ;
  2975                                                          ret                                                     ;return
  2976                                  ;-----------------------------------------------------------------------------------------------------------------------
  2977                                  ;
  2978                                  ;       Routine:        NextConsoleColumn
  2979                                  ;
  2980                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2981                                  ;                       incremented if the end of the current row is reached.
  2982                                  ;
  2983                                  ;       In:             DS      OS data selector
  2984                                  ;
  2985                                  ;-----------------------------------------------------------------------------------------------------------------------
  2986                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2987                                                          inc     al                                              ;increment column
  2988                                                          mov     [wbConsoleColumn],al                            ;save column
  2989                                                          cmp     al,ECONCOLS                                     ;end of row?
  2990                                                          jb      .10                                             ;no, skip ahead
  2991                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2992                                                          call    NextConsoleRow                                  ;line feed to next row
  2993                                  .10                     ret                                                     ;return
  2994                                  ;-----------------------------------------------------------------------------------------------------------------------
  2995                                  ;
  2996                                  ;       Routine:        NextConsoleRow
  2997                                  ;
  2998                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2999                                  ;
  3000                                  ;       In:             DS      OS data selector
  3001                                  ;
  3002                                  ;-----------------------------------------------------------------------------------------------------------------------
  3003                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  3004                                                          inc     al                                              ;increment row
  3005                                                          mov     [wbConsoleRow],al                               ;save row
  3006                                                          cmp     al,ECONROWS                                     ;end of screen?
  3007                                                          jb      .10                                             ;no, skip ahead
  3008                                                          call    ScrollConsoleRow                                ;scroll up one row
  3009                                                          mov     al,[wbConsoleRow]                               ;row
  3010                                                          dec     al                                              ;decrement row
  3011                                                          mov     [wbConsoleRow],al                               ;save row
  3012                                  .10                     ret                                                     ;return
  3013                                  ;-----------------------------------------------------------------------------------------------------------------------
  3014                                  ;
  3015                                  ;       Routine:        PreviousConsoleColumn
  3016                                  ;
  3017                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3018                                  ;                       the column is set to the last position in the row and the row is decremented.
  3019                                  ;
  3020                                  ;       In:             DS      OS data selector
  3021                                  ;
  3022                                  ;-----------------------------------------------------------------------------------------------------------------------
  3023                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3024                                                          or      al,al                                           ;start of row?
  3025                                                          jnz     .10                                             ;no, skip ahead
  3026                                                          mov     ah,[wbConsoleRow]                               ;current row
  3027                                                          or      ah,ah                                           ;top of screen?
  3028                                                          jz      .20                                             ;yes, exit with no change
  3029                                                          dec     ah                                              ;decrement row
  3030                                                          mov     [wbConsoleRow],ah                               ;save row
  3031                                                          mov     al,ECONCOLS                                     ;set maximum column
  3032                                  .10                     dec     al                                              ;decrement column
  3033                                                          mov     [wbConsoleColumn],al                            ;save column
  3034                                  .20                     ret                                                     ;return
  3035                                  ;-----------------------------------------------------------------------------------------------------------------------
  3036                                  ;
  3037                                  ;       Routine:        PutConsoleChar
  3038                                  ;
  3039                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3040                                  ;
  3041                                  ;       In:             AL      ASCII character
  3042                                  ;                       DS      OS data selector
  3043                                  ;
  3044                                  ;-----------------------------------------------------------------------------------------------------------------------
  3045                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3046                                                          push    es                                              ;
  3047                                                          push    EGDTCGA                                         ;load CGA selector ...
  3048                                                          pop     es                                              ;... into extra segment reg
  3049                                                          mov     cl,[wbConsoleColumn]                            ;column
  3050                                                          mov     ch,[wbConsoleRow]                               ;row
  3051                                                          call    SetConsoleChar                                  ;put character at row, column
  3052                                                          pop     es                                              ;restore non-volatile regs
  3053                                                          pop     ecx                                             ;
  3054                                                          ret                                                     ;return
  3055                                  ;-----------------------------------------------------------------------------------------------------------------------
  3056                                  ;
  3057                                  ;       Routine:        PutConsoleHexByte
  3058                                  ;
  3059                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3060                                  ;
  3061                                  ;       In:             AL      byte value
  3062                                  ;                       CL      column
  3063                                  ;                       CH      row
  3064                                  ;                       DS      OS data selector
  3065                                  ;                       ES      CGA selector
  3066                                  ;
  3067                                  ;-----------------------------------------------------------------------------------------------------------------------
  3068                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  3069                                                          mov     bl,al                                           ;save byte value
  3070                                                          shr     al,4                                            ;hi-order nybble
  3071                                                          or      al,030h                                         ;apply ASCII zone
  3072                                                          cmp     al,03ah                                         ;numeric?
  3073                                                          jb      .10                                             ;yes, skip ahead
  3074                                                          add     al,7                                            ;add ASCII offset for alpha
  3075                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  3076                                                          mov     al,bl                                           ;byte value
  3077                                                          and     al,0fh                                          ;lo-order nybble
  3078                                                          or      al,30h                                          ;apply ASCII zone
  3079                                                          cmp     al,03ah                                         ;numeric?
  3080                                                          jb      .20                                             ;yes, skip ahead
  3081                                                          add     al,7                                            ;add ASCII offset for alpha
  3082                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  3083                                                          pop     ebx                                             ;restore non-volatile regs
  3084                                                          ret                                                     ;return
  3085                                  ;-----------------------------------------------------------------------------------------------------------------------
  3086                                  ;
  3087                                  ;       Routine:        PutConsoleHexDword
  3088                                  ;
  3089                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3090                                  ;
  3091                                  ;       In:             EAX     value
  3092                                  ;                       CL      column
  3093                                  ;                       CH      row
  3094                                  ;                       DS      OS data selector
  3095                                  ;                       ES      CGA selector
  3096                                  ;
  3097                                  ;-----------------------------------------------------------------------------------------------------------------------
  3098                                  PutConsoleHexDword      push    eax
  3099                                                          shr     eax,16
  3100                                                          call    PutConsoleHexWord
  3101                                                          pop     eax
  3102                                                          call    PutConsoleHexWord
  3103                                                          ret
  3104                                  ;-----------------------------------------------------------------------------------------------------------------------
  3105                                  ;
  3106                                  ;       Routine:        PutConsoleHexWord
  3107                                  ;
  3108                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3109                                  ;
  3110                                  ;       In:             EAX     value
  3111                                  ;                       CL      column
  3112                                  ;                       CH      row
  3113                                  ;                       DS      OS data selector
  3114                                  ;                       ES      CGA selector
  3115                                  ;
  3116                                  ;-----------------------------------------------------------------------------------------------------------------------
  3117                                  PutConsoleHexWord       push    eax
  3118                                                          shr     eax,8
  3119                                                          call    PutConsoleHexByte
  3120                                                          pop     eax
  3121                                                          call    PutConsoleHexByte
  3122                                                          ret
  3123                                  ;-----------------------------------------------------------------------------------------------------------------------
  3124                                  ;
  3125                                  ;       Routine:        PutConsoleOIAChar
  3126                                  ;
  3127                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3128                                  ;
  3129                                  ;       In:             DS      OS data selector
  3130                                  ;
  3131                                  ;-----------------------------------------------------------------------------------------------------------------------
  3132                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3133                                                          push    ecx                                             ;
  3134                                                          push    esi                                             ;
  3135                                                          push    ds                                              ;
  3136                                                          push    es                                              ;
  3137                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3138                                                          pop     ds                                              ;... into data segment register
  3139                                                          push    EGDTCGA                                         ;load CGA selector ...
  3140                                                          pop     es                                              ;... into extra segment register
  3141                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  3142                                                          mov     bh,ECONOIAROW                                   ;OIA row
  3143                                                          mov     bl,0                                            ;starting column
  3144                                                          mov     ecx,6                                           ;maximum scan codes
  3145                                  .10                     push    ecx                                             ;save remaining count
  3146                                                          mov     ecx,ebx                                         ;row, column
  3147                                                          lodsb                                                   ;read scan code
  3148                                                          or      al,al                                           ;scan code present?
  3149                                                          jz      .20                                             ;no, skip ahead
  3150                                                          call    PutConsoleHexByte                               ;display scan code
  3151                                                          jmp     .30                                             ;continue
  3152                                  .20                     mov     al,' '                                          ;ASCII space
  3153                                                          call    SetConsoleChar                                  ;display space
  3154                                                          mov     al,' '                                          ;ASCII space
  3155                                                          call    SetConsoleChar                                  ;display space
  3156                                  .30                     add     bl,2                                            ;next column (+2)
  3157                                                          pop     ecx                                             ;restore remaining
  3158                                                          loop    .10                                             ;next code
  3159                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  3160                                                          cmp     al,32                                           ;printable? (lower-bounds)
  3161                                                          jb      .40                                             ;no, skip ahead
  3162                                                          cmp     al,126                                          ;printable? (upper-bounds)
  3163                                                          ja      .40                                             ;no, skip ahead
  3164                                                          mov     ch,bh                                           ;OIA row
  3165                                                          mov     cl,40                                           ;character display column
  3166                                                          call    SetConsoleChar                                  ;display ASCII character
  3167                                  .40                     pop     es                                              ;restore non-volatile regs
  3168                                                          pop     ds                                              ;
  3169                                                          pop     esi                                             ;
  3170                                                          pop     ecx                                             ;
  3171                                                          pop     ebx                                             ;
  3172                                                          ret                                                     ;return
  3173                                  ;-----------------------------------------------------------------------------------------------------------------------
  3174                                  ;
  3175                                  ;       Routine:        PutConsoleOIAShift
  3176                                  ;
  3177                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3178                                  ;
  3179                                  ;       In:             BL      shift flags
  3180                                  ;                       BH      lock flags
  3181                                  ;                       DS      OS data selector
  3182                                  ;
  3183                                  ;-----------------------------------------------------------------------------------------------------------------------
  3184                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3185                                                          push    es                                              ;
  3186                                                          push    EGDTCGA                                         ;load CGA selector ...
  3187                                                          pop     es                                              ;... into ES register
  3188                                                          mov     ch,ECONOIAROW                                   ;OIA row
  3189                                                          mov     al,EASCIISPACE                                  ;space is default character
  3190                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3191                                                          jz      .10                                             ;no, skip ahead
  3192                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3193                                  .10                     mov     cl,14                                           ;indicator column
  3194                                                          call    SetConsoleChar                                  ;display ASCII character
  3195                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3196                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3197                                                          jz      .20                                             ;no, skip ahead
  3198                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3199                                  .20                     mov     cl,64                                           ;indicator column
  3200                                                          call    SetConsoleChar                                  ;display ASCII character
  3201                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3202                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3203                                                          jz      .30                                             ;no, skip ahead
  3204                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3205                                  .30                     mov     cl,15                                           ;indicator column
  3206                                                          call    SetConsoleChar                                  ;display ASCII character
  3207                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3208                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3209                                                          jz      .40                                             ;no, skip ahead
  3210                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3211                                  .40                     mov     cl,63                                           ;indicator column
  3212                                                          call    SetConsoleChar                                  ;display ASCII character
  3213                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3214                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3215                                                          jz      .50                                             ;no, skip ahead
  3216                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3217                                  .50                     mov     cl,16                                           ;indicator column
  3218                                                          call    SetConsoleChar                                  ;display ASCII character
  3219                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3220                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3221                                                          jz      .60                                             ;no, skip ahead
  3222                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3223                                  .60                     mov     cl,62                                           ;indicator column
  3224                                                          call    SetConsoleChar                                  ;display ASCII character
  3225                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3226                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3227                                                          jz      .70                                             ;no, skip ahead
  3228                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3229                                  .70                     mov     cl,78                                           ;indicator column
  3230                                                          call    SetConsoleChar                                  ;display ASCII character
  3231                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3232                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3233                                                          jz      .80                                             ;no, skip ahead
  3234                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  3235                                  .80                     mov     cl,77                                           ;indicator column
  3236                                                          call    SetConsoleChar                                  ;display ASCII character
  3237                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3238                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3239                                                          jz      .90                                             ;no, skip ahead
  3240                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3241                                  .90                     mov     cl,76                                           ;indicator column
  3242                                                          call    SetConsoleChar                                  ;display ASCII character
  3243                                                          pop     es                                              ;restore non-volatile regs
  3244                                                          pop     ecx                                             ;
  3245                                                          ret                                                     ;return
  3246                                  ;-----------------------------------------------------------------------------------------------------------------------
  3247                                  ;
  3248                                  ;       Routine:        PutConsoleString
  3249                                  ;
  3250                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3251                                  ;                       console position as needed.
  3252                                  ;
  3253                                  ;       In:             EDX     source address
  3254                                  ;                       DS      OS data selector
  3255                                  ;
  3256                                  ;-----------------------------------------------------------------------------------------------------------------------
  3257                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  3258                                                          mov     esi,edx                                         ;source address
  3259                                                          cld                                                     ;forward strings
  3260                                  .10                     lodsb                                                   ;ASCII character
  3261                                                          or      al,al                                           ;end of string?
  3262                                                          jz      .40                                             ;yes, skip ahead
  3263                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  3264                                                          jne     .20                                             ;no, skip ahead
  3265                                                          call    FirstConsoleColumn                              ;move to start of row
  3266                                                          jmp     .10                                             ;next character
  3267                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3268                                                          jne     .30                                             ;no, skip ahead
  3269                                                          call    NextConsoleRow                                  ;move to next row
  3270                                                          jmp     .10                                             ;next character
  3271                                  .30                     call    PutConsoleChar                                  ;output character to console
  3272                                                          call    NextConsoleColumn                               ;advance to next column
  3273                                                          jmp     .10                                             ;next character
  3274                                  .40                     pop     esi                                             ;restore non-volatile regs
  3275                                                          ret                                                     ;return
  3276                                  ;-----------------------------------------------------------------------------------------------------------------------
  3277                                  ;
  3278                                  ;       Routine:        Yield
  3279                                  ;
  3280                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3281                                  ;
  3282                                  ;-----------------------------------------------------------------------------------------------------------------------
  3283                                  Yield                   sti                                                     ;enable maskagle interrupts
  3284                                                          hlt                                                     ;halt until external interrupt
  3285                                                          ret                                                     ;return
  3286                                  ;=======================================================================================================================
  3287                                  ;
  3288                                  ;       Data-Type Conversion Helper Routines
  3289                                  ;
  3290                                  ;       HexadecimalToUnsigned
  3291                                  ;       UnsignedToHexadecimal
  3292                                  ;
  3293                                  ;=======================================================================================================================
  3294                                  ;-----------------------------------------------------------------------------------------------------------------------
  3295                                  ;
  3296                                  ;       Routine:        HexadecimalToUnsigned
  3297                                  ;
  3298                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3299                                  ;
  3300                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  3301                                  ;
  3302                                  ;       Output:         EAX     unsigned integer value
  3303                                  ;
  3304                                  ;-----------------------------------------------------------------------------------------------------------------------
  3305                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  3306                                                          mov     esi,edx                                         ;source address
  3307                                                          xor     edx,edx                                         ;zero register
  3308                                  .10                     lodsb                                                   ;source byte
  3309                                                          test    al,al                                           ;end of string?
  3310                                                          jz      .30                                             ;yes, branch
  3311                                                          cmp     al,'9'                                          ;hexadecimal?
  3312                                                          jna     .20                                             ;no, skip ahead
  3313                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  3314                                  .20                     and     eax,0fh                                         ;remove ascii zone
  3315                                                          shl     edx,4                                           ;previous total x 16
  3316                                                          add     edx,eax                                         ;add prior value x 16
  3317                                                          jmp     .10                                             ;next
  3318                                  .30                     mov     eax,edx                                         ;result
  3319                                                          pop     esi                                             ;restore non-volatile regs
  3320                                                          ret                                                     ;return
  3321                                  ;-----------------------------------------------------------------------------------------------------------------------
  3322                                  ;
  3323                                  ;       Routine:        UnsignedToHexadecimal
  3324                                  ;
  3325                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  3326                                  ;
  3327                                  ;       Input:          DS:EDX  output buffer address
  3328                                  ;                       ECX     32-bit binary
  3329                                  ;
  3330                                  ;-----------------------------------------------------------------------------------------------------------------------
  3331                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  3332                                                          mov     edi,edx                                         ;output buffer address
  3333                                                          mov     edx,ecx                                         ;32-bit unsigned
  3334                                                          xor     ecx,ecx                                         ;zero register
  3335                                                          mov     cl,8                                            ;nybble count
  3336                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  3337                                                          mov     al,dl                                           ;????bbbb
  3338                                                          and     al,0fh                                          ;mask out bits 4-7
  3339                                                          or      al,30h                                          ;mask in ascii zone
  3340                                                          cmp     al,3ah                                          ;A through F?
  3341                                                          jb      .20                                             ;no, skip ahead
  3342                                                          add     al,7                                            ;41h through 46h
  3343                                  .20                     stosb                                                   ;store hexnum
  3344                                                          loop    .10                                             ;next nybble
  3345                                                          xor     al,al                                           ;zero reg
  3346                                                          stosb                                                   ;null terminate
  3347                                                          pop     edi                                             ;restore non-volatile regs
  3348                                                          ret                                                     ;return
  3349                                  ;=======================================================================================================================
  3350                                  ;
  3351                                  ;       Message Queue Helper Routines
  3352                                  ;
  3353                                  ;       GetMessage
  3354                                  ;       PutMessage
  3355                                  ;
  3356                                  ;=======================================================================================================================
  3357                                  ;-----------------------------------------------------------------------------------------------------------------------
  3358                                  ;
  3359                                  ;       Routine:        GetMessage
  3360                                  ;
  3361                                  ;       Description:    This routine reads and removes a message from the message queue.
  3362                                  ;
  3363                                  ;       Out:            EAX     lo-order message data
  3364                                  ;                       EDX     hi-order message data
  3365                                  ;
  3366                                  ;                       CY      0 = message read
  3367                                  ;                               1 = no message to read
  3368                                  ;
  3369                                  ;-----------------------------------------------------------------------------------------------------------------------
  3370                                  GetMessage              push    ebx                                             ;save non-volatile regs
  3371                                                          push    ecx                                             ;
  3372                                                          push    ds                                              ;
  3373                                                          push    ELDTMQ                                          ;load message queue selector ...
  3374                                                          pop     ds                                              ;... into data segment register
  3375                                                          mov     ebx,[MQHead]                                    ;head ptr
  3376                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  3377                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3378                                                          or      eax,edx                                         ;is queue empty?
  3379                                                          stc                                                     ;assume queue is emtpy
  3380                                                          jz      .20                                             ;yes, skip ahead
  3381                                                          xor     ecx,ecx                                         ;store zero
  3382                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  3383                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3384                                                          add     ebx,8                                           ;next queue element
  3385                                                          and     ebx,03fch                                       ;at end of queue?
  3386                                                          jnz     .10                                             ;no, skip ahead
  3387                                                          mov     bl,8                                            ;reset to 1st entry
  3388                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3389                                                          clc                                                     ;indicate message read
  3390                                  .20                     pop     ds                                              ;restore non-volatile regs
  3391                                                          pop     ecx                                             ;
  3392                                                          pop     ebx                                             ;
  3393                                                          ret                                                     ;return
  3394                                  ;-----------------------------------------------------------------------------------------------------------------------
  3395                                  ;
  3396                                  ;       Routine:        PutMessage
  3397                                  ;
  3398                                  ;       Description:    This routine adda a message to the message queue.
  3399                                  ;
  3400                                  ;       In:             ECX     hi-order data word
  3401                                  ;                       EDX     lo-order data word
  3402                                  ;
  3403                                  ;       Out:            CY      0 = success
  3404                                  ;                               1 = fail: queue is full
  3405                                  ;
  3406                                  ;-----------------------------------------------------------------------------------------------------------------------
  3407                                  PutMessage              push    ds                                              ;save non-volatile regs
  3408                                                          push    ELDTMQ                                          ;load task message queue selector ...
  3409                                                          pop     ds                                              ;... into data segment register
  3410                                                          mov     eax,[MQTail]                                    ;tail ptr
  3411                                                          cmp     dword [eax],0                                   ;is queue full?
  3412                                                          stc                                                     ;assume failure
  3413                                                          jne     .20                                             ;yes, cannot store
  3414                                                          mov     [eax],edx                                       ;store lo-order data
  3415                                                          mov     [eax+4],ecx                                     ;store hi-order data
  3416                                                          add     eax,8                                           ;next queue element adr
  3417                                                          and     eax,03fch                                       ;at end of queue?
  3418                                                          jnz     .10                                             ;no, skip ahead
  3419                                                          mov     al,8                                            ;reset to top of queue
  3420                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3421                                                          clc                                                     ;indicate success
  3422                                  .20                     pop     ds                                              ;restore non-volatile regs
  3423                                                          ret                                                     ;return
  3424                                  ;=======================================================================================================================
  3425                                  ;
  3426                                  ;       Memory-Mapped Video Routines
  3427                                  ;
  3428                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  3429                                  ;
  3430                                  ;       ClearConsoleScreen
  3431                                  ;       ScrollConsoleRow
  3432                                  ;       SetConsoleChar
  3433                                  ;       SetConsoleString
  3434                                  ;
  3435                                  ;=======================================================================================================================
  3436                                  ;-----------------------------------------------------------------------------------------------------------------------
  3437                                  ;
  3438                                  ;       Routine:        ClearConsoleScreen
  3439                                  ;
  3440                                  ;       Description:    This routine clears the console (CGA) screen.
  3441                                  ;
  3442                                  ;-----------------------------------------------------------------------------------------------------------------------
  3443                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  3444                                                          push    edi                                             ;
  3445                                                          push    ds                                              ;
  3446                                                          push    es                                              ;
  3447                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  3448                                                          pop     ds                                              ;... into DS register
  3449                                                          push    EGDTCGA                                         ;load CGA selector ...
  3450                                                          pop     es                                              ;... into ES register
  3451                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  3452                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  3453                                                          xor     edi,edi                                         ;target offset
  3454                                                          cld                                                     ;forward strings
  3455                                                          rep     stosd                                           ;reset screen body
  3456                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  3457                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3458                                                          rep     stosd                                           ;reset OIA line
  3459                                                          xor     al,al                                           ;zero register
  3460                                                          mov     [wbConsoleRow],al                               ;reset console row
  3461                                                          mov     [wbConsoleColumn],al                            ;reset console column
  3462                                                          call    PlaceCursor                                     ;place cursor at current position
  3463                                                          pop     es                                              ;restore non-volatile regs
  3464                                                          pop     ds                                              ;
  3465                                                          pop     edi                                             ;
  3466                                                          pop     ecx                                             ;
  3467                                                          ret                                                     ;return
  3468                                  ;-----------------------------------------------------------------------------------------------------------------------
  3469                                  ;
  3470                                  ;       Routine:        ScrollConsoleRow
  3471                                  ;
  3472                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  3473                                  ;
  3474                                  ;-----------------------------------------------------------------------------------------------------------------------
  3475                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  3476                                                          push    esi                                             ;
  3477                                                          push    edi                                             ;
  3478                                                          push    ds                                              ;
  3479                                                          push    es                                              ;
  3480                                                          push    EGDTCGA                                         ;load CGA video selector ...
  3481                                                          pop     ds                                              ;... into DS
  3482                                                          push    EGDTCGA                                         ;load CGA video selector ...
  3483                                                          pop     es                                              ;... into ES
  3484                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  3485                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  3486                                                          xor     edi,edi                                         ;EDI = target (line 1)
  3487                                                          cld                                                     ;forward strings
  3488                                                          rep     movsd                                           ;move 24 lines up
  3489                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  3490                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3491                                                          rep     stosd                                           ;clear bottom row
  3492                                                          pop     es                                              ;restore non-volatile regs
  3493                                                          pop     ds                                              ;
  3494                                                          pop     edi                                             ;
  3495                                                          pop     esi                                             ;
  3496                                                          pop     ecx                                             ;
  3497                                                          ret                                                     ;return
  3498                                  ;-----------------------------------------------------------------------------------------------------------------------
  3499                                  ;
  3500                                  ;       Routine:        SetConsoleChar
  3501                                  ;
  3502                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3503                                  ;
  3504                                  ;       In:             AL      ASCII character
  3505                                  ;                       CL      column
  3506                                  ;                       CH      row
  3507                                  ;                       ES      CGA selector
  3508                                  ;
  3509                                  ;       Out:            EAX     last target address written (ES:)
  3510                                  ;                       CL      column + 1
  3511                                  ;
  3512                                  ;-----------------------------------------------------------------------------------------------------------------------
  3513                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  3514                                                          movzx   eax,ch                                          ;row
  3515                                                          mov     ah,ECONCOLS                                     ;cols/row
  3516                                                          mul     ah                                              ;row * cols/row
  3517                                                          add     al,cl                                           ;add column
  3518                                                          adc     ah,0                                            ;handle carry
  3519                                                          shl     eax,1                                           ;screen offset
  3520                                                          mov     [es:eax],dl                                     ;store character
  3521                                                          inc     cl                                              ;next column
  3522                                                          ret                                                     ;return
  3523                                  ;-----------------------------------------------------------------------------------------------------------------------
  3524                                  ;
  3525                                  ;       Routine:        SetConsoleString
  3526                                  ;
  3527                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  3528                                  ;
  3529                                  ;       In:             ESI     source offset (DS:)
  3530                                  ;                       CL      column
  3531                                  ;                       CH      row
  3532                                  ;                       ES      CGA selector
  3533                                  ;
  3534                                  ;-----------------------------------------------------------------------------------------------------------------------
  3535                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  3536                                                          cld                                                     ;forward strings
  3537                                  .10                     lodsb                                                   ;next ASCII character
  3538                                                          test    al,al                                           ;end of string?
  3539                                                          jz      .20                                             ;yes, branch
  3540                                                          call    SetConsoleChar                                  ;store character
  3541                                                          jmp     .10                                             ;continue
  3542                                  .20                     pop     esi                                             ;restore non-volatile regs
  3543                                                          ret                                                     ;return
  3544                                  ;=======================================================================================================================
  3545                                  ;
  3546                                  ;       Input/Output Routines
  3547                                  ;
  3548                                  ;       These routines read and/or write directly to ports.
  3549                                  ;
  3550                                  ;       PlaceCursor
  3551                                  ;       PutPrimaryEndOfInt
  3552                                  ;       PutSecondaryEndOfInt
  3553                                  ;       ResetSystem
  3554                                  ;       SetKeyboardLamps
  3555                                  ;       WaitForKeyInBuffer
  3556                                  ;       WaitForKeyOutBuffer
  3557                                  ;
  3558                                  ;=======================================================================================================================
  3559                                  ;-----------------------------------------------------------------------------------------------------------------------
  3560                                  ;
  3561                                  ;       Routine:        PlaceCursor
  3562                                  ;
  3563                                  ;       Description:    This routine positions the cursor on the console.
  3564                                  ;
  3565                                  ;       In:             DS      OS data selector
  3566                                  ;
  3567                                  ;-----------------------------------------------------------------------------------------------------------------------
  3568                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  3569                                                          mov     al,[wbConsoleRow]                               ;AL = row
  3570                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  3571                                                          mul     ah                                              ;row offset
  3572                                                          add     al,[wbConsoleColumn]                            ;add column
  3573                                                          adc     ah,0                                            ;add overflow
  3574                                                          mov     ecx,eax                                         ;screen offset
  3575                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3576                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3577                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3578                                                          out     dx,al                                           ;select register
  3579                                                          inc     edx                                             ;data port
  3580                                                          mov     al,ch                                           ;hi-order cursor loc
  3581                                                          out     dx,al                                           ;store hi-order loc
  3582                                                          dec     edx                                             ;register select port
  3583                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3584                                                          out     dx,al                                           ;select register
  3585                                                          inc     edx                                             ;data port
  3586                                                          mov     al,cl                                           ;lo-order cursor loc
  3587                                                          out     dx,al                                           ;store lo-order loc
  3588                                                          pop     ecx                                             ;restore non-volatile regs
  3589                                                          ret                                                     ;return
  3590                                  ;-----------------------------------------------------------------------------------------------------------------------
  3591                                  ;
  3592                                  ;       Routine:        PutPrimaryEndOfInt
  3593                                  ;
  3594                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3595                                  ;
  3596                                  ;-----------------------------------------------------------------------------------------------------------------------
  3597                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  3598                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3599                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3600                                                          ret                                                     ;return
  3601                                  ;-----------------------------------------------------------------------------------------------------------------------
  3602                                  ;
  3603                                  ;       Routine:        PutSecondaryEndOfInt
  3604                                  ;
  3605                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3606                                  ;
  3607                                  ;-----------------------------------------------------------------------------------------------------------------------
  3608                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3609                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3610                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3611                                                          ret                                                     ;return
  3612                                  ;-----------------------------------------------------------------------------------------------------------------------
  3613                                  ;
  3614                                  ;       Routine:        ResetSystem
  3615                                  ;
  3616                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3617                                  ;
  3618                                  ;       Out:            N/A     This routine does not return.
  3619                                  ;
  3620                                  ;-----------------------------------------------------------------------------------------------------------------------
  3621                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3622                                                          loop    $                                               ;clear interrupts
  3623                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3624                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3625                                  .10                     sti                                                     ;enable maskable interrupts
  3626                                                          hlt                                                     ;halt until interrupt
  3627                                                          jmp     .10                                             ;repeat until reset kicks in
  3628                                  ;-----------------------------------------------------------------------------------------------------------------------
  3629                                  ;
  3630                                  ;       Routine:        SetKeyboardLamps
  3631                                  ;
  3632                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3633                                  ;
  3634                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3635                                  ;
  3636                                  ;-----------------------------------------------------------------------------------------------------------------------
  3637                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3638                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3639                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  3640                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3641                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3642                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3643                                                          mov     al,bh                                           ;set/reset lamps value
  3644                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  3645                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3646                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3647                                                          ret                                                     ;return
  3648                                  ;-----------------------------------------------------------------------------------------------------------------------
  3649                                  ;
  3650                                  ;       Routine:        WaitForKeyInBuffer
  3651                                  ;
  3652                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3653                                  ;
  3654                                  ;       Out:            ZF      1 = Input buffer ready
  3655                                  ;                               0 = Input buffer not ready after timeout
  3656                                  ;
  3657                                  ;-----------------------------------------------------------------------------------------------------------------------
  3658                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3659                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3660                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3661                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  3662                                                          loopnz  .10                                             ;yes, repeat till timeout
  3663                                                          pop     ecx                                             ;restore non-volatile regs
  3664                                                          ret                                                     ;return
  3665                                  ;-----------------------------------------------------------------------------------------------------------------------
  3666                                  ;
  3667                                  ;       Routine:        WaitForKeyOutBuffer
  3668                                  ;
  3669                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3670                                  ;
  3671                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3672                                  ;                               0 = Output buffer empty after timeout
  3673                                  ;
  3674                                  ;-----------------------------------------------------------------------------------------------------------------------
  3675                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3676                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3677                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3678                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  3679                                                          loopz   .10                                             ;loop until output buffer bit
  3680                                                          pop     ecx                                             ;restore non-volatile regs
  3681                                                          ret                                                     ;return
  3682                                  ;-----------------------------------------------------------------------------------------------------------------------
  3683                                  ;
  3684                                  ;       End of the Kernel Function Library
  3685                                  ;
  3686                                  ;-----------------------------------------------------------------------------------------------------------------------
  3687                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  3688                                  ;=======================================================================================================================
  3689                                  ;
  3690                                  ;       Console Task
  3691                                  ;
  3692                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3693                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3694                                  ;       screen and responds to user commands.
  3695                                  ;
  3696                                  ;=======================================================================================================================
  3697                                  ;-----------------------------------------------------------------------------------------------------------------------
  3698                                  ;
  3699                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3700                                  ;
  3701                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3702                                  ;
  3703                                  ;-----------------------------------------------------------------------------------------------------------------------
  3704                                  section                 constack                                                ;console task stack
  3705                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  3706                                  ;-----------------------------------------------------------------------------------------------------------------------
  3707                                  ;
  3708                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3709                                  ;
  3710                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3711                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3712                                  ;       16 descriptors. Six are initially defined.
  3713                                  ;
  3714                                  ;-----------------------------------------------------------------------------------------------------------------------
  3715                                  section                 conldt                                                  ;console local descriptors
  3716                                                          dq      004093004780007Fh                               ;04 TSS alias
  3717                                                          dq      004093004700007Fh                               ;0c LDT alias
  3718                                                          dq      00409300400006FFh                               ;14 stack
  3719                                                          dq      00CF93000000FFFFh                               ;1c data
  3720                                                          dq      00409B0050000FFFh                               ;24 code
  3721                                                          dq      00409300480007FFh                               ;2c message queue
  3722                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3723                                  ;-----------------------------------------------------------------------------------------------------------------------
  3724                                  ;
  3725                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3726                                  ;
  3727                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3728                                  ;       segment. CS to console code.
  3729                                  ;
  3730                                  ;-----------------------------------------------------------------------------------------------------------------------
  3731                                  section                 contss                                                  ;console task state segment
  3732                                                          dd      0                                               ;00 back-link tss
  3733                                                          dd      0700h                                           ;04 esp ring 0
  3734                                                          dd      0014h                                           ;08 ss ring 0
  3735                                                          dd      0700h                                           ;0c esp ring 1
  3736                                                          dd      0014h                                           ;10 es ring 1
  3737                                                          dd      0700h                                           ;14 esp ring 2
  3738                                                          dd      0014h                                           ;18 ss ring 2
  3739                                                          dd      0                                               ;1c cr ring 3
  3740                                                          dd      0                                               ;20 eip
  3741                                                          dd      0200h                                           ;24 eflags
  3742                                                          dd      0                                               ;28 eax
  3743                                                          dd      0                                               ;2c ecx
  3744                                                          dd      0                                               ;30 edx
  3745                                                          dd      0                                               ;34 ebx
  3746                                                          dd      0700h                                           ;38 esp ring 3
  3747                                                          dd      0                                               ;3c ebp
  3748                                                          dd      0                                               ;40 esi
  3749                                                          dd      0                                               ;44 edi
  3750                                                          dd      001Ch                                           ;48 es
  3751                                                          dd      0024h                                           ;4c cs
  3752                                                          dd      0014h                                           ;50 ss ring 3
  3753                                                          dd      001Ch                                           ;54 ds
  3754                                                          dd      0                                               ;58 fs
  3755                                                          dd      0                                               ;5c gs
  3756                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3757                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3758                                  ;-----------------------------------------------------------------------------------------------------------------------
  3759                                  ;
  3760                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3761                                  ;
  3762                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3763                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3764                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3765                                  ;       event.
  3766                                  ;
  3767                                  ;-----------------------------------------------------------------------------------------------------------------------
  3768                                  section                 conmque                                                 ;console message queue
  3769                                                          dd      8                                               ;head pointer
  3770                                                          dd      8                                               ;tail pointer
  3771                                                          times   510 dd 0                                        ;queue elements
  3772                                  ;-----------------------------------------------------------------------------------------------------------------------
  3773                                  ;
  3774                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3775                                  ;
  3776                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3777                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3778                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3779                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3780                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3781                                  ;       board input, echoing to the console screen and responding to user commands.
  3782                                  ;
  3783                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3784                                  ;
  3785                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3786                                  ;                               |  Real Mode Interrupt Vectors                  |
  3787                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3788                                  ;                               |  Reserved BIOS Memory Area                    |
  3789                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3790                                  ;                               |  Shared Kernel Memory Area                    |
  3791                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3792                                  ;                               |  Global Descriptor Table (GDT)                |
  3793                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3794                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3795                                  ;                       002000  +-----------------------------------------------+
  3796                                  ;                               |  Interrupt Handlers                           |
  3797                                  ;                               |  Kernel Function Library                      |
  3798                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3799                                  ;                               |  Console Task Stack Area                      |
  3800                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3801                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3802                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3803                                  ;                               |  Console Task Task State Segment (TSS)        |
  3804                                  ;                       004800  +-----------------------------------------------+
  3805                                  ;                               |  Console Task Message Queue                   |
  3806                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3807                                  ;                               |  Console Task Code                            |
  3808                                  ;                               |  Console Task Constants                       |
  3809                                  ;                       006000  +===============================================+
  3810                                  ;
  3811                                  ;-----------------------------------------------------------------------------------------------------------------------
  3812                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3813                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  3814                                  
  3815                                                          clearConsoleScreen                                      ;clear the console screen
  3816                                                          putConsoleString czTitle                                ;display startup message
  3817                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3818                                                          placeCursor                                             ;set CRT cursor location
  3819                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3820                                                          putConsoleString czNewLine                              ;newline
  3821                                  
  3822                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  3823                                                          mov     ebx,wzConsoleToken                              ;token buffer
  3824                                                          call    ConTakeToken                                    ;handle console input
  3825                                                          mov     edx,wzConsoleToken                              ;token buffer
  3826                                                          call    ConDetermineCommand                             ;determine command number
  3827                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  3828                                                          jb      .20                                             ;yes, branch
  3829                                  
  3830                                                          putConsoleString czUnknownCommand                       ;display error message
  3831                                  
  3832                                                          jmp     .10                                             ;next command
  3833                                  .20                     shl     eax,2                                           ;index into jump table
  3834                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  3835                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  3836                                                          call    eax                                             ;call command handler
  3837                                                          jmp     .10                                             ;next command
  3838                                  ;-----------------------------------------------------------------------------------------------------------------------
  3839                                  ;
  3840                                  ;       Routine:        ConInitializeData
  3841                                  ;
  3842                                  ;       Description:    This routine initializes console task variables.
  3843                                  ;
  3844                                  ;-----------------------------------------------------------------------------------------------------------------------
  3845                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  3846                                                          push    edi                                             ;
  3847                                                          push    es                                              ;
  3848                                  ;
  3849                                  ;       Initialize console work areas.
  3850                                  ;
  3851                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3852                                                          pop     es                                              ;... into extra segment register
  3853                                                          mov     edi,ECONDATA                                    ;OS console data address
  3854                                                          xor     al,al                                           ;initialization value
  3855                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  3856                                                          cld                                                     ;forward strings
  3857                                                          rep     stosb                                           ;initialize data
  3858                                  ;
  3859                                  ;       Restore and return.
  3860                                  ;
  3861                                                          pop     es                                              ;restore non-volatile regs
  3862                                                          pop     edi                                             ;
  3863                                                          pop     ecx                                             ;
  3864                                                          ret                                                     ;return
  3865                                  ;-----------------------------------------------------------------------------------------------------------------------
  3866                                  ;
  3867                                  ;       Routine:        ConTakeToken
  3868                                  ;
  3869                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3870                                  ;
  3871                                  ;       In:             DS:EDX  source buffer address
  3872                                  ;                       DS:EBX  target buffer address
  3873                                  ;
  3874                                  ;       Out:            DS:EDX  source buffer address
  3875                                  ;                       DS:EBX  target buffer address
  3876                                  ;
  3877                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3878                                  ;
  3879                                  ;-----------------------------------------------------------------------------------------------------------------------
  3880                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  3881                                                          push    edi                                             ;
  3882                                                          push    es                                              ;
  3883                                                          push    ds                                              ;load data segment selector ...
  3884                                                          pop     es                                              ;... into extra segment reg
  3885                                                          mov     esi,edx                                         ;source buffer address
  3886                                                          mov     edi,ebx                                         ;target buffer address
  3887                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3888                                                          cld                                                     ;forward strings
  3889                                  .10                     lodsb                                                   ;load byte
  3890                                                          cmp     al,EASCIISPACE                                  ;space?
  3891                                                          je      .10                                             ;yes, continue
  3892                                                          test    al,al                                           ;end of line?
  3893                                                          jz      .40                                             ;yes, branch
  3894                                  .20                     stosb                                                   ;store byte
  3895                                                          lodsb                                                   ;load byte
  3896                                                          test    al,al                                           ;end of line?
  3897                                                          jz      .40                                             ;no, continue
  3898                                                          cmp     al,EASCIISPACE                                  ;space?
  3899                                                          jne     .20                                             ;no, continue
  3900                                  .30                     lodsb                                                   ;load byte
  3901                                                          cmp     al,EASCIISPACE                                  ;space?
  3902                                                          je      .30                                             ;yes, continue
  3903                                                          dec     esi                                             ;pre-position
  3904                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3905                                                          mov     edi,edx                                         ;source buffer address
  3906                                  .50                     lodsb                                                   ;remaining byte
  3907                                                          stosb                                                   ;move to front of buffer
  3908                                                          test    al,al                                           ;end of line?
  3909                                                          jnz     .50                                             ;no, continue
  3910                                                          pop     es                                              ;restore non-volatile regs
  3911                                                          pop     edi                                             ;
  3912                                                          pop     esi                                             ;
  3913                                                          ret                                                     ;return
  3914                                  ;-----------------------------------------------------------------------------------------------------------------------
  3915                                  ;
  3916                                  ;       Routine:        ConDetermineCommand
  3917                                  ;
  3918                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3919                                  ;
  3920                                  ;       input:          DS:EDX  command address
  3921                                  ;
  3922                                  ;       output:         EAX     >=0     = command nbr
  3923                                  ;                               0       = unknown command
  3924                                  ;
  3925                                  ;-----------------------------------------------------------------------------------------------------------------------
  3926                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3927                                                          push    ecx                                             ;
  3928                                                          push    esi                                             ;
  3929                                                          push    edi                                             ;
  3930                                  
  3931                                                          upperCaseString                                         ;upper-case string at EDX
  3932                                  
  3933                                                          mov     esi,tConCmdTbl                                  ;commands table
  3934                                                          xor     edi,edi                                         ;intialize command number
  3935                                                          cld                                                     ;forward strings
  3936                                  .10                     lodsb                                                   ;command length
  3937                                                          movzx   ecx,al                                          ;command length
  3938                                                          jecxz   .20                                             ;branch if end of table
  3939                                                          mov     ebx,esi                                         ;table entry address
  3940                                                          add     esi,ecx                                         ;next table entry address
  3941                                  
  3942                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3943                                  
  3944                                                          jecxz   .20                                             ;branch if equal
  3945                                                          inc     edi                                             ;increment command nbr
  3946                                                          jmp     .10                                             ;repeat
  3947                                  .20                     mov     eax,edi                                         ;command number
  3948                                                          pop     edi                                             ;restore non-volatile regs
  3949                                                          pop     esi                                             ;
  3950                                                          pop     ecx                                             ;
  3951                                                          pop     ebx                                             ;
  3952                                                          ret                                                     ;return
  3953                                  ;-----------------------------------------------------------------------------------------------------------------------
  3954                                  ;
  3955                                  ;       Routine:        ConClear
  3956                                  ;
  3957                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  3958                                  ;
  3959                                  ;-----------------------------------------------------------------------------------------------------------------------
  3960                                  ConClear                clearConsoleScreen                                      ;clear console screen
  3961                                                          ret                                                     ;return
  3962                                  ;-----------------------------------------------------------------------------------------------------------------------
  3963                                  ;
  3964                                  ;       Routine:        ConExit
  3965                                  ;
  3966                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3967                                  ;
  3968                                  ;-----------------------------------------------------------------------------------------------------------------------
  3969                                  ConExit                 resetSystem                                             ;issue system reset
  3970                                                          ret                                                     ;return
  3971                                  ;-----------------------------------------------------------------------------------------------------------------------
  3972                                  ;
  3973                                  ;       Routine:        ConInt6
  3974                                  ;
  3975                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  3976                                  ;
  3977                                  ;-----------------------------------------------------------------------------------------------------------------------
  3978                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  3979                                                          ret                                                     ;return (not executed)
  3980                                  ;-----------------------------------------------------------------------------------------------------------------------
  3981                                  ;
  3982                                  ;       Routine:        ConMem
  3983                                  ;
  3984                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  3985                                  ;
  3986                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  3987                                  ;
  3988                                  ;-----------------------------------------------------------------------------------------------------------------------
  3989                                  ConMem                  push    ebx                                             ;save non-volatile regs
  3990                                                          push    esi                                             ;
  3991                                                          push    edi                                             ;
  3992                                  ;
  3993                                  ;       Update the source address if a parameter is given.
  3994                                  ;
  3995                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  3996                                                          mov     ebx,wzConsoleToken                              ;console command token address
  3997                                                          call    ConTakeToken                                    ;take first param as token
  3998                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  3999                                                          je      .10                                             ;no, branch
  4000                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4001                                  
  4002                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4003                                  
  4004                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  4005                                  ;
  4006                                  ;       Setup source address and row count.
  4007                                  ;
  4008                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  4009                                                          xor     ecx,ecx                                         ;zero register
  4010                                                          mov     cl,16                                           ;row count
  4011                                  ;
  4012                                  ;       Start the row with the source address in hexadecimal.
  4013                                  ;
  4014                                  .20                     push    ecx                                             ;save remaining rows
  4015                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  4016                                                          mov     edx,edi                                         ;output buffer address
  4017                                                          mov     ecx,esi                                         ;console memory address
  4018                                  
  4019                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  4020                                  
  4021                                                          add     edi,8                                           ;end of memory addr hexnum
  4022                                                          mov     al,' '                                          ;ascii space
  4023                                                          stosb                                                   ;store delimiter
  4024                                  ;
  4025                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  4026                                  ;
  4027                                                          xor     ecx,ecx                                         ;zero register
  4028                                                          mov     cl,16                                           ;loop count
  4029                                  .30                     push    ecx                                             ;save loop count
  4030                                                          lodsb                                                   ;memory byte
  4031                                                          mov     ah,al                                           ;memory byte
  4032                                                          shr     al,4                                            ;high-order in bits 3-0
  4033                                                          or      al,30h                                          ;apply ascii numeric zone
  4034                                                          cmp     al,3ah                                          ;numeric range?
  4035                                                          jb      .40                                             ;yes, skip ahead
  4036                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4037                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  4038                                                          mov     al,ah                                           ;low-order in bits 3-0
  4039                                                          and     al,0fh                                          ;mask out high-order bits
  4040                                                          or      al,30h                                          ;apply ascii numeric zone
  4041                                                          cmp     al,3ah                                          ;numeric range?
  4042                                                          jb      .50                                             ;yes, skip ahead
  4043                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4044                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  4045                                                          mov     al,' '                                          ;ascii space
  4046                                                          stosb                                                   ;store ascii space delimiter
  4047                                                          pop     ecx                                             ;loop count
  4048                                                          loop    .30                                             ;next
  4049                                  ;
  4050                                  ;       Output printable ASCII character section for the row.
  4051                                  ;
  4052                                                          sub     esi,16                                          ;reset source pointer
  4053                                                          mov     cl,16                                           ;loop count
  4054                                  .60                     lodsb                                                   ;source byte
  4055                                                          cmp     al,32                                           ;printable? (low-range test)
  4056                                                          jb      .70                                             ;no, skip ahead
  4057                                                          cmp     al,128                                          ;printable? (high-range test)
  4058                                                          jb      .80                                             ;yes, skip ahead
  4059                                  .70                     mov     al,' '                                          ;display space instead of printable
  4060                                  .80                     stosb                                                   ;store printable ascii byte
  4061                                                          loop    .60                                             ;next source byte
  4062                                                          xor     al,al                                           ;nul-terminator
  4063                                                          stosb                                                   ;terminate output line
  4064                                  ;
  4065                                  ;       Display constructed output buffer and newline.
  4066                                  ;
  4067                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  4068                                                          putConsoleString czNewLine                              ;display new line
  4069                                  ;
  4070                                  ;       Repeat until all lines displayed and preserve source address.
  4071                                  ;
  4072                                                          pop     ecx                                             ;remaining rows
  4073                                                          loop    .20                                             ;next row
  4074                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  4075                                                          pop     edi                                             ;restore regs
  4076                                                          pop     esi                                             ;
  4077                                                          pop     ebx                                             ;
  4078                                                          ret                                                     ;return
  4079                                  ;-----------------------------------------------------------------------------------------------------------------------
  4080                                  ;
  4081                                  ;       Routine:        ConVersion
  4082                                  ;
  4083                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  4084                                  ;
  4085                                  ;-----------------------------------------------------------------------------------------------------------------------
  4086                                  ConVersion              putConsoleString czTitle                                ;display version message
  4087                                                          ret                                                     ;return
  4088                                  ;-----------------------------------------------------------------------------------------------------------------------
  4089                                  ;
  4090                                  ;       Tables
  4091                                  ;
  4092                                  ;-----------------------------------------------------------------------------------------------------------------------
  4093                                                                                                                  ;---------------------------------------
  4094                                                                                                                  ;  Command Jump Table
  4095                                                                                                                  ;---------------------------------------
  4096                                  tConJmpTbl              equ     $                                               ;command jump table
  4097                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  4098                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  4099                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  4100                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  4101                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  4102                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  4103                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  4104                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  4105                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  4106                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  4107                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4108                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4109                                                                                                                  ;---------------------------------------
  4110                                                                                                                  ;  Command Name Table
  4111                                                                                                                  ;---------------------------------------
  4112                                  tConCmdTbl              equ     $                                               ;command name table
  4113                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  4114                                                          db      8,"VERSION",0                                   ;version command
  4115                                                          db      7,"MEMORY",0                                    ;memory command
  4116                                                          db      6,"CLEAR",0                                     ;clear command
  4117                                                          db      5,"EXIT",0                                      ;exit command
  4118                                                          db      5,"INT6",0                                      ;int6 command
  4119                                                          db      5,"QUIT",0                                      ;quit command
  4120                                                          db      4,"CLS",0                                       ;cls command
  4121                                                          db      4,"MEM",0                                       ;mem command
  4122                                                          db      4,"VER",0                                       ;ver command
  4123                                                          db      0                                               ;end of table
  4124                                  ;-----------------------------------------------------------------------------------------------------------------------
  4125                                  ;
  4126                                  ;       Constants
  4127                                  ;
  4128                                  ;-----------------------------------------------------------------------------------------------------------------------
  4129                                  czNewLine               db      13,10,0                                         ;new line string
  4130                                  czPrompt                db      ":",0                                           ;prompt string
  4131                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  4132                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  4133                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  4134                                  %endif
  4135                                  %ifdef BUILDDISK
  4136                                  ;-----------------------------------------------------------------------------------------------------------------------
  4137                                  ;
  4138                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  4139                                  ;
  4140                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4141                                  ;
  4142                                  ;-----------------------------------------------------------------------------------------------------------------------
  4143                                  section                 unused                                                  ;unused disk space
  4144                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  4145                                  %endif
  4146                                  ;=======================================================================================================================
  4147                                  ;
  4148                                  ;       End of Program Code
  4149                                  ;
  4150                                  ;=======================================================================================================================
