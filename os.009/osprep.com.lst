     1                                  ;-----------------------------------------------------------------------------------------------------------------------
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.009
     6                                  ;
     7                                  ;	Description:	In this sample, the console task is expanded to support commands that take parameters and new
     8                                  ;			commands "mem" and "memory".
     9                                  ;
    10                                  ;	Revised:	January 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;
    51                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    52                                  ;			Assembly operands begin in column 33.
    53                                  ;			Lines should not extend beyond column 120.
    54                                  ;
    55                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock)
    56                                  ;			Routine names begin with a verb (Get, Read, etc.)
    57                                  ;
    58                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    59                                  ;			Constant stored values are named in camel case, starting with 'c'.
    60                                  ;			The 2nd letter of the constant label indicates the storage type.
    61                                  ;
    62                                  ;			cq......	constant quad-word (dq)
    63                                  ;			cd......	constant double-word (dd)
    64                                  ;			cw......	constant word (dw)
    65                                  ;			cb......	constant byte (db)
    66                                  ;			cz......	constant ASCIIZ (null-terminated) string
    67                                  ;
    68                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    69                                  ;			The 2nd letter of the variable label indicates the storage type.
    70                                  ;
    71                                  ;			wq......	variable quad-word (resq)
    72                                  ;			wd......	variable double-word (resd)
    73                                  ;			ww......	variable word (resw)
    74                                  ;			wb......	variable byte (resb)
    75                                  ;
    76                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    77                                  ;			Structure names do not begin with a verb.
    78                                  ;
    79                                  ;	Macros:		Macro names are in camel case (getDateString).
    80                                  ;			Macro names do begin with a verb.
    81                                  ;
    82                                  ;	Registers:	Registers EBX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    83                                  ;			Registers EAX and ECX are preferred for returning response/result values.
    84                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
    85                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
    86                                  ;
    87                                  ;-----------------------------------------------------------------------------------------------------------------------
    88                                  ;-----------------------------------------------------------------------------------------------------------------------
    89                                  ;
    90                                  ;	Equates
    91                                  ;
    92                                  ;	The equate (equ) statements define symbolic names for fixed values so that these values can be defined and
    93                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
    94                                  ;	values are used. Equate names are in all-caps and are the only symbolic names that begin with the letter 'E'.
    95                                  ;	Equates are grouped into related sets. Hardware-based values are listed first, followed by BIOS and protocol
    96                                  ;	values and, lastly, application values.
    97                                  ;
    98                                  ;-----------------------------------------------------------------------------------------------------------------------
    99                                  ;-----------------------------------------------------------------------------------------------------------------------
   100                                  ;
   101                                  ;	8042 Keyboard Controller						EKEY...
   102                                  ;
   103                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   104                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 0x64 is set to zero.
   105                                  ;
   106                                  ;-----------------------------------------------------------------------------------------------------------------------
   107                                  EKEYPORTDATA		equ	060h						;8042 data port
   108                                  EKEYPORTSTAT		equ	064h						;8042 status port
   109                                  EKEYCMDRESET		equ	0FEh						;8042 drive B0 low to restart
   110                                  EKEYBITOUT		equ	001h						;8042 output buffer status bit
   111                                  EKEYBITIN		equ	002h						;8042 input buffer status bit
   112                                  EKEYCMDLAMPS		equ	0EDh						;8042 set/reset lamps command
   113                                  EKEYWAITLOOP		equ	010000h						;8042 wait loop
   114                                  										;---------------------------------------
   115                                  										;	Keyboard Scan Codes
   116                                  										;---------------------------------------
   117                                  EKEYCTRLDOWN		equ	01Dh						;control key down
   118                                  EKEYPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   119                                  EKEYSHIFTLDOWN		equ	02Ah						;left shift key down
   120                                  EKEYPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   121                                  EKEYSLASH		equ	035h						;slash
   122                                  EKEYSHIFTRDOWN		equ	036h						;right shift key down
   123                                  EKEYALTDOWN		equ	038h						;alt key down
   124                                  EKEYCAPSDOWN		equ	03Ah						;caps-lock down
   125                                  EKEYNUMDOWN		equ	045h						;num-lock down
   126                                  EKEYSCROLLDOWN		equ	046h						;scroll-lock down
   127                                  EKEYINSERTDOWN		equ	052h						;insert down (e0 52)
   128                                  EKEYUP			equ	080h						;up
   129                                  EKEYCTRLUP		equ	09Dh						;control key up
   130                                  EKEYSHIFTLUP		equ	0AAh						;left shift key up
   131                                  EKEYSLASHUP		equ	0B5h						;slash key up
   132                                  EKEYSHIFTRUP		equ	0B6h						;right shift key up
   133                                  EKEYPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   134                                  EKEYALTUP		equ	0B8h						;alt key up
   135                                  EKEYCAPSUP		equ	0BAh						;caps-lock up
   136                                  EKEYNUMUP		equ	0C5h						;num-lock up
   137                                  EKEYSCROLLUP		equ	0C6h						;scroll-lock up
   138                                  EKEYINSERTUP		equ	0D2h						;insert up (e0 d2)
   139                                  EKEYCODEEXT0		equ	0E0h						;8042 extended scan code 0
   140                                  EKEYCODEEXT1		equ	0E1h						;8042 extended scan code 1
   141                                  ;-----------------------------------------------------------------------------------------------------------------------
   142                                  ;
   143                                  ;	8253 Programmable Interrupt Timer					EPIT...
   144                                  ;
   145                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   146                                  ;	approximately 18.2 times per second.
   147                                  ;
   148                                  ;-----------------------------------------------------------------------------------------------------------------------
   149                                  EPITDAYTICKS		equ	1800B0h						;8253 ticks per day
   150                                  ;-----------------------------------------------------------------------------------------------------------------------
   151                                  ;
   152                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   153                                  ;
   154                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   155                                  ;	external devices and signals a hardware interrupt to the CPU.
   156                                  ;
   157                                  ;-----------------------------------------------------------------------------------------------------------------------
   158                                  EPICPORTPRI		equ	020h						;8259 primary control port 0
   159                                  EPICPORTPRI1		equ	021h						;8259 primary control port 1
   160                                  EPICPORTSEC		equ	0A0h						;8259 secondary control port 0
   161                                  EPICPORTSEC1		equ	0A1h						;8259 secondary control port 1
   162                                  EPICEOI			equ	020h						;8259 non-specific EOI code
   163                                  ;-----------------------------------------------------------------------------------------------------------------------
   164                                  ;
   165                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   166                                  ;
   167                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   168                                  ;	for CGA, EGA, VGA and compatible video modes.
   169                                  ;
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ECRTPORTHI		equ	003h						;CRT controller port hi
   172                                  ECRTPORTLO		equ	0D4h						;CRT controller port lo
   173                                  ECRTCURLOCHI		equ	00Eh						;CRT cursor loc reg hi
   174                                  ECRTCURLOCLO		equ	00Fh						;CRT cursor loc reg lo
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   178                                  ;
   179                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  EFDCPORTHI		equ	003h						;FDC controller port hi
   183                                  EFDCPORTLOOUT		equ	0F2h						;FDC digital output register lo
   184                                  EFDCPORTLOSTAT		equ	0F4h						;FDC main status register lo
   185                                  EFDCSTATBUSY		equ	010h						;FDC main status is busy
   186                                  EFDCMOTOROFF		equ	00Ch						;FDC motor off / enable / DMA
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;	Motorola MC 146818 Real-Time Clock					ERTC...
   190                                  ;
   191                                  ;	The Motorola MC 146818 was the original real-time clock in PCs.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  ERTCREGPORT		equ	70h						;register select port
   195                                  ERTCDATAPORT		equ	71h						;data port
   196                                  ERTCSECONDREG		equ	00h						;second
   197                                  ERTCMINUTEREG		equ	02h						;minute
   198                                  ERTCHOURREG		equ	04h						;hour
   199                                  ERTCWEEKDAYREG		equ	06h						;weekday
   200                                  ERTCDAYREG		equ	07h						;day
   201                                  ERTCMONTHREG		equ	08h						;month
   202                                  ERTCYEARREG		equ	09h						;year of the century
   203                                  ERTCSTATUSREG		equ	0bh						;status
   204                                  ERTCCENTURYREG		equ	32h						;century
   205                                  ERTCBINARYVALS		equ	00000100b					;values are binary
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  ;
   208                                  ;	x86 Descriptor Access Codes						EACC...
   209                                  ;
   210                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   211                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   212                                  ;
   213                                  ;	0.......	Segment is not present in memory (triggers int 11)
   214                                  ;	1.......	Segment is present in memory
   215                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   216                                  ;	...0....	Segment is a system segment
   217                                  ;	...00010		Local Descriptor Table
   218                                  ;	...00101		Task Gate
   219                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   220                                  ;	...01100		Call Gate (386)
   221                                  ;	...01110		Interrupt Gate (386)
   222                                  ;	...01111		Trap Gate (386)
   223                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   224                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   225                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   226                                  ;
   227                                  ;-----------------------------------------------------------------------------------------------------------------------
   228                                  EACCLDT			equ	10000010b					;local descriptor table
   229                                  EACCTASK		equ	10000101b					;task gate
   230                                  EACCTSS			equ	10001001b					;task-state segment
   231                                  EACCGATE		equ	10001100b					;call gate
   232                                  EACCINT			equ	10001110b					;interrupt gate
   233                                  EACCTRAP		equ	10001111b					;trap gate
   234                                  EACCDATA		equ	10010011b					;upward writable data
   235                                  EACCCODE		equ	10011011b					;non-conforming readable code
   236                                  ;-----------------------------------------------------------------------------------------------------------------------
   237                                  ;
   238                                  ;	BIOS Interrupts and Functions						EBIOS...
   239                                  ;
   240                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   241                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   242                                  ;
   243                                  ;-----------------------------------------------------------------------------------------------------------------------
   244                                  EBIOSINTVIDEO		equ	010h						;BIOS video services interrupt
   245                                  EBIOSFNTTYOUTPUT	equ	00Eh						;BIOS video TTY output function
   246                                  EBIOSINTDISKETTE	equ	013h						;BIOS diskette services interrupt
   247                                  EBIOSINTMISC		equ	015h						;BIOS miscellaneous services interrupt
   248                                  EBIOSFNINITPROTMODE	equ	089h						;BIOS initialize protected mode fn
   249                                  EBIOSINTKEYBOARD	equ	016h						;BIOS keyboard services interrupt
   250                                  EBIOSFNKEYSTATUS	equ	001h						;BIOS keyboard status function
   251                                  ;-----------------------------------------------------------------------------------------------------------------------
   252                                  ;
   253                                  ;	ASCII									EASCII...
   254                                  ;
   255                                  ;-----------------------------------------------------------------------------------------------------------------------
   256                                  EASCIIBACKSPACE		equ	8						;ASCII backspace
   257                                  EASCIILINEFEED		equ	10						;ASCII line feed
   258                                  EASCIIRETURN		equ	13						;ASCII carriage return
   259                                  EASCIIESCAPE		equ	27						;ASCII escape
   260                                  EASCIISPACE		equ	32						;ASCII space
   261                                  EASCIIUPPERA		equ	65						;ASCII 'A'
   262                                  EASCIIUPPERZ		equ	90						;ASCII 'Z'
   263                                  EASCIILOWERA		equ	97						;ASCII 'a'
   264                                  EASCIILOWERZ		equ	122						;ASCII 'z'
   265                                  EASCIITILDE		equ	126						;ASCII '~'
   266                                  EASCIICASE		equ	00100000b					;ASCII case bit
   267                                  EASCIICASEMASK		equ	11011111b					;ASCII case mask
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;	Boot Sector and Loader Constants
   271                                  ;
   272                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   273                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   277                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   278                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   279                                  EBOOTSTACKTOP		equ	400h						;boot sector stack top relative to DS
   280                                  EMAXTRIES		equ	5						;max read retries
   281                                  ;-----------------------------------------------------------------------------------------------------------------------
   282                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   283                                  ;-----------------------------------------------------------------------------------------------------------------------
   284                                  ESELDAT			equ	18h						;kernel data selector
   285                                  ESELCGA			equ	20h						;cga video selector
   286                                  ESELOSCODE		equ	48h						;os kernel selector
   287                                  ;-----------------------------------------------------------------------------------------------------------------------
   288                                  ;	LDT Selectors								ESEL...
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  ESELMQ			equ	2Ch						;console task message queue
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  ;	Kernel Constants							EKRN...
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  EKRNDESLEN		equ	8						;size of descriptor
   295                                  EKRNADR			equ	1000h						;kernel base address
   296                                  EKRNSEG			equ	(EKRNADR >> 4)					;kernel base segment
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  ;	Keyboard Flags								EKEY...
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  EKEYCTRLLEFT		equ	00000001b					;left control
   301                                  EKEYSHIFTLEFT		equ	00000010b					;left shift
   302                                  EKEYALTLEFT		equ	00000100b					;left alt
   303                                  EKEYCTRLRIGHT		equ	00001000b					;right control
   304                                  EKEYSHIFTRIGHT		equ	00010000b					;right shift
   305                                  EKEYSHIFT		equ	00010010b					;left or right shift
   306                                  EKEYALTRIGHT		equ	00100000b					;right alt
   307                                  EKEYLOCKSCROLL		equ	00000001b					;scroll-lock flag
   308                                  EKEYLOCKNUM		equ	00000010b					;num-lock flag
   309                                  EKEYLOCKCAPS		equ	00000100b					;cap-lock flag
   310                                  EKEYTIMEOUT		equ	10000000b					;controller timeout
   311                                  ;-----------------------------------------------------------------------------------------------------------------------
   312                                  ;	Console Constants							ECON...
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  ECONCOLS		equ	80						;columns per row
   315                                  ECONROWS		equ	24						;console rows
   316                                  ECONOIAROW		equ	24						;operator information area row
   317                                  ECONCOLBYTES		equ	2						;bytes per column
   318                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   319                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   320                                  ECONCLEARDWORD		equ	07200720h					;attribute and ASCII space
   321                                  ECONOIADWORD		equ	70207020h					;attribute and ASCII space
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;	Kernel Message Identifiers						EMSG...
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  EMSGKEYDOWN		equ	41000000h					;message: key-down
   326                                  EMSGKEYUP		equ	41010000h					;message: key-up
   327                                  EMSGKEYCHAR		equ	41020000h					;message: character
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;
   330                                  ;	Structures
   331                                  ;
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  ;
   335                                  ;	DATETIME
   336                                  ;
   337                                  ;	The DATETIME structure stores date and time values from the real-time clock.
   338                                  ;
   339                                  ;-----------------------------------------------------------------------------------------------------------------------
   340                                  struc			DATETIME
   341 00000000 <res 00000001>          .second			resb	1						;seconds
   342 00000001 <res 00000001>          .minute			resb	1						;minutes
   343 00000002 <res 00000001>          .hour			resb	1						;hours
   344 00000003 <res 00000001>          .weekday		resb	1						;day of week
   345 00000004 <res 00000001>          .day			resb	1						;day of month
   346 00000005 <res 00000001>          .month			resb	1						;month of year
   347 00000006 <res 00000001>          .year			resb	1						;year of century
   348 00000007 <res 00000001>          .century		resb	1						;century
   349                                  EDATETIMEL		equ	($-.second)
   350                                  endstruc
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;
   353                                  ;	MQUEUE
   354                                  ;
   355                                  ;	The MQUEUE structure maps memory used for a message queue.
   356                                  ;
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  struc			MQUEUE
   359 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   360 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   361 00000008 <res 000003F8>          MQData			resd	254						;message queue
   362                                  endstruc
   363                                  ;-----------------------------------------------------------------------------------------------------------------------
   364                                  ;
   365                                  ;	OSDATA
   366                                  ;
   367                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   368                                  ;	used by the BIOS.
   369                                  ;
   370                                  ;-----------------------------------------------------------------------------------------------------------------------
   371                                  struc			OSDATA
   372 00000000 <res 00000400>          			resb	400h						;000 real mode interrupt vectors
   373 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   374 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   375 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   376 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   377 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   378 0000040A <res 00000002>          			resw	1						;40A LPT2 port address
   379 0000040C <res 00000002>          			resw	1						;40C LPT3 port address
   380 0000040E <res 00000002>          			resw	1						;40E LPT4 port address
   381 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   382 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   383 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12H
   384 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   385 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   386 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   387 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   388 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   389 0000041A <res 00000002>          			resw	1						;41A keyboard buffer head offset
   390 0000041C <res 00000002>          			resw	1						;41C keyboard buffer tail offset
   391 0000041E <res 00000020>          			resb	32						;41E keyboard buffer
   392 0000043E <res 00000001>          wbFDCStatus		resb	1						;43E drive recalibration status
   393 0000043F <res 00000001>          wbFDCControl		resb	1						;43F FDC motor status/control byte
   394 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   395 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   396 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   397 00000449 <res 00000001>          			resb	1						;449 current video mode
   398 0000044A <res 00000002>          			resw	1						;44A screen columns
   399 0000044C <res 00000002>          			resw	1						;44C video regen buffer size
   400 0000044E <res 00000002>          			resw	1						;44E current video page offset
   401 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   402 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   403 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   404 00000462 <res 00000001>          			resb	1						;462 active display page number
   405 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   406 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   407 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   408 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   409 00000469 <res 00000003>          			resb	3						;469 vague
   410 0000046C <res 00000004>          wfClockTicks		resd	1						;46C clock ticks
   411 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   412 00000471 <res 00000001>          			resb	1						;471 bios break flag
   413 00000472 <res 00000002>          			resw	1						;472 soft reset
   414 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   415 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   416 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   417 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   418 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   419 0000047C <res 00000004>          			resb	4						;47C COM timeout values
   420 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   421 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   422 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   423 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   424 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   425 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   426 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   427 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   428 0000048A <res 00000001>          			resb	1						;48A EGA+ display combination code
   429 0000048B <res 00000001>          			resb	1						;48B last diskette data rate selected
   430 0000048C <res 00000001>          			resb	1						;48C hard disk status from controller
   431 0000048D <res 00000001>          			resb	1						;48D hard disk error from controller
   432 0000048E <res 00000001>          			resb	1						;48E hard disk interrupt control flag
   433 0000048F <res 00000001>          			resb	1						;48F combination hard/floppy disk card
   434 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   435 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   436 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   437 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   438 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   439 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   440 0000049C <res 00000004>          			resd	1						;49C user wait time-out value in microseconds
   441 000004A0 <res 00000001>          			resb	1						;4A0 RTC wait function flag
   442 000004A1 <res 00000001>          			resb	1						;4A1 LANA DMA channel flags
   443 000004A2 <res 00000002>          			resb	2						;4A2 status of LANA 0,1
   444 000004A4 <res 00000004>          			resd	1						;4A4 saved hard disk interrupt vector
   445 000004A8 <res 00000004>          			resd	1						;4A8 BIOS video save/override pointer table addr
   446 000004AC <res 00000008>          			resb	8						;4AC reserved
   447 000004B4 <res 00000001>          			resb	1						;4B4 keyboard NMI control flags
   448 000004B5 <res 00000004>          			resd	1						;4B5 keyboard break pending flags
   449 000004B9 <res 00000001>          			resb	1						;4B9 Port 60 single byte queue
   450 000004BA <res 00000001>          			resb	1						;4BA scan code of last key
   451 000004BB <res 00000001>          			resb	1						;4BB NMI buffer head pointer
   452 000004BC <res 00000001>          			resb	1						;4BC NMI buffer tail pointer
   453 000004BD <res 00000010>          			resb	16						;4BD NMI scan code buffer
   454 000004CD <res 00000001>          			resb	1						;4CD unknown
   455 000004CE <res 00000002>          			resw	1						;4CE day counter
   456 000004D0 <res 00000020>          			resb	32						;4D0 unknown
   457 000004F0 <res 00000010>          			resb	16						;4F0 intra-app comm area
   458 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   459 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   460 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   461 00000505 <res 0000000A>          			resb	10						;505 POST work area
   462 0000050F <res 00000001>          			resb	1						;50F BASIC shell flag
   463 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   464 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   465 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   466 0000051A <res 00000004>          			resd	1						;51A BASIC INT 24 interrupt handler
   467 0000051E <res 00000002>          			resw	1						;51E unknown
   468 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   469 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1E)
   470 00000530 <res 00000004>          			resb	4						;530 MODE command
   471 00000534 <res 000001CC>          			resb	460						;534 unused
   472 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  ;
   475                                  ;	OS Variables								@disk: N/A	@mem: 000800
   476                                  ;
   477                                  ;	These operating system variables are system global. They are defined at low memory address 800h and are
   478                                  ;	accessible by any kernel task or interrupt.
   479                                  ;
   480                                  ;-----------------------------------------------------------------------------------------------------------------------
   481                                  ECONDATA		equ	($)
   482 00000800 <res 00000004>          wfConsoleMemAddr	resd	1						;console memory address
   483 00000804 <res 00000001>          wbConsoleColumn		resb	1						;console column
   484 00000805 <res 00000001>          wbConsoleRow		resb	1						;console row
   485 00000806 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   486 00000807 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   487 00000808 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   488 00000809 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   489 0000080A <res 00000001>          wbConsoleScan1		resb	1						;scan code
   490 0000080B <res 00000001>          wbConsoleScan2		resb	1						;scan code
   491 0000080C <res 00000001>          wbConsoleScan3		resb	1						;scan code
   492 0000080D <res 00000001>          wbConsoleScan4		resb	1						;scan code
   493 0000080E <res 00000001>          wbConsoleScan5		resb	1						;scan code
   494 0000080F <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   495 00000810 <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   496 00000860 <res 00000050>          wzConsoleToken		resb	80						;token buffer
   497 000008B0 <res 00000050>          wzConsoleOutBuffer	resb	80						;response output buffer
   498 00000900 <res 00000008>          wsConsoleDateTime	resb	EDATETIMEL					;date-time buffer
   499                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   500                                  endstruc
   501                                  ;-----------------------------------------------------------------------------------------------------------------------
   502                                  ;
   503                                  ;	Macros
   504                                  ;
   505                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   506                                  ;
   507                                  ;-----------------------------------------------------------------------------------------------------------------------
   508                                  %macro			mint	1
   509                                  _%1			equ	($-$$) / EKRNDESLEN
   510                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   511                                  %endmacro
   512                                  %macro			mtrap	1
   513                                  _%1			equ	($-$$) / EKRNDESLEN
   514                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   515                                  %endmacro
   516                                  %macro			menter	1
   517                                  ?%1			equ	($-$$)
   518                                  %endmacro
   519                                  %macro			tsvce	1
   520                                  e%1			equ	($-tsvc)/4
   521                                  			dd	%1
   522                                  %endmacro
   523                                  %ifdef BUILDBOOT
   524                                  ;-----------------------------------------------------------------------------------------------------------------------
   525                                  ;
   526                                  ;	Boot Sector Code							@disk: 000000	@mem: 007c00
   527                                  ;
   528                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   529                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   530                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   531                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   532                                  ;
   533                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   534                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   535                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   536                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   537                                  ;	immediately followed by a disk parameter table.
   538                                  ;
   539                                  ;-----------------------------------------------------------------------------------------------------------------------
   540                                  			cpu	8086						;assume minimal CPU
   541                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   542                                  			bits	16						;16-bit code at power-up
   543                                  %ifdef BUILDPREP
   544 00000000 E9FD01                  Boot			jmp	word Prep					;jump to preparation code
   545                                  %else
   546                                  Boot			jmp	word Boot.10					;jump over parameter table
   547                                  %endif
   548                                  ;-----------------------------------------------------------------------------------------------------------------------
   549                                  ;
   550                                  ;	Disk Parameter Table
   551                                  ;
   552                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   553                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   554                                  ;
   555                                  ;-----------------------------------------------------------------------------------------------------------------------
   556 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   557 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   558 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   559 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   560 00000010 02                      cbFatCount		db	2						;file allocation table copies
   561 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   562 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   563 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   564 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   565                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   566 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   567 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   568 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   569                                  ;
   570                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   571                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   572                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   573                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   574                                  ;	given several possible starting values for CS:IP.
   575                                  ;
   576                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   577 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   578                                  .@20			equ	$-$$						;.@20 = 021h
   579 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   580 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   581 00000025 B104                    			mov	cl,4						;shift count
   582 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   583 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   584 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   585                                  ;
   586                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we need DS and ES
   587                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   588                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   589                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   590                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   591                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   592                                  ;
   593 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   594 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   595 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   596 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp
   597 00000036 BC0004                  			mov	sp,EBOOTSTACKTOP				;SP = 0400
   598                                  ;
   599                                  ;	Our boot addressability is now set up according to the following diagram.
   600                                  ;
   601                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   602                                  ;				|  Unused (DOS Program Segment Prefix)		|
   603                                  ;			007c00	+-----------------------------------------------+ DS:0100
   604                                  ;				|  Boot Sector Code (vstart=100h)		|
   605                                  ;				|						|
   606                                  ;			007e00	+-----------------------------------------------+ DS:0300
   607                                  ;				|  Boot Stack					|
   608                                  ;	SS:SP --------> 007f00	+-----------------------------------------------+ DS:0400
   609                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   610                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   611                                  ;				|						|
   612                                  ;			009100	+-----------------------------------------------+ DS:1600
   613                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   614                                  ;				|						|
   615                                  ;			009300	+-----------------------------------------------+ DS:1800
   616                                  ;
   617                                  ;	On entry, DL indicates the drive being booted from.
   618                                  ;
   619 00000039 8816[F601]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   620                                  ;
   621                                  ;	Compute directory i/o buffer address.
   622                                  ;
   623 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   624 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   625 00000044 050004                  			add	ax,EBOOTSTACKTOP				;AX = 1600 = end of FAT buffer
   626 00000047 A3[EA01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1600
   627                                  ;
   628                                  ;	Compute segment where os.com will be loaded.
   629                                  ;
   630 0000004A D3E8                    			shr	ax,cl						;AX = 0160
   631 0000004C 01D8                    			add	ax,bx						;AX = 0160 + 07b0 = 0910
   632 0000004E 83E810                  			sub	ax,16						;AX = 0900
   633 00000051 A3[3A01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 0900
   634                                  ;
   635                                  ;	Write a message to the console so we know we have our addressability established.
   636                                  ;
   637 00000054 BE[BF01]                			mov	si,czLoadMsg					;loading message
   638 00000057 E84B01                  			call	BootPrint					;display loader message
   639                                  ;
   640                                  ;	Initialize the number of directory sectors to search.
   641                                  ;
   642 0000005A A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   643 0000005D A3[EC01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   644                                  ;
   645                                  ;	Compute number of directory sectors and initialize overhead count.
   646                                  ;
   647 00000060 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   648 00000062 F726[B201]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   649 00000066 F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   650 0000006A A3[EE01]                			mov	[wwOverhead],ax					;[overhead] = 000e
   651                                  ;
   652                                  ;	Compute directory entries per sector.
   653                                  ;
   654 0000006D 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   655 0000006E F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   656 00000070 A3[F001]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   657                                  ;
   658                                  ;	Compute first logical directory sector and update overhead count.
   659                                  ;
   660 00000073 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   661 00000076 F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   662 0000007A 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   663 0000007E 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   664 00000082 A3[F201]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   665 00000085 0106[EE01]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   666                                  ;
   667                                  ;	Read directory sector.
   668                                  ;
   669 00000089 B001                    .30			mov	al,1						;sector count
   670 0000008B A2[F401]                			mov	[wbReadCount],al				;[readcount] = 01
   671 0000008E 8B1E[EA01]              			mov	bx,[wwDirBuffer]				;BX = 1600
   672 00000092 E8A700                  			call	ReadSector					;read sector into es:bx
   673                                  ;
   674                                  ;	Setup variables to search this directory sector.
   675                                  ;
   676 00000095 A1[EC01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   677 00000098 3B06[F001]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   678 0000009C 7603                    			jna	.40						;no, continue
   679 0000009E A1[F001]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   680 000000A1 2906[EC01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   681 000000A5 BE[B401]                			mov	si,cbKernelProgram				;program name
   682 000000A8 8B3E[EA01]              			mov	di,[wwDirBuffer]				;DI = 1600
   683                                  ;
   684                                  ;	Loop through directory sectors searching for kernel program.
   685                                  ;
   686 000000AC 56                      .50			push	si						;save kernel name address
   687 000000AD 57                      			push	di						;save dir i/o buffer address
   688 000000AE B90B00                  			mov	cx,11						;length of 8+3 name
   689 000000B1 FC                      			cld							;forward strings
   690 000000B2 F3A6                    			repe	cmpsb						;compare entry name
   691 000000B4 5F                      			pop	di						;restore dir i/o buffer address
   692 000000B5 5E                      			pop	si						;restore kernel name address
   693 000000B6 7418                    			je	.60						;exit loop if found
   694 000000B8 033E[B201]              			add	di,[cwEntryLen]					;point to next dir entry
   695 000000BC 48                      			dec	ax						;decrement remaining entries
   696 000000BD 75ED                    			jnz	.50						;next entry
   697                                  ;
   698                                  ;	Repeat search if we are not at the end of the directory.
   699                                  ;
   700 000000BF FF06[F201]              			inc	word [wwLogicalSector]				;increment logical sector
   701 000000C3 833E[EC01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   702 000000C8 75BF                    			jne	.30						;no, get next sector
   703 000000CA BE[DB01]                			mov	si,czNoKernel					;missing kernel message
   704 000000CD E9C000                  			jmp	BootExit					;display message and exit
   705                                  ;
   706                                  ;	If we find the kernel program in the directory, read the FAT.
   707                                  ;
   708 000000D0 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   709 000000D3 A3[F201]                			mov	[wwLogicalSector],ax				;start past boot sector
   710 000000D6 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   711 000000D9 A2[F401]                			mov	[wbReadCount],al				;[readcount] = 09
   712 000000DC BB0004                  			mov	bx,EBOOTSTACKTOP				;BX = 0400
   713 000000DF E85A00                  			call	ReadSector					;read FAT into buffer
   714                                  ;
   715                                  ;	Get the starting cluster of the kernel program and target address.
   716                                  ;
   717 000000E2 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   718 000000E5 C41E[3801]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load address
   719                                  ;
   720                                  ;	Read each program cluster into RAM.
   721                                  ;
   722 000000E9 50                      .70			push	ax						;save cluster nbr
   723 000000EA 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   724 000000ED 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   725 000000F1 880E[F401]              			mov	[wbReadCount],cl				;save sectors to read
   726 000000F5 30ED                    			xor	ch,ch						;CX = sectors per cluster
   727 000000F7 F7E1                    			mul	cx						;DX:AX = logical cluster sector
   728 000000F9 0306[EE01]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   729 000000FD A3[F201]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   730 00000100 E83900                  			call	ReadSector					;read sectors into es:bx
   731                                  ;
   732                                  ;	Update buffer pointer for next cluster.
   733                                  ;
   734 00000103 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   735 00000106 30E4                    			xor	ah,ah						;AX = sectors per cluster
   736 00000108 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   737 0000010C 01C3                    			add	bx,ax						;BX = next cluster target address
   738 0000010E 58                      			pop	ax						;AX = restore cluster nbr
   739                                  ;
   740                                  ;	Compute next cluster number.
   741                                  ;
   742 0000010F 89C1                    			mov	cx,ax						;CX = cluster nbr
   743 00000111 89C7                    			mov	di,ax						;DI = cluster nbr
   744 00000113 D1E8                    			shr	ax,1						;AX = cluster/2
   745 00000115 89C2                    			mov	dx,ax						;DX = cluster/2
   746 00000117 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   747 00000119 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   748 0000011B 83E701                  			and	di,1						;get low bit
   749 0000011E 01C7                    			add	di,ax						;add one if cluster is odd
   750 00000120 81C70004                			add	di,EBOOTSTACKTOP				;add FAT buffer address
   751 00000124 8B05                    			mov	ax,[di]						;get cluster bytes
   752                                  ;
   753                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   754                                  ;
   755 00000126 F6C101                  			test	cl,1						;is cluster odd?
   756 00000129 7404                    			jz	.80						;no, skip ahead
   757 0000012B B104                    			mov	cl,4						;shift count
   758 0000012D D3E8                    			shr	ax,cl						;shift nybble low
   759 0000012F 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   760 00000132 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   761 00000135 75B2                    			jne	.70						;no, continue
   762                                  ;
   763                                  ;	Transfer control to the operating system program.
   764                                  ;
   765 00000137 EA                      			db	0EAh						;jmp seg:offset
   766 00000138 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   767 0000013A 0009                    wwLoadSegment		dw	0900h						;kernel entry segment (computed)
   768                                  ;
   769                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   770                                  ;
   771 0000013C A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   772 0000013F F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   773 00000143 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   774 00000145 A1[F201]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   775 00000148 F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   776 0000014A A2[F901]                			mov	[wbTrack],al					;[track] = cylinder
   777 0000014D 89D0                    			mov	ax,dx						;AX = cyl sector
   778 0000014F F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   779 00000153 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   780 00000155 A3[F701]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   781                                  ;
   782                                  ;	Try maxtries times to read sector.
   783                                  ;
   784 00000158 B90500                  			mov	cx,EMAXTRIES					;CX = 0005
   785 0000015B 53                      .10			push	bx						;save buffer address
   786 0000015C 51                      			push	cx						;save retry count
   787 0000015D 8B16[F601]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   788 00000161 8B0E[F801]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   789 00000165 A1[F401]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   790 00000168 CD13                    			int	EBIOSINTDISKETTE				;read sector
   791 0000016A 59                      			pop	cx						;restore retry count
   792 0000016B 5B                      			pop	bx						;restore buffer address
   793 0000016C 7343                    			jnc	BootReturn					;skip ahead if done
   794 0000016E E2EB                    			loop	.10						;retry
   795                                  ;
   796                                  ;	Handle disk error: convert to ASCII and store in error string.
   797                                  ;
   798 00000170 88E0                    			mov	al,ah						;AL = bios error code
   799 00000172 30E4                    			xor	ah,ah						;AX = bios error code
   800 00000174 B210                    			mov	dl,16						;divisor for base 16
   801 00000176 F6F2                    			div	dl						;AL = hi order, AH = lo order
   802 00000178 0D3030                  			or	ax,3030h					;apply ASCII zone bits
   803 0000017B 80FC3A                  			cmp	ah,3Ah						;range test ASCII numeral
   804 0000017E 7203                    			jb	.20						;continue if numeral
   805 00000180 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   806 00000183 3C3A                    .20			cmp	al,3Ah						;range test ASCII numeral
   807 00000185 7203                    			jb	.30						;continue if numeral
   808 00000187 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   809 0000018A A3[D801]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   810 0000018D BE[CD01]                			mov	si,czErrorMsg					;error message address
   811 00000190 E81200                  BootExit		call	BootPrint					;display messge to console
   812 00000193 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   813 00000195 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   814 00000197 7504                    			jnz	.20						;continue if key pressed
   815 00000199 FB                      			sti							;enable maskable interrupts
   816 0000019A F4                      			hlt							;wait for interrupt
   817 0000019B EBF6                    			jmp	.10						;repeat
   818 0000019D B0FE                    .20			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   819 0000019F E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
   820 000001A1 FB                      .30			sti							;enable maskable interrupts
   821 000001A2 F4                      			hlt							;stop until reset, int, nmi
   822 000001A3 EBFC                    			jmp	.30						;loop until restart kicks in
   823                                  ;
   824                                  ;	Display text message.
   825                                  ;
   826 000001A5 FC                      BootPrint		cld							;forward strings
   827 000001A6 AC                      			lodsb							;load next byte at DS:SI in AL
   828 000001A7 84C0                    			test	al,al						;end of string?
   829 000001A9 7406                    			jz	BootReturn					;... yes, exit our loop
   830 000001AB B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   831 000001AD CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   832 000001AF EBF4                    			jmp	BootPrint					;repeat until done
   833 000001B1 C3                      BootReturn		ret							;return
   834                                  ;-----------------------------------------------------------------------------------------------------------------------
   835                                  ;
   836                                  ;	Constants
   837                                  ;
   838                                  ;-----------------------------------------------------------------------------------------------------------------------
   839                                  			align	2
   840 000001B2 2000                    cwEntryLen		dw	32						;length of directory entry
   841 000001B4 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   841 000001BD 4F4D               
   842 000001BF 4C6F6164696E67202E-     czLoadMsg		db	"Loading ...",13,10,0				;loading message
   842 000001C8 2E2E0D0A00         
   843 000001CD 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   843 000001D6 7220               
   844 000001D8 202000                  wzErrorCode		db	20h,20h,0					;error code and null terminator
   845 000001DB 4F532E434F4D206D69-     czNoKernel		db	"OS.COM missing",0				;missing kernel message
   845 000001E4 7373696E6700       
   846                                  ;-----------------------------------------------------------------------------------------------------------------------
   847                                  ;
   848                                  ;	Work Areas
   849                                  ;
   850                                  ;-----------------------------------------------------------------------------------------------------------------------
   851                                  			align	2
   852 000001EA 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   853 000001EC 0000                    wwEntriesLeft		dw	0						;directory entries to search
   854 000001EE 0000                    wwOverhead		dw	0						;overhead sectors
   855 000001F0 0000                    wwSectorEntries		dw	0						;directory entries per sector
   856 000001F2 0000                    wwLogicalSector		dw	0						;current logical sector
   857                                  wwReadCountCommand	equ	$						;read count and command
   858 000001F4 00                      wbReadCount		db	0						;sectors to read
   859 000001F5 02                      cbReadCommand		db	2						;BIOS read disk fn code
   860                                  wwDriveHead		equ	$						;drive, head (word)
   861 000001F6 00                      wbDrive			db	0						;drive
   862 000001F7 00                      wbHead			db	0						;head
   863                                  wwSectorTrack		equ	$						;sector, track (word)
   864 000001F8 00                      			db	0						;sector
   865 000001F9 00                      wbTrack			db	0						;track
   866 000001FA 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   867 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   868                                  %endif
   869                                  %ifdef BUILDPREP
   870                                  ;-----------------------------------------------------------------------------------------------------------------------
   871                                  ;
   872                                  ;	Diskette Preparation Code
   873                                  ;
   874                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   875                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   876                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   877                                  ;
   878                                  ;-----------------------------------------------------------------------------------------------------------------------
   879                                  ;
   880                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   881                                  ;
   882 00000200 BE[CA02]                Prep			mov	si,czPrepMsg10					;starting message address
   883 00000203 E89FFF                  			call	BootPrint					;display message
   884                                  ;
   885                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   886                                  ;
   887 00000206 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   888 00000208 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   889 0000020A 7504                    			jnz	.12						;continue if key pressed
   890 0000020C FB                      			sti							;enable interrupts
   891 0000020D F4                      			hlt							;wait for interrupt
   892 0000020E EBF6                    			jmp	.10						;repeat
   893 00000210 3C0D                    .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   894 00000212 7407                    			je	.15						;yes, branch
   895 00000214 3C1B                    			cmp	al,EASCIIESCAPE					;Escape key pressed?
   896 00000216 75EE                    			jne	.10						;no, repeat
   897 00000218 E9A900                  			jmp	.90						;yes, exit program
   898                                  ;
   899                                  ;	Display writing-sector message and patch the JMP instruction.
   900                                  ;
   901 0000021B BE[6E04]                .15			mov	si,czPrepMsg12					;writing-sector message address
   902 0000021E E884FF                  			call	BootPrint					;display message
   903 00000221 BB[0100]                			mov	bx,Boot+1					;address of JMP instruction operand
   904 00000224 B81B00                  			mov	ax,01Bh						;address past disk parameter table
   905 00000227 8907                    			mov	[bx],ax						;update the JMP instruction
   906                                  ;
   907                                  ;	Try to read the boot sector.
   908                                  ;
   909 00000229 B90500                  			mov	cx,EMAXTRIES					;try up to five times
   910 0000022C 51                      .20			push	cx						;save remaining tries
   911 0000022D BB[760A]                			mov	bx,wcPrepInBuf					;input buffer address
   912 00000230 BA0000                  			mov	dx,0						;head zero, drive zero
   913 00000233 B90100                  			mov	cx,1						;track zero, sector one
   914 00000236 B80102                  			mov	ax,0201h					;read one sector
   915 00000239 CD13                    			int	EBIOSINTDISKETTE				;attempt the read
   916 0000023B 59                      			pop	cx						;restore remaining retries
   917 0000023C 7307                    			jnc	.30						;skip ahead if successful
   918 0000023E E2EC                    			loop	.20						;try again
   919 00000240 BE[9E04]                			mov	si,czPrepMsg20					;read-error message address
   920 00000243 EB2C                    			jmp	.50						;branch to error routine
   921                                  ;
   922                                  ;	Copy diskette parms from input buffer to output buffer.
   923                                  ;
   924 00000245 BE[760A]                .30			mov	si,wcPrepInBuf					;input buffer address
   925 00000248 83C60B                  			add	si,11						;skip over JMP and system ID
   926 0000024B BF[0000]                			mov	di,Boot						;output buffer address
   927 0000024E 83C70B                  			add	di,11						;skip over JMP and system ID
   928 00000251 B91300                  			mov	cx,19						;length of diskette parameters
   929 00000254 FC                      			cld							;forward string copies
   930 00000255 F3A4                    			rep	movsb						;copy diskette parameters
   931                                  ;
   932                                  ;	Try to write boot sector to diskette.
   933                                  ;
   934 00000257 B90500                  			mov	cx,EMAXTRIES					;try up to five times
   935 0000025A 51                      .40			push	cx						;save remaining tries
   936 0000025B BB[0000]                			mov	bx,Boot						;output buffer address
   937 0000025E BA0000                  			mov	dx,0						;head zero, drive zero
   938 00000261 B90100                  			mov	cx,1						;track zero, sector one
   939 00000264 B80103                  			mov	ax,0301h					;write one sector
   940 00000267 CD13                    			int	EBIOSINTDISKETTE				;attempt the write
   941 00000269 59                      			pop	cx						;restore remaining retries
   942 0000026A 7326                    			jnc	.80						;skip ahead if successful
   943 0000026C E2EC                    			loop	.40						;try again
   944 0000026E BE[EC04]                			mov	si,czPrepMsg30					;write-error message address
   945                                  ;
   946                                  ;	Convert the error code to ASCII and display the error message.
   947                                  ;
   948 00000271 50                      .50			push	ax						;save error code
   949 00000272 88E0                    			mov	al,ah						;copy error code
   950 00000274 B400                    			mov	ah,0						;AX = error code
   951 00000276 B210                    			mov	dl,10h						;hexadecimal divisor
   952 00000278 F6FA                    			idiv	dl						;AL = hi-order, AH = lo-order
   953 0000027A 0D3030                  			or	ax,3030h					;add ASCII zone digits
   954 0000027D 80FC3A                  			cmp	ah,3Ah						;AH ASCII numeral?
   955 00000280 7203                    			jb	.60						;yes, continue
   956 00000282 80C407                  			add	ah,7						;no, make ASCII 'A'-'F'
   957 00000285 3C3A                    .60			cmp	al,3Ah						;al ASCII numeral?
   958 00000287 7202                    			jb	.70						;yes, continue
   959 00000289 0407                    			add	al,7						;no, make ASCII
   960 0000028B 894411                  .70			mov	[si+17],ax					;put ASCII error code in message
   961 0000028E E814FF                  			call	BootPrint					;write error message
   962 00000291 58                      			pop	ax						;restore error code
   963                                  ;
   964                                  ;	Display the completion message.
   965                                  ;
   966 00000292 BE[3805]                .80			mov	si,czPrepMsgOK					;assume successful completion
   967 00000295 88E0                    			mov	al,ah						;BIOS return code
   968 00000297 3C00                    			cmp	al,0						;success?
   969 00000299 7426                    			je	.85						;yes, continue
   970 0000029B BE[D705]                			mov	si,czPrepMsgErr1				;disk parameter error message
   971 0000029E 3C01                    			cmp	al,1						;disk parameter error?
   972 000002A0 741F                    			je	.85						;yes, continue
   973 000002A2 BE[A106]                			mov	si,czPrepMsgErr2				;address mark not found message
   974 000002A5 3C02                    			cmp	al,2						;address mark not found?
   975 000002A7 7418                    			je	.85						;yes, continue
   976 000002A9 BE[2A07]                			mov	si,czPrepMsgErr3				;protected disk message
   977 000002AC 3C03                    			cmp	al,3						;protected disk?
   978 000002AE 7411                    			je	.85						;yes, continue
   979 000002B0 BE[E407]                			mov	si,czPrepMsgErr6				;diskette removed message
   980 000002B3 3C06                    			cmp	al,6						;diskette removed?
   981 000002B5 740A                    			je	.85						;yes, continue
   982 000002B7 BE[1409]                			mov	si,czPrepMsgErr80				;drive timed out message
   983 000002BA 3C80                    			cmp	al,80H						;drive timed out?
   984 000002BC 7403                    			je	.85						;yes, continue
   985 000002BE BE[C509]                			mov	si,czPrepMsgErrXX				;unknown error message
   986 000002C1 E8E1FE                  .85			call	BootPrint					;display result message
   987 000002C4 B8004C                  .90			mov	ax,4C00H					;terminate with zero result code
   988 000002C7 CD21                    			int	21h						;terminate DOS program
   989 000002C9 C3                      			ret							;return (should not execute)
   990                                  ;-----------------------------------------------------------------------------------------------------------------------
   991                                  ;
   992                                  ;	Diskette Preparation Messages
   993                                  ;
   994                                  ;-----------------------------------------------------------------------------------------------------------------------
   995 000002CA 0D0A437573746F6D4F-     czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   995 000002D3 5320426F6F742D4469-
   995 000002DC 736B65747465205072-
   995 000002E5 657061726174696F6E-
   995 000002EE 2050726F6772616D   
   996 000002F6 0D0A436F7079726967-     			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   996 000002FF 687420284329203230-
   996 00000308 31302D323031372044-
   996 00000311 61766964204A2E2057-
   996 0000031A 616C6C696E672E2041-
   996 00000323 6C6C20726967687473-
   996 0000032C 207265736572766564-
   996 00000335 2E                 
   997 00000336 0D0A                    			db	13,10
   998 00000338 0D0A54686973207072-     			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   998 00000341 6F6772616D206F7665-
   998 0000034A 727772697465732074-
   998 00000353 686520626F6F742073-
   998 0000035C 6563746F72206F6620-
   998 00000365 61206469736B657474-
   998 0000036E 652077697468207374-
   998 00000377 617274757020636F64-
   998 00000380 652074686174       
   999 00000386 0D0A77696C6C206C6F-     			db	13,10,"will load the operating system into memory when the computer is restarted."
   999 0000038F 616420746865206F70-
   999 00000398 65726174696E672073-
   999 000003A1 797374656D20696E74-
   999 000003AA 6F206D656D6F727920-
   999 000003B3 7768656E2074686520-
   999 000003BC 636F6D707574657220-
   999 000003C5 697320726573746172-
   999 000003CE 7465642E           
  1000 000003D2 0D0A546F2070726F63-     			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1000 000003DB 6565642C20706C6163-
  1000 000003E4 65206120666F726D61-
  1000 000003ED 74746564206469736B-
  1000 000003F6 6574746520696E746F-
  1000 000003FF 20647269766520413A-
  1000 00000408 20616E642070726573-
  1000 00000411 732074686520456E74-
  1000 0000041A 6572206B65792E     
  1001 00000421 0D0A546F2065786974-     			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
  1001 0000042A 20746869732070726F-
  1001 00000433 6772616D2077697468-
  1001 0000043C 6F7574207072657061-
  1001 00000445 72696E672061206469-
  1001 0000044E 736B657474652C2070-
  1001 00000457 726573732074686520-
  1001 00000460 457363617065206B65-
  1001 00000469 792E               
  1002 0000046B 0D0A00                  			db	13,10,0
  1003 0000046E 0D0A57726974696E67-     czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
  1003 00000477 2074686520626F6F74-
  1003 00000480 20736563746F722074-
  1003 00000489 6F2074686520646973-
  1003 00000492 6B65747465202E2E2E 
  1004 0000049B 0D0A00                  			db	13,10,0
  1005 0000049E 0D0A54686520657272-     czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1005 000004A7 6F722D636F6465202E-
  1005 000004B0 2E2077617320726574-
  1005 000004B9 75726E65642066726F-
  1005 000004C2 6D207468652042494F-
  1005 000004CB 53207768696C652072-
  1005 000004D4 656164696E67206672-
  1005 000004DD 6F6D20746865206469-
  1005 000004E6 736B2E             
  1006 000004E9 0D0A00                  			db	13,10,0
  1007 000004EC 0D0A54686520657272-     czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1007 000004F5 6F722D636F6465202E-
  1007 000004FE 2E2077617320726574-
  1007 00000507 75726E65642066726F-
  1007 00000510 6D207468652042494F-
  1007 00000519 53207768696C652077-
  1007 00000522 726974696E6720746F-
  1007 0000052B 20746865206469736B-
  1007 00000534 2E                 
  1008 00000535 0D0A00                  			db	13,10,0
  1009 00000538 0D0A54686520626F6F-     czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1009 00000541 742D736563746F7220-
  1009 0000054A 776173207772697474-
  1009 00000553 656E20746F20746865-
  1009 0000055C 206469736B65747465-
  1009 00000565 2E204265666F726520-
  1009 0000056E 626F6F74696E672079-
  1009 00000577 6F757220636F6D7075-
  1009 00000580 7465722077697468   
  1010 00000588 0D0A74686973206469-     			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1010 00000591 736B657474652C206D-
  1010 0000059A 616B65207375726520-
  1010 000005A3 746861742074686520-
  1010 000005AC 66696C65204F532E43-
  1010 000005B5 4F4D20697320636F70-
  1010 000005BE 696564206F6E746F20-
  1010 000005C7 746865206469736B65-
  1010 000005D0 7474652E           
  1011 000005D4 0D0A00                  			db	13,10,0
  1012 000005D7 0D0A2830312920496E-     czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
  1012 000005E0 76616C696420446973-
  1012 000005E9 6B20506172616D6574-
  1012 000005F2 6572               
  1013 000005F4 0D0A54686973206973-     			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
  1013 000005FD 20616E20696E746572-
  1013 00000606 6E616C206572726F72-
  1013 0000060F 206361757365642062-
  1013 00000618 7920616E20696E7661-
  1013 00000621 6C69642076616C7565-
  1013 0000062A 206265696E67207061-
  1013 00000633 7373656420746F2061-
  1013 0000063C 2073797374656D     
  1014 00000643 0D0A66756E6374696F-     			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1014 0000064C 6E2E20546865204F53-
  1014 00000655 424F4F542E434F4D20-
  1014 0000065E 66696C65206D617920-
  1014 00000667 626520636F72727570-
  1014 00000670 742E20436F7079206F-
  1014 00000679 7220646F776E6C6F61-
  1014 00000682 64207468652066696C-
  1014 0000068B 6520616761696E     
  1015 00000692 0D0A616E6420726574-     			db	13,10,"and retry."
  1015 0000069B 72792E             
  1016 0000069E 0D0A00                  			db	13,10,0
  1017 000006A1 0D0A28303229204164-     czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
  1017 000006AA 6472657373204D6172-
  1017 000006B3 6B204E6F7420466F75-
  1017 000006BC 6E64               
  1018 000006BE 0D0A54686973206572-     			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1018 000006C7 726F7220696E646963-
  1018 000006D0 617465732061207068-
  1018 000006D9 79736963616C207072-
  1018 000006E2 6F626C656D20776974-
  1018 000006EB 682074686520666C6F-
  1018 000006F4 707079206469736B65-
  1018 000006FD 7474652E20506C6561-
  1018 00000706 7365207265747279   
  1019 0000070E 0D0A7573696E672061-     			db	13,10,"using another diskette."
  1019 00000717 6E6F74686572206469-
  1019 00000720 736B657474652E     
  1020 00000727 0D0A00                  			db	13,10,0
  1021 0000072A 0D0A28303329205072-     czPrepMsgErr3		db	13,10,"(03) Protected Disk"
  1021 00000733 6F7465637465642044-
  1021 0000073C 69736B             
  1022 0000073F 0D0A54686973206572-     			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1022 00000748 726F72206973207573-
  1022 00000751 75616C6C7920636175-
  1022 0000075A 736564206279206174-
  1022 00000763 74656D7074696E6720-
  1022 0000076C 746F20777269746520-
  1022 00000775 746F20612077726974-
  1022 0000077E 652D70726F74656374-
  1022 00000787 6564206469736B2E   
  1023 0000078F 0D0A436865636B2074-     			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1023 00000798 686520277772697465-
  1023 000007A1 2D70726F7465637427-
  1023 000007AA 2073657474696E6720-
  1023 000007B3 6F6E20746865206469-
  1023 000007BC 736B206F7220726574-
  1023 000007C5 7279207573696E6720-
  1023 000007CE 7573696E6720616E6F-
  1023 000007D7 74686572206469736B-
  1023 000007E0 2E                 
  1024 000007E1 0D0A00                  			db	13,10,0
  1025 000007E4 0D0A28303629204469-     czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
  1025 000007ED 736B65747465205265-
  1025 000007F6 6D6F766564         
  1026 000007FB 0D0A54686973206572-     			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
  1026 00000804 726F72206D61792069-
  1026 0000080D 6E6469636174652074-
  1026 00000816 686174207468652066-
  1026 0000081F 6C6F70707920646973-
  1026 00000828 6B6574746520686173-
  1026 00000831 206265656E2072656D-
  1026 0000083A 6F7665642066726F6D-
  1026 00000843 20746865           
  1027 00000847 0D0A6469736B657474-     			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1027 00000850 652064726976652E20-
  1027 00000859 4F6E20736F6D652073-
  1027 00000862 797374656D732C2074-
  1027 0000086B 68697320636F646520-
  1027 00000874 6D617920616C736F20-
  1027 0000087D 6F6363757220696620-
  1027 00000886 746865206469736B65-
  1027 0000088F 747465206973       
  1028 00000895 0D0A27777269746520-     			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1028 0000089E 70726F746563746564-
  1028 000008A7 2E2720506C65617365-
  1028 000008B0 207665726966792074-
  1028 000008B9 686174207468652064-
  1028 000008C2 69736B657474652069-
  1028 000008CB 73206E6F7420777269-
  1028 000008D4 74652D70726F746563-
  1028 000008DD 74656420616E64     
  1029 000008E4 0D0A69732070726F70-     			db	13,10,"is properly inserted in the diskette drive."
  1029 000008ED 65726C7920696E7365-
  1029 000008F6 7274656420696E2074-
  1029 000008FF 6865206469736B6574-
  1029 00000908 74652064726976652E 
  1030 00000911 0D0A00                  			db	13,10,0
  1031 00000914 0D0A28383029204472-     czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
  1031 0000091D 6976652054696D6564-
  1031 00000926 204F7574           
  1032 0000092A 0D0A54686973206572-     			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1032 00000933 726F7220757375616C-
  1032 0000093C 6C7920696E64696361-
  1032 00000945 746573207468617420-
  1032 0000094E 6E6F206469736B6574-
  1032 00000957 746520697320696E20-
  1032 00000960 746865206469736B65-
  1032 00000969 747465206472697665-
  1032 00000972 2E20506C65617365   
  1033 0000097A 0D0A6D616B65207375-     			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
  1033 00000983 726520746861742074-
  1033 0000098C 6865206469736B6574-
  1033 00000995 74652069732070726F-
  1033 0000099E 7065726C7920736561-
  1033 000009A7 74656420696E207468-
  1033 000009B0 652064726976652061-
  1033 000009B9 6E642072657472792E 
  1034 000009C2 0D0A00                  			db	13,10,0
  1035 000009C5 0D0A283F3F2920556E-     czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
  1035 000009CE 6B6E6F776E20457272-
  1035 000009D7 6F72               
  1036 000009D9 0D0A54686520657272-     			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1036 000009E2 6F722D636F64652072-
  1036 000009EB 657475726E65642062-
  1036 000009F4 79207468652042494F-
  1036 000009FD 53206973206E6F7420-
  1036 00000A06 61207265636F676E69-
  1036 00000A0F 7A6564206572726F72-
  1036 00000A18 2E20506C6561736520-
  1036 00000A21 636F6E73756C74     
  1037 00000A28 0D0A796F757220636F-     			db	13,10,"your computer's technical reference for a description of this error code."
  1037 00000A31 6D7075746572277320-
  1037 00000A3A 746563686E6963616C-
  1037 00000A43 207265666572656E63-
  1037 00000A4C 6520666F7220612064-
  1037 00000A55 65736372697074696F-
  1037 00000A5E 6E206F662074686973-
  1037 00000A67 206572726F7220636F-
  1037 00000A70 64652E             
  1038 00000A73 0D0A00                  			db	13,10,0
  1039                                  wcPrepInBuf		equ	$
  1040                                  %endif
  1041                                  %ifdef BUILDDISK
  1042                                  ;-----------------------------------------------------------------------------------------------------------------------
  1043                                  ;
  1044                                  ;	File Allocation Tables
  1045                                  ;
  1046                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1047                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1048                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1049                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1050                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1051                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1052                                  ;	the last cluster in the chain.
  1053                                  ;
  1054                                  ;	Every three bytes encode two FAT entries as follows:
  1055                                  ;
  1056                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1057                                  ;
  1058                                  ;-----------------------------------------------------------------------------------------------------------------------
  1059                                  ;-----------------------------------------------------------------------------------------------------------------------
  1060                                  ;
  1061                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1062                                  ;
  1063                                  ;-----------------------------------------------------------------------------------------------------------------------
  1064                                  section			fat1							;first copy of FAT
  1065                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1066                                  			db	005h,060h,000h,	007h,080h,000h
  1067                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1068                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1069                                  			db	011h,020h,001h,	013h,040h,001h
  1070                                  			db	015h,060h,001h,	017h,080h,001h
  1071                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1072                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1073                                  			db	021h,020h,002h,	023h,040h,002h
  1074                                  			db	025h,060h,002h,	027h,080h,002h
  1075                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1076                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1077                                  ;-----------------------------------------------------------------------------------------------------------------------
  1078                                  ;
  1079                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1080                                  ;
  1081                                  ;-----------------------------------------------------------------------------------------------------------------------
  1082                                  section			fat2							;second copy of FAT
  1083                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1084                                  			db	005h,060h,000h,	007h,080h,000h
  1085                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1086                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1087                                  			db	011h,020h,001h,	013h,040h,001h
  1088                                  			db	015h,060h,001h,	017h,080h,001h
  1089                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1090                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1091                                  			db	021h,020h,002h,	023h,040h,002h
  1092                                  			db	025h,060h,002h,	027h,080h,002h
  1093                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1094                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1095                                  ;-----------------------------------------------------------------------------------------------------------------------
  1096                                  ;
  1097                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1098                                  ;
  1099                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1100                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1101                                  ;	copy.
  1102                                  ;
  1103                                  ;-----------------------------------------------------------------------------------------------------------------------
  1104                                  section			dir							;diskette directory
  1105                                  			db	"OS      COM"					;file name (must contain spaces)
  1106                                  			db	20h						;attribute (archive bit set)
  1107                                  			times	10 db 0;					;unused
  1108                                  			dw	0h						;time
  1109                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1110                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1111                                  			dw	2						;first cluster
  1112                                  			dd	5200h						;file size
  1113                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1114                                  %endif
  1115                                  %ifdef BUILDCOM
  1116                                  ;-----------------------------------------------------------------------------------------------------------------------
  1117                                  ;
  1118                                  ;	OS.COM
  1119                                  ;
  1120                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1121                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1122                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1123                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1124                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1125                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1126                                  ;
  1127                                  ;	Our loader addressability is set up according to the following diagram.
  1128                                  ;
  1129                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1130                                  ;				|  Boot Sector & Loader Stack Area		|
  1131                                  ;				|						|
  1132                                  ;	SS:SP -------->	007f00	+-----------------------------------------------+ SS:0400
  1133                                  ;
  1134                                  ;
  1135                                  ;	CS,DS,ES ----->	009000	+-----------------------------------------------+ CS:0000
  1136                                  ;				|  Unused (DOS Program Segment Prefix)		|
  1137                                  ;	CS:IP -------->	009100	+-----------------------------------------------+ CS:0100
  1138                                  ;				|  Loader Code					|
  1139                                  ;				|						|
  1140                                  ;			009300	+-----------------------------------------------+ CS:0200
  1141                                  ;
  1142                                  ;-----------------------------------------------------------------------------------------------------------------------
  1143                                  ;-----------------------------------------------------------------------------------------------------------------------
  1144                                  ;
  1145                                  ;	OS Loader								@disk: 004200	@mem: 009100
  1146                                  ;
  1147                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1148                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above. The
  1149                                  ;	size of the loader is limited to 65,280 bytes since the bootstrap will copy the loader into memory at 0:9100.
  1150                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1151                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1152                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1153                                  ;	starts the kernel task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1154                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1155                                  ;	registers.
  1156                                  ;
  1157                                  ;-----------------------------------------------------------------------------------------------------------------------
  1158                                  			cpu	8086						;assume minimal CPU
  1159                                  section			loader	vstart=100h					;use .COM compatible addressing
  1160                                  			bits	16						;this is 16-bit code
  1161                                  Loader			push	cs						;use the code segment
  1162                                  			pop	ds						;...as our data segment
  1163                                  			push	cs						;use the code segment
  1164                                  			pop	es						;...as our extra segment
  1165                                  ;
  1166                                  ;	Write a message to the console so we know we have our addressability established.
  1167                                  ;
  1168                                  			mov	si,czStartingMsg				;starting message
  1169                                  			call	PutTTYString					;display loader message
  1170                                  ;
  1171                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1172                                  ;
  1173                                  			call	GetCPUType					;AL = cpu type
  1174                                  			mov	si,czCPUErrorMsg				;loader error message
  1175                                  			cmp	al,3						;80386+?
  1176                                  			jb	LoaderExit					;no, exit with error message
  1177                                  			cpu	386						;allow 80386 instructions
  1178                                  			mov	si,czCPUOKMsg					;cpu ok message
  1179                                  			call	PutTTYString					;display message
  1180                                  ;
  1181                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1182                                  ;
  1183                                  			mov	si,300h						;GDT offset
  1184                                  			mov	ax,cs						;AX:SI = gdt source
  1185                                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1186                                  			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1187                                  			and	al,0F0h						;AL = phys addr bits 11-0
  1188                                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1189                                  			mov	word [si+30h+2],ax				;lo-order loader code (0-15)
  1190                                  			mov	byte [si+30h+4],cl				;lo-order loader code (16-23)
  1191                                  			mov	si,czGDTOKMsg					;GDT prepared message
  1192                                  			call	PutTTYString					;display message
  1193                                  ;
  1194                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1195                                  ;
  1196                                  			push	EKRNSEG						;use kernel segment ...
  1197                                  			pop	es						;... as target segment
  1198                                  			xor	di,di						;ES:DI = target address
  1199                                  			mov	si,300h						;DS:SI = source address
  1200                                  			mov	cx,5000h					;CX = kernel size
  1201                                  			cld							;forward strings
  1202                                  			rep	movsb						;copy kernel image
  1203                                  			mov	si,czKernelLoadedMsg				;kernel moved message
  1204                                  			call	PutTTYString					;display message
  1205                                  ;
  1206                                  ;	Switch to protected mode.
  1207                                  ;
  1208                                  			xor	si,si						;ES:SI = gdt addr
  1209                                  			mov	ss,si						;protected mode ss
  1210                                  			mov	sp,1000h					;SS:SP = protected mode ss:sp
  1211                                  			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1212                                  			mov	bx,2028h					;BH,BL = IRQ int bases
  1213                                  			mov	dx,001Fh					;outer delay loop count
  1214                                  .10			mov	cx,0FFFFh					;inner delay loop count
  1215                                  			loop	$						;wait out pending interrupts
  1216                                  			dec	dx						;restore outer loop count
  1217                                  			jnz	.10						;continue outer loop
  1218                                  			int	EBIOSINTMISC					;call BIOS to set protected mode
  1219                                  ;
  1220                                  ;	Enable hardware and maskable interrupts
  1221                                  ;
  1222                                  			xor	al,al						;enable all registers code
  1223                                  			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1224                                  			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1225                                  			sti							;enable maskable interrupts
  1226                                  ;
  1227                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1228                                  ;
  1229                                  			ltr	[cs:cwLoaderTSS]				;load task register
  1230                                  			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1231                                  			jmp	0058h:0						;jump to task state segment selector
  1232                                  ;-----------------------------------------------------------------------------------------------------------------------
  1233                                  ;
  1234                                  ;	Routine:	LoaderExit
  1235                                  ;
  1236                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1237                                  ;
  1238                                  ;	In:		DS:SI	string address
  1239                                  ;
  1240                                  ;-----------------------------------------------------------------------------------------------------------------------
  1241                                  LoaderExit		call	PutTTYString					;display error message
  1242                                  ;
  1243                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1244                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1245                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1246                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1247                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1248                                  ;
  1249                                  .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1250                                  			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1251                                  			jnz	.40						;exit if key pressed
  1252                                  			sti							;enable maskable interrupts
  1253                                  			hlt							;wait for interrupt
  1254                                  			jmp	.30						;repeat until keypress
  1255                                  ;
  1256                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1257                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1258                                  ;	HLT until the system resets.
  1259                                  ;
  1260                                  .40			mov	al,EKEYCMDRESET					;8042 pulse output port pin
  1261                                  			out	EKEYPORTSTAT,al					;drive B0 low to restart
  1262                                  .50			sti							;enable maskable interrupts
  1263                                  			hlt							;stop until reset, int, nmi
  1264                                  			jmp	.50						;loop until restart kicks in
  1265                                  ;-----------------------------------------------------------------------------------------------------------------------
  1266                                  ;
  1267                                  ;	Routine:	GetCPUType
  1268                                  ;
  1269                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1270                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1271                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1272                                  ;
  1273                                  ;	Output:		AX	0 = 808x, v20, etc.
  1274                                  ;				1 = 80186
  1275                                  ;				2 = 80286
  1276                                  ;				3 = 80386
  1277                                  ;
  1278                                  ;-----------------------------------------------------------------------------------------------------------------------
  1279                                  GetCPUType		mov	al,1						;AL = 1
  1280                                  			mov	cl,32						;shift count
  1281                                  			shr	al,cl						;try a 32-bit shift
  1282                                  			or	al,al						;did the shift happen?
  1283                                  			jz	.10						;yes, cpu is 808x, v20, etc.
  1284                                  			cpu	186
  1285                                  			push	sp						;save stack pointer
  1286                                  			pop	cx						;...into cx
  1287                                  			cmp	cx,sp						;did sp decrement before push?
  1288                                  			jne	.10						;yes, cpu is 80186
  1289                                  			cpu	286
  1290                                  			inc	ax						;AX = 2
  1291                                  			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1292                                  			mov	cl,[cbLoaderGDTHiByte]				;cl = hi-order byte
  1293                                  			inc	cl						;was hi-byte of GDTR 0xff?
  1294                                  			jz	.10						;yes, cpu is 80286
  1295                                  			inc	ax						;AX = 3
  1296                                  .10			ret							;return
  1297                                  ;-----------------------------------------------------------------------------------------------------------------------
  1298                                  ;
  1299                                  ;	Routine:	PutTTYString
  1300                                  ;
  1301                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1302                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1303                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1304                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1305                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1306                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1307                                  ;			registers and flags unless used to indicate return status.
  1308                                  ;
  1309                                  ;	In:		DS:SI	address of string
  1310                                  ;
  1311                                  ;-----------------------------------------------------------------------------------------------------------------------
  1312                                  PutTTYString		cld							;forward strings
  1313                                  			lodsb							;load next byte at DS:SI in AL
  1314                                  			test	al,al						;end of string?
  1315                                  			jz	.10						;... yes, exit our loop
  1316                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1317                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1318                                  			jmp	PutTTYString					;repeat until done
  1319                                  .10			ret							;return
  1320                                  ;-----------------------------------------------------------------------------------------------------------------------
  1321                                  ;
  1322                                  ;	Loader Data
  1323                                  ;
  1324                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1325                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1326                                  ;
  1327                                  ;-----------------------------------------------------------------------------------------------------------------------
  1328                                  			align	2
  1329                                  cwLoaderTSS		dw	0068h						;TSS selector
  1330                                  cwLoaderLDT		dw	0060h						;LDT selector
  1331                                  cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1332                                  cbLoaderGDTHiByte	db	0						;hi-order byte
  1333                                  czCPUErrorMsg		db	"The operating system requires an i386 "
  1334                                  			db	"or later processor.",13,10,
  1335                                  			db	"Please press any key to restart the "
  1336                                  			db	"computer.",13,10,0
  1337                                  czCPUOKMsg		db	"CPU ok",13,10,0
  1338                                  czGDTOKMsg		db	"GDT prepared",13,10,0
  1339                                  czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1340                                  czStartingMsg		db	"Starting ...",13,10,0				;loader message
  1341                                  			times	510-($-$$) db 0h				;zero fill to end of sector
  1342                                  			db	055h,0AAh					;end of sector signature
  1343                                  ;-----------------------------------------------------------------------------------------------------------------------
  1344                                  ;
  1345                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1346                                  ;
  1347                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1348                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1349                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1350                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1351                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1352                                  ;
  1353                                  ;-----------------------------------------------------------------------------------------------------------------------
  1354                                  ;-----------------------------------------------------------------------------------------------------------------------
  1355                                  ;
  1356                                  ;	Tables
  1357                                  ;
  1358                                  ;-----------------------------------------------------------------------------------------------------------------------
  1359                                  ;-----------------------------------------------------------------------------------------------------------------------
  1360                                  ;
  1361                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1362                                  ;
  1363                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1364                                  ;	first descriptor must be all nulls.
  1365                                  ;
  1366                                  ;	6   5         4         3         2         1         0
  1367                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1368                                  ;	----------------------------------------------------------------
  1369                                  ;	h......hffffmmmma......ab......................bn..............n
  1370                                  ;	00000000			all areas have base addresses below 2^24
  1371                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1372                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1373                                  ;	            1001		present, ring-0, selector
  1374                                  ;
  1375                                  ;	h...h	hi-order base address (bits 24-31)
  1376                                  ;	ffff	flags
  1377                                  ;	mmmm	hi-order limit (bits 16-19)
  1378                                  ;	a...a	access
  1379                                  ;	b...b	lo-order base address (bits 0-23)
  1380                                  ;	n...n	lo-order limit (bits 0-15)
  1381                                  ;
  1382                                  ;-----------------------------------------------------------------------------------------------------------------------
  1383                                  section			gdt							;global descriptor table
  1384                                  			dq	0000000000000000h				;00 required null selector
  1385                                  			dq	00409300100007FFh				;08 2KB  writable data (GDT)
  1386                                  			dq	00409300180007FFh				;10 2KB  writable data (IDT)
  1387                                  			dq	00CF93000000FFFFh				;18 4GB  writable data (OS data)
  1388                                  			dq	0040930B80000FFFh				;20 4KB  writable data (CGA video)
  1389                                  			dq	0040930000000FFFh				;28 4KB  writable data (Loader stack)
  1390                                  			dq	00009B000000FFFFh				;30 64KB readable 16-bit code (Loader)
  1391                                  			dq	00009BFF0000FFFFh				;38 64KB readable 16-bit code (BIOS)
  1392                                  			dq	004093000400FFFFh				;40 64KB writable data (BIOS data)
  1393                                  			dq	00409B0020001FFFh				;48 8KB  readable code (OS code)
  1394                                  			dq	004082004700007Fh				;50 80B  writable system (Console LDT)
  1395                                  			dq	004089004780007Fh				;58 80B  writable system (Console TSS)
  1396                                  			dq	004082000F00007Fh				;60 80B  writable system (Loader LDT)
  1397                                  			dq	004089000F80007Fh				;68 80B  writable system (Loader TSS)
  1398                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1399                                  ;-----------------------------------------------------------------------------------------------------------------------
  1400                                  ;
  1401                                  ;	Interrupt Descriptor Table						@disk: 004C00	@mem: 001800
  1402                                  ;
  1403                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1404                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1405                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1406                                  ;
  1407                                  ;	6   5         4         3         2         1         0
  1408                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1409                                  ;	----------------------------------------------------------------
  1410                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1411                                  ;
  1412                                  ;	h...h	high-order offset (bits 16-31)
  1413                                  ;	P	present (0=unused interrupt)
  1414                                  ;	zz	descriptor privilege level
  1415                                  ;	S	storage segment (must be zero for IDT)
  1416                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1417                                  ;	S...S	handling code selector in GDT
  1418                                  ;	l...l	lo-order offset (bits 0-15)
  1419                                  ;
  1420                                  ;-----------------------------------------------------------------------------------------------------------------------
  1421                                  section			idt							;interrupt descriptor table
  1422                                  			mint	dividebyzero					;00 divide by zero
  1423                                  			mint	singlestep					;01 single step
  1424                                  			mint	nmi						;02 non-maskable
  1425                                  			mint	break						;03 break
  1426                                  			mint	into						;04 into
  1427                                  			mint	bounds						;05 bounds
  1428                                  			mint	badopcode					;06 bad op code
  1429                                  			mint	nocoproc					;07 no coprocessor
  1430                                  			mint	doublefault					;08 double-fault
  1431                                  			mint	operand						;09 operand
  1432                                  			mint	badtss						;0A bad TSS
  1433                                  			mint	notpresent					;0B not-present
  1434                                  			mint	stacklimit					;0C stack limit
  1435                                  			mint	protection					;0D general protection fault
  1436                                  			mint	int14						;0E (reserved)
  1437                                  			mint	int15						;0F (reserved)
  1438                                  			mint	coproccalc					;10 (reserved)
  1439                                  			mint	int17						;11 (reserved)
  1440                                  			mint	int18						;12 (reserved)
  1441                                  			mint	int19						;13 (reserved)
  1442                                  			mint	int20						;14 (reserved)
  1443                                  			mint	int21						;15 (reserved)
  1444                                  			mint	int22						;16 (reserved)
  1445                                  			mint	int23						;17 (reserved)
  1446                                  			mint	int24						;18 (reserved)
  1447                                  			mint	int25						;19 (reserved)
  1448                                  			mint	int26						;1A (reserved)
  1449                                  			mint	int27						;1B (reserved)
  1450                                  			mint	int28						;1C (reserved)
  1451                                  			mint	int29						;1D (reserved)
  1452                                  			mint	int30						;1E (reserved)
  1453                                  			mint	int31						;1F (reserved)
  1454                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1455                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1456                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1457                                  			mtrap	com2						;23 IRQ3 com2
  1458                                  			mtrap	com1						;24 IRQ4 com1
  1459                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1460                                  			mtrap	diskette					;26 IRQ6 diskette
  1461                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1462                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1463                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1464                                  			mtrap	irq10						;2A IRQA (reserved)
  1465                                  			mtrap	irq11						;2B IRQB (reserved)
  1466                                  			mtrap	ps2mouse					;2C IRQC ps/2 mouse
  1467                                  			mtrap	coprocessor					;2D IRQD coprocessor
  1468                                  			mtrap	fixeddisk					;2E IRQE fixed disk
  1469                                  			mtrap	irq15						;2F IRQF (reserved)
  1470                                  			mtrap	svc						;30 OS services
  1471                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1472                                  ;-----------------------------------------------------------------------------------------------------------------------
  1473                                  ;
  1474                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1475                                  ;
  1476                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1477                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1478                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1479                                  ;	signals the CPU on an interrupt request line. Software interrupts occur when directly called by other code
  1480                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1481                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1482                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1483                                  ;
  1484                                  ;-----------------------------------------------------------------------------------------------------------------------
  1485                                  section			kernel	vstart=0h					;data offsets relative to 0
  1486                                  			cpu	386						;allow 80386 instructions
  1487                                  			bits	32						;this is 32-bit code
  1488                                  ;-----------------------------------------------------------------------------------------------------------------------
  1489                                  ;
  1490                                  ;	CPU Interrupt Handlers
  1491                                  ;
  1492                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts.
  1493                                  ;
  1494                                  ;-----------------------------------------------------------------------------------------------------------------------
  1495                                  			menter	dividebyzero					;divide by zero
  1496                                  			push	0						;
  1497                                  			jmp	intcpu						;
  1498                                  			menter	singlestep					;single step
  1499                                  			push	1						;
  1500                                  			jmp	intcpu						;
  1501                                  			menter	nmi						;non-maskable
  1502                                  			push	2						;
  1503                                  			jmp	intcpu						;
  1504                                  			menter	break						;break
  1505                                  			push	3						;
  1506                                  			jmp	intcpu						;
  1507                                  			menter	into						;into
  1508                                  			push	4						;
  1509                                  			jmp	intcpu						;
  1510                                  			menter	bounds						;bounds
  1511                                  			push	5						;
  1512                                  			jmp	intcpu						;
  1513                                  			menter	badopcode					;bad opcode interrupt
  1514                                  			push	6						;
  1515                                  			jmp	intcpu						;
  1516                                  			menter	nocoproc					;no coprocessor interrupt
  1517                                  			push	7						;
  1518                                  			jmp	intcpu						;
  1519                                  			menter	doublefault					;doublefault interrupt
  1520                                  			push	8						;
  1521                                  			jmp	intcpu						;
  1522                                  			menter	operand						;operand interrupt
  1523                                  			push	9						;
  1524                                  			jmp	intcpu						;
  1525                                  			menter	badtss						;bad tss interrupt
  1526                                  			push	10						;
  1527                                  			jmp	intcpu						;
  1528                                  			menter	notpresent					;not present interrupt
  1529                                  			push	11						;
  1530                                  			jmp	intcpu						;
  1531                                  			menter	stacklimit					;stack limit interrupt
  1532                                  			push	12						;
  1533                                  			jmp	intcpu						;
  1534                                  			menter	protection					;protection fault interrupt
  1535                                  			push	13						;
  1536                                  			jmp	intcpu						;
  1537                                  			menter	int14						;(reserved)
  1538                                  			push	14						;
  1539                                  			jmp	intcpu						;
  1540                                  			menter	int15						;(reserved)
  1541                                  			push	15						;
  1542                                  			jmp	intcpu						;
  1543                                  			menter	coproccalc					;coprocessor calculation
  1544                                  			push	16						;
  1545                                  			jmp	intcpu						;
  1546                                  			menter	int17						;(reserved)
  1547                                  			push	17						;
  1548                                  			jmp	intcpu						;
  1549                                  			menter	int18						;(reserved)
  1550                                  			push	18						;
  1551                                  			jmp	intcpu						;
  1552                                  			menter	int19						;(reserved)
  1553                                  			push	19						;
  1554                                  			jmp	intcpu						;
  1555                                  			menter	int20						;(reserved)
  1556                                  			push	20						;
  1557                                  			jmp	intcpu						;
  1558                                  			menter	int21						;(reserved)
  1559                                  			push	21						;
  1560                                  			jmp	intcpu						;
  1561                                  			menter	int22						;(reserved)
  1562                                  			push	22						;
  1563                                  			jmp	intcpu						;
  1564                                  			menter	int23						;(reserved)
  1565                                  			push	23						;
  1566                                  			jmp	intcpu						;
  1567                                  			menter	int24						;(reserved)
  1568                                  			push	24						;
  1569                                  			jmp	intcpu						;
  1570                                  			menter	int25						;(reserved)
  1571                                  			push	25						;
  1572                                  			jmp	intcpu						;
  1573                                  			menter	int26						;(reserved)
  1574                                  			push	26						;
  1575                                  			jmp	intcpu						;
  1576                                  			menter	int27						;(reserved)
  1577                                  			push	27						;
  1578                                  			jmp	intcpu						;
  1579                                  			menter	int28						;(reserved)
  1580                                  			push	28						;
  1581                                  			jmp	intcpu						;
  1582                                  			menter	int29						;(reserved)
  1583                                  			push	29						;
  1584                                  			jmp	intcpu						;
  1585                                  			menter	int30						;(reserved)
  1586                                  			push	30						;
  1587                                  			jmp	intcpu						;
  1588                                  			menter	int31						;(reserved)
  1589                                  			push	31						;
  1590                                  intcpu			pop	eax						;
  1591                                  			iretd							;return
  1592                                  ;-----------------------------------------------------------------------------------------------------------------------
  1593                                  ;
  1594                                  ;	Hardware Device Interupts
  1595                                  ;
  1596                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1597                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1598                                  ;	(BX=2028h).
  1599                                  ;
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601                                  ;-----------------------------------------------------------------------------------------------------------------------
  1602                                  ;
  1603                                  ;	IRQ0	Clock Tick Interrupt
  1604                                  ;
  1605                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1606                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1607                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1608                                  ;
  1609                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1610                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1611                                  ;
  1612                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1613                                  ;	zero, the floppy disk motors are turned off.
  1614                                  ;
  1615                                  ;-----------------------------------------------------------------------------------------------------------------------
  1616                                  			menter	clocktick					;clock tick interrupt
  1617                                  			push	eax						;save modified regs
  1618                                  			push	edx						;
  1619                                  			push	ds						;
  1620                                  			push	ESELDAT						;load OS data selector ...
  1621                                  			pop	ds						;... into data segment register
  1622                                  			mov	eax,[wfClockTicks]				;eax = clock ticks
  1623                                  			inc	eax						;increment clock ticks
  1624                                  			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1625                                  			jb	irq0.10						;no, skip ahead
  1626                                  			inc	byte [wbClockDays]				;increment clock days
  1627                                  			xor	eax,eax						;reset clock ticks
  1628                                  irq0.10			mov	dword [wfClockTicks],eax			;save clock ticks
  1629                                  			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1630                                  			je	irq0.20						;yes, skip ahead
  1631                                  			dec	byte [wbFDCMotor]				;decrement motor timeout
  1632                                  			jnz	irq0.20						;skip ahead if non-zero
  1633                                  			sti							;enable maskable interrupts
  1634                                  irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1635                                  			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1636                                  			in	al,dx						;FDC main status byte
  1637                                  			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1638                                  			jnz	irq0.15						;wait while busy
  1639                                  			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1640                                  			mov	byte [wbFDCControl],al				;save motor-off setting
  1641                                  			mov	dh,EFDCPORTHI					;fdc port hi
  1642                                  			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1643                                  			out	dx,al						;turn motor off
  1644                                  irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1645                                  			pop	ds						;restore modified regs
  1646                                  			pop	edx						;
  1647                                  			pop	eax						;
  1648                                  			iretd							;return
  1649                                  ;-----------------------------------------------------------------------------------------------------------------------
  1650                                  ;
  1651                                  ;	IRQ1	Keyboard Interrupt
  1652                                  ;
  1653                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1654                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1655                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1656                                  ;	ALL modified registers upon return.
  1657                                  ;
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                  			menter	keyboard					;keyboard interrrupt
  1660                                  			push	eax						;save non-volatile regs
  1661                                  			push	ebx						;
  1662                                  			push	ecx						;
  1663                                  			push	esi						;
  1664                                  			push	ds						;
  1665                                  			push	ESELDAT						;load OS data selector ...
  1666                                  			pop	ds						;... into data segment register
  1667                                  			xor	al,al						;zero
  1668                                  			mov	[wbConsoleScan0],al				;clear scan code 0
  1669                                  			mov	[wbConsoleScan1],al				;clear scan code 1
  1670                                  			mov	[wbConsoleScan2],al				;clear scan code 2
  1671                                  			mov	[wbConsoleScan3],al				;clear scan code 3
  1672                                  			mov	[wbConsoleScan4],al				;clear scan code 4
  1673                                  			mov	[wbConsoleScan5],al				;clear scan code 5
  1674                                  			mov	al,' '						;space
  1675                                  			mov	[wbConsoleChar],al				;set character to space
  1676                                  			mov	al,EKEYTIMEOUT					;controller timeout flag
  1677                                  			not	al						;controller timeout mask
  1678                                  			and	[wbConsoleStatus],al				;clear controller timeout flag
  1679                                  			mov	bl,[wbConsoleShift]				;shift flags
  1680                                  			mov	bh,[wbConsoleLock]				;lock flags
  1681                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1682                                  			jz	irq1.140					;yes, skip ahead
  1683                                  			in	al,EKEYPORTDATA					;read scan code 0
  1684                                  			mov	[wbConsoleScan0],al				;save scan code 0
  1685                                  			mov	ah,al						;copy scan code 0
  1686                                  			mov	al,EKEYSHIFTLEFT				;left shift flag
  1687                                  			cmp	ah,EKEYSHIFTLDOWN				;left shift key down code?
  1688                                  			je	irq1.30						;yes, set flag
  1689                                  			cmp	ah,EKEYSHIFTLUP					;left shift key up code?
  1690                                  			je	irq1.40						;yes, reset flag
  1691                                  			mov	al,EKEYSHIFTRIGHT				;right shift flag
  1692                                  			cmp	ah,EKEYSHIFTRDOWN				;right shift key down code?
  1693                                  			je	irq1.30						;yes, set flag
  1694                                  			cmp	ah,EKEYSHIFTRUP					;right shift key up code?
  1695                                  			je	irq1.40						;yes, reset flag
  1696                                  			mov	al,EKEYCTRLLEFT					;left control flag
  1697                                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1698                                  			je	irq1.30						;yes, set flag
  1699                                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1700                                  			je	irq1.40						;yes, reset flag
  1701                                  			mov	al,EKEYALTLEFT					;left alt flag
  1702                                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1703                                  			je	irq1.30						;yes, set flag
  1704                                  			cmp	ah,EKEYALTUP					;alt key up code?
  1705                                  			je	irq1.40						;yes, reset flag
  1706                                  			mov	al,EKEYLOCKCAPS					;caps-lock flag
  1707                                  			cmp	ah,EKEYCAPSDOWN					;caps-lock key down code?
  1708                                  			je	irq1.50						;yes, toggle lamps and flags
  1709                                  			mov	al,EKEYLOCKNUM					;num-lock flag
  1710                                  			cmp	ah,EKEYNUMDOWN					;num-lock key down code?
  1711                                  			je	irq1.50						;yes, toggle lamps and flags
  1712                                  			mov	al,EKEYLOCKSCROLL				;scroll-lock flag
  1713                                  			cmp	ah,EKEYSCROLLDOWN				;scroll-lock key down code?
  1714                                  			je	irq1.50						;yes, toggle lamps and flags
  1715                                  			cmp	ah,EKEYCODEEXT0					;extended scan code 0?
  1716                                  			jne	irq1.70 					;no, skip ahead
  1717                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1718                                  			jz	irq1.140					;yes, skip ahead
  1719                                  			in	al,EKEYPORTDATA					;read scan code 1
  1720                                  			mov	[wbConsoleScan1],al				;save scan code 1
  1721                                  			mov	ah,al						;copy scan code 1
  1722                                  			mov	al,EKEYCTRLRIGHT				;right control flag
  1723                                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1724                                  			je	irq1.30						;yes, set flag
  1725                                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1726                                  			je	irq1.40						;yes, reset flag
  1727                                  			mov	al,EKEYALTRIGHT					;right alt flag
  1728                                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1729                                  			je	irq1.30						;yes, set flag
  1730                                  			cmp	ah,EKEYALTUP					;alt key up code?
  1731                                  			je	irq1.40						;yes, reset flag
  1732                                  			cmp	ah,EKEYSLASH					;slash down code?
  1733                                  			je	irq1.80						;yes, skip ahead
  1734                                  			cmp	ah,EKEYSLASHUP					;slash up code?
  1735                                  			je	irq1.80						;yes, skip ahead
  1736                                  			cmp	ah,EKEYPRTSCRDOWN				;print screen down code?
  1737                                  			je	irq1.10						;yes, continue
  1738                                  			cmp	ah,EKEYPRTSCRUP					;print screen up code?
  1739                                  			jne	irq1.20						;no, skip ahead
  1740                                  irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1741                                  			jz	irq1.140					;yes, skip ahead
  1742                                  			in	al,EKEYPORTDATA					;read scan code 2
  1743                                  			mov	[wbConsoleScan2],al				;save scan code 2
  1744                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1745                                  			jz	irq1.140					;yes, skip ahead
  1746                                  			in	al,EKEYPORTDATA					;read scan code 3
  1747                                  			mov	[wbConsoleScan3],al				;read scan code 3
  1748                                  irq1.20			jmp	irq1.150					;finish keyboard handling
  1749                                  irq1.30			or	bl,al						;set shift flag
  1750                                  			jmp	irq1.60						;skip ahead
  1751                                  irq1.40			not	al						;convert flag to mask
  1752                                  			and	bl,al						;reset shift flag
  1753                                  			jmp	irq1.60						;skip ahead
  1754                                  irq1.50			xor	bh,al						;toggle lock flag
  1755                                  			call	SetKeyboardLamps				;update keyboard lamps
  1756                                  irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1757                                  			mov	[wbConsoleLock],bh				;save lock flags
  1758                                  			call	PutConsoleOIAShift				;update OIA indicators
  1759                                  			jmp	irq1.150					;finish keyboard handling
  1760                                  irq1.70			cmp	ah,EKEYCODEEXT1					;extended scan code 1?
  1761                                  			jne	irq1.80						;no continue
  1762                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1763                                  			jz	irq1.140					;yes, skip ahead
  1764                                  			in	al,EKEYPORTDATA					;read scan code 1
  1765                                  			mov	[wbConsoleScan1],al				;save scan code 1
  1766                                  			mov	ah,al						;copy scan code 1
  1767                                  			cmp	ah,EKEYPAUSEDOWN				;pause key down code?
  1768                                  			jne	irq1.150					;no, finish keyboard handling
  1769                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1770                                  			jz	irq1.140					;yes, skip ahead
  1771                                  			in	al,EKEYPORTDATA					;read scan code 2
  1772                                  			mov	[wbConsoleScan2],al				;save scan code 2
  1773                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1774                                  			jz	irq1.140					;yes, skip ahead
  1775                                  			in	al,EKEYPORTDATA					;read scan code 3
  1776                                  			mov	[wbConsoleScan3],al				;save scan code 3
  1777                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1778                                  			jz	irq1.140					;yes, skip ahead
  1779                                  			in	al,EKEYPORTDATA					;read scan code 4
  1780                                  			mov	[wbConsoleScan4],al				;save scan code 4
  1781                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1782                                  			jz	irq1.140					;yes, skip ahead
  1783                                  			in	al,EKEYPORTDATA					;read scan code 5
  1784                                  			mov	[wbConsoleScan5],al				;save scan code 5
  1785                                  			jmp	irq1.150					;continue
  1786                                  irq1.80			xor	al,al						;assume no ASCII translation
  1787                                  			test	ah,EKEYUP					;release code?
  1788                                  			jnz	irq1.110					;yes, skip ahead
  1789                                  			mov	esi,tscan2ascii					;scan-to-ascii table address
  1790                                  			test	bl,EKEYSHIFT					;either shift key down?
  1791                                  			jz	irq1.90						;no, skip ahead
  1792                                  			mov	esi,tscan2shift					;scan-to-shifted table address
  1793                                  irq1.90			movzx	ecx,ah						;scan code offset
  1794                                  			mov	al,[cs:ecx+esi]					;al = ASCII code
  1795                                  			test	bh,EKEYLOCKCAPS					;caps-lock on?
  1796                                  			jz	irq1.100					;no skip ahead
  1797                                  			mov	cl,al						;copy ASCII code
  1798                                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  1799                                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  1800                                  			jb	irq1.100					;yes, skip ahead
  1801                                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  1802                                  			ja	irq1.100					;yes, skip ahead
  1803                                  			xor	al,EASCIICASE					;switch case
  1804                                  irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  1805                                  irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  1806                                  			test	ah,EKEYUP					;release scan-code?
  1807                                  			jz	irq1.120					;no, skip ahead
  1808                                  			mov	edx,EMSGKEYUP					;key-up event
  1809                                  irq1.120		and	eax,0FFFFh					;clear high-order word
  1810                                  			or	edx,eax						;msg id and codes
  1811                                  			xor	ecx,ecx						;null param
  1812                                  			push	eax						;save codes
  1813                                  			call	PutMessage					;put message to console
  1814                                  			pop	eax						;restore codes
  1815                                  			test	al,al						;ASCII translation?
  1816                                  			jz	irq1.130					;no, skip ahead
  1817                                  			mov	edx,EMSGKEYCHAR					;key-character event
  1818                                  			and	eax,0FFFFh					;clear high-order word
  1819                                  			or	edx,eax						;msg id and codes
  1820                                  			xor	ecx,ecx						;null param
  1821                                  			call	PutMessage					;put message to console
  1822                                  irq1.130		jmp	irq1.150					;finish keyboard handling
  1823                                  irq1.140		mov	al,EKEYTIMEOUT					;controller timeout flag
  1824                                  			or	[wbConsoleStatus],al				;set controller timeout flag
  1825                                  irq1.150		call	PutConsoleOIAChar				;update operator info area
  1826                                  			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1827                                  			pop	ds						;restore non-volatile regs
  1828                                  			pop	esi						;
  1829                                  			pop	ecx						;
  1830                                  			pop	ebx						;
  1831                                  			pop	eax						;
  1832                                  			iretd							;return
  1833                                  ;-----------------------------------------------------------------------------------------------------------------------
  1834                                  ;	Scan-Code to ASCII Translation Tables
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                  tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  1837                                  			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  1838                                  			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  1839                                  			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  1840                                  			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  1841                                  			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  1842                                  			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  1843                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  1844                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  1845                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  1846                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  1847                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  1848                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  1849                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  1850                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  1851                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  1852                                  tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  1853                                  			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  1854                                  			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  1855                                  			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  1856                                  			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  1857                                  			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  1858                                  			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  1859                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  1860                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  1861                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  1862                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  1863                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  1864                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  1865                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  1866                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  1867                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                  ;
  1870                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  1871                                  ;
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                  			menter	iochannel					;secondary 8259A cascade
  1874                                  			push	eax						;
  1875                                  			jmp	hwint						;
  1876                                  ;-----------------------------------------------------------------------------------------------------------------------
  1877                                  ;
  1878                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  1879                                  ;
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                  			menter	com2						;serial port 2 interrupt
  1882                                  			push	eax						;
  1883                                  			jmp	hwint						;
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                  ;
  1886                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  1887                                  ;
  1888                                  ;-----------------------------------------------------------------------------------------------------------------------
  1889                                  			menter	com1						;serial port 1 interrupt
  1890                                  			push	eax						;
  1891                                  			jmp	hwint						;
  1892                                  ;-----------------------------------------------------------------------------------------------------------------------
  1893                                  ;
  1894                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  1895                                  ;
  1896                                  ;-----------------------------------------------------------------------------------------------------------------------
  1897                                  			menter	lpt2						;parallel port 2 interrupt
  1898                                  			push	eax						;
  1899                                  			jmp	hwint						;
  1900                                  ;-----------------------------------------------------------------------------------------------------------------------
  1901                                  ;
  1902                                  ;	IRQ6	Diskette Hardware Interrupt
  1903                                  ;
  1904                                  ;-----------------------------------------------------------------------------------------------------------------------
  1905                                  			menter	diskette					;floppy disk interrupt
  1906                                  			push	eax						;save non-volatile regs
  1907                                  			push	ds						;
  1908                                  			push	ESELDAT						;load OS data selector ...
  1909                                  			pop	ds						;... into DS register
  1910                                  			mov	al,[wbFDCStatus]				;al = FDC calibration status
  1911                                  			or	al,10000000b					;set IRQ flag
  1912                                  			mov	[wbFDCStatus],al				;update FDC calibration status
  1913                                  			pop	ds						;restore non-volatile regs
  1914                                  			jmp	hwint						;end primary PIC interrupt
  1915                                  ;-----------------------------------------------------------------------------------------------------------------------
  1916                                  ;
  1917                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  1918                                  ;
  1919                                  ;-----------------------------------------------------------------------------------------------------------------------
  1920                                  			menter	lpt1						;parallel port 1 interrupt
  1921                                  			push	eax						;
  1922                                  			jmp	hwint						;
  1923                                  ;-----------------------------------------------------------------------------------------------------------------------
  1924                                  ;
  1925                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  1926                                  ;
  1927                                  ;-----------------------------------------------------------------------------------------------------------------------
  1928                                  			menter	rtclock						;real-time clock interrupt
  1929                                  			push	eax						;
  1930                                  			jmp	hwwint						;
  1931                                  ;-----------------------------------------------------------------------------------------------------------------------
  1932                                  ;
  1933                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  1934                                  ;
  1935                                  ;-----------------------------------------------------------------------------------------------------------------------
  1936                                  			menter	retrace						;CGA vertical retrace interrupt
  1937                                  			push	eax						;
  1938                                  			jmp	hwwint						;
  1939                                  ;-----------------------------------------------------------------------------------------------------------------------
  1940                                  ;
  1941                                  ;	IRQ10	Reserved Hardware Interrupt
  1942                                  ;
  1943                                  ;-----------------------------------------------------------------------------------------------------------------------
  1944                                  			menter	irq10						;reserved
  1945                                  			push	eax						;
  1946                                  			jmp	hwwint						;
  1947                                  ;-----------------------------------------------------------------------------------------------------------------------
  1948                                  ;
  1949                                  ;	IRQ11	Reserved Hardware Interrupt
  1950                                  ;
  1951                                  ;-----------------------------------------------------------------------------------------------------------------------
  1952                                  			menter	irq11						;reserved
  1953                                  			push	eax						;
  1954                                  			jmp	hwwint						;
  1955                                  ;-----------------------------------------------------------------------------------------------------------------------
  1956                                  ;
  1957                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  1958                                  ;
  1959                                  ;-----------------------------------------------------------------------------------------------------------------------
  1960                                  			menter	ps2mouse					;PS/2 mouse interrupt
  1961                                  			push	eax						;
  1962                                  			jmp	hwwint						;
  1963                                  ;-----------------------------------------------------------------------------------------------------------------------
  1964                                  ;
  1965                                  ;	IRQ13	Coprocessor Hardware Interrupt
  1966                                  ;
  1967                                  ;-----------------------------------------------------------------------------------------------------------------------
  1968                                  			menter	coprocessor					;coprocessor interrupt
  1969                                  			push	eax						;
  1970                                  			jmp	hwwint						;
  1971                                  ;-----------------------------------------------------------------------------------------------------------------------
  1972                                  ;
  1973                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  1974                                  ;
  1975                                  ;-----------------------------------------------------------------------------------------------------------------------
  1976                                  			menter	fixeddisk					;fixed disk interrupt
  1977                                  			push	eax						;
  1978                                  			jmp	hwwint						;
  1979                                  ;-----------------------------------------------------------------------------------------------------------------------
  1980                                  ;
  1981                                  ;	IRQ15	Reserved Hardware Interrupt
  1982                                  ;
  1983                                  ;-----------------------------------------------------------------------------------------------------------------------
  1984                                  			menter	irq15						;reserved
  1985                                  			push	eax						;save modified regs
  1986                                  ;-----------------------------------------------------------------------------------------------------------------------
  1987                                  ;
  1988                                  ;	Exit from hardware interrupt
  1989                                  ;
  1990                                  ;-----------------------------------------------------------------------------------------------------------------------
  1991                                  hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  1992                                  			jmp	hwint90						;skip ahead
  1993                                  hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  1994                                  hwint90			pop	eax						;restore modified regs
  1995                                  			iretd							;return from interrupt
  1996                                  ;-----------------------------------------------------------------------------------------------------------------------
  1997                                  ;
  1998                                  ;	INT 30h Operating System Software Service Interrupt
  1999                                  ;
  2000                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2001                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  2002                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2003                                  ;	the entry address of the specific function from a table.
  2004                                  ;
  2005                                  ;-----------------------------------------------------------------------------------------------------------------------
  2006                                  			menter	svc
  2007                                  			cmp	al,maxtsvc					;is our function out of range?
  2008                                  			jae	svc90						;yes, skip ahead
  2009                                  			movzx	eax,al						;function
  2010                                  			shl	eax,2						;offset into table
  2011                                  			call	dword [cs:tsvc+eax]				;far call to indirect address
  2012                                  svc90			iretd							;return from interrupt
  2013                                  ;-----------------------------------------------------------------------------------------------------------------------
  2014                                  ;
  2015                                  ;	Service Request Table
  2016                                  ;
  2017                                  ;
  2018                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2019                                  ;
  2020                                  ;-----------------------------------------------------------------------------------------------------------------------
  2021                                  tsvc			tsvce	PutConsoleString				;tty output asciiz string
  2022                                  			tsvce	GetConsoleString				;get string input
  2023                                  			tsvce	ClearConsoleScreen				;clear console screen
  2024                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  2025                                  			tsvce	UpperCaseString					;upper-case string
  2026                                  			tsvce	CompareMemory					;compare memory
  2027                                  			tsvce	ResetSystem					;reset system using 8042 chip
  2028                                  			tsvce	PutDateString					;put MM/DD/YYYY string
  2029                                  			tsvce	PutTimeString					;put HH:MM:SS string
  2030                                  			tsvce	ReadRealTimeClock				;get real-time clock date and time
  2031                                  			tsvce	UnsignedToDecimalString 			;convert unsigned integer to decimal string
  2032                                  			tsvce	UnsignedToHexadecimal				;convert unsigned integer to hexadecimal string
  2033                                  			tsvce	HexadecimalToUnsigned				;convert hexadecimal string to unsigned integer
  2034                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  2035                                  ;-----------------------------------------------------------------------------------------------------------------------
  2036                                  ;
  2037                                  ;	Service Request Macros
  2038                                  ;
  2039                                  ;	These macros provide positional parameterization of service request calls.
  2040                                  ;
  2041                                  ;-----------------------------------------------------------------------------------------------------------------------
  2042                                  %macro			putConsoleString 0
  2043                                  			mov	al,ePutConsoleString				;AL = put string fn.
  2044                                  			int	_svc						;invoke OS service
  2045                                  %endmacro
  2046                                  %macro			putConsoleString 1
  2047                                  			mov	edx,%1						;EDX = string address
  2048                                  			mov	al,ePutConsoleString				;AL = put string fn.
  2049                                  			int	_svc						;invoke OS service
  2050                                  %endmacro
  2051                                  %macro			getConsoleString 4
  2052                                  			mov	edx,%1						;EDX = buffer address
  2053                                  			mov	ecx,%2						;ECX = max characters
  2054                                  			mov	bh,%3						;BH = echo indicator
  2055                                  			mov	bl,%4						;BL = terminator
  2056                                  			mov	al,eGetConsoleString				;AL = get string fn.
  2057                                  			int	_svc						;invoke OS service
  2058                                  %endmacro
  2059                                  %macro			clearConsoleScreen 0
  2060                                  			mov	al,eClearConsoleScreen				;AL = clear console fn.
  2061                                  			int	_svc						;invoke OS service
  2062                                  %endmacro
  2063                                  %macro			placeCursor 0
  2064                                  			mov	al,ePlaceCursor					;AL = set cursor fn.
  2065                                  			int	_svc						;invoke OS service
  2066                                  %endmacro
  2067                                  %macro			upperCaseString 0
  2068                                  			mov	al,eUpperCaseString				;AL = upper case fn.
  2069                                  			int	_svc						;invoke OS service
  2070                                  %endmacro
  2071                                  %macro			compareMemory 0
  2072                                  			mov	al,eCompareMemory				;AL = compare memory fn.
  2073                                  			int	_svc						;invoke OS service
  2074                                  %endmacro
  2075                                  %macro			resetSystem 0
  2076                                  			mov	al,eResetSystem					;AL = system reset fn.
  2077                                  			int	_svc						;invoke OS service
  2078                                  %endmacro
  2079                                  %macro			putDateString 0
  2080                                  			mov	al,ePutDateString				;function code
  2081                                  			int	_svc						;invoke OS service
  2082                                  %endmacro
  2083                                  %macro			putDateString 2
  2084                                  			mov	ebx,%1						;DATETIME addr
  2085                                  			mov	edx,%2						;output buffer addr
  2086                                  			mov	al,ePutDateString				;function code
  2087                                  			int	_svc						;invoke OS service
  2088                                  %endmacro
  2089                                  %macro			putTimeString 0
  2090                                  			mov	al,ePutTimeString				;function code
  2091                                  			int	_svc						;invoke OS service
  2092                                  %endmacro
  2093                                  %macro			putTimeString 2
  2094                                  			mov	ebx,%1						;DATETIME addr
  2095                                  			mov	edx,%2						;output buffer addr
  2096                                  			mov	al,ePutTimeString				;function code
  2097                                  			int	_svc						;invoke OS service
  2098                                  %endmacro
  2099                                  %macro			readRealTimeClock 0
  2100                                  			mov	al,eReadRealTimeClock				;function code
  2101                                  			int	_svc						;invoke OS service
  2102                                  %endmacro
  2103                                  %macro			readRealTimeClock 1
  2104                                  			mov	ebx,%1						;DATETIME addr
  2105                                  			mov	al,eReadRealTimeClock				;function code
  2106                                  			int	_svc						;invoke OS service
  2107                                  %endmacro
  2108                                  %macro			unsignedToDecimalString 0
  2109                                  			mov	al,eUnsignedToDecimalString			;AL = function code
  2110                                  			int	_svc						;invoke OS service
  2111                                  %endmacro
  2112                                  %macro			unsignedToHexadecimal 0
  2113                                  			mov	al,eUnsignedToHexadecimal			;AL = unsigned to hexademcial fn.
  2114                                  			int	_svc						;invoke OS service
  2115                                  %endmacro
  2116                                  %macro			hexadecimalToUnsigned 0
  2117                                  			mov	al,eHexadecimalToUnsigned			;AL = hex to unsigned fn.
  2118                                  			int	_svc						;invoke OS service
  2119                                  %endmacro
  2120                                  ;-----------------------------------------------------------------------------------------------------------------------
  2121                                  ;
  2122                                  ;	Kernel Function Library
  2123                                  ;
  2124                                  ;-----------------------------------------------------------------------------------------------------------------------
  2125                                  ;-----------------------------------------------------------------------------------------------------------------------
  2126                                  ;
  2127                                  ;	Date and Time Helper Routines
  2128                                  ;
  2129                                  ;	PutDateString
  2130                                  ;	PutTimeString
  2131                                  ;
  2132                                  ;-----------------------------------------------------------------------------------------------------------------------
  2133                                  ;-----------------------------------------------------------------------------------------------------------------------
  2134                                  ;
  2135                                  ;	Routine:	PutDateString
  2136                                  ;
  2137                                  ;	Description:	This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  2138                                  ;			structure at ds:ebx.
  2139                                  ;
  2140                                  ;	In:		DS:EBX	DATETIME address
  2141                                  ;			DS:EDX	output buffer address
  2142                                  ;
  2143                                  ;-----------------------------------------------------------------------------------------------------------------------
  2144                                  PutDateString		push	ecx						;save non-volatile regs
  2145                                  			push	edi						;
  2146                                  			push	es						;
  2147                                  			push	ds						;store data selector ...
  2148                                  			pop	es						;... in extra segment reg
  2149                                  			mov	edi,edx						;output buffer address
  2150                                  			mov	cl,10						;divisor
  2151                                  			mov	edx,002f3030h					;ASCIIZ "00/" (reversed)
  2152                                  			movzx	eax,byte [ebx+DATETIME.month]			;month
  2153                                  			div	cl						;ah = rem; al = quotient
  2154                                  			or	eax,edx						;apply ASCII zones and delimiter
  2155                                  			cld							;forward strings
  2156                                  			stosd							;store "mm/"nul
  2157                                  			dec	edi						;address of terminator
  2158                                  			movzx	eax,byte [ebx+DATETIME.day]			;day
  2159                                  			div	cl						;ah = rem; al = quotient
  2160                                  			or	eax,edx						;apply ASCII zones and delimiter
  2161                                  			stosd							;store "dd/"nul
  2162                                  			dec	edi						;address of terminator
  2163                                  			movzx	eax,byte [ebx+DATETIME.century]			;century
  2164                                  			div	cl						;ah = rem; al = quotient
  2165                                  			or	eax,edx						;apply ASCII zones and delimiter
  2166                                  			stosd							;store "cc/"null
  2167                                  			dec	edi						;address of terminator
  2168                                  			dec	edi						;address of delimiter
  2169                                  			movzx	eax,byte [ebx+DATETIME.year]			;year (yy)
  2170                                  			div	cl						;ah = rem; al = quotient
  2171                                  			or	eax,edx						;apply ASCII zones and delimiter
  2172                                  			stosb							;store quotient
  2173                                  			mov	al,ah						;remainder
  2174                                  			stosb							;store remainder
  2175                                  			xor	al,al						;null terminator
  2176                                  			stosb							;store terminator
  2177                                  			pop	es						;restore non-volatile regs
  2178                                  			pop	edi						;
  2179                                  			pop	ecx						;
  2180                                  			ret							;return
  2181                                  ;-----------------------------------------------------------------------------------------------------------------------
  2182                                  ;
  2183                                  ;	Routine:	PutTimeString
  2184                                  ;
  2185                                  ;	Description:	This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  2186                                  ;			structure at ds:ebx.
  2187                                  ;
  2188                                  ;	In:		DS:EBX	DATETIME address
  2189                                  ;			DS:EDX	output buffer address
  2190                                  ;
  2191                                  ;-----------------------------------------------------------------------------------------------------------------------
  2192                                  PutTimeString		push	ecx						;save non-volatile regs
  2193                                  			push	edi						;
  2194                                  			push	es						;
  2195                                  			push	ds						;store data selector ...
  2196                                  			pop	es						;... in extra segment reg
  2197                                  			mov	edi,edx						;output buffer address
  2198                                  			mov	cl,10						;divisor
  2199                                  			mov	edx,003a3030h					;ASCIIZ "00:" (reversed)
  2200                                  			movzx	eax,byte [ebx+DATETIME.hour]			;hour
  2201                                  			div	cl						;ah = rem; al = quotient
  2202                                  			or	eax,edx						;apply ASCII zones and delimiter
  2203                                  			cld							;forward strings
  2204                                  			stosd							;store "mm/"nul
  2205                                  			dec	edi						;address of terminator
  2206                                  			movzx	eax,byte [ebx+DATETIME.minute]			;minute
  2207                                  			div	cl						;ah = rem; al = quotient
  2208                                  			or	eax,edx						;apply ASCII zones and delimiter
  2209                                  			stosd							;store "dd/"nul
  2210                                  			dec	edi						;address of terminator
  2211                                  			movzx	eax,byte [ebx+DATETIME.second]			;second
  2212                                  			div	cl						;ah = rem; al = quotient
  2213                                  			or	eax,edx						;apply ASCII zones and delimiter
  2214                                  			stosb							;store quotient
  2215                                  			mov	al,ah						;remainder
  2216                                  			stosb							;store remainder
  2217                                  			xor	al,al						;null terminator
  2218                                  			stosb							;store terminator
  2219                                  			pop	es						;restore non-volatile regs
  2220                                  			pop	edi						;
  2221                                  			pop	ecx						;
  2222                                  			ret							;return
  2223                                  ;-----------------------------------------------------------------------------------------------------------------------
  2224                                  ;
  2225                                  ;	String Helper Routines
  2226                                  ;
  2227                                  ;	UpperCaseString
  2228                                  ;	CompareMemory
  2229                                  ;
  2230                                  ;-----------------------------------------------------------------------------------------------------------------------
  2231                                  ;-----------------------------------------------------------------------------------------------------------------------
  2232                                  ;
  2233                                  ;	Routine:	UpperCaseString
  2234                                  ;
  2235                                  ;	Description:	This routine places all characters in the given string to upper case.
  2236                                  ;
  2237                                  ;	In:		DS:EDX	string address
  2238                                  ;
  2239                                  ;	Out:		EDX	string address
  2240                                  ;
  2241                                  ;-----------------------------------------------------------------------------------------------------------------------
  2242                                  UpperCaseString		push	esi						;save non-volatile regs
  2243                                  			mov	esi,edx						;string address
  2244                                  			cld							;forward strings
  2245                                  .10			lodsb							;string character
  2246                                  			test	al,al						;null?
  2247                                  			jz	.20						;yes, skip ahead
  2248                                  			cmp	al,EASCIILOWERA					;lower-case? (lower bounds)
  2249                                  			jb	.10						;no, continue
  2250                                  			cmp	al,EASCIILOWERZ					;lower-case? (upper bounds)
  2251                                  			ja	.10						;no, continue
  2252                                  			and	al,EASCIICASEMASK				;mask for upper case
  2253                                  			mov	[esi-1],al					;upper character
  2254                                  			jmp	.10						;continue
  2255                                  .20			pop	esi						;restore non-volatile regs
  2256                                  			ret							;return
  2257                                  ;-----------------------------------------------------------------------------------------------------------------------
  2258                                  ;
  2259                                  ;	Routine:	CompareMemory
  2260                                  ;
  2261                                  ;	Description:	This routine compares two byte arrays.
  2262                                  ;
  2263                                  ;	In:		DS:EDX	first source address
  2264                                  ;			DS:EBX	second source address
  2265                                  ;			ECX	comparison length
  2266                                  ;
  2267                                  ;	Out:		EDX	first source address
  2268                                  ;			EBX	second source address
  2269                                  ;			ECX	0	array 1 = array 2
  2270                                  ;				<0	array 1 < array 2
  2271                                  ;				>0	array 1 > array 2
  2272                                  ;
  2273                                  ;-----------------------------------------------------------------------------------------------------------------------
  2274                                  CompareMemory		push	esi						;save non-volatile regs
  2275                                  			push	edi						;
  2276                                  			push	es						;
  2277                                  			push	ds						;copy DS
  2278                                  			pop	es						;... to ES
  2279                                  			mov	esi,edx						;first source address
  2280                                  			mov	edi,ebx						;second source address
  2281                                  			cld							;forward strings
  2282                                  			rep	cmpsb						;compare bytes
  2283                                  			mov	al,0						;default result
  2284                                  			jz	.10						;branch if arrays equal
  2285                                  			mov	al,1						;positive result
  2286                                  			jnc	.10						;branch if target > source
  2287                                  			mov	al,-1						;negative result
  2288                                  .10			movsx	ecx,al						;extend sign
  2289                                  			pop	es						;restore regs
  2290                                  			pop	edi						;
  2291                                  			pop	esi						;
  2292                                  			ret							;return
  2293                                  ;-----------------------------------------------------------------------------------------------------------------------
  2294                                  ;
  2295                                  ;	Console Helper Routines
  2296                                  ;
  2297                                  ;	PutConsoleString
  2298                                  ;	GetConsoleString
  2299                                  ;	GetConsoleChar
  2300                                  ;	Yield
  2301                                  ;	PreviousConsoleColumn
  2302                                  ;	NextConsoleColumn
  2303                                  ;	FirstConsoleColumn
  2304                                  ;	NextConsoleRow
  2305                                  ;	PutConsoleChar
  2306                                  ;	PutConsoleOIAShift
  2307                                  ;	PutConsoleOIAChar
  2308                                  ;	PutConsoleHexByte
  2309                                  ;
  2310                                  ;-----------------------------------------------------------------------------------------------------------------------
  2311                                  ;-----------------------------------------------------------------------------------------------------------------------
  2312                                  ;
  2313                                  ;	Routine:	PutConsoleString
  2314                                  ;
  2315                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  2316                                  ;			console position as needed.
  2317                                  ;
  2318                                  ;	In:		EDX	source address
  2319                                  ;			DS	OS data selector
  2320                                  ;
  2321                                  ;-----------------------------------------------------------------------------------------------------------------------
  2322                                  PutConsoleString	push	esi						;save non-volatile regs
  2323                                  			mov	esi,edx						;source address
  2324                                  			cld							;forward strings
  2325                                  .10			lodsb							;ASCII character
  2326                                  			or	al,al						;end of string?
  2327                                  			jz	.40						;yes, skip ahead
  2328                                  			cmp	al,EASCIIRETURN					;carriage return?
  2329                                  			jne	.20						;no, skip ahead
  2330                                  			call	FirstConsoleColumn				;move to start of row
  2331                                  			jmp	.10						;next character
  2332                                  .20			cmp	al,EASCIILINEFEED				;line feed?
  2333                                  			jne	.30						;no, skip ahead
  2334                                  			call	NextConsoleRow					;move to next row
  2335                                  			jmp	.10						;next character
  2336                                  .30			call	PutConsoleChar					;output character to console
  2337                                  			call	NextConsoleColumn				;advance to next column
  2338                                  			jmp	.10						;next character
  2339                                  .40			pop	esi						;restore non-volatile regs
  2340                                  			ret							;return
  2341                                  ;-----------------------------------------------------------------------------------------------------------------------
  2342                                  ;
  2343                                  ;	Routine:	GetConsoleString
  2344                                  ;
  2345                                  ;	Description:	This routine accepts keyboard input into a buffer.
  2346                                  ;
  2347                                  ;	Input:		DS:EDX	target buffer address
  2348                                  ;			ECX	maximum number of characters to accept
  2349                                  ;			BH	echo to terminal
  2350                                  ;			BL	terminating character
  2351                                  ;
  2352                                  ;-----------------------------------------------------------------------------------------------------------------------
  2353                                  GetConsoleString	push	ecx						;save non-volatile regs
  2354                                  			push	esi						;
  2355                                  			push	edi						;
  2356                                  			push	es						;
  2357                                  			push	ds						;load data segment selector ...
  2358                                  			pop	es						;... into extra segment register
  2359                                  			mov	edi,edx						;edi = target buffer
  2360                                  			push	ecx						;save maximum characters
  2361                                  			xor	al,al						;zero register
  2362                                  			cld							;forward strings
  2363                                  			rep	stosb						;zero fill buffer
  2364                                  			pop	ecx						;maximum characters
  2365                                  			mov	edi,edx						;edi = target buffer
  2366                                  			mov	esi,edx						;esi = target buffer
  2367                                  .10			jecxz	.50						;exit if max-length is zero
  2368                                  .20			call	GetConsoleChar					;al = next input char
  2369                                  			cmp	al,bl						;is this the terminator?
  2370                                  			je	.50						;yes, exit
  2371                                  			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  2372                                  			jne	.30						;no, skip ahead
  2373                                  			cmp	esi,edi						;at start of buffer?
  2374                                  			je	.20						;yes, get next character
  2375                                  			dec	edi						;backup target pointer
  2376                                  			mov	byte [edi],0					;zero previous character
  2377                                  			inc	ecx						;increment remaining chars
  2378                                  			test	bh,1						;echo to console?
  2379                                  			jz	.20						;no, get next character
  2380                                  			call	PreviousConsoleColumn				;backup console position
  2381                                  			mov	al,EASCIISPACE					;ASCII space
  2382                                  			call	PutConsoleChar					;write space to console
  2383                                  			call	PlaceCursor					;position the cursor
  2384                                  			jmp	.20						;get next character
  2385                                  .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  2386                                  			jb	.20						;no, get another character
  2387                                  			cmp	al,EASCIITILDE					;printable? (upper bounds)
  2388                                  			ja	.20						;no, get another character
  2389                                  			stosb							;store character in buffer
  2390                                  			test	bh,1						;echo to console?
  2391                                  			jz	.40						;no, skip ahead
  2392                                  			call	PutConsoleChar					;write character to console
  2393                                  			call	NextConsoleColumn				;advance console position
  2394                                  			call	PlaceCursor					;position the cursor
  2395                                  .40			dec	ecx						;decrement remaining chars
  2396                                  			jmp	.10						;next
  2397                                  .50			xor	al,al						;null
  2398                                  			stosb							;terminate buffer
  2399                                  			pop	es						;restore non-volatile regs
  2400                                  			pop	edi						;
  2401                                  			pop	esi						;
  2402                                  			pop	ecx						;
  2403                                  			ret							;return
  2404                                  ;-----------------------------------------------------------------------------------------------------------------------
  2405                                  ;
  2406                                  ;	Routine:	GetConsoleChar
  2407                                  ;
  2408                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  2409                                  ;
  2410                                  ;	Output:		AL	ASCII character code
  2411                                  ;			AH	keyboard scan code
  2412                                  ;
  2413                                  ;-----------------------------------------------------------------------------------------------------------------------
  2414                                  GetConsoleChar.10	call	Yield						;pass control or halt
  2415                                  GetConsoleChar		call	GetMessage					;get the next message
  2416                                  			or	eax,eax						;do we have a message?
  2417                                  			jz	GetConsoleChar.10				;no, skip ahead
  2418                                  			push	eax						;save key codes
  2419                                  			and	eax,0FFFF0000h					;mask for message type
  2420                                  			cmp	eax,EMSGKEYCHAR					;key-char message?
  2421                                  			pop	eax						;restore key codes
  2422                                  			jne	GetConsoleChar					;no, try again
  2423                                  			and	eax,0000ffffh					;mask for key codes
  2424                                  			ret							;return
  2425                                  ;-----------------------------------------------------------------------------------------------------------------------
  2426                                  ;
  2427                                  ;	Routine:	Yield
  2428                                  ;
  2429                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  2430                                  ;
  2431                                  ;-----------------------------------------------------------------------------------------------------------------------
  2432                                  Yield			sti							;enable maskagle interrupts
  2433                                  			hlt							;halt until external interrupt
  2434                                  			ret							;return
  2435                                  ;-----------------------------------------------------------------------------------------------------------------------
  2436                                  ;
  2437                                  ;	Routine:	PreviousConsoleColumn
  2438                                  ;
  2439                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2440                                  ;			the column is set to the last position in the row and the row is decremented.
  2441                                  ;
  2442                                  ;	Input:		DS	OS data selector
  2443                                  ;
  2444                                  ;-----------------------------------------------------------------------------------------------------------------------
  2445                                  PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2446                                  			or	al,al						;start of row?
  2447                                  			jnz	.10						;no, skip ahead
  2448                                  			mov	ah,[wbConsoleRow]				;current row
  2449                                  			or	ah,ah						;top of screen?
  2450                                  			jz	.20						;yes, exit with no change
  2451                                  			dec	ah						;decrement row
  2452                                  			mov	[wbConsoleRow],ah				;save row
  2453                                  			mov	al,ECONCOLS					;set maximum column
  2454                                  .10			dec	al						;decrement column
  2455                                  			mov	[wbConsoleColumn],al				;save column
  2456                                  .20			ret							;return
  2457                                  ;-----------------------------------------------------------------------------------------------------------------------
  2458                                  ;
  2459                                  ;	Routine:	NextConsoleColumn
  2460                                  ;
  2461                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  2462                                  ;			incremented if the end of the current row is reached.
  2463                                  ;
  2464                                  ;	In:		DS	OS data selector
  2465                                  ;
  2466                                  ;-----------------------------------------------------------------------------------------------------------------------
  2467                                  NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2468                                  			inc	al						;increment column
  2469                                  			mov	[wbConsoleColumn],al				;save column
  2470                                  			cmp	al,ECONCOLS					;end of row?
  2471                                  			jb	.10						;no, skip ahead
  2472                                  			call	FirstConsoleColumn				;reset column to start of row
  2473                                  			call	NextConsoleRow					;line feed to next row
  2474                                  .10			ret							;return
  2475                                  ;-----------------------------------------------------------------------------------------------------------------------
  2476                                  ;
  2477                                  ;	Routine:	FirstConsoleColumn
  2478                                  ;
  2479                                  ;	Description:	This routine resets the console column to start of the row.
  2480                                  ;
  2481                                  ;	In:		DS	OS data selector
  2482                                  ;
  2483                                  ;-----------------------------------------------------------------------------------------------------------------------
  2484                                  FirstConsoleColumn	xor	al,al						;zero column
  2485                                  			mov	[wbConsoleColumn],al				;save column
  2486                                  			ret							;return
  2487                                  ;-----------------------------------------------------------------------------------------------------------------------
  2488                                  ;
  2489                                  ;	Routine:	NextConsoleRow
  2490                                  ;
  2491                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  2492                                  ;
  2493                                  ;	In:		DS	OS data selector
  2494                                  ;
  2495                                  ;-----------------------------------------------------------------------------------------------------------------------
  2496                                  NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2497                                  			inc	al						;increment row
  2498                                  			mov	[wbConsoleRow],al				;save row
  2499                                  			cmp	al,ECONROWS					;end of screen?
  2500                                  			jb	.10						;no, skip ahead
  2501                                  			call	ScrollConsoleRow				;scroll up one row
  2502                                  			mov	al,[wbConsoleRow]				;row
  2503                                  			dec	al						;decrement row
  2504                                  			mov	[wbConsoleRow],al				;save row
  2505                                  .10			ret							;return
  2506                                  ;-----------------------------------------------------------------------------------------------------------------------
  2507                                  ;
  2508                                  ;	Routine:	PutConsoleChar
  2509                                  ;
  2510                                  ;	Description:	This routine writes one ASCII character to the console screen.
  2511                                  ;
  2512                                  ;	In:		AL	ASCII character
  2513                                  ;			DS	OS data selector
  2514                                  ;
  2515                                  ;-----------------------------------------------------------------------------------------------------------------------
  2516                                  PutConsoleChar		push	ecx						;save non-volatile regs
  2517                                  			push	es						;
  2518                                  			push	ESELCGA						;load CGA selector ...
  2519                                  			pop	es						;... into extra segment reg
  2520                                  			mov	cl,[wbConsoleColumn]				;column
  2521                                  			mov	ch,[wbConsoleRow]				;row
  2522                                  			call	SetConsoleChar					;put character at row, column
  2523                                  			pop	es						;restore non-volatile regs
  2524                                  			pop	ecx						;
  2525                                  			ret							;return
  2526                                  ;-----------------------------------------------------------------------------------------------------------------------
  2527                                  ;
  2528                                  ;	Routine:	PutConsoleOIAShift
  2529                                  ;
  2530                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2531                                  ;
  2532                                  ;	In:		BL	shift flags
  2533                                  ;			BH	lock flags
  2534                                  ;			DS	OS data selector
  2535                                  ;
  2536                                  ;-----------------------------------------------------------------------------------------------------------------------
  2537                                  PutConsoleOIAShift	push	ecx						;save non-volatile regs
  2538                                  			push	es						;
  2539                                  			push	ESELCGA						;load CGA selector ...
  2540                                  			pop	es						;... into ES register
  2541                                  			mov	ch,ECONOIAROW					;OIA row
  2542                                  			mov	al,EASCIISPACE					;space is default character
  2543                                  			test	bl,EKEYSHIFTLEFT				;left-shift indicated?
  2544                                  			jz	.10						;no, skip ahead
  2545                                  			mov	al,'S'						;yes, indicate with 'S'
  2546                                  .10			mov	cl,14						;indicator column
  2547                                  			call	SetConsoleChar					;display ASCII character
  2548                                  			mov	al,EASCIISPACE					;ASCII space
  2549                                  			test	bl,EKEYSHIFTRIGHT				;right-shift indicated?
  2550                                  			jz	.20						;no, skip ahead
  2551                                  			mov	al,'S'						;yes, indicate with 'S'
  2552                                  .20			mov	cl,64						;indicator column
  2553                                  			call	SetConsoleChar					;display ASCII character
  2554                                  			mov	al,EASCIISPACE					;ASCII space
  2555                                  			test	bl,EKEYCTRLLEFT					;left-ctrl indicated?
  2556                                  			jz	.30						;no, skip ahead
  2557                                  			mov	al,'C'						;yes, indicate with 'C'
  2558                                  .30			mov	cl,15						;indicator column
  2559                                  			call	SetConsoleChar					;display ASCII character
  2560                                  			mov	al,EASCIISPACE					;ASCII space
  2561                                  			test	bl,EKEYCTRLRIGHT				;right-ctrl indicated?
  2562                                  			jz	.40						;no, skip ahead
  2563                                  			mov	al,'C'						;yes, indicate with 'C'
  2564                                  .40			mov	cl,63						;indicator column
  2565                                  			call	SetConsoleChar					;display ASCII character
  2566                                  			mov	al,EASCIISPACE					;ASCII space
  2567                                  			test	bl,EKEYALTLEFT					;left-alt indicated?
  2568                                  			jz	.50						;no, skip ahead
  2569                                  			mov	al,'A'						;yes, indicate with 'A'
  2570                                  .50			mov	cl,16						;indicator column
  2571                                  			call	SetConsoleChar					;display ASCII character
  2572                                  			mov	al,EASCIISPACE					;ASCII space
  2573                                  			test	bl,EKEYALTRIGHT					;right-alt indicated?
  2574                                  			jz	.60						;no, skip ahead
  2575                                  			mov	al,'A'						;yes, indicate with 'A'
  2576                                  .60			mov	cl,62						;indicator column
  2577                                  			call	SetConsoleChar					;display ASCII character
  2578                                  			mov	al,EASCIISPACE					;ASCII space
  2579                                  			test	bh,EKEYLOCKCAPS					;caps-lock indicated?
  2580                                  			jz	.70						;no, skip ahead
  2581                                  			mov	al,'C'						;yes, indicate with 'C'
  2582                                  .70			mov	cl,78						;indicator column
  2583                                  			call	SetConsoleChar					;display ASCII character
  2584                                  			mov	al,EASCIISPACE					;ASCII space
  2585                                  			test	bh,EKEYLOCKNUM					;num-lock indicated?
  2586                                  			jz	.80						;no, skip ahead
  2587                                  			mov	al,'N'						;yes, indicate with 'N'
  2588                                  .80			mov	cl,77						;indicator column
  2589                                  			call	SetConsoleChar					;display ASCII character
  2590                                  			mov	al,EASCIISPACE					;ASCII space
  2591                                  			test	bh,EKEYLOCKSCROLL				;scroll-lock indicated?
  2592                                  			jz	.90						;no, skip ahead
  2593                                  			mov	al,'S'						;yes, indicate with 'S'
  2594                                  .90			mov	cl,76						;indicator column
  2595                                  			call	SetConsoleChar					;display ASCII character
  2596                                  			pop	es						;restore non-volatile regs
  2597                                  			pop	ecx						;
  2598                                  			ret							;return
  2599                                  ;-----------------------------------------------------------------------------------------------------------------------
  2600                                  ;
  2601                                  ;	Routine:	PutConsoleOIAChar
  2602                                  ;
  2603                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  2604                                  ;
  2605                                  ;	In:		DS	OS data selector
  2606                                  ;
  2607                                  ;-----------------------------------------------------------------------------------------------------------------------
  2608                                  PutConsoleOIAChar	push	ebx						;save non-volatile regs
  2609                                  			push	ecx						;
  2610                                  			push	esi						;
  2611                                  			push	ds						;
  2612                                  			push	es						;
  2613                                  			push	ESELDAT						;load OS data selector ...
  2614                                  			pop	ds						;... into data segment register
  2615                                  			push	ESELCGA						;load CGA selector ...
  2616                                  			pop	es						;... into extra segment register
  2617                                  			mov	esi,wbConsoleScan0				;scan codes address
  2618                                  			mov	bh,ECONOIAROW					;OIA row
  2619                                  			mov	bl,0						;starting column
  2620                                  			mov	ecx,6						;maximum scan codes
  2621                                  .10			push	ecx						;save remaining count
  2622                                  			mov	ecx,ebx						;row, column
  2623                                  			lodsb							;read scan code
  2624                                  			or	al,al						;scan code present?
  2625                                  			jz	.20						;no, skip ahead
  2626                                  			call	PutConsoleHexByte				;display scan code
  2627                                  			jmp	.30						;continue
  2628                                  .20			mov	al,' '						;ASCII space
  2629                                  			call	SetConsoleChar					;display space
  2630                                  			inc	cl
  2631                                  			mov	al,' '						;ASCII space
  2632                                  			call	SetConsoleChar					;display space
  2633                                  .30			add	bl,2						;next column (+2)
  2634                                  			pop	ecx						;restore remaining
  2635                                  			loop	.10						;next code
  2636                                  			mov	al,[wbConsoleChar]				;console ASCII character
  2637                                  			cmp	al,32						;printable? (lower-bounds)
  2638                                  			jb	.40						;no, skip ahead
  2639                                  			cmp	al,126						;printable? (upper-bounds)
  2640                                  			ja	.40						;no, skip ahead
  2641                                  			mov	ch,bh						;OIA row
  2642                                  			mov	cl,40						;character display column
  2643                                  			call	SetConsoleChar					;display ASCII character
  2644                                  .40			pop	es						;restore non-volatile regs
  2645                                  			pop	ds						;
  2646                                  			pop	esi						;
  2647                                  			pop	ecx						;
  2648                                  			pop	ebx						;
  2649                                  			ret							;return
  2650                                  ;-----------------------------------------------------------------------------------------------------------------------
  2651                                  ;
  2652                                  ;	Routine:	PutConsoleHexByte
  2653                                  ;
  2654                                  ;	Description:	This routine writes two ASCII characters to the console screen representing the value of a byte.
  2655                                  ;
  2656                                  ;	In:		AL	byte value
  2657                                  ;			CH	row
  2658                                  ;			CL	column
  2659                                  ;			DS	OS data selector
  2660                                  ;			ES	CGA selector
  2661                                  ;
  2662                                  ;-----------------------------------------------------------------------------------------------------------------------
  2663                                  PutConsoleHexByte	push	ebx						;save non-volatile regs
  2664                                  			mov	bl,al						;save byte value
  2665                                  			shr	al,4						;hi-order nybble
  2666                                  			or	al,030h						;apply ASCII zone
  2667                                  			cmp	al,03ah						;numeric?
  2668                                  			jb	.10						;yes, skip ahead
  2669                                  			add	al,7						;add ASCII offset for alpha
  2670                                  .10			call	SetConsoleChar					;display ASCII character
  2671                                  			inc	cl						;increment column
  2672                                  			mov	al,bl						;byte value
  2673                                  			and	al,0fh						;lo-order nybble
  2674                                  			or	al,30h						;apply ASCII zone
  2675                                  			cmp	al,03ah						;numeric?
  2676                                  			jb	.20						;yes, skip ahead
  2677                                  			add	al,7						;add ASCII offset for alpha
  2678                                  .20			call	SetConsoleChar					;display ASCII character
  2679                                  			pop	ebx						;restore non-volatile regs
  2680                                  			ret							;return
  2681                                  ;-----------------------------------------------------------------------------------------------------------------------
  2682                                  ;
  2683                                  ;	Data-Type Conversion Helper Routines
  2684                                  ;
  2685                                  ;	UnsignedToDecimalString
  2686                                  ;	UnsignedToHexadecimal
  2687                                  ;	HexadecimalToUnsigned
  2688                                  ;
  2689                                  ;-----------------------------------------------------------------------------------------------------------------------
  2690                                  ;-----------------------------------------------------------------------------------------------------------------------
  2691                                  ;
  2692                                  ;	Routine:	UnsignedToDecimalString
  2693                                  ;
  2694                                  ;	Description:	This routine creates an ASCIIZ string representing the decimal value of binary input.
  2695                                  ;
  2696                                  ;	Input:		BH	flags		bit 0: 1 = trim leading zeros
  2697                                  ;						bit 1: 1 = include comma grouping delimiters
  2698                                  ;						bit 4: 1 = non-zero digit found (internal)
  2699                                  ;			ECX	32-bit binary
  2700                                  ;			DS:EDX	output buffer address
  2701                                  ;
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703                                  UnsignedToDecimalString push	ebx						;save non-volatile regs
  2704                                  			push	ecx						;
  2705                                  			push	edi						;
  2706                                  			push	es						;
  2707                                  			push	ds						;load data selector
  2708                                  			pop	es						;... into extra segment reg
  2709                                  			mov	edi,edx 					;output buffer address
  2710                                  			and	bh,00001111b					;zero internal flags
  2711                                  			mov	edx,ecx 					;binary
  2712                                  			mov	ecx,1000000000					;10^9 divisor
  2713                                  			call	.30						;divide and store
  2714                                  			mov	ecx,100000000					;10^8 divisor
  2715                                  			call	.10						;divide and store
  2716                                  			mov	ecx,10000000					;10^7 divisor
  2717                                  			call	.30						;divide and store
  2718                                  			mov	ecx,1000000					;10^6 divisor
  2719                                  			call	.30						;divide and store
  2720                                  			mov	ecx,100000					;10^5 divisor
  2721                                  			call	.10						;divide and store
  2722                                  			mov	ecx,10000					;10^4 divisor
  2723                                  			call	.30						;divide and store
  2724                                  			mov	ecx,1000					;10^3 divisor
  2725                                  			call	.30						;divide and store
  2726                                  			mov	ecx,100 					;10^2 divisor
  2727                                  			call	.10						;divide and store
  2728                                  			mov	ecx,10						;10^2 divisor
  2729                                  			call	.30						;divide and store
  2730                                  			mov	eax,edx 					;10^1 remainder
  2731                                  			call	.40						;store
  2732                                  			xor	al,al						;null terminator
  2733                                  			stosb
  2734                                  			pop	es						;restore non-volatile regs
  2735                                  			pop	edi						;
  2736                                  			pop	ecx						;
  2737                                  			pop	ebx						;
  2738                                  			ret							;return
  2739                                  .10			test	bh,00000010b					;comma group delims?
  2740                                  			jz	.30						;no, skip ahead
  2741                                  			test	bh,00000001b					;trim leading zeros?
  2742                                  			jz	.20						;no, store delim
  2743                                  			test	bh,00010000b					;non-zero found?
  2744                                  			jz	.30						;no, skip ahead
  2745                                  .20			mov	al,','						;delimiter
  2746                                  			stosb							;store delimiter
  2747                                  .30			mov	eax,edx 					;lo-orer dividend
  2748                                  			xor	edx,edx 					;zero hi-order
  2749                                  			div	ecx						;divide by power of 10
  2750                                  			or	al,al						;zero?
  2751                                  			jz	.50						;yes, skip ahead
  2752                                  			or	bh,00010000b					;non-zero found
  2753                                  .40			or	al,30h						;ASCII zone
  2754                                  			stosb							;store digit
  2755                                  			ret							;return
  2756                                  .50			test	bh,00000001b					;trim leading zeros?
  2757                                  			jz	.40						;no, store and return
  2758                                  			test	bh,00010000b					;non-zero found?
  2759                                  			jnz	.40						;yes, store and return
  2760                                  			ret							;return
  2761                                  ;-----------------------------------------------------------------------------------------------------------------------
  2762                                  ;
  2763                                  ;	Routine:	UnsignedToHexadecimal
  2764                                  ;
  2765                                  ;	Description:	This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  2766                                  ;
  2767                                  ;	Input:		DS:EDX	output buffer address
  2768                                  ;			ECX	32-bit binary
  2769                                  ;
  2770                                  ;-----------------------------------------------------------------------------------------------------------------------
  2771                                  UnsignedToHexadecimal	push	edi						;store non-volatile regs
  2772                                  			mov	edi,edx						;output buffer address
  2773                                  			mov	edx,ecx						;32-bit unsigned
  2774                                  			xor	ecx,ecx						;zero register
  2775                                  			mov	cl,8						;nybble count
  2776                                  .10			rol	edx,4						;next hi-order nybble in bits 0-3
  2777                                  			mov	al,dl						;????bbbb
  2778                                  			and	al,0fh						;mask out bits 4-7
  2779                                  			or	al,30h						;mask in ascii zone
  2780                                  			cmp	al,3ah						;A through F?
  2781                                  			jb	.20						;no, skip ahead
  2782                                  			add	al,7						;41h through 46h
  2783                                  .20			stosb							;store hexnum
  2784                                  			loop	.10						;next nybble
  2785                                  			xor	al,al						;zero reg
  2786                                  			stosb							;null terminate
  2787                                  			pop	edi						;restore non-volatile regs
  2788                                  			ret							;return
  2789                                  ;-----------------------------------------------------------------------------------------------------------------------
  2790                                  ;
  2791                                  ;	Routine:	HexadecimalToUnsigned
  2792                                  ;
  2793                                  ;	Description:	This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  2794                                  ;
  2795                                  ;	Input:		DS:EDX	null-terminated hexadecimal string address
  2796                                  ;
  2797                                  ;	Output: 	EAX	unsigned integer value
  2798                                  ;
  2799                                  ;-----------------------------------------------------------------------------------------------------------------------
  2800                                  HexadecimalToUnsigned	push	esi						;save non-volatile regs
  2801                                  			mov	esi,edx						;source address
  2802                                  			xor	edx,edx						;zero register
  2803                                  .10			lodsb							;source byte
  2804                                  			test	al,al						;end of string?
  2805                                  			jz	.30						;yes, skip ahead
  2806                                  			cmp	al,'9'						;hexadecimal?
  2807                                  			jna	.20						;no, skip ahead
  2808                                  			sub	al,37h						;'A' = 41h, less 37h = 0Ah
  2809                                  .20			and	eax,0fh						;remove ascii zone
  2810                                  			shl	edx,4						;previous total x 16
  2811                                  			add	edx,eax						;add prior value x 16
  2812                                  			jmp	.10						;next
  2813                                  .30			mov	eax,edx						;result
  2814                                  			pop	esi						;restore non-volatile regs
  2815                                  			ret							;return
  2816                                  ;-----------------------------------------------------------------------------------------------------------------------
  2817                                  ;
  2818                                  ;	Message Queue Helper Routines
  2819                                  ;
  2820                                  ;	PutMessage
  2821                                  ;	GetMessage
  2822                                  ;
  2823                                  ;-----------------------------------------------------------------------------------------------------------------------
  2824                                  ;-----------------------------------------------------------------------------------------------------------------------
  2825                                  ;
  2826                                  ;	Routine:	PutMessage
  2827                                  ;
  2828                                  ;	Description:	This routine adda a message to the message queue.
  2829                                  ;
  2830                                  ;	Input:		ECX	hi-order data word
  2831                                  ;			EDX	lo-order data word
  2832                                  ;
  2833                                  ;	Output:		CY	0 = success
  2834                                  ;				1 = fail: queue is full
  2835                                  ;
  2836                                  ;-----------------------------------------------------------------------------------------------------------------------
  2837                                  PutMessage		push	ds						;save non-volatile regs
  2838                                  			push	ESELMQ						;load task message queue selector ...
  2839                                  			pop	ds						;... into data segment register
  2840                                  			mov	eax,[MQTail]					;tail ptr
  2841                                  			cmp	dword [eax],0					;is queue full?
  2842                                  			stc							;assume failure
  2843                                  			jne	.20						;yes, cannot store
  2844                                  			mov	[eax],edx					;store lo-order data
  2845                                  			mov	[eax+4],ecx					;store hi-order data
  2846                                  			add	eax,8						;next queue element adr
  2847                                  			and	eax,03fch					;at end of queue?
  2848                                  			jnz	.10						;no, skip ahead
  2849                                  			mov	al,8						;reset to top of queue
  2850                                  .10			mov	[MQTail],eax					;save new tail ptr
  2851                                  			clc							;indicate success
  2852                                  .20			pop	ds						;restore non-volatile regs
  2853                                  			ret							;return
  2854                                  ;-----------------------------------------------------------------------------------------------------------------------
  2855                                  ;
  2856                                  ;	Routine:	GetMessage
  2857                                  ;
  2858                                  ;	Description:	This routine reads and removes a message from the message queue.
  2859                                  ;
  2860                                  ;	Output:		EAX	lo-order message data
  2861                                  ;			EDX	hi-order message data
  2862                                  ;
  2863                                  ;			CY	0 = message read
  2864                                  ;				1 = no message to read
  2865                                  ;
  2866                                  ;-----------------------------------------------------------------------------------------------------------------------
  2867                                  GetMessage		push	ebx						;save non-volatile regs
  2868                                  			push	ecx						;
  2869                                  			push	ds						;
  2870                                  			push	ESELMQ						;load message queue selector ...
  2871                                  			pop	ds						;... into data segment register
  2872                                  			mov	ebx,[MQHead]					;head ptr
  2873                                  			mov	eax,[ebx]					;lo-order 32 bits
  2874                                  			mov	edx,[ebx+4]					;hi-order 32 bits
  2875                                  			or	eax,edx						;is queue empty?
  2876                                  			stc							;assume queue is emtpy
  2877                                  			jz	.20						;yes, skip ahead
  2878                                  			xor	ecx,ecx						;store zero
  2879                                  			mov	[ebx],ecx					;... in lo-order dword
  2880                                  			mov	[ebx+4],ecx					;... in hi-order dword
  2881                                  			add	ebx,8						;next queue element
  2882                                  			and	ebx,03fch					;at end of queue?
  2883                                  			jnz	.10						;no, skip ahead
  2884                                  			mov	bl,8						;reset to 1st entry
  2885                                  .10			mov	[MQHead],ebx					;save new head ptr
  2886                                  			clc							;indicate message read
  2887                                  .20			pop	ds						;restore non-volatile regs
  2888                                  			pop	ecx						;
  2889                                  			pop	ebx						;
  2890                                  			ret							;return
  2891                                  ;-----------------------------------------------------------------------------------------------------------------------
  2892                                  ;
  2893                                  ;	Memory-Mapped Video Routines
  2894                                  ;
  2895                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2896                                  ;
  2897                                  ;	ClearConsoleScreen
  2898                                  ;	ScrollConsoleRow
  2899                                  ;	SetConsoleChar
  2900                                  ;
  2901                                  ;-----------------------------------------------------------------------------------------------------------------------
  2902                                  ;-----------------------------------------------------------------------------------------------------------------------
  2903                                  ;
  2904                                  ;	Routine:	ClearConsoleScreen
  2905                                  ;
  2906                                  ;	Description:	This routine clears the console (CGA) screen.
  2907                                  ;
  2908                                  ;-----------------------------------------------------------------------------------------------------------------------
  2909                                  ClearConsoleScreen	push	ecx						;save non-volatile regs
  2910                                  			push	edi						;
  2911                                  			push	ds						;
  2912                                  			push	es						;
  2913                                  			push	ESELDAT						;load OS Data selector ...
  2914                                  			pop	ds						;... into DS register
  2915                                  			push	ESELCGA						;load CGA selector ...
  2916                                  			pop	es						;... into ES register
  2917                                  			mov	eax,ECONCLEARDWORD				;initializtion value
  2918                                  			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  2919                                  			xor	edi,edi						;target offset
  2920                                  			cld							;forward strings
  2921                                  			rep	stosd						;reset screen body
  2922                                  			mov	eax,ECONOIADWORD				;OIA attribute and space
  2923                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2924                                  			rep	stosd						;reset OIA line
  2925                                  			xor	al,al						;zero register
  2926                                  			mov	[wbConsoleRow],al				;reset console row
  2927                                  			mov	[wbConsoleColumn],al				;reset console column
  2928                                  			call	PlaceCursor					;place cursor at current position
  2929                                  			pop	es						;restore non-volatile regs
  2930                                  			pop	ds						;
  2931                                  			pop	edi						;
  2932                                  			pop	ecx						;
  2933                                  			ret							;return
  2934                                  ;-----------------------------------------------------------------------------------------------------------------------
  2935                                  ;
  2936                                  ;	Routine:	ScrollConsoleRow
  2937                                  ;
  2938                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  2939                                  ;
  2940                                  ;-----------------------------------------------------------------------------------------------------------------------
  2941                                  ScrollConsoleRow	push	ecx						;save non-volatile regs
  2942                                  			push	esi						;
  2943                                  			push	edi						;
  2944                                  			push	ds						;
  2945                                  			push	es						;
  2946                                  			push	ESELCGA						;load CGA video selector ...
  2947                                  			pop	ds						;... into DS
  2948                                  			push	ESELCGA						;load CGA video selector ...
  2949                                  			pop	es						;... into ES
  2950                                  			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  2951                                  			mov	esi,ECONROWBYTES				;esi = source (line 2)
  2952                                  			xor	edi,edi						;edi = target (line 1)
  2953                                  			cld							;forward strings
  2954                                  			rep	movsd						;move 24 lines up
  2955                                  			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  2956                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2957                                  			rep	stosd						;clear bottom row
  2958                                  			pop	es						;restore non-volatile regs
  2959                                  			pop	ds						;
  2960                                  			pop	edi						;
  2961                                  			pop	esi						;
  2962                                  			pop	ecx						;
  2963                                  			ret							;return
  2964                                  ;-----------------------------------------------------------------------------------------------------------------------
  2965                                  ;
  2966                                  ;	Routine:	SetConsoleChar
  2967                                  ;
  2968                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  2969                                  ;
  2970                                  ;	In:		AL	ASCII character
  2971                                  ;			CL	column
  2972                                  ;			CH	row
  2973                                  ;			ES	CGA selector
  2974                                  ;
  2975                                  ;-----------------------------------------------------------------------------------------------------------------------
  2976                                  SetConsoleChar		mov	dl,al						;ASCII character
  2977                                  			movzx	eax,ch						;row
  2978                                  			mov	ah,ECONCOLS					;cols/row
  2979                                  			mul	ah						;row * cols/row
  2980                                  			add	al,cl						;add column
  2981                                  			adc	ah,0						;handle carry
  2982                                  			shl	eax,1						;screen offset
  2983                                  			mov	[es:eax],dl					;store character
  2984                                  			ret							;return
  2985                                  ;-----------------------------------------------------------------------------------------------------------------------
  2986                                  ;
  2987                                  ;	Input/Output Routines
  2988                                  ;
  2989                                  ;	These routines read and/or write directly to ports.
  2990                                  ;
  2991                                  ;	PlaceCursor
  2992                                  ;	PutPrimaryEndOfInt
  2993                                  ;	PutSecondaryEndOfInt
  2994                                  ;	ReadRealTimeClock
  2995                                  ;	ResetSystem
  2996                                  ;	SetKeyboardLamps
  2997                                  ;	WaitForKeyInBuffer
  2998                                  ;	WaitForKeyOutBuffer
  2999                                  ;
  3000                                  ;-----------------------------------------------------------------------------------------------------------------------
  3001                                  ;-----------------------------------------------------------------------------------------------------------------------
  3002                                  ;
  3003                                  ;	Routine:	PlaceCursor
  3004                                  ;
  3005                                  ;	Description:	This routine positions the cursor on the console.
  3006                                  ;
  3007                                  ;	In:		DS	OS data selector
  3008                                  ;
  3009                                  ;-----------------------------------------------------------------------------------------------------------------------
  3010                                  PlaceCursor		push	ecx						;save non-volatile regs
  3011                                  			mov	al,[wbConsoleRow]				;al = row
  3012                                  			mov	ah,ECONCOLS					;ah = cols/row
  3013                                  			mul	ah						;row offset
  3014                                  			add	al,[wbConsoleColumn]				;add column
  3015                                  			adc	ah,0						;add overflow
  3016                                  			mov	ecx,eax						;screen offset
  3017                                  			mov	dl,ECRTPORTLO					;crt controller port lo
  3018                                  			mov	dh,ECRTPORTHI					;crt controller port hi
  3019                                  			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  3020                                  			out	dx,al						;select register
  3021                                  			inc	edx						;data port
  3022                                  			mov	al,ch						;hi-order cursor loc
  3023                                  			out	dx,al						;store hi-order loc
  3024                                  			dec	edx						;register select port
  3025                                  			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  3026                                  			out	dx,al						;select register
  3027                                  			inc	edx						;data port
  3028                                  			mov	al,cl						;lo-order cursor loc
  3029                                  			out	dx,al						;store lo-order loc
  3030                                  			pop	ecx						;restore non-volatile regs
  3031                                  			ret							;return
  3032                                  ;-----------------------------------------------------------------------------------------------------------------------
  3033                                  ;
  3034                                  ;	Routine:	PutPrimaryEndOfInt
  3035                                  ;
  3036                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3037                                  ;
  3038                                  ;-----------------------------------------------------------------------------------------------------------------------
  3039                                  PutPrimaryEndOfInt	sti							;enable maskable interrupts
  3040                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  3041                                  			out	EPICPORTPRI,al					;send EOI to primary PIC
  3042                                  			ret							;return
  3043                                  ;-----------------------------------------------------------------------------------------------------------------------
  3044                                  ;
  3045                                  ;	Routine:	PutSecondaryEndOfInt
  3046                                  ;
  3047                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3048                                  ;
  3049                                  ;-----------------------------------------------------------------------------------------------------------------------
  3050                                  PutSecondaryEndOfInt	sti							;enable maskable interrupts
  3051                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  3052                                  			out	EPICPORTSEC,al					;send EOI to secondary PIC
  3053                                  			ret							;return
  3054                                  ;-----------------------------------------------------------------------------------------------------------------------
  3055                                  ;
  3056                                  ;	Routine:	ReadRealTimeClock
  3057                                  ;
  3058                                  ;	Description:	This routine gets current date time from the real-time clock.
  3059                                  ;
  3060                                  ;	In:		DS:EBX	DATETIME structure
  3061                                  ;
  3062                                  ;-----------------------------------------------------------------------------------------------------------------------
  3063                                  ReadRealTimeClock	push	esi						;save non-volatile regs
  3064                                  			push	edi						;
  3065                                  			push	es						;
  3066                                  			push	ds						;store data selector ...
  3067                                  			pop	es						;... in es register
  3068                                  			mov	edi,ebx						;date-time structure
  3069                                  			mov	al,ERTCSECONDREG				;second register
  3070                                  			out	ERTCREGPORT,al					;select second register
  3071                                  			in	al,ERTCDATAPORT					;read second register
  3072                                  			cld							;forward strings
  3073                                  			stosb							;store second value
  3074                                  			mov	al,ERTCMINUTEREG				;minute register
  3075                                  			out	ERTCREGPORT,al					;select minute register
  3076                                  			in	al,ERTCDATAPORT					;read minute register
  3077                                  			stosb							;store minute value
  3078                                  			mov	al,ERTCHOURREG					;hour register
  3079                                  			out	ERTCREGPORT,al					;select hour register
  3080                                  			in	al,ERTCDATAPORT					;read hour register
  3081                                  			stosb							;store hour value
  3082                                  			mov	al,ERTCWEEKDAYREG				;weekday register
  3083                                  			out	ERTCREGPORT,al					;select weekday register
  3084                                  			in	al,ERTCDATAPORT					;read weekday register
  3085                                  			stosb							;store weekday value
  3086                                  			mov	al,ERTCDAYREG					;day register
  3087                                  			out	ERTCREGPORT,al					;select day register
  3088                                  			in	al,ERTCDATAPORT					;read day register
  3089                                  			stosb							;store day value
  3090                                  			mov	al,ERTCMONTHREG					;month register
  3091                                  			out	ERTCREGPORT,al					;select month register
  3092                                  			in	al,ERTCDATAPORT					;read month register
  3093                                  			stosb							;store month value
  3094                                  			mov	al,ERTCYEARREG					;year register
  3095                                  			out	ERTCREGPORT,al					;select year register
  3096                                  			in	al,ERTCDATAPORT					;read year register
  3097                                  			stosb							;store year value
  3098                                  			mov	al,ERTCCENTURYREG				;century register
  3099                                  			out	ERTCREGPORT,al					;select century register
  3100                                  			in	al,ERTCDATAPORT					;read century register
  3101                                  			stosb							;store century value
  3102                                  			mov	al,ERTCSTATUSREG				;status register
  3103                                  			out	ERTCREGPORT,al					;select status register
  3104                                  			in	al,ERTCDATAPORT					;read status register
  3105                                  			test	al,ERTCBINARYVALS				;test if values are binary
  3106                                  			jnz	.20						;skip ahead if binary values
  3107                                  			mov	esi,ebx						;date-time structure address
  3108                                  			mov	edi,ebx						;date-time structure address
  3109                                  			mov	ecx,8						;loop counter
  3110                                  .10			lodsb							;BCD value
  3111                                  			mov	ah,al						;BCD value
  3112                                  			and	al,00001111b					;low-order decimal zone
  3113                                  			and	ah,11110000b					;hi-order decimal zone
  3114                                  			shr	ah,1						;hi-order decimal * 8
  3115                                  			add	al,ah						;low-order + hi-order * 8
  3116                                  			shr	ah,2						;hi-order decimal * 2
  3117                                  			add	al,ah						;low-order + hi-order * 10
  3118                                  			stosb							;replace BCD with binary
  3119                                  			loop	.10						;next value
  3120                                  .20			pop	es						;restore non-volatile regs
  3121                                  			pop	edi						;
  3122                                  			pop	esi						;
  3123                                  			ret							;return
  3124                                  ;-----------------------------------------------------------------------------------------------------------------------
  3125                                  ;
  3126                                  ;	Routine:	ResetSystem
  3127                                  ;
  3128                                  ;	Description:	This routine restarts the system using the 8042 controller.
  3129                                  ;
  3130                                  ;-----------------------------------------------------------------------------------------------------------------------
  3131                                  ResetSystem		mov	ecx,001fffffh					;delay to clear ints
  3132                                  			loop	$						;clear interrupts
  3133                                  			mov	al,EKEYCMDRESET					;mask out bit zero
  3134                                  			out	EKEYPORTSTAT,al					;drive bit zero low
  3135                                  .10			sti							;enable maskable interrupts
  3136                                  			hlt							;halt until interrupt
  3137                                  			jmp	.10						;repeat until reset kicks in
  3138                                  ;-----------------------------------------------------------------------------------------------------------------------
  3139                                  ;
  3140                                  ;	Routine:	SetKeyboardLamps
  3141                                  ;
  3142                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  3143                                  ;
  3144                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3145                                  ;
  3146                                  ;-----------------------------------------------------------------------------------------------------------------------
  3147                                  SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  3148                                  			mov	al,EKEYCMDLAMPS					;set/reset lamps command
  3149                                  			out	EKEYPORTDATA,al					;send command to 8042
  3150                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  3151                                  			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  3152                                  			call	WaitForKeyInBuffer				;wait for input buffer ready
  3153                                  			mov	al,bh						;set/reset lamps value
  3154                                  			out	EKEYPORTDATA,al					;send lamps value
  3155                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  3156                                  			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  3157                                  			ret							;return
  3158                                  ;-----------------------------------------------------------------------------------------------------------------------
  3159                                  ;
  3160                                  ;	Routine:	WaitForKeyInBuffer
  3161                                  ;
  3162                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  3163                                  ;
  3164                                  ;	Out:		ZF	1 = Input buffer ready
  3165                                  ;				0 = Input buffer not ready after timeout
  3166                                  ;
  3167                                  ;-----------------------------------------------------------------------------------------------------------------------
  3168                                  WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  3169                                  			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  3170                                  .10			in	al,EKEYPORTSTAT					;keyboard status byte
  3171                                  			test	al,EKEYBITIN					;is input buffer still full?
  3172                                  			loopnz	.10						;yes, repeat till timeout
  3173                                  			pop	ecx						;restore non-volatile regs
  3174                                  			ret							;return
  3175                                  ;-----------------------------------------------------------------------------------------------------------------------
  3176                                  ;
  3177                                  ;	Routine:	WaitForKeyOutBuffer
  3178                                  ;
  3179                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  3180                                  ;
  3181                                  ;	Out:		ZF	0 = Output buffer has data from controller
  3182                                  ;				1 = Output buffer empty after timeout
  3183                                  ;
  3184                                  ;-----------------------------------------------------------------------------------------------------------------------
  3185                                  WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  3186                                  			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  3187                                  .10			in	al,EKEYPORTSTAT					;keyboard status byte
  3188                                  			test	al,EKEYBITOUT					;output buffer status bit
  3189                                  			loopz	.10						;loop until output buffer bit
  3190                                  			pop	ecx						;restore non-volatile regs
  3191                                  			ret							;return
  3192                                  ;-----------------------------------------------------------------------------------------------------------------------
  3193                                  ;
  3194                                  ;	End of the Kernel Function Library
  3195                                  ;
  3196                                  ;-----------------------------------------------------------------------------------------------------------------------
  3197                                  			times	8190-($-$$) db 0h				;zero fill to end of section
  3198                                  			db	055h,0AAh					;end of segment
  3199                                  ;-----------------------------------------------------------------------------------------------------------------------
  3200                                  ;
  3201                                  ;	Console Task
  3202                                  ;
  3203                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3204                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3205                                  ;	screen and responds to user commands.
  3206                                  ;
  3207                                  ;-----------------------------------------------------------------------------------------------------------------------
  3208                                  ;-----------------------------------------------------------------------------------------------------------------------
  3209                                  ;
  3210                                  ;	Console Stack								@disk: 007400	@mem:  004000
  3211                                  ;
  3212                                  ;	This is the stack for the console task. It supports 448 nested calls.
  3213                                  ;
  3214                                  ;-----------------------------------------------------------------------------------------------------------------------
  3215                                  section			constack						;console task stack
  3216                                  			times	1792-($-$$) db 0h				;zero fill to end of section
  3217                                  ;-----------------------------------------------------------------------------------------------------------------------
  3218                                  ;
  3219                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  3220                                  ;
  3221                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3222                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3223                                  ;	16 descriptors. Six are initially defined.
  3224                                  ;
  3225                                  ;-----------------------------------------------------------------------------------------------------------------------
  3226                                  section			conldt							;console local descriptors
  3227                                  			dq	004093004780007Fh				;04 TSS alias
  3228                                  			dq	004093004700007Fh				;0C LDT alias
  3229                                  			dq	00409300400006FFh				;14 stack
  3230                                  			dq	00CF93000000FFFFh				;1C data
  3231                                  			dq	00409B0050000FFFh				;24 code
  3232                                  			dq	00409300480007FFh				;2C message queue
  3233                                  			times	128-($-$$) db 0h				;zero fill to end of section
  3234                                  ;-----------------------------------------------------------------------------------------------------------------------
  3235                                  ;
  3236                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  3237                                  ;
  3238                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3239                                  ;	segment. CS to console code.
  3240                                  ;
  3241                                  ;-----------------------------------------------------------------------------------------------------------------------
  3242                                  section			contss							;console task state segment
  3243                                  			dd	0						;00 back-link tss
  3244                                  			dd	0700h						;04 esp ring 0
  3245                                  			dd	0014h						;08 ss ring 0
  3246                                  			dd	0700h						;0C esp ring 1
  3247                                  			dd	0014h						;10 es ring 1
  3248                                  			dd	0700h						;14 esp ring 2
  3249                                  			dd	0014h						;18 ss ring 2
  3250                                  			dd	0						;1C cr ring 3
  3251                                  			dd	0						;20 eip
  3252                                  			dd	0200h						;24 eflags
  3253                                  			dd	0						;28 eax
  3254                                  			dd	0						;2C ecx
  3255                                  			dd	0						;30 edx
  3256                                  			dd	0						;34 ebx
  3257                                  			dd	0700h						;38 esp ring 3
  3258                                  			dd	0						;3C ebp
  3259                                  			dd	0						;40 esi
  3260                                  			dd	0						;44 edi
  3261                                  			dd	001Ch						;48 es
  3262                                  			dd	0024h						;4C cs
  3263                                  			dd	0014h						;50 ss ring 3
  3264                                  			dd	001Ch						;54 ds
  3265                                  			dd	0						;58 fs
  3266                                  			dd	0						;5c gs
  3267                                  			dd	0050h						;60 ldt selector in gdt
  3268                                  			times	128-($-$$) db 0h				;zero fill to end of section
  3269                                  ;-----------------------------------------------------------------------------------------------------------------------
  3270                                  ;
  3271                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  3272                                  ;
  3273                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3274                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3275                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3276                                  ;	event.
  3277                                  ;
  3278                                  ;-----------------------------------------------------------------------------------------------------------------------
  3279                                  section			conmque							;console message queue
  3280                                  			dd	8						;head pointer
  3281                                  			dd	8						;tail pointer
  3282                                  			times	510 dd 0					;queue elements
  3283                                  ;-----------------------------------------------------------------------------------------------------------------------
  3284                                  ;
  3285                                  ;	Console Code								@disk: 008400	@mem: 005000
  3286                                  ;
  3287                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3288                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3289                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3290                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3291                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3292                                  ;	board input, echoing to the console screen and responding to user commands.
  3293                                  ;
  3294                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  3295                                  ;
  3296                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  3297                                  ;				|  Real Mode Interrupt Vectors			|
  3298                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  3299                                  ;				|  Reserved BIOS Memory Area			|
  3300                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  3301                                  ;				|  Shared Kernel Memory Area			|
  3302                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  3303                                  ;				|  Global Descriptor Table (GDT)		|
  3304                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  3305                                  ;				|  Interrupt Descriptor Table (IDT)		|
  3306                                  ;			002000	+-----------------------------------------------+
  3307                                  ;				|  Interrupt Handlers				|
  3308                                  ;				|  Kernel Function Library			|
  3309                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  3310                                  ;				|  Console Task Stack Area			|
  3311                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  3312                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  3313                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  3314                                  ;				|  Console Task Task State Segment (TSS)	|
  3315                                  ;			004800	+-----------------------------------------------+
  3316                                  ;				|  Console Task Message Queue			|
  3317                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  3318                                  ;				|  Console Task Code				|
  3319                                  ;				|  Console Task Constants			|
  3320                                  ;			006000	+===============================================+
  3321                                  ;
  3322                                  ;-----------------------------------------------------------------------------------------------------------------------
  3323                                  section			concode	vstart=5000h					;labels relative to 5000h
  3324                                  ConCode			call	ConInitializeData				;initialize console variables
  3325                                  
  3326                                  			clearConsoleScreen					;clear the console screen
  3327                                  			putConsoleString czTitle				;display startup message
  3328                                  .10			putConsoleString czPrompt				;display input prompt
  3329                                  			placeCursor						;set CRT cursor location
  3330                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  3331                                  			putConsoleString czNewLine				;newline
  3332                                  
  3333                                  			mov	byte [wzConsoleToken],0				;null-terminate token buffer
  3334                                  			mov	edx,wzConsoleInBuffer				;console input buffer
  3335                                  			mov	ebx,wzConsoleToken				;token buffer
  3336                                  			call	ConTakeToken					;handle console input
  3337                                  			mov	edx,wzConsoleToken				;token buffer
  3338                                  			call	ConDetermineCommand				;determine command number
  3339                                  			cmp	eax,ECONJMPTBLCNT				;valid command number?
  3340                                  			jb	.20						;yes, branch
  3341                                  
  3342                                  			putConsoleString czUnknownCommand			;display error message
  3343                                  
  3344                                  			jmp	.10						;next command
  3345                                  .20			shl	eax,2						;index into jump table
  3346                                  			mov	edx,tConJmpTbl					;jump table base address
  3347                                  			mov	eax,[edx+eax]					;command handler routine address
  3348                                  			call	eax						;call command handler
  3349                                  			jmp	.10						;next command
  3350                                  ;-----------------------------------------------------------------------------------------------------------------------
  3351                                  ;
  3352                                  ;	Routine:	ConInitializeData
  3353                                  ;
  3354                                  ;	Description:	This routine initializes console task variables.
  3355                                  ;
  3356                                  ;-----------------------------------------------------------------------------------------------------------------------
  3357                                  ConInitializeData	push	ecx						;save non-volatile regs
  3358                                  			push	edi						;
  3359                                  			push	es						;
  3360                                  			push	ESELDAT						;load OS data selector ...
  3361                                  			pop	es						;... into extra segment register
  3362                                  			mov	edi,ECONDATA					;OS console data address
  3363                                  			xor	al,al						;initialization value
  3364                                  			mov	ecx,ECONDATALEN					;size of OS console data
  3365                                  			cld							;forward strings
  3366                                  			rep	stosb						;initialize data
  3367                                  			pop	es						;restore non-volatile regs
  3368                                  			pop	edi						;
  3369                                  			pop	ecx						;
  3370                                  			ret							;return
  3371                                  ;-----------------------------------------------------------------------------------------------------------------------
  3372                                  ;
  3373                                  ;	Routine:	ConTakeToken
  3374                                  ;
  3375                                  ;	Description:	This routine extracts the next token from the given source buffer.
  3376                                  ;
  3377                                  ;	In:		DS:EDX	source buffer address
  3378                                  ;			DS:EBX	target buffer address
  3379                                  ;
  3380                                  ;	Out:		DS:EDX	source buffer address
  3381                                  ;			DS:EBX	target buffer address
  3382                                  ;
  3383                                  ;	Command Form:	Line	= *3( *SP 1*ALNUM )
  3384                                  ;
  3385                                  ;-----------------------------------------------------------------------------------------------------------------------
  3386                                  ConTakeToken		push	esi						;save non-volatile regs
  3387                                  			push	edi						;
  3388                                  			mov	esi,edx						;source buffer address
  3389                                  			mov	edi,ebx						;target buffer address
  3390                                  			cld							;forward strings
  3391                                  .10			lodsb							;load byte
  3392                                  			cmp	al,EASCIISPACE					;space?
  3393                                  			je	.10						;yes, continue
  3394                                  			test	al,al						;end of line?
  3395                                  			jz	.40						;yes, branch
  3396                                  .20			stosb							;store byte
  3397                                  			lodsb							;load byte
  3398                                  			test	al,al						;end of line?
  3399                                  			jz	.40						;no, continue
  3400                                  			cmp	al,EASCIISPACE					;space?
  3401                                  			jne	.20						;no, continue
  3402                                  .30			lodsb							;load byte
  3403                                  			cmp	al,EASCIISPACE					;space?
  3404                                  			je	.30						;yes, continue
  3405                                  			dec	esi						;pre-position
  3406                                  .40			mov	byte [edi],0					;terminate buffer
  3407                                  			mov	edi,edx						;source buffer address
  3408                                  .50			lodsb							;remaining byte
  3409                                  			stosb							;move to front of buffer
  3410                                  			test	al,al						;end of line?
  3411                                  			jnz	.50						;no, continue
  3412                                  			pop	edi						;restore non-volatile regs
  3413                                  			pop	esi						;
  3414                                  			ret							;return
  3415                                  ;-----------------------------------------------------------------------------------------------------------------------
  3416                                  ;
  3417                                  ;	Routine:	ConDetermineCommand
  3418                                  ;
  3419                                  ;	Description:	This routine determines the command number for the command at DS:EDX.
  3420                                  ;
  3421                                  ;	input:		DS:EDX	command address
  3422                                  ;
  3423                                  ;	output:		EAX	>=0	= command nbr
  3424                                  ;				0	= unknown command
  3425                                  ;
  3426                                  ;-----------------------------------------------------------------------------------------------------------------------
  3427                                  ConDetermineCommand	push	ebx						;save non-volatile regs
  3428                                  			push	esi						;
  3429                                  			push	edi						;
  3430                                  
  3431                                  			upperCaseString						;upper-case string at EDX
  3432                                  
  3433                                  			mov	esi,tConCmdTbl					;commands table
  3434                                  			xor	edi,edi						;intialize command number
  3435                                  			cld							;forward strings
  3436                                  .10			lodsb							;command length
  3437                                  			movzx	ecx,al						;command length
  3438                                  			jecxz	.20						;branch if end of table
  3439                                  			mov	ebx,esi						;table entry address
  3440                                  			add	esi,ecx						;next table entry address
  3441                                  
  3442                                  			compareMemory						;compare byte arrays at EDX, EBX
  3443                                  
  3444                                  			jecxz	.20						;branch if equal
  3445                                  			inc	edi						;increment command nbr
  3446                                  			jmp	.10						;repeat
  3447                                  .20			mov	eax,edi						;command number
  3448                                  			pop	edi						;restore non-volatile regs
  3449                                  			pop	esi						;
  3450                                  			pop	ebx						;
  3451                                  			ret							;return
  3452                                  ;-----------------------------------------------------------------------------------------------------------------------
  3453                                  ;
  3454                                  ;	Routine:	ConClear
  3455                                  ;
  3456                                  ;	Description:	This routine handles the CLEAR command and its CLS alias.
  3457                                  ;
  3458                                  ;-----------------------------------------------------------------------------------------------------------------------
  3459                                  ConClear		clearConsoleScreen					;clear console screen
  3460                                  			ret							;return
  3461                                  ;-----------------------------------------------------------------------------------------------------------------------
  3462                                  ;
  3463                                  ;	Routine:	ConDate
  3464                                  ;
  3465                                  ;	Description:	This routine handles the DATE command.
  3466                                  ;
  3467                                  ;-----------------------------------------------------------------------------------------------------------------------
  3468                                  ConDate			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  3469                                  			putDateString	  wsConsoleDateTime, wzConsoleOutBuffer	;format date string
  3470                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  3471                                  			putConsoleString  czNewLine				;write newline to console
  3472                                  			ret							;return
  3473                                  ;-----------------------------------------------------------------------------------------------------------------------
  3474                                  ;
  3475                                  ;	Routine:	ConExit
  3476                                  ;
  3477                                  ;	Description:	This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3478                                  ;
  3479                                  ;-----------------------------------------------------------------------------------------------------------------------
  3480                                  ConExit			resetSystem						;issue system reset
  3481                                  			ret							;return
  3482                                  ;-----------------------------------------------------------------------------------------------------------------------
  3483                                  ;
  3484                                  ;	Routine:	ConMem
  3485                                  ;
  3486                                  ;	Description:	This routine handles the MEMORY command and its MEM alias.
  3487                                  ;
  3488                                  ;	Input:		wzConsoleInBuffer contains parameter(s)
  3489                                  ;
  3490                                  ;-----------------------------------------------------------------------------------------------------------------------
  3491                                  ConMem			push	ebx						;save non-volatile regs
  3492                                  			push	esi						;
  3493                                  			push	edi						;
  3494                                  ;
  3495                                  ;			update the source address if a parameter is given
  3496                                  ;
  3497                                  			mov	edx,wzConsoleInBuffer				;console input buffer address (params)
  3498                                  			mov	ebx,wzConsoleToken				;console command token address
  3499                                  			call	ConTakeToken					;take first param as token
  3500                                  			cmp	byte [wzConsoleToken],0				;token found?
  3501                                  			je	.10						;no, branch
  3502                                  			mov	edx,wzConsoleToken				;first param as token address
  3503                                  
  3504                                  			hexadecimalToUnsigned					;convert string token to unsigned
  3505                                  
  3506                                  			mov	[wfConsoleMemAddr],eax				;save console memory address
  3507                                  ;
  3508                                  ;			setup source address and row count
  3509                                  ;
  3510                                  .10			mov	esi,[wfConsoleMemAddr]				;source memory address
  3511                                  			xor	ecx,ecx						;zero register
  3512                                  			mov	cl,16						;row count
  3513                                  ;
  3514                                  ;			start the row with the source address in hexadecimal
  3515                                  ;
  3516                                  .20			push	ecx						;save remaining rows
  3517                                  			mov	edi,wzConsoleOutBuffer				;output buffer address
  3518                                  			mov	edx,edi						;output buffer address
  3519                                  			mov	ecx,esi						;console memory address
  3520                                  
  3521                                  			unsignedToHexadecimal					;convert unsigned address to hex string
  3522                                  
  3523                                  			add	edi,8						;end of memory addr hexnum
  3524                                  			mov	al,' '						;ascii space
  3525                                  			stosb							;store delimiter
  3526                                  ;
  3527                                  ;			output 16 ASCII hexadecimal byte values for the row
  3528                                  ;
  3529                                  			xor	ecx,ecx						;zero register
  3530                                  			mov	cl,16						;loop count
  3531                                  .30			push	ecx						;save loop count
  3532                                  			lodsb							;memory byte
  3533                                  			mov	ah,al						;memory byte
  3534                                  			shr	al,4						;high-order in bits 3-0
  3535                                  			or	al,30h						;apply ascii numeric zone
  3536                                  			cmp	al,3ah						;numeric range?
  3537                                  			jb	.40						;yes, skip ahead
  3538                                  			add	al,7						;adjust ascii for 'A'-'F'
  3539                                  .40			stosb							;store ascii hexadecimal of high-order
  3540                                  			mov	al,ah						;low-order in bits 3-0
  3541                                  			and	al,0fh						;mask out high-order bits
  3542                                  			or	al,30h						;apply ascii numeric zone
  3543                                  			cmp	al,3ah						;numeric range?
  3544                                  			jb	.50						;yes, skip ahead
  3545                                  			add	al,7						;adjust ascii for 'A'-'F'
  3546                                  .50			stosb							;store ascii hexadecimal of low-order
  3547                                  			mov	al,' '						;ascii space
  3548                                  			stosb							;store ascii space delimiter
  3549                                  			pop	ecx						;loop count
  3550                                  			loop	.30						;next
  3551                                  ;
  3552                                  ;			output printable ASCII character section for the row
  3553                                  ;
  3554                                  			sub	esi,16						;reset source pointer
  3555                                  			mov	cl,16						;loop count
  3556                                  .60			lodsb							;source byte
  3557                                  			cmp	al,32						;printable? (low-range test)
  3558                                  			jb	.70						;no, skip ahead
  3559                                  			cmp	al,128						;printable? (high-range test)
  3560                                  			jb	.80						;yes, skip ahead
  3561                                  .70			mov	al,' '						;display space instead of printable
  3562                                  .80			stosb							;store printable ascii byte
  3563                                  			loop	.60						;next source byte
  3564                                  			xor	al,al						;nul-terminator
  3565                                  			stosb							;terminate output line
  3566                                  ;
  3567                                  ;			display constructed output buffer and newline
  3568                                  ;
  3569                                  			putConsoleString wzConsoleOutBuffer			;display constructed output
  3570                                  			putConsoleString czNewLine				;display new line
  3571                                  ;
  3572                                  ;			repeat until all lines displayed and preserve source address
  3573                                  ;
  3574                                  			pop	ecx						;remaining rows
  3575                                  			loop	.20						;next row
  3576                                  			mov	[wfConsoleMemAddr],esi				;update console memory address
  3577                                  			pop	edi						;restore regs
  3578                                  			pop	esi						;
  3579                                  			pop	ebx						;
  3580                                  			ret							;return
  3581                                  ;-----------------------------------------------------------------------------------------------------------------------
  3582                                  ;
  3583                                  ;	Routine:	ConTime
  3584                                  ;
  3585                                  ;	Description:	This routine Handles the TIME command.
  3586                                  ;
  3587                                  ;-----------------------------------------------------------------------------------------------------------------------
  3588                                  ConTime			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  3589                                  			putTimeString	  wsConsoleDateTime,wzConsoleOutBuffer	;format time string
  3590                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  3591                                  			putConsoleString  czNewLine				;write newline to console
  3592                                  			ret							;return
  3593                                  ;-----------------------------------------------------------------------------------------------------------------------
  3594                                  ;
  3595                                  ;	Routine:	ConVersion
  3596                                  ;
  3597                                  ;	Description:	This routine handles the VERSION command and its alias, VER.
  3598                                  ;
  3599                                  ;-----------------------------------------------------------------------------------------------------------------------
  3600                                  ConVersion		putConsoleString czTitle				;display version message
  3601                                  			ret							;return
  3602                                  ;-----------------------------------------------------------------------------------------------------------------------
  3603                                  ;
  3604                                  ;	Tables
  3605                                  ;
  3606                                  ;-----------------------------------------------------------------------------------------------------------------------
  3607                                  										;---------------------------------------
  3608                                  										;  Command Jump Table
  3609                                  										;---------------------------------------
  3610                                  tConJmpTbl		equ	$						;command jump table
  3611                                  			dd	ConExit		- ConCode			;shutdown command routine offset
  3612                                  			dd	ConVersion	- ConCode			;version command routine offset
  3613                                  			dd	ConMem		- ConCode			;memory command routine offset
  3614                                  			dd	ConClear	- ConCode			;clear command routine offset
  3615                                  			dd	ConDate		- ConCode			;date command routine offset
  3616                                  			dd	ConExit		- ConCode			;exit command routine offset
  3617                                  			dd	ConExit		- ConCode			;quit command routine offset
  3618                                  			dd	ConTime		- ConCode			;time command routine offset
  3619                                  			dd	ConClear	- ConCode			;cls command routine offset
  3620                                  			dd	ConMem		- ConCode			;mem command routine offset
  3621                                  			dd	ConVersion	- ConCode			;ver command routine offset
  3622                                  ECONJMPTBLL		equ	($-tConJmpTbl)					;table length
  3623                                  ECONJMPTBLCNT		equ	ECONJMPTBLL/4					;table entries
  3624                                  										;---------------------------------------
  3625                                  										;  Command Name Table
  3626                                  										;---------------------------------------
  3627                                  tConCmdTbl		equ	$						;command name table
  3628                                  			db	9,"SHUTDOWN",0					;shutdown command
  3629                                  			db	8,"VERSION",0					;version command
  3630                                  			db	7,"MEMORY",0					;memory command
  3631                                  			db	6,"CLEAR",0					;clear command
  3632                                  			db	5,"DATE",0					;date command
  3633                                  			db	5,"EXIT",0					;exit command
  3634                                  			db	5,"QUIT",0					;quit command
  3635                                  			db	5,"TIME",0					;time command
  3636                                  			db	4,"CLS",0					;cls command
  3637                                  			db	4,"MEM",0					;mem command
  3638                                  			db	4,"VER",0					;ver command
  3639                                  			db	0						;end of table
  3640                                  ;-----------------------------------------------------------------------------------------------------------------------
  3641                                  ;
  3642                                  ;	Constants
  3643                                  ;
  3644                                  ;-----------------------------------------------------------------------------------------------------------------------
  3645                                  czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  3646                                  czPrompt		db	":",0						;prompt string
  3647                                  czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  3648                                  czNewLine		db	13,10,0						;new line string
  3649                                  			times	4094-($-$$) db 0h				;zero fill to end of section
  3650                                  			db	055h,0AAh					;end of section
  3651                                  %endif
  3652                                  %ifdef BUILDDISK
  3653                                  ;-----------------------------------------------------------------------------------------------------------------------
  3654                                  ;
  3655                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  3656                                  ;
  3657                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3658                                  ;
  3659                                  ;-----------------------------------------------------------------------------------------------------------------------
  3660                                  section			unused							;unused disk space
  3661                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  3662                                  %endif
